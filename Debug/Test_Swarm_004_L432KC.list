
Test_Swarm_004_L432KC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dbc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000748  08008f50  08008f50  00018f50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009698  08009698  00020258  2**0
                  CONTENTS
  4 .ARM          00000008  08009698  08009698  00019698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096a0  080096a0  00020258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096a0  080096a0  000196a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096a4  080096a4  000196a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  080096a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  20000258  08009900  00020258  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000067c  08009900  0002067c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a1d  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ab4  00000000  00000000  00035ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  00038760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e8  00000000  00000000  00039a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e66  00000000  00000000  0003ac48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152d6  00000000  00000000  0005daae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d383a  00000000  00000000  00072d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001465be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000645c  00000000  00000000  00146610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000258 	.word	0x20000258
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008f34 	.word	0x08008f34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000025c 	.word	0x2000025c
 80001cc:	08008f34 	.word	0x08008f34

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9aa 	b.w	8000fa4 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff33 	bl	8000adc <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fca9 	bl	80005f8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc2a 	bl	8000504 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fca0 	bl	80005f8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff fae2 	bl	8000288 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	4604      	mov	r4, r0
 8000cdc:	468e      	mov	lr, r1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d14d      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce2:	428a      	cmp	r2, r1
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	d969      	bls.n	8000dbc <__udivmoddi4+0xe8>
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	b152      	cbz	r2, 8000d04 <__udivmoddi4+0x30>
 8000cee:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf2:	f1c2 0120 	rsb	r1, r2, #32
 8000cf6:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfe:	ea41 0e03 	orr.w	lr, r1, r3
 8000d02:	4094      	lsls	r4, r2
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	0c21      	lsrs	r1, r4, #16
 8000d0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d0e:	fa1f f78c 	uxth.w	r7, ip
 8000d12:	fb08 e316 	mls	r3, r8, r6, lr
 8000d16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1a:	fb06 f107 	mul.w	r1, r6, r7
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 811f 	bcs.w	8000f6c <__udivmoddi4+0x298>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 811c 	bls.w	8000f6c <__udivmoddi4+0x298>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 f707 	mul.w	r7, r0, r7
 8000d4c:	42a7      	cmp	r7, r4
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x92>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d58:	f080 810a 	bcs.w	8000f70 <__udivmoddi4+0x29c>
 8000d5c:	42a7      	cmp	r7, r4
 8000d5e:	f240 8107 	bls.w	8000f70 <__udivmoddi4+0x29c>
 8000d62:	4464      	add	r4, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6a:	1be4      	subs	r4, r4, r7
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa4>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xc2>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80ef 	beq.w	8000f66 <__udivmoddi4+0x292>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x160>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd4>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80f9 	bhi.w	8000f9a <__udivmoddi4+0x2c6>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	469e      	mov	lr, r3
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa4>
 8000db6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xec>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 8092 	bne.w	8000eee <__udivmoddi4+0x21a>
 8000dca:	eba1 010c 	sub.w	r1, r1, ip
 8000dce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	2601      	movs	r6, #1
 8000dd8:	0c20      	lsrs	r0, r4, #16
 8000dda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dde:	fb07 1113 	mls	r1, r7, r3, r1
 8000de2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de6:	fb0e f003 	mul.w	r0, lr, r3
 8000dea:	4288      	cmp	r0, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x12c>
 8000dee:	eb1c 0101 	adds.w	r1, ip, r1
 8000df2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x12a>
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	f200 80cb 	bhi.w	8000f94 <__udivmoddi4+0x2c0>
 8000dfe:	4643      	mov	r3, r8
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1110 	mls	r1, r7, r0, r1
 8000e0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e10:	fb0e fe00 	mul.w	lr, lr, r0
 8000e14:	45a6      	cmp	lr, r4
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x156>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e20:	d202      	bcs.n	8000e28 <__udivmoddi4+0x154>
 8000e22:	45a6      	cmp	lr, r4
 8000e24:	f200 80bb 	bhi.w	8000f9e <__udivmoddi4+0x2ca>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e32:	e79c      	b.n	8000d6e <__udivmoddi4+0x9a>
 8000e34:	f1c6 0720 	rsb	r7, r6, #32
 8000e38:	40b3      	lsls	r3, r6
 8000e3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e42:	fa20 f407 	lsr.w	r4, r0, r7
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	431c      	orrs	r4, r3
 8000e4c:	40f9      	lsrs	r1, r7
 8000e4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e52:	fa00 f306 	lsl.w	r3, r0, r6
 8000e56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5a:	0c20      	lsrs	r0, r4, #16
 8000e5c:	fa1f fe8c 	uxth.w	lr, ip
 8000e60:	fb09 1118 	mls	r1, r9, r8, r1
 8000e64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e68:	fb08 f00e 	mul.w	r0, r8, lr
 8000e6c:	4288      	cmp	r0, r1
 8000e6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e72:	d90b      	bls.n	8000e8c <__udivmoddi4+0x1b8>
 8000e74:	eb1c 0101 	adds.w	r1, ip, r1
 8000e78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e7c:	f080 8088 	bcs.w	8000f90 <__udivmoddi4+0x2bc>
 8000e80:	4288      	cmp	r0, r1
 8000e82:	f240 8085 	bls.w	8000f90 <__udivmoddi4+0x2bc>
 8000e86:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	1a09      	subs	r1, r1, r0
 8000e8e:	b2a4      	uxth	r4, r4
 8000e90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e94:	fb09 1110 	mls	r1, r9, r0, r1
 8000e98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea0:	458e      	cmp	lr, r1
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x1e2>
 8000ea4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eac:	d26c      	bcs.n	8000f88 <__udivmoddi4+0x2b4>
 8000eae:	458e      	cmp	lr, r1
 8000eb0:	d96a      	bls.n	8000f88 <__udivmoddi4+0x2b4>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4461      	add	r1, ip
 8000eb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eba:	fba0 9402 	umull	r9, r4, r0, r2
 8000ebe:	eba1 010e 	sub.w	r1, r1, lr
 8000ec2:	42a1      	cmp	r1, r4
 8000ec4:	46c8      	mov	r8, r9
 8000ec6:	46a6      	mov	lr, r4
 8000ec8:	d356      	bcc.n	8000f78 <__udivmoddi4+0x2a4>
 8000eca:	d053      	beq.n	8000f74 <__udivmoddi4+0x2a0>
 8000ecc:	b15d      	cbz	r5, 8000ee6 <__udivmoddi4+0x212>
 8000ece:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ed6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eda:	fa22 f306 	lsr.w	r3, r2, r6
 8000ede:	40f1      	lsrs	r1, r6
 8000ee0:	431f      	orrs	r7, r3
 8000ee2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ee6:	2600      	movs	r6, #0
 8000ee8:	4631      	mov	r1, r6
 8000eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eee:	f1c2 0320 	rsb	r3, r2, #32
 8000ef2:	40d8      	lsrs	r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa21 f303 	lsr.w	r3, r1, r3
 8000efc:	4091      	lsls	r1, r2
 8000efe:	4301      	orrs	r1, r0
 8000f00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f04:	fa1f fe8c 	uxth.w	lr, ip
 8000f08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f10:	0c0b      	lsrs	r3, r1, #16
 8000f12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f16:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1a:	429e      	cmp	r6, r3
 8000f1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x260>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2a:	d22f      	bcs.n	8000f8c <__udivmoddi4+0x2b8>
 8000f2c:	429e      	cmp	r6, r3
 8000f2e:	d92d      	bls.n	8000f8c <__udivmoddi4+0x2b8>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1b9b      	subs	r3, r3, r6
 8000f36:	b289      	uxth	r1, r1
 8000f38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f44:	fb06 f30e 	mul.w	r3, r6, lr
 8000f48:	428b      	cmp	r3, r1
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x28a>
 8000f4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f54:	d216      	bcs.n	8000f84 <__udivmoddi4+0x2b0>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d914      	bls.n	8000f84 <__udivmoddi4+0x2b0>
 8000f5a:	3e02      	subs	r6, #2
 8000f5c:	4461      	add	r1, ip
 8000f5e:	1ac9      	subs	r1, r1, r3
 8000f60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f64:	e738      	b.n	8000dd8 <__udivmoddi4+0x104>
 8000f66:	462e      	mov	r6, r5
 8000f68:	4628      	mov	r0, r5
 8000f6a:	e705      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000f6c:	4606      	mov	r6, r0
 8000f6e:	e6e3      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f70:	4618      	mov	r0, r3
 8000f72:	e6f8      	b.n	8000d66 <__udivmoddi4+0x92>
 8000f74:	454b      	cmp	r3, r9
 8000f76:	d2a9      	bcs.n	8000ecc <__udivmoddi4+0x1f8>
 8000f78:	ebb9 0802 	subs.w	r8, r9, r2
 8000f7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f80:	3801      	subs	r0, #1
 8000f82:	e7a3      	b.n	8000ecc <__udivmoddi4+0x1f8>
 8000f84:	4646      	mov	r6, r8
 8000f86:	e7ea      	b.n	8000f5e <__udivmoddi4+0x28a>
 8000f88:	4620      	mov	r0, r4
 8000f8a:	e794      	b.n	8000eb6 <__udivmoddi4+0x1e2>
 8000f8c:	4640      	mov	r0, r8
 8000f8e:	e7d1      	b.n	8000f34 <__udivmoddi4+0x260>
 8000f90:	46d0      	mov	r8, sl
 8000f92:	e77b      	b.n	8000e8c <__udivmoddi4+0x1b8>
 8000f94:	3b02      	subs	r3, #2
 8000f96:	4461      	add	r1, ip
 8000f98:	e732      	b.n	8000e00 <__udivmoddi4+0x12c>
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	e709      	b.n	8000db2 <__udivmoddi4+0xde>
 8000f9e:	4464      	add	r4, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e742      	b.n	8000e2a <__udivmoddi4+0x156>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fac:	f000 ff97 	bl	8001ede <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb0:	f000 f860 	bl	8001074 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb4:	f000 f99e 	bl	80012f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fb8:	f000 f97e 	bl	80012b8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fbc:	f000 f94c 	bl	8001258 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000fc0:	f000 f8ba 	bl	8001138 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000fc4:	f000 f918 	bl	80011f8 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8000fc8:	f000 f8de 	bl	8001188 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  send_string_2_dbg_uart ( "Hello! Test_Swarm_004_L432KC started\n" ) ;
 8000fcc:	481d      	ldr	r0, [pc, #116]	; (8001044 <main+0x9c>)
 8000fce:	f000 fc2b 	bl	8001828 <send_string_2_dbg_uart>
  tim_init () ;
 8000fd2:	f000 fc6b 	bl	80018ac <tim_init>
  m138_init () ;
 8000fd6:	f000 fafb 	bl	80015d0 <m138_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ( m138_init_status_reg != M138_INITIALISED )
 8000fda:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <main+0xa0>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b7f      	cmp	r3, #127	; 0x7f
 8000fe0:	d001      	beq.n	8000fe6 <main+0x3e>
		  m138_init () ;
 8000fe2:	f000 faf5 	bl	80015d0 <m138_init>
	  if ( swarm_cc ( pw_mostrecent_at , pw_mostrecent_answer ) )
 8000fe6:	4b19      	ldr	r3, [pc, #100]	; (800104c <main+0xa4>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a19      	ldr	r2, [pc, #100]	; (8001050 <main+0xa8>)
 8000fec:	6812      	ldr	r2, [r2, #0]
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 fa65 	bl	80014c0 <swarm_cc>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <main+0x5c>
		  store_m138_voltage ( &m138_voltage , swarm_uart_rx_buff ) ;
 8000ffc:	4915      	ldr	r1, [pc, #84]	; (8001054 <main+0xac>)
 8000ffe:	4816      	ldr	r0, [pc, #88]	; (8001058 <main+0xb0>)
 8001000:	f000 f9ee 	bl	80013e0 <store_m138_voltage>
	  if ( swarm_cc ( gn_mostrecent_at , gn_mostrecent_answer ) )
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <main+0xb4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a15      	ldr	r2, [pc, #84]	; (8001060 <main+0xb8>)
 800100a:	6812      	ldr	r2, [r2, #0]
 800100c:	4611      	mov	r1, r2
 800100e:	4618      	mov	r0, r3
 8001010:	f000 fa56 	bl	80014c0 <swarm_cc>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <main+0x7a>
		  store_m138_fix ( m138_fix , swarm_uart_rx_buff ) ;
 800101a:	490e      	ldr	r1, [pc, #56]	; (8001054 <main+0xac>)
 800101c:	4811      	ldr	r0, [pc, #68]	; (8001064 <main+0xbc>)
 800101e:	f000 fa0b 	bl	8001438 <store_m138_fix>
	  sprintf ( dbg_uart_tx_buff , "$TD HD=60,\"%u;%s\"\n" , (unsigned int) m138_dev_id , m138_fix ) ;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <main+0xc0>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <main+0xbc>)
 8001028:	4910      	ldr	r1, [pc, #64]	; (800106c <main+0xc4>)
 800102a:	4811      	ldr	r0, [pc, #68]	; (8001070 <main+0xc8>)
 800102c:	f004 fdb2 	bl	8005b94 <siprintf>
	  send_string_2_dbg_uart ( dbg_uart_tx_buff ) ;
 8001030:	480f      	ldr	r0, [pc, #60]	; (8001070 <main+0xc8>)
 8001032:	f000 fbf9 	bl	8001828 <send_string_2_dbg_uart>
	  {
		  sprintf ( dbg_uart_tx_buff , "Swarm went sleep for 10s.\n" ) ;
		  send_string_2_dbg_uart ( dbg_uart_tx_buff ) ;
	  }
*/
	  reset_m138_var () ;
 8001036:	f000 fa31 	bl	800149c <reset_m138_var>
	  HAL_Delay ( 12000 ) ;
 800103a:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 800103e:	f000 ffc3 	bl	8001fc8 <HAL_Delay>
	  if ( m138_init_status_reg != M138_INITIALISED )
 8001042:	e7ca      	b.n	8000fda <main+0x32>
 8001044:	080090a0 	.word	0x080090a0
 8001048:	20000626 	.word	0x20000626
 800104c:	20000014 	.word	0x20000014
 8001050:	20000050 	.word	0x20000050
 8001054:	20000434 	.word	0x20000434
 8001058:	2000062c 	.word	0x2000062c
 800105c:	20000038 	.word	0x20000038
 8001060:	20000074 	.word	0x20000074
 8001064:	20000630 	.word	0x20000630
 8001068:	20000628 	.word	0x20000628
 800106c:	080090c8 	.word	0x080090c8
 8001070:	2000055c 	.word	0x2000055c

08001074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b096      	sub	sp, #88	; 0x58
 8001078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	2244      	movs	r2, #68	; 0x44
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f004 fd7e 	bl	8005b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001088:	463b      	mov	r3, r7
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001096:	f44f 7000 	mov.w	r0, #512	; 0x200
 800109a:	f001 fce1 	bl	8002a60 <HAL_PWREx_ControlVoltageScaling>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010a4:	f000 fc74 	bl	8001990 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010a8:	f001 fcbc 	bl	8002a24 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010ac:	4b21      	ldr	r3, [pc, #132]	; (8001134 <SystemClock_Config+0xc0>)
 80010ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010b2:	4a20      	ldr	r2, [pc, #128]	; (8001134 <SystemClock_Config+0xc0>)
 80010b4:	f023 0318 	bic.w	r3, r3, #24
 80010b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80010bc:	2314      	movs	r3, #20
 80010be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010c0:	2301      	movs	r3, #1
 80010c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010c4:	2301      	movs	r3, #1
 80010c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010cc:	2360      	movs	r3, #96	; 0x60
 80010ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d0:	2302      	movs	r3, #2
 80010d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010d4:	2301      	movs	r3, #1
 80010d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010d8:	2301      	movs	r3, #1
 80010da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80010dc:	2310      	movs	r3, #16
 80010de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010e0:	2307      	movs	r3, #7
 80010e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010e4:	2302      	movs	r3, #2
 80010e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4618      	mov	r0, r3
 80010f2:	f001 fd0b 	bl	8002b0c <HAL_RCC_OscConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80010fc:	f000 fc48 	bl	8001990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001100:	230f      	movs	r3, #15
 8001102:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001104:	2303      	movs	r3, #3
 8001106:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001114:	463b      	mov	r3, r7
 8001116:	2101      	movs	r1, #1
 8001118:	4618      	mov	r0, r3
 800111a:	f002 f90b 	bl	8003334 <HAL_RCC_ClockConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001124:	f000 fc34 	bl	8001990 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001128:	f002 fd1e 	bl	8003b68 <HAL_RCCEx_EnableMSIPLLMode>
}
 800112c:	bf00      	nop
 800112e:	3758      	adds	r7, #88	; 0x58
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40021000 	.word	0x40021000

08001138 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800113c:	4b10      	ldr	r3, [pc, #64]	; (8001180 <MX_RTC_Init+0x48>)
 800113e:	4a11      	ldr	r2, [pc, #68]	; (8001184 <MX_RTC_Init+0x4c>)
 8001140:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <MX_RTC_Init+0x48>)
 8001144:	2200      	movs	r2, #0
 8001146:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001148:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <MX_RTC_Init+0x48>)
 800114a:	227f      	movs	r2, #127	; 0x7f
 800114c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <MX_RTC_Init+0x48>)
 8001150:	22ff      	movs	r2, #255	; 0xff
 8001152:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <MX_RTC_Init+0x48>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <MX_RTC_Init+0x48>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <MX_RTC_Init+0x48>)
 8001162:	2200      	movs	r2, #0
 8001164:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <MX_RTC_Init+0x48>)
 8001168:	2200      	movs	r2, #0
 800116a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800116c:	4804      	ldr	r0, [pc, #16]	; (8001180 <MX_RTC_Init+0x48>)
 800116e:	f002 fdfd 	bl	8003d6c <HAL_RTC_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001178:	f000 fc0a 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000274 	.word	0x20000274
 8001184:	40002800 	.word	0x40002800

08001188 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001198:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <MX_TIM6_Init+0x68>)
 800119a:	4a16      	ldr	r2, [pc, #88]	; (80011f4 <MX_TIM6_Init+0x6c>)
 800119c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32000-1;
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <MX_TIM6_Init+0x68>)
 80011a0:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80011a4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a6:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <MX_TIM6_Init+0x68>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 80011ac:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <MX_TIM6_Init+0x68>)
 80011ae:	f242 720f 	movw	r2, #9999	; 0x270f
 80011b2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <MX_TIM6_Init+0x68>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011ba:	480d      	ldr	r0, [pc, #52]	; (80011f0 <MX_TIM6_Init+0x68>)
 80011bc:	f002 ff18 	bl	8003ff0 <HAL_TIM_Base_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80011c6:	f000 fbe3 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	4619      	mov	r1, r3
 80011d6:	4806      	ldr	r0, [pc, #24]	; (80011f0 <MX_TIM6_Init+0x68>)
 80011d8:	f003 f990 	bl	80044fc <HAL_TIMEx_MasterConfigSynchronization>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80011e2:	f000 fbd5 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000298 	.word	0x20000298
 80011f4:	40001000 	.word	0x40001000

080011f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <MX_USART1_UART_Init+0x58>)
 80011fe:	4a15      	ldr	r2, [pc, #84]	; (8001254 <MX_USART1_UART_Init+0x5c>)
 8001200:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001202:	4b13      	ldr	r3, [pc, #76]	; (8001250 <MX_USART1_UART_Init+0x58>)
 8001204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001208:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_USART1_UART_Init+0x58>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <MX_USART1_UART_Init+0x58>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MX_USART1_UART_Init+0x58>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MX_USART1_UART_Init+0x58>)
 800121e:	220c      	movs	r2, #12
 8001220:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <MX_USART1_UART_Init+0x58>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_USART1_UART_Init+0x58>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <MX_USART1_UART_Init+0x58>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MX_USART1_UART_Init+0x58>)
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_USART1_UART_Init+0x58>)
 800123c:	f003 f9e2 	bl	8004604 <HAL_UART_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001246:	f000 fba3 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200002e4 	.word	0x200002e4
 8001254:	40013800 	.word	0x40013800

08001258 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800125c:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 800125e:	4a15      	ldr	r2, [pc, #84]	; (80012b4 <MX_USART2_UART_Init+0x5c>)
 8001260:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001264:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001268:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 800127e:	220c      	movs	r2, #12
 8001280:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001288:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001296:	2200      	movs	r2, #0
 8001298:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 800129c:	f003 f9b2 	bl	8004604 <HAL_UART_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012a6:	f000 fb73 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000368 	.word	0x20000368
 80012b4:	40004400 	.word	0x40004400

080012b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_DMA_Init+0x38>)
 80012c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012c2:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <MX_DMA_Init+0x38>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6493      	str	r3, [r2, #72]	; 0x48
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_DMA_Init+0x38>)
 80012cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	200f      	movs	r0, #15
 80012dc:	f000 ff73 	bl	80021c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80012e0:	200f      	movs	r0, #15
 80012e2:	f000 ff8c 	bl	80021fe <HAL_NVIC_EnableIRQ>

}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000

080012f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130a:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <MX_GPIO_Init+0x8c>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130e:	4a1c      	ldr	r2, [pc, #112]	; (8001380 <MX_GPIO_Init+0x8c>)
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001316:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <MX_GPIO_Init+0x8c>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131a:	f003 0304 	and.w	r3, r3, #4
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	4b17      	ldr	r3, [pc, #92]	; (8001380 <MX_GPIO_Init+0x8c>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001326:	4a16      	ldr	r2, [pc, #88]	; (8001380 <MX_GPIO_Init+0x8c>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132e:	4b14      	ldr	r3, [pc, #80]	; (8001380 <MX_GPIO_Init+0x8c>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <MX_GPIO_Init+0x8c>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133e:	4a10      	ldr	r2, [pc, #64]	; (8001380 <MX_GPIO_Init+0x8c>)
 8001340:	f043 0302 	orr.w	r3, r3, #2
 8001344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <MX_GPIO_Init+0x8c>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	2108      	movs	r1, #8
 8001356:	480b      	ldr	r0, [pc, #44]	; (8001384 <MX_GPIO_Init+0x90>)
 8001358:	f001 fb4c 	bl	80029f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 800135c:	2308      	movs	r3, #8
 800135e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	2301      	movs	r3, #1
 8001362:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	4619      	mov	r1, r3
 8001372:	4804      	ldr	r0, [pc, #16]	; (8001384 <MX_GPIO_Init+0x90>)
 8001374:	f001 f9d4 	bl	8002720 <HAL_GPIO_Init>

}
 8001378:	bf00      	nop
 800137a:	3720      	adds	r7, #32
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40021000 	.word	0x40021000
 8001384:	48000400 	.word	0x48000400

08001388 <store_m138_dev_id>:

/* USER CODE BEGIN 4 */
uint8_t store_m138_dev_id ( uint32_t* id , char* s )
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
	if ( ! strstr ( s , "DI=0x" ) )
 8001392:	4910      	ldr	r1, [pc, #64]	; (80013d4 <store_m138_dev_id+0x4c>)
 8001394:	6838      	ldr	r0, [r7, #0]
 8001396:	f004 fc31 	bl	8005bfc <strstr>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <store_m138_dev_id+0x1c>
		return 0 ;
 80013a0:	2300      	movs	r3, #0
 80013a2:	e013      	b.n	80013cc <store_m138_dev_id+0x44>
	s = strtok ( (char*) s , "=" ) ;
 80013a4:	490c      	ldr	r1, [pc, #48]	; (80013d8 <store_m138_dev_id+0x50>)
 80013a6:	6838      	ldr	r0, [r7, #0]
 80013a8:	f005 fabc 	bl	8006924 <strtok>
 80013ac:	6038      	str	r0, [r7, #0]
	s = strtok ( NULL , "," ) ;
 80013ae:	490b      	ldr	r1, [pc, #44]	; (80013dc <store_m138_dev_id+0x54>)
 80013b0:	2000      	movs	r0, #0
 80013b2:	f005 fab7 	bl	8006924 <strtok>
 80013b6:	6038      	str	r0, [r7, #0]
	*id = (uint32_t) strtol ( s , NULL , 16 ) ;
 80013b8:	2210      	movs	r2, #16
 80013ba:	2100      	movs	r1, #0
 80013bc:	6838      	ldr	r0, [r7, #0]
 80013be:	f005 fb8f 	bl	8006ae0 <strtol>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	601a      	str	r2, [r3, #0]
	return 1 ;
 80013ca:	2301      	movs	r3, #1
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	080090dc 	.word	0x080090dc
 80013d8:	080090e4 	.word	0x080090e4
 80013dc:	080090e8 	.word	0x080090e8

080013e0 <store_m138_voltage>:
uint8_t store_m138_voltage ( float* d , char* s )
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
	if ( ! strstr ( s , "$PW " ) )
 80013ea:	4910      	ldr	r1, [pc, #64]	; (800142c <store_m138_voltage+0x4c>)
 80013ec:	6838      	ldr	r0, [r7, #0]
 80013ee:	f004 fc05 	bl	8005bfc <strstr>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <store_m138_voltage+0x1c>
		return 0 ;
 80013f8:	2300      	movs	r3, #0
 80013fa:	e013      	b.n	8001424 <store_m138_voltage+0x44>
	s = strtok ( (char*) s , " " ) ;
 80013fc:	490c      	ldr	r1, [pc, #48]	; (8001430 <store_m138_voltage+0x50>)
 80013fe:	6838      	ldr	r0, [r7, #0]
 8001400:	f005 fa90 	bl	8006924 <strtok>
 8001404:	6038      	str	r0, [r7, #0]
	s = strtok ( NULL , "," ) ;
 8001406:	490b      	ldr	r1, [pc, #44]	; (8001434 <store_m138_voltage+0x54>)
 8001408:	2000      	movs	r0, #0
 800140a:	f005 fa8b 	bl	8006924 <strtok>
 800140e:	6038      	str	r0, [r7, #0]
	*d = (float) strtof ( s , NULL ) ;
 8001410:	2100      	movs	r1, #0
 8001412:	6838      	ldr	r0, [r7, #0]
 8001414:	f005 fa2a 	bl	800686c <strtof>
 8001418:	eef0 7a40 	vmov.f32	s15, s0
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	edc3 7a00 	vstr	s15, [r3]
	return 1 ;
 8001422:	2301      	movs	r3, #1
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	080090ec 	.word	0x080090ec
 8001430:	080090f4 	.word	0x080090f4
 8001434:	080090e8 	.word	0x080090e8

08001438 <store_m138_fix>:
uint8_t store_m138_fix ( char* d , char* s )
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
	if ( ! strstr ( s , "$GN " ) )
 8001442:	4913      	ldr	r1, [pc, #76]	; (8001490 <store_m138_fix+0x58>)
 8001444:	6838      	ldr	r0, [r7, #0]
 8001446:	f004 fbd9 	bl	8005bfc <strstr>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <store_m138_fix+0x1c>
		return 0 ;
 8001450:	2300      	movs	r3, #0
 8001452:	e018      	b.n	8001486 <store_m138_fix+0x4e>
	s = strtok ( (char*) s , " " ) ;
 8001454:	490f      	ldr	r1, [pc, #60]	; (8001494 <store_m138_fix+0x5c>)
 8001456:	6838      	ldr	r0, [r7, #0]
 8001458:	f005 fa64 	bl	8006924 <strtok>
 800145c:	6038      	str	r0, [r7, #0]
	s = strtok ( NULL , "*" ) ;
 800145e:	490e      	ldr	r1, [pc, #56]	; (8001498 <store_m138_fix+0x60>)
 8001460:	2000      	movs	r0, #0
 8001462:	f005 fa5f 	bl	8006924 <strtok>
 8001466:	6038      	str	r0, [r7, #0]
	size_t l =  strlen ( s ) ;
 8001468:	6838      	ldr	r0, [r7, #0]
 800146a:	f7fe feb1 	bl	80001d0 <strlen>
 800146e:	60f8      	str	r0, [r7, #12]
	memcpy ( d , s , l ) ;
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	6839      	ldr	r1, [r7, #0]
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f004 fb77 	bl	8005b68 <memcpy>
	d[l] = '\0' ;
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4413      	add	r3, r2
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
	return 1 ;
 8001484:	2301      	movs	r3, #1
}
 8001486:	4618      	mov	r0, r3
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	080090f8 	.word	0x080090f8
 8001494:	080090f4 	.word	0x080090f4
 8001498:	08009100 	.word	0x08009100

0800149c <reset_m138_var>:
void reset_m138_var ()
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
	m138_voltage = 0 ;
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <reset_m138_var+0x1c>)
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
	m138_fix[0] = '\0' ;
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <reset_m138_var+0x20>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	701a      	strb	r2, [r3, #0]
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	2000062c 	.word	0x2000062c
 80014bc:	20000630 	.word	0x20000630

080014c0 <swarm_cc>:
	send_string_2_dbg_uart ( dbg_uart_tx_buff ) ;
	return 0 ;
}
*/
uint8_t swarm_cc ( const char* at_command , const char* expected_answer )
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
	uint8_t try ;
	uint8_t cs = nmea_checksum ( at_command , strlen ( at_command ) ) ;
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7fe fe80 	bl	80001d0 <strlen>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4619      	mov	r1, r3
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f000 f9bd 	bl	8001854 <nmea_checksum>
 80014da:	4603      	mov	r3, r0
 80014dc:	73bb      	strb	r3, [r7, #14]
	sprintf ( swarm_uart_tx_buff , "%s*%02x\n" , at_command , cs ) ;
 80014de:	7bbb      	ldrb	r3, [r7, #14]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	4930      	ldr	r1, [pc, #192]	; (80015a4 <swarm_cc+0xe4>)
 80014e4:	4830      	ldr	r0, [pc, #192]	; (80015a8 <swarm_cc+0xe8>)
 80014e6:	f004 fb55 	bl	8005b94 <siprintf>

	for ( try = 0 ; try < 5 ; try++ )
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]
 80014ee:	e047      	b.n	8001580 <swarm_cc+0xc0>
	{
		if ( answer_from_swarm == 0 )
 80014f0:	4b2e      	ldr	r3, [pc, #184]	; (80015ac <swarm_cc+0xec>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d10d      	bne.n	8001514 <swarm_cc+0x54>
			if ( receive_swarm_uart_dma () != HAL_OK )
 80014f8:	f000 fa0e 	bl	8001918 <receive_swarm_uart_dma>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d008      	beq.n	8001514 <swarm_cc+0x54>
			{
				sprintf ( dbg_uart_tx_buff , "try no. %u receive_swarm_uart_dma () != HAL_OK for %s\n" , try , at_command ) ;
 8001502:	7bfa      	ldrb	r2, [r7, #15]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	492a      	ldr	r1, [pc, #168]	; (80015b0 <swarm_cc+0xf0>)
 8001508:	482a      	ldr	r0, [pc, #168]	; (80015b4 <swarm_cc+0xf4>)
 800150a:	f004 fb43 	bl	8005b94 <siprintf>
				send_string_2_dbg_uart ( dbg_uart_tx_buff ) ;
 800150e:	4829      	ldr	r0, [pc, #164]	; (80015b4 <swarm_cc+0xf4>)
 8001510:	f000 f98a 	bl	8001828 <send_string_2_dbg_uart>
			}
		tim_start () ;
 8001514:	f000 f9d8 	bl	80018c8 <tim_start>
		send_string_2_swarm_uart ( swarm_uart_tx_buff ) ;
 8001518:	4823      	ldr	r0, [pc, #140]	; (80015a8 <swarm_cc+0xe8>)
 800151a:	f000 f96f 	bl	80017fc <send_string_2_swarm_uart>
		while ( tim_on )
 800151e:	e026      	b.n	800156e <swarm_cc+0xae>
			if ( answer_from_swarm == 1 )
 8001520:	4b22      	ldr	r3, [pc, #136]	; (80015ac <swarm_cc+0xec>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d122      	bne.n	800156e <swarm_cc+0xae>
			{
				sprintf ( dbg_uart_tx_buff , "try no. %u answer_from_swarm = 1 for %s\n" , try , at_command ) ;
 8001528:	7bfa      	ldrb	r2, [r7, #15]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4922      	ldr	r1, [pc, #136]	; (80015b8 <swarm_cc+0xf8>)
 800152e:	4821      	ldr	r0, [pc, #132]	; (80015b4 <swarm_cc+0xf4>)
 8001530:	f004 fb30 	bl	8005b94 <siprintf>
				send_string_2_dbg_uart ( dbg_uart_tx_buff ) ;
 8001534:	481f      	ldr	r0, [pc, #124]	; (80015b4 <swarm_cc+0xf4>)
 8001536:	f000 f977 	bl	8001828 <send_string_2_dbg_uart>
				answer_from_swarm = 0 ;
 800153a:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <swarm_cc+0xec>)
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
				if ( strncmp ( swarm_uart_rx_buff , expected_answer , strlen ( expected_answer ) ) == 0 )
 8001540:	6838      	ldr	r0, [r7, #0]
 8001542:	f7fe fe45 	bl	80001d0 <strlen>
 8001546:	4603      	mov	r3, r0
 8001548:	461a      	mov	r2, r3
 800154a:	6839      	ldr	r1, [r7, #0]
 800154c:	481b      	ldr	r0, [pc, #108]	; (80015bc <swarm_cc+0xfc>)
 800154e:	f004 fb41 	bl	8005bd4 <strncmp>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10f      	bne.n	8001578 <swarm_cc+0xb8>
				{
					sprintf ( dbg_uart_tx_buff , "try no. %u success for %s\n" , try , at_command ) ;
 8001558:	7bfa      	ldrb	r2, [r7, #15]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4918      	ldr	r1, [pc, #96]	; (80015c0 <swarm_cc+0x100>)
 800155e:	4815      	ldr	r0, [pc, #84]	; (80015b4 <swarm_cc+0xf4>)
 8001560:	f004 fb18 	bl	8005b94 <siprintf>
					send_string_2_dbg_uart ( dbg_uart_tx_buff ) ;
 8001564:	4813      	ldr	r0, [pc, #76]	; (80015b4 <swarm_cc+0xf4>)
 8001566:	f000 f95f 	bl	8001828 <send_string_2_dbg_uart>
					return 1 ;
 800156a:	2301      	movs	r3, #1
 800156c:	e015      	b.n	800159a <swarm_cc+0xda>
		while ( tim_on )
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <swarm_cc+0x104>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1d4      	bne.n	8001520 <swarm_cc+0x60>
 8001576:	e000      	b.n	800157a <swarm_cc+0xba>
				}
				else
					break ;
 8001578:	bf00      	nop
	for ( try = 0 ; try < 5 ; try++ )
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	3301      	adds	r3, #1
 800157e:	73fb      	strb	r3, [r7, #15]
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	2b04      	cmp	r3, #4
 8001584:	d9b4      	bls.n	80014f0 <swarm_cc+0x30>
			}
	}
	sprintf ( dbg_uart_tx_buff , "%s %s\n" , (char*) expected_answer , "not received." ) ;
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <swarm_cc+0x108>)
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	4910      	ldr	r1, [pc, #64]	; (80015cc <swarm_cc+0x10c>)
 800158c:	4809      	ldr	r0, [pc, #36]	; (80015b4 <swarm_cc+0xf4>)
 800158e:	f004 fb01 	bl	8005b94 <siprintf>
	send_string_2_dbg_uart ( dbg_uart_tx_buff ) ;
 8001592:	4808      	ldr	r0, [pc, #32]	; (80015b4 <swarm_cc+0xf4>)
 8001594:	f000 f948 	bl	8001828 <send_string_2_dbg_uart>
	return 0 ;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	08009104 	.word	0x08009104
 80015a8:	20000498 	.word	0x20000498
 80015ac:	20000625 	.word	0x20000625
 80015b0:	08009110 	.word	0x08009110
 80015b4:	2000055c 	.word	0x2000055c
 80015b8:	08009148 	.word	0x08009148
 80015bc:	20000434 	.word	0x20000434
 80015c0:	08009174 	.word	0x08009174
 80015c4:	20000624 	.word	0x20000624
 80015c8:	08009190 	.word	0x08009190
 80015cc:	080091a0 	.word	0x080091a0

080015d0 <m138_init>:
	send_string_2_dbg_uart ( swarm_uart_tx_buff ) ;
	return 0 ;
}
*/
void m138_init ()
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	if ( swarm_cc ( cs_at , cs_answer ) )
 80015d4:	4b69      	ldr	r3, [pc, #420]	; (800177c <m138_init+0x1ac>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a69      	ldr	r2, [pc, #420]	; (8001780 <m138_init+0x1b0>)
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	4611      	mov	r1, r2
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ff6e 	bl	80014c0 <swarm_cc>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00d      	beq.n	8001606 <m138_init+0x36>
		if ( store_m138_dev_id ( &m138_dev_id , swarm_uart_rx_buff ) )
 80015ea:	4966      	ldr	r1, [pc, #408]	; (8001784 <m138_init+0x1b4>)
 80015ec:	4866      	ldr	r0, [pc, #408]	; (8001788 <m138_init+0x1b8>)
 80015ee:	f7ff fecb 	bl	8001388 <store_m138_dev_id>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d006      	beq.n	8001606 <m138_init+0x36>
			m138_init_status_reg = m138_init_status_reg | 1 ;
 80015f8:	4b64      	ldr	r3, [pc, #400]	; (800178c <m138_init+0x1bc>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4b62      	ldr	r3, [pc, #392]	; (800178c <m138_init+0x1bc>)
 8001604:	701a      	strb	r2, [r3, #0]
	if ( swarm_cc ( rt_0_at , rt_ok_answer ) )
 8001606:	4b62      	ldr	r3, [pc, #392]	; (8001790 <m138_init+0x1c0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a62      	ldr	r2, [pc, #392]	; (8001794 <m138_init+0x1c4>)
 800160c:	6812      	ldr	r2, [r2, #0]
 800160e:	4611      	mov	r1, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff55 	bl	80014c0 <swarm_cc>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d011      	beq.n	8001640 <m138_init+0x70>
		if ( swarm_cc ( rt_q_rate_at , rt_0_answer ) )
 800161c:	4b5e      	ldr	r3, [pc, #376]	; (8001798 <m138_init+0x1c8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a5e      	ldr	r2, [pc, #376]	; (800179c <m138_init+0x1cc>)
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	4611      	mov	r1, r2
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff ff4a 	bl	80014c0 <swarm_cc>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d006      	beq.n	8001640 <m138_init+0x70>
			m138_init_status_reg = m138_init_status_reg | 2 ;
 8001632:	4b56      	ldr	r3, [pc, #344]	; (800178c <m138_init+0x1bc>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	f043 0302 	orr.w	r3, r3, #2
 800163a:	b2da      	uxtb	r2, r3
 800163c:	4b53      	ldr	r3, [pc, #332]	; (800178c <m138_init+0x1bc>)
 800163e:	701a      	strb	r2, [r3, #0]
	if ( swarm_cc ( pw_0_at , pw_ok_answer ) )
 8001640:	4b57      	ldr	r3, [pc, #348]	; (80017a0 <m138_init+0x1d0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a57      	ldr	r2, [pc, #348]	; (80017a4 <m138_init+0x1d4>)
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	4611      	mov	r1, r2
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ff38 	bl	80014c0 <swarm_cc>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d011      	beq.n	800167a <m138_init+0xaa>
		if ( swarm_cc ( pw_q_rate_at , pw_0_answer ) )
 8001656:	4b54      	ldr	r3, [pc, #336]	; (80017a8 <m138_init+0x1d8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a54      	ldr	r2, [pc, #336]	; (80017ac <m138_init+0x1dc>)
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff2d 	bl	80014c0 <swarm_cc>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d006      	beq.n	800167a <m138_init+0xaa>
			m138_init_status_reg = m138_init_status_reg | 4 ;
 800166c:	4b47      	ldr	r3, [pc, #284]	; (800178c <m138_init+0x1bc>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	f043 0304 	orr.w	r3, r3, #4
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b45      	ldr	r3, [pc, #276]	; (800178c <m138_init+0x1bc>)
 8001678:	701a      	strb	r2, [r3, #0]
	if ( swarm_cc ( dt_0_at , dt_ok_answer ) )
 800167a:	4b4d      	ldr	r3, [pc, #308]	; (80017b0 <m138_init+0x1e0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a4d      	ldr	r2, [pc, #308]	; (80017b4 <m138_init+0x1e4>)
 8001680:	6812      	ldr	r2, [r2, #0]
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff1b 	bl	80014c0 <swarm_cc>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d011      	beq.n	80016b4 <m138_init+0xe4>
		if ( swarm_cc ( dt_q_rate_at , dt_0_answer ) )
 8001690:	4b49      	ldr	r3, [pc, #292]	; (80017b8 <m138_init+0x1e8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a49      	ldr	r2, [pc, #292]	; (80017bc <m138_init+0x1ec>)
 8001696:	6812      	ldr	r2, [r2, #0]
 8001698:	4611      	mov	r1, r2
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ff10 	bl	80014c0 <swarm_cc>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d006      	beq.n	80016b4 <m138_init+0xe4>
			m138_init_status_reg = m138_init_status_reg | 8 ;
 80016a6:	4b39      	ldr	r3, [pc, #228]	; (800178c <m138_init+0x1bc>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	f043 0308 	orr.w	r3, r3, #8
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	4b36      	ldr	r3, [pc, #216]	; (800178c <m138_init+0x1bc>)
 80016b2:	701a      	strb	r2, [r3, #0]
	if ( swarm_cc ( gs_0_at , gs_ok_answer ) )
 80016b4:	4b42      	ldr	r3, [pc, #264]	; (80017c0 <m138_init+0x1f0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a42      	ldr	r2, [pc, #264]	; (80017c4 <m138_init+0x1f4>)
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	4611      	mov	r1, r2
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fefe 	bl	80014c0 <swarm_cc>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d011      	beq.n	80016ee <m138_init+0x11e>
		if ( swarm_cc ( gs_q_rate_at , gs_0_answer ) )
 80016ca:	4b3f      	ldr	r3, [pc, #252]	; (80017c8 <m138_init+0x1f8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a3f      	ldr	r2, [pc, #252]	; (80017cc <m138_init+0x1fc>)
 80016d0:	6812      	ldr	r2, [r2, #0]
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fef3 	bl	80014c0 <swarm_cc>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d006      	beq.n	80016ee <m138_init+0x11e>
			m138_init_status_reg = m138_init_status_reg | 16 ;
 80016e0:	4b2a      	ldr	r3, [pc, #168]	; (800178c <m138_init+0x1bc>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	f043 0310 	orr.w	r3, r3, #16
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4b28      	ldr	r3, [pc, #160]	; (800178c <m138_init+0x1bc>)
 80016ec:	701a      	strb	r2, [r3, #0]
	if ( swarm_cc ( gj_0_at , gj_ok_answer ) )
 80016ee:	4b38      	ldr	r3, [pc, #224]	; (80017d0 <m138_init+0x200>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a38      	ldr	r2, [pc, #224]	; (80017d4 <m138_init+0x204>)
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fee1 	bl	80014c0 <swarm_cc>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d011      	beq.n	8001728 <m138_init+0x158>
		if ( swarm_cc ( gj_q_rate_at , gj_0_answer ) )
 8001704:	4b34      	ldr	r3, [pc, #208]	; (80017d8 <m138_init+0x208>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a34      	ldr	r2, [pc, #208]	; (80017dc <m138_init+0x20c>)
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	4611      	mov	r1, r2
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fed6 	bl	80014c0 <swarm_cc>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d006      	beq.n	8001728 <m138_init+0x158>
			m138_init_status_reg = m138_init_status_reg | 32 ;
 800171a:	4b1c      	ldr	r3, [pc, #112]	; (800178c <m138_init+0x1bc>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	f043 0320 	orr.w	r3, r3, #32
 8001722:	b2da      	uxtb	r2, r3
 8001724:	4b19      	ldr	r3, [pc, #100]	; (800178c <m138_init+0x1bc>)
 8001726:	701a      	strb	r2, [r3, #0]
	if ( swarm_cc ( gn_0_at , gn_ok_answer ) )
 8001728:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <m138_init+0x210>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a2d      	ldr	r2, [pc, #180]	; (80017e4 <m138_init+0x214>)
 800172e:	6812      	ldr	r2, [r2, #0]
 8001730:	4611      	mov	r1, r2
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fec4 	bl	80014c0 <swarm_cc>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d011      	beq.n	8001762 <m138_init+0x192>
		if ( swarm_cc ( gn_q_rate_at , gn_0_answer ) )
 800173e:	4b2a      	ldr	r3, [pc, #168]	; (80017e8 <m138_init+0x218>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a2a      	ldr	r2, [pc, #168]	; (80017ec <m138_init+0x21c>)
 8001744:	6812      	ldr	r2, [r2, #0]
 8001746:	4611      	mov	r1, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff feb9 	bl	80014c0 <swarm_cc>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d006      	beq.n	8001762 <m138_init+0x192>
			m138_init_status_reg = m138_init_status_reg | 64 ;
 8001754:	4b0d      	ldr	r3, [pc, #52]	; (800178c <m138_init+0x1bc>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <m138_init+0x1bc>)
 8001760:	701a      	strb	r2, [r3, #0]

	sprintf ( dbg_uart_tx_buff , "%s%u\n" , "m138_init_status_reg = " , m138_init_status_reg ) ;
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <m138_init+0x1bc>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	4a22      	ldr	r2, [pc, #136]	; (80017f0 <m138_init+0x220>)
 8001768:	4922      	ldr	r1, [pc, #136]	; (80017f4 <m138_init+0x224>)
 800176a:	4823      	ldr	r0, [pc, #140]	; (80017f8 <m138_init+0x228>)
 800176c:	f004 fa12 	bl	8005b94 <siprintf>
	send_string_2_dbg_uart ( dbg_uart_tx_buff ) ;
 8001770:	4821      	ldr	r0, [pc, #132]	; (80017f8 <m138_init+0x228>)
 8001772:	f000 f859 	bl	8001828 <send_string_2_dbg_uart>
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000000 	.word	0x20000000
 8001780:	2000003c 	.word	0x2000003c
 8001784:	20000434 	.word	0x20000434
 8001788:	20000628 	.word	0x20000628
 800178c:	20000626 	.word	0x20000626
 8001790:	20000004 	.word	0x20000004
 8001794:	20000040 	.word	0x20000040
 8001798:	20000008 	.word	0x20000008
 800179c:	20000044 	.word	0x20000044
 80017a0:	2000000c 	.word	0x2000000c
 80017a4:	20000048 	.word	0x20000048
 80017a8:	20000010 	.word	0x20000010
 80017ac:	2000004c 	.word	0x2000004c
 80017b0:	20000018 	.word	0x20000018
 80017b4:	20000054 	.word	0x20000054
 80017b8:	2000001c 	.word	0x2000001c
 80017bc:	20000058 	.word	0x20000058
 80017c0:	20000020 	.word	0x20000020
 80017c4:	2000005c 	.word	0x2000005c
 80017c8:	20000024 	.word	0x20000024
 80017cc:	20000060 	.word	0x20000060
 80017d0:	20000028 	.word	0x20000028
 80017d4:	20000064 	.word	0x20000064
 80017d8:	2000002c 	.word	0x2000002c
 80017dc:	20000068 	.word	0x20000068
 80017e0:	20000030 	.word	0x20000030
 80017e4:	2000006c 	.word	0x2000006c
 80017e8:	20000034 	.word	0x20000034
 80017ec:	20000070 	.word	0x20000070
 80017f0:	080091a8 	.word	0x080091a8
 80017f4:	080091c0 	.word	0x080091c0
 80017f8:	2000055c 	.word	0x2000055c

080017fc <send_string_2_swarm_uart>:
{
	HAL_GPIO_TogglePin ( GREEN_GPIO_Port , GREEN_Pin ) ;
}

HAL_StatusTypeDef send_string_2_swarm_uart ( char* s )
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	return HAL_UART_Transmit ( SWARM_UART_HANDLER , (uint8_t *) s , strlen ( s ) , UART_TX_TIMEOUT ) ;
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7fe fce3 	bl	80001d0 <strlen>
 800180a:	4603      	mov	r3, r0
 800180c:	b29a      	uxth	r2, r3
 800180e:	2364      	movs	r3, #100	; 0x64
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	4804      	ldr	r0, [pc, #16]	; (8001824 <send_string_2_swarm_uart+0x28>)
 8001814:	f002 ff44 	bl	80046a0 <HAL_UART_Transmit>
 8001818:	4603      	mov	r3, r0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200002e4 	.word	0x200002e4

08001828 <send_string_2_dbg_uart>:
HAL_StatusTypeDef send_string_2_dbg_uart ( char* s )
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	return HAL_UART_Transmit ( DBG_UART_HANDLER , (uint8_t *) s , strlen ( s ) , UART_TX_TIMEOUT ) ;
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7fe fccd 	bl	80001d0 <strlen>
 8001836:	4603      	mov	r3, r0
 8001838:	b29a      	uxth	r2, r3
 800183a:	2364      	movs	r3, #100	; 0x64
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	4804      	ldr	r0, [pc, #16]	; (8001850 <send_string_2_dbg_uart+0x28>)
 8001840:	f002 ff2e 	bl	80046a0 <HAL_UART_Transmit>
 8001844:	4603      	mov	r3, r0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000368 	.word	0x20000368

08001854 <nmea_checksum>:

uint8_t nmea_checksum ( const char *message , size_t len )
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
	size_t i = 0 ;
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
	uint8_t cs ;
	if ( message [0] == '$' )
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b24      	cmp	r3, #36	; 0x24
 8001868:	d102      	bne.n	8001870 <nmea_checksum+0x1c>
		i++ ;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	3301      	adds	r3, #1
 800186e:	60fb      	str	r3, [r7, #12]
	for ( cs = 0 ; ( i < len ) && message [i] ; i++ )
 8001870:	2300      	movs	r3, #0
 8001872:	72fb      	strb	r3, [r7, #11]
 8001874:	e009      	b.n	800188a <nmea_checksum+0x36>
		cs ^= ( (uint8_t) message [i] ) ;
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4413      	add	r3, r2
 800187c:	781a      	ldrb	r2, [r3, #0]
 800187e:	7afb      	ldrb	r3, [r7, #11]
 8001880:	4053      	eors	r3, r2
 8001882:	72fb      	strb	r3, [r7, #11]
	for ( cs = 0 ; ( i < len ) && message [i] ; i++ )
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	3301      	adds	r3, #1
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d205      	bcs.n	800189e <nmea_checksum+0x4a>
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4413      	add	r3, r2
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1eb      	bne.n	8001876 <nmea_checksum+0x22>
	return cs;
 800189e:	7afb      	ldrb	r3, [r7, #11]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <tim_init>:

void tim_init ()
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( &TIM_HANDLER , TIM_IT_UPDATE ) ;
 80018b0:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <tim_init+0x18>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f06f 0201 	mvn.w	r2, #1
 80018b8:	611a      	str	r2, [r3, #16]
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	20000298 	.word	0x20000298

080018c8 <tim_start>:
void tim_start ()
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT ( &TIM_HANDLER ) ;
 80018cc:	4803      	ldr	r0, [pc, #12]	; (80018dc <tim_start+0x14>)
 80018ce:	f002 fbe7 	bl	80040a0 <HAL_TIM_Base_Start_IT>
	tim_on = 1 ;
 80018d2:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <tim_start+0x18>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	701a      	strb	r2, [r3, #0]
}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000298 	.word	0x20000298
 80018e0:	20000624 	.word	0x20000624

080018e4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM_INSTANCE )
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a06      	ldr	r2, [pc, #24]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x28>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d105      	bne.n	8001902 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		HAL_TIM_Base_Stop_IT ( &TIM_HANDLER ) ;
 80018f6:	4806      	ldr	r0, [pc, #24]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80018f8:	f002 fc26 	bl	8004148 <HAL_TIM_Base_Stop_IT>
		tim_on = 0 ;
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
	}
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40001000 	.word	0x40001000
 8001910:	20000298 	.word	0x20000298
 8001914:	20000624 	.word	0x20000624

08001918 <receive_swarm_uart_dma>:

HAL_StatusTypeDef receive_swarm_uart_dma ()
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef r = HAL_UARTEx_ReceiveToIdle_DMA ( SWARM_UART_HANDLER , (uint8_t*) swarm_uart_rx_buff , SWARM_UART_RX_MAX_BUFF_SIZE ) ;
 800191e:	2264      	movs	r2, #100	; 0x64
 8001920:	4909      	ldr	r1, [pc, #36]	; (8001948 <receive_swarm_uart_dma+0x30>)
 8001922:	480a      	ldr	r0, [pc, #40]	; (800194c <receive_swarm_uart_dma+0x34>)
 8001924:	f004 f89b 	bl	8005a5e <HAL_UARTEx_ReceiveToIdle_DMA>
 8001928:	4603      	mov	r3, r0
 800192a:	71fb      	strb	r3, [r7, #7]
	__HAL_DMA_DISABLE_IT ( &hdma_usart1_rx, DMA_IT_HT ) ; //Disable Half Transfer interrupt.
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <receive_swarm_uart_dma+0x38>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <receive_swarm_uart_dma+0x38>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0204 	bic.w	r2, r2, #4
 800193a:	601a      	str	r2, [r3, #0]
	return r ;
 800193c:	79fb      	ldrb	r3, [r7, #7]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000434 	.word	0x20000434
 800194c:	200002e4 	.word	0x200002e4
 8001950:	200003ec 	.word	0x200003ec

08001954 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback ( UART_HandleTypeDef *huart , uint16_t Size )
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	807b      	strh	r3, [r7, #2]
    if ( huart->Instance == SWARM_UART_INSTANCE )
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a07      	ldr	r2, [pc, #28]	; (8001984 <HAL_UARTEx_RxEventCallback+0x30>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d106      	bne.n	8001978 <HAL_UARTEx_RxEventCallback+0x24>
    {
    	answer_from_swarm = 1 ;
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <HAL_UARTEx_RxEventCallback+0x34>)
 800196c:	2201      	movs	r2, #1
 800196e:	701a      	strb	r2, [r3, #0]
    	swarm_uart_rx_buff[Size] = 0 ;
 8001970:	887b      	ldrh	r3, [r7, #2]
 8001972:	4a06      	ldr	r2, [pc, #24]	; (800198c <HAL_UARTEx_RxEventCallback+0x38>)
 8001974:	2100      	movs	r1, #0
 8001976:	54d1      	strb	r1, [r2, r3]
    }
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	40013800 	.word	0x40013800
 8001988:	20000625 	.word	0x20000625
 800198c:	20000434 	.word	0x20000434

08001990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001994:	b672      	cpsid	i
}
 8001996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001998:	e7fe      	b.n	8001998 <Error_Handler+0x8>
	...

0800199c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a2:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <HAL_MspInit+0x44>)
 80019a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a6:	4a0e      	ldr	r2, [pc, #56]	; (80019e0 <HAL_MspInit+0x44>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6613      	str	r3, [r2, #96]	; 0x60
 80019ae:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <HAL_MspInit+0x44>)
 80019b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_MspInit+0x44>)
 80019bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019be:	4a08      	ldr	r2, [pc, #32]	; (80019e0 <HAL_MspInit+0x44>)
 80019c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c4:	6593      	str	r3, [r2, #88]	; 0x58
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_MspInit+0x44>)
 80019c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40021000 	.word	0x40021000

080019e4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b098      	sub	sp, #96	; 0x60
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019ec:	f107 030c 	add.w	r3, r7, #12
 80019f0:	2254      	movs	r2, #84	; 0x54
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f004 f8c5 	bl	8005b84 <memset>
  if(hrtc->Instance==RTC)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a13      	ldr	r2, [pc, #76]	; (8001a4c <HAL_RTC_MspInit+0x68>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d11f      	bne.n	8001a44 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a08:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001a0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a10:	f107 030c 	add.w	r3, r7, #12
 8001a14:	4618      	mov	r0, r3
 8001a16:	f001 feb1 	bl	800377c <HAL_RCCEx_PeriphCLKConfig>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001a20:	f7ff ffb6 	bl	8001990 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <HAL_RTC_MspInit+0x6c>)
 8001a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2a:	4a09      	ldr	r2, [pc, #36]	; (8001a50 <HAL_RTC_MspInit+0x6c>)
 8001a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001a34:	2200      	movs	r2, #0
 8001a36:	2100      	movs	r1, #0
 8001a38:	2003      	movs	r0, #3
 8001a3a:	f000 fbc4 	bl	80021c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001a3e:	2003      	movs	r0, #3
 8001a40:	f000 fbdd 	bl	80021fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a44:	bf00      	nop
 8001a46:	3760      	adds	r7, #96	; 0x60
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40002800 	.word	0x40002800
 8001a50:	40021000 	.word	0x40021000

08001a54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a0d      	ldr	r2, [pc, #52]	; (8001a98 <HAL_TIM_Base_MspInit+0x44>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d113      	bne.n	8001a8e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a66:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <HAL_TIM_Base_MspInit+0x48>)
 8001a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6a:	4a0c      	ldr	r2, [pc, #48]	; (8001a9c <HAL_TIM_Base_MspInit+0x48>)
 8001a6c:	f043 0310 	orr.w	r3, r3, #16
 8001a70:	6593      	str	r3, [r2, #88]	; 0x58
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <HAL_TIM_Base_MspInit+0x48>)
 8001a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a76:	f003 0310 	and.w	r3, r3, #16
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	2036      	movs	r0, #54	; 0x36
 8001a84:	f000 fb9f 	bl	80021c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a88:	2036      	movs	r0, #54	; 0x36
 8001a8a:	f000 fbb8 	bl	80021fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40001000 	.word	0x40001000
 8001a9c:	40021000 	.word	0x40021000

08001aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b0a0      	sub	sp, #128	; 0x80
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ab8:	f107 0318 	add.w	r3, r7, #24
 8001abc:	2254      	movs	r2, #84	; 0x54
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f004 f85f 	bl	8005b84 <memset>
  if(huart->Instance==USART1)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a56      	ldr	r2, [pc, #344]	; (8001c24 <HAL_UART_MspInit+0x184>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d169      	bne.n	8001ba4 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ad8:	f107 0318 	add.w	r3, r7, #24
 8001adc:	4618      	mov	r0, r3
 8001ade:	f001 fe4d 	bl	800377c <HAL_RCCEx_PeriphCLKConfig>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ae8:	f7ff ff52 	bl	8001990 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aec:	4b4e      	ldr	r3, [pc, #312]	; (8001c28 <HAL_UART_MspInit+0x188>)
 8001aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af0:	4a4d      	ldr	r2, [pc, #308]	; (8001c28 <HAL_UART_MspInit+0x188>)
 8001af2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af6:	6613      	str	r3, [r2, #96]	; 0x60
 8001af8:	4b4b      	ldr	r3, [pc, #300]	; (8001c28 <HAL_UART_MspInit+0x188>)
 8001afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b04:	4b48      	ldr	r3, [pc, #288]	; (8001c28 <HAL_UART_MspInit+0x188>)
 8001b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b08:	4a47      	ldr	r2, [pc, #284]	; (8001c28 <HAL_UART_MspInit+0x188>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b10:	4b45      	ldr	r3, [pc, #276]	; (8001c28 <HAL_UART_MspInit+0x188>)
 8001b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b1c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b20:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b2e:	2307      	movs	r3, #7
 8001b30:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b36:	4619      	mov	r1, r3
 8001b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b3c:	f000 fdf0 	bl	8002720 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001b40:	4b3a      	ldr	r3, [pc, #232]	; (8001c2c <HAL_UART_MspInit+0x18c>)
 8001b42:	4a3b      	ldr	r2, [pc, #236]	; (8001c30 <HAL_UART_MspInit+0x190>)
 8001b44:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001b46:	4b39      	ldr	r3, [pc, #228]	; (8001c2c <HAL_UART_MspInit+0x18c>)
 8001b48:	2202      	movs	r2, #2
 8001b4a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b4c:	4b37      	ldr	r3, [pc, #220]	; (8001c2c <HAL_UART_MspInit+0x18c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b52:	4b36      	ldr	r3, [pc, #216]	; (8001c2c <HAL_UART_MspInit+0x18c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b58:	4b34      	ldr	r3, [pc, #208]	; (8001c2c <HAL_UART_MspInit+0x18c>)
 8001b5a:	2280      	movs	r2, #128	; 0x80
 8001b5c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b5e:	4b33      	ldr	r3, [pc, #204]	; (8001c2c <HAL_UART_MspInit+0x18c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b64:	4b31      	ldr	r3, [pc, #196]	; (8001c2c <HAL_UART_MspInit+0x18c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001b6a:	4b30      	ldr	r3, [pc, #192]	; (8001c2c <HAL_UART_MspInit+0x18c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b70:	4b2e      	ldr	r3, [pc, #184]	; (8001c2c <HAL_UART_MspInit+0x18c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b76:	482d      	ldr	r0, [pc, #180]	; (8001c2c <HAL_UART_MspInit+0x18c>)
 8001b78:	f000 fb5c 	bl	8002234 <HAL_DMA_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001b82:	f7ff ff05 	bl	8001990 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a28      	ldr	r2, [pc, #160]	; (8001c2c <HAL_UART_MspInit+0x18c>)
 8001b8a:	671a      	str	r2, [r3, #112]	; 0x70
 8001b8c:	4a27      	ldr	r2, [pc, #156]	; (8001c2c <HAL_UART_MspInit+0x18c>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2100      	movs	r1, #0
 8001b96:	2025      	movs	r0, #37	; 0x25
 8001b98:	f000 fb15 	bl	80021c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b9c:	2025      	movs	r0, #37	; 0x25
 8001b9e:	f000 fb2e 	bl	80021fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ba2:	e03b      	b.n	8001c1c <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==USART2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a22      	ldr	r2, [pc, #136]	; (8001c34 <HAL_UART_MspInit+0x194>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d136      	bne.n	8001c1c <HAL_UART_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bb6:	f107 0318 	add.w	r3, r7, #24
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f001 fdde 	bl	800377c <HAL_RCCEx_PeriphCLKConfig>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8001bc6:	f7ff fee3 	bl	8001990 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bca:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <HAL_UART_MspInit+0x188>)
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bce:	4a16      	ldr	r2, [pc, #88]	; (8001c28 <HAL_UART_MspInit+0x188>)
 8001bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8001bd6:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <HAL_UART_MspInit+0x188>)
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <HAL_UART_MspInit+0x188>)
 8001be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be6:	4a10      	ldr	r2, [pc, #64]	; (8001c28 <HAL_UART_MspInit+0x188>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <HAL_UART_MspInit+0x188>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bfa:	230c      	movs	r3, #12
 8001bfc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c06:	2303      	movs	r3, #3
 8001c08:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c0a:	2307      	movs	r3, #7
 8001c0c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c12:	4619      	mov	r1, r3
 8001c14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c18:	f000 fd82 	bl	8002720 <HAL_GPIO_Init>
}
 8001c1c:	bf00      	nop
 8001c1e:	3780      	adds	r7, #128	; 0x80
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40013800 	.word	0x40013800
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	200003ec 	.word	0x200003ec
 8001c30:	40020058 	.word	0x40020058
 8001c34:	40004400 	.word	0x40004400

08001c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <NMI_Handler+0x4>

08001c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c42:	e7fe      	b.n	8001c42 <HardFault_Handler+0x4>

08001c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <MemManage_Handler+0x4>

08001c4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <BusFault_Handler+0x4>

08001c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <UsageFault_Handler+0x4>

08001c56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c84:	f000 f980 	bl	8001f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001c90:	4802      	ldr	r0, [pc, #8]	; (8001c9c <RTC_WKUP_IRQHandler+0x10>)
 8001c92:	f002 f97d 	bl	8003f90 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000274 	.word	0x20000274

08001ca0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001ca4:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <DMA1_Channel5_IRQHandler+0x10>)
 8001ca6:	f000 fc5c 	bl	8002562 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200003ec 	.word	0x200003ec

08001cb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cb8:	4802      	ldr	r0, [pc, #8]	; (8001cc4 <USART1_IRQHandler+0x10>)
 8001cba:	f002 fd85 	bl	80047c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200002e4 	.word	0x200002e4

08001cc8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ccc:	4802      	ldr	r0, [pc, #8]	; (8001cd8 <TIM6_DAC_IRQHandler+0x10>)
 8001cce:	f002 fa6a 	bl	80041a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000298 	.word	0x20000298

08001cdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
	return 1;
 8001ce0:	2301      	movs	r3, #1
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <_kill>:

int _kill(int pid, int sig)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cf6:	f003 ff0d 	bl	8005b14 <__errno>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2216      	movs	r2, #22
 8001cfe:	601a      	str	r2, [r3, #0]
	return -1;
 8001d00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <_exit>:

void _exit (int status)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d14:	f04f 31ff 	mov.w	r1, #4294967295
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff ffe7 	bl	8001cec <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d1e:	e7fe      	b.n	8001d1e <_exit+0x12>

08001d20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	e00a      	b.n	8001d48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d32:	f3af 8000 	nop.w
 8001d36:	4601      	mov	r1, r0
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	60ba      	str	r2, [r7, #8]
 8001d3e:	b2ca      	uxtb	r2, r1
 8001d40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	3301      	adds	r3, #1
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	dbf0      	blt.n	8001d32 <_read+0x12>
	}

return len;
 8001d50:	687b      	ldr	r3, [r7, #4]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	e009      	b.n	8001d80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	60ba      	str	r2, [r7, #8]
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	dbf1      	blt.n	8001d6c <_write+0x12>
	}
	return len;
 8001d88:	687b      	ldr	r3, [r7, #4]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <_close>:

int _close(int file)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
	return -1;
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dba:	605a      	str	r2, [r3, #4]
	return 0;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <_isatty>:

int _isatty(int file)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
	return 1;
 8001dd2:	2301      	movs	r3, #1
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
	return 0;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e04:	4a14      	ldr	r2, [pc, #80]	; (8001e58 <_sbrk+0x5c>)
 8001e06:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <_sbrk+0x60>)
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e10:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <_sbrk+0x64>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d102      	bne.n	8001e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e18:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <_sbrk+0x64>)
 8001e1a:	4a12      	ldr	r2, [pc, #72]	; (8001e64 <_sbrk+0x68>)
 8001e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e1e:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <_sbrk+0x64>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d207      	bcs.n	8001e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e2c:	f003 fe72 	bl	8005b14 <__errno>
 8001e30:	4603      	mov	r3, r0
 8001e32:	220c      	movs	r2, #12
 8001e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3a:	e009      	b.n	8001e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <_sbrk+0x64>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e42:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <_sbrk+0x64>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	4a05      	ldr	r2, [pc, #20]	; (8001e60 <_sbrk+0x64>)
 8001e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20010000 	.word	0x20010000
 8001e5c:	00000400 	.word	0x00000400
 8001e60:	20000664 	.word	0x20000664
 8001e64:	20000680 	.word	0x20000680

08001e68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <SystemInit+0x20>)
 8001e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e72:	4a05      	ldr	r2, [pc, #20]	; (8001e88 <SystemInit+0x20>)
 8001e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ec4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e90:	f7ff ffea 	bl	8001e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e94:	480c      	ldr	r0, [pc, #48]	; (8001ec8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e96:	490d      	ldr	r1, [pc, #52]	; (8001ecc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e98:	4a0d      	ldr	r2, [pc, #52]	; (8001ed0 <LoopForever+0xe>)
  movs r3, #0
 8001e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e9c:	e002      	b.n	8001ea4 <LoopCopyDataInit>

08001e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea2:	3304      	adds	r3, #4

08001ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea8:	d3f9      	bcc.n	8001e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001eac:	4c0a      	ldr	r4, [pc, #40]	; (8001ed8 <LoopForever+0x16>)
  movs r3, #0
 8001eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb0:	e001      	b.n	8001eb6 <LoopFillZerobss>

08001eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb4:	3204      	adds	r2, #4

08001eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb8:	d3fb      	bcc.n	8001eb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eba:	f003 fe31 	bl	8005b20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ebe:	f7ff f873 	bl	8000fa8 <main>

08001ec2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ec2:	e7fe      	b.n	8001ec2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ec4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ecc:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8001ed0:	080096a8 	.word	0x080096a8
  ldr r2, =_sbss
 8001ed4:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8001ed8:	2000067c 	.word	0x2000067c

08001edc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001edc:	e7fe      	b.n	8001edc <ADC1_IRQHandler>

08001ede <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee8:	2003      	movs	r0, #3
 8001eea:	f000 f961 	bl	80021b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f000 f80e 	bl	8001f10 <HAL_InitTick>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	71fb      	strb	r3, [r7, #7]
 8001efe:	e001      	b.n	8001f04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f00:	f7ff fd4c 	bl	800199c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f04:	79fb      	ldrb	r3, [r7, #7]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f1c:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <HAL_InitTick+0x6c>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d023      	beq.n	8001f6c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f24:	4b16      	ldr	r3, [pc, #88]	; (8001f80 <HAL_InitTick+0x70>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <HAL_InitTick+0x6c>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 f96d 	bl	800221a <HAL_SYSTICK_Config>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10f      	bne.n	8001f66 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b0f      	cmp	r3, #15
 8001f4a:	d809      	bhi.n	8001f60 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	f04f 30ff 	mov.w	r0, #4294967295
 8001f54:	f000 f937 	bl	80021c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f58:	4a0a      	ldr	r2, [pc, #40]	; (8001f84 <HAL_InitTick+0x74>)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	e007      	b.n	8001f70 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	73fb      	strb	r3, [r7, #15]
 8001f64:	e004      	b.n	8001f70 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	73fb      	strb	r3, [r7, #15]
 8001f6a:	e001      	b.n	8001f70 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000080 	.word	0x20000080
 8001f80:	20000078 	.word	0x20000078
 8001f84:	2000007c 	.word	0x2000007c

08001f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_IncTick+0x20>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	461a      	mov	r2, r3
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_IncTick+0x24>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4413      	add	r3, r2
 8001f98:	4a04      	ldr	r2, [pc, #16]	; (8001fac <HAL_IncTick+0x24>)
 8001f9a:	6013      	str	r3, [r2, #0]
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	20000080 	.word	0x20000080
 8001fac:	20000668 	.word	0x20000668

08001fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb4:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <HAL_GetTick+0x14>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000668 	.word	0x20000668

08001fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fd0:	f7ff ffee 	bl	8001fb0 <HAL_GetTick>
 8001fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe0:	d005      	beq.n	8001fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	; (800200c <HAL_Delay+0x44>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4413      	add	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fee:	bf00      	nop
 8001ff0:	f7ff ffde 	bl	8001fb0 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d8f7      	bhi.n	8001ff0 <HAL_Delay+0x28>
  {
  }
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000080 	.word	0x20000080

08002010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <__NVIC_SetPriorityGrouping+0x44>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800202c:	4013      	ands	r3, r2
 800202e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800203c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002042:	4a04      	ldr	r2, [pc, #16]	; (8002054 <__NVIC_SetPriorityGrouping+0x44>)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	60d3      	str	r3, [r2, #12]
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <__NVIC_GetPriorityGrouping+0x18>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	f003 0307 	and.w	r3, r3, #7
}
 8002066:	4618      	mov	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	2b00      	cmp	r3, #0
 8002084:	db0b      	blt.n	800209e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	f003 021f 	and.w	r2, r3, #31
 800208c:	4907      	ldr	r1, [pc, #28]	; (80020ac <__NVIC_EnableIRQ+0x38>)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	095b      	lsrs	r3, r3, #5
 8002094:	2001      	movs	r0, #1
 8002096:	fa00 f202 	lsl.w	r2, r0, r2
 800209a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000e100 	.word	0xe000e100

080020b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	6039      	str	r1, [r7, #0]
 80020ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	db0a      	blt.n	80020da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	490c      	ldr	r1, [pc, #48]	; (80020fc <__NVIC_SetPriority+0x4c>)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	0112      	lsls	r2, r2, #4
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	440b      	add	r3, r1
 80020d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d8:	e00a      	b.n	80020f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	4908      	ldr	r1, [pc, #32]	; (8002100 <__NVIC_SetPriority+0x50>)
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	3b04      	subs	r3, #4
 80020e8:	0112      	lsls	r2, r2, #4
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	440b      	add	r3, r1
 80020ee:	761a      	strb	r2, [r3, #24]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	e000e100 	.word	0xe000e100
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	; 0x24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f1c3 0307 	rsb	r3, r3, #7
 800211e:	2b04      	cmp	r3, #4
 8002120:	bf28      	it	cs
 8002122:	2304      	movcs	r3, #4
 8002124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3304      	adds	r3, #4
 800212a:	2b06      	cmp	r3, #6
 800212c:	d902      	bls.n	8002134 <NVIC_EncodePriority+0x30>
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3b03      	subs	r3, #3
 8002132:	e000      	b.n	8002136 <NVIC_EncodePriority+0x32>
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	f04f 32ff 	mov.w	r2, #4294967295
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43da      	mvns	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	401a      	ands	r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800214c:	f04f 31ff 	mov.w	r1, #4294967295
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	43d9      	mvns	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800215c:	4313      	orrs	r3, r2
         );
}
 800215e:	4618      	mov	r0, r3
 8002160:	3724      	adds	r7, #36	; 0x24
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
	...

0800216c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3b01      	subs	r3, #1
 8002178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800217c:	d301      	bcc.n	8002182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800217e:	2301      	movs	r3, #1
 8002180:	e00f      	b.n	80021a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002182:	4a0a      	ldr	r2, [pc, #40]	; (80021ac <SysTick_Config+0x40>)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3b01      	subs	r3, #1
 8002188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800218a:	210f      	movs	r1, #15
 800218c:	f04f 30ff 	mov.w	r0, #4294967295
 8002190:	f7ff ff8e 	bl	80020b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002194:	4b05      	ldr	r3, [pc, #20]	; (80021ac <SysTick_Config+0x40>)
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800219a:	4b04      	ldr	r3, [pc, #16]	; (80021ac <SysTick_Config+0x40>)
 800219c:	2207      	movs	r2, #7
 800219e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	e000e010 	.word	0xe000e010

080021b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff ff29 	bl	8002010 <__NVIC_SetPriorityGrouping>
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b086      	sub	sp, #24
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	4603      	mov	r3, r0
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	607a      	str	r2, [r7, #4]
 80021d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021d8:	f7ff ff3e 	bl	8002058 <__NVIC_GetPriorityGrouping>
 80021dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	68b9      	ldr	r1, [r7, #8]
 80021e2:	6978      	ldr	r0, [r7, #20]
 80021e4:	f7ff ff8e 	bl	8002104 <NVIC_EncodePriority>
 80021e8:	4602      	mov	r2, r0
 80021ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ee:	4611      	mov	r1, r2
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff ff5d 	bl	80020b0 <__NVIC_SetPriority>
}
 80021f6:	bf00      	nop
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	4603      	mov	r3, r0
 8002206:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff31 	bl	8002074 <__NVIC_EnableIRQ>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff ffa2 	bl	800216c <SysTick_Config>
 8002228:	4603      	mov	r3, r0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e098      	b.n	8002378 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	4b4d      	ldr	r3, [pc, #308]	; (8002384 <HAL_DMA_Init+0x150>)
 800224e:	429a      	cmp	r2, r3
 8002250:	d80f      	bhi.n	8002272 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	4b4b      	ldr	r3, [pc, #300]	; (8002388 <HAL_DMA_Init+0x154>)
 800225a:	4413      	add	r3, r2
 800225c:	4a4b      	ldr	r2, [pc, #300]	; (800238c <HAL_DMA_Init+0x158>)
 800225e:	fba2 2303 	umull	r2, r3, r2, r3
 8002262:	091b      	lsrs	r3, r3, #4
 8002264:	009a      	lsls	r2, r3, #2
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a48      	ldr	r2, [pc, #288]	; (8002390 <HAL_DMA_Init+0x15c>)
 800226e:	641a      	str	r2, [r3, #64]	; 0x40
 8002270:	e00e      	b.n	8002290 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	4b46      	ldr	r3, [pc, #280]	; (8002394 <HAL_DMA_Init+0x160>)
 800227a:	4413      	add	r3, r2
 800227c:	4a43      	ldr	r2, [pc, #268]	; (800238c <HAL_DMA_Init+0x158>)
 800227e:	fba2 2303 	umull	r2, r3, r2, r3
 8002282:	091b      	lsrs	r3, r3, #4
 8002284:	009a      	lsls	r2, r3, #2
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a42      	ldr	r2, [pc, #264]	; (8002398 <HAL_DMA_Init+0x164>)
 800228e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80022a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80022b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022ea:	d039      	beq.n	8002360 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	4a27      	ldr	r2, [pc, #156]	; (8002390 <HAL_DMA_Init+0x15c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d11a      	bne.n	800232c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80022f6:	4b29      	ldr	r3, [pc, #164]	; (800239c <HAL_DMA_Init+0x168>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fe:	f003 031c 	and.w	r3, r3, #28
 8002302:	210f      	movs	r1, #15
 8002304:	fa01 f303 	lsl.w	r3, r1, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	4924      	ldr	r1, [pc, #144]	; (800239c <HAL_DMA_Init+0x168>)
 800230c:	4013      	ands	r3, r2
 800230e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002310:	4b22      	ldr	r3, [pc, #136]	; (800239c <HAL_DMA_Init+0x168>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6859      	ldr	r1, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231c:	f003 031c 	and.w	r3, r3, #28
 8002320:	fa01 f303 	lsl.w	r3, r1, r3
 8002324:	491d      	ldr	r1, [pc, #116]	; (800239c <HAL_DMA_Init+0x168>)
 8002326:	4313      	orrs	r3, r2
 8002328:	600b      	str	r3, [r1, #0]
 800232a:	e019      	b.n	8002360 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800232c:	4b1c      	ldr	r3, [pc, #112]	; (80023a0 <HAL_DMA_Init+0x16c>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002334:	f003 031c 	and.w	r3, r3, #28
 8002338:	210f      	movs	r1, #15
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	4917      	ldr	r1, [pc, #92]	; (80023a0 <HAL_DMA_Init+0x16c>)
 8002342:	4013      	ands	r3, r2
 8002344:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002346:	4b16      	ldr	r3, [pc, #88]	; (80023a0 <HAL_DMA_Init+0x16c>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6859      	ldr	r1, [r3, #4]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	f003 031c 	and.w	r3, r3, #28
 8002356:	fa01 f303 	lsl.w	r3, r1, r3
 800235a:	4911      	ldr	r1, [pc, #68]	; (80023a0 <HAL_DMA_Init+0x16c>)
 800235c:	4313      	orrs	r3, r2
 800235e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	40020407 	.word	0x40020407
 8002388:	bffdfff8 	.word	0xbffdfff8
 800238c:	cccccccd 	.word	0xcccccccd
 8002390:	40020000 	.word	0x40020000
 8002394:	bffdfbf8 	.word	0xbffdfbf8
 8002398:	40020400 	.word	0x40020400
 800239c:	400200a8 	.word	0x400200a8
 80023a0:	400204a8 	.word	0x400204a8

080023a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
 80023b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d101      	bne.n	80023c4 <HAL_DMA_Start_IT+0x20>
 80023c0:	2302      	movs	r3, #2
 80023c2:	e04b      	b.n	800245c <HAL_DMA_Start_IT+0xb8>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d13a      	bne.n	800244e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0201 	bic.w	r2, r2, #1
 80023f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	68b9      	ldr	r1, [r7, #8]
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 f95f 	bl	80026c0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	2b00      	cmp	r3, #0
 8002408:	d008      	beq.n	800241c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f042 020e 	orr.w	r2, r2, #14
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	e00f      	b.n	800243c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0204 	bic.w	r2, r2, #4
 800242a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 020a 	orr.w	r2, r2, #10
 800243a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0201 	orr.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	e005      	b.n	800245a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002456:	2302      	movs	r3, #2
 8002458:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800245a:	7dfb      	ldrb	r3, [r7, #23]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d008      	beq.n	800248e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2204      	movs	r2, #4
 8002480:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e022      	b.n	80024d4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 020e 	bic.w	r2, r2, #14
 800249c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0201 	bic.w	r2, r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	f003 021c 	and.w	r2, r3, #28
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	2101      	movs	r1, #1
 80024bc:	fa01 f202 	lsl.w	r2, r1, r2
 80024c0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d005      	beq.n	8002504 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2204      	movs	r2, #4
 80024fc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	73fb      	strb	r3, [r7, #15]
 8002502:	e029      	b.n	8002558 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 020e 	bic.w	r2, r2, #14
 8002512:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0201 	bic.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002528:	f003 021c 	and.w	r2, r3, #28
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	2101      	movs	r1, #1
 8002532:	fa01 f202 	lsl.w	r2, r1, r2
 8002536:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	4798      	blx	r3
    }
  }
  return status;
 8002558:	7bfb      	ldrb	r3, [r7, #15]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b084      	sub	sp, #16
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	f003 031c 	and.w	r3, r3, #28
 8002582:	2204      	movs	r2, #4
 8002584:	409a      	lsls	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4013      	ands	r3, r2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d026      	beq.n	80025dc <HAL_DMA_IRQHandler+0x7a>
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	d021      	beq.n	80025dc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0320 	and.w	r3, r3, #32
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d107      	bne.n	80025b6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0204 	bic.w	r2, r2, #4
 80025b4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	f003 021c 	and.w	r2, r3, #28
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	2104      	movs	r1, #4
 80025c4:	fa01 f202 	lsl.w	r2, r1, r2
 80025c8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d071      	beq.n	80026b6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80025da:	e06c      	b.n	80026b6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e0:	f003 031c 	and.w	r3, r3, #28
 80025e4:	2202      	movs	r2, #2
 80025e6:	409a      	lsls	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d02e      	beq.n	800264e <HAL_DMA_IRQHandler+0xec>
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d029      	beq.n	800264e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0320 	and.w	r3, r3, #32
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10b      	bne.n	8002620 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 020a 	bic.w	r2, r2, #10
 8002616:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002624:	f003 021c 	and.w	r2, r3, #28
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	2102      	movs	r1, #2
 800262e:	fa01 f202 	lsl.w	r2, r1, r2
 8002632:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	2b00      	cmp	r3, #0
 8002642:	d038      	beq.n	80026b6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800264c:	e033      	b.n	80026b6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	f003 031c 	and.w	r3, r3, #28
 8002656:	2208      	movs	r2, #8
 8002658:	409a      	lsls	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4013      	ands	r3, r2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d02a      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x156>
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b00      	cmp	r3, #0
 800266a:	d025      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 020e 	bic.w	r2, r2, #14
 800267a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002680:	f003 021c 	and.w	r2, r3, #28
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	2101      	movs	r1, #1
 800268a:	fa01 f202 	lsl.w	r2, r1, r2
 800268e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d004      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80026b6:	bf00      	nop
 80026b8:	bf00      	nop
}
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
 80026cc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	f003 021c 	and.w	r2, r3, #28
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	2101      	movs	r1, #1
 80026dc:	fa01 f202 	lsl.w	r2, r1, r2
 80026e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	2b10      	cmp	r3, #16
 80026f0:	d108      	bne.n	8002704 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002702:	e007      	b.n	8002714 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	60da      	str	r2, [r3, #12]
}
 8002714:	bf00      	nop
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800272e:	e148      	b.n	80029c2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	2101      	movs	r1, #1
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	fa01 f303 	lsl.w	r3, r1, r3
 800273c:	4013      	ands	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 813a 	beq.w	80029bc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 0303 	and.w	r3, r3, #3
 8002750:	2b01      	cmp	r3, #1
 8002752:	d005      	beq.n	8002760 <HAL_GPIO_Init+0x40>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d130      	bne.n	80027c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	2203      	movs	r2, #3
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4013      	ands	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002796:	2201      	movs	r2, #1
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4013      	ands	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	091b      	lsrs	r3, r3, #4
 80027ac:	f003 0201 	and.w	r2, r3, #1
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d017      	beq.n	80027fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	2203      	movs	r2, #3
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4013      	ands	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d123      	bne.n	8002852 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	08da      	lsrs	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3208      	adds	r2, #8
 8002812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002816:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	220f      	movs	r2, #15
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43db      	mvns	r3, r3
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4013      	ands	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	691a      	ldr	r2, [r3, #16]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	08da      	lsrs	r2, r3, #3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3208      	adds	r2, #8
 800284c:	6939      	ldr	r1, [r7, #16]
 800284e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	2203      	movs	r2, #3
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4013      	ands	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f003 0203 	and.w	r2, r3, #3
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 8094 	beq.w	80029bc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002894:	4b52      	ldr	r3, [pc, #328]	; (80029e0 <HAL_GPIO_Init+0x2c0>)
 8002896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002898:	4a51      	ldr	r2, [pc, #324]	; (80029e0 <HAL_GPIO_Init+0x2c0>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	6613      	str	r3, [r2, #96]	; 0x60
 80028a0:	4b4f      	ldr	r3, [pc, #316]	; (80029e0 <HAL_GPIO_Init+0x2c0>)
 80028a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028ac:	4a4d      	ldr	r2, [pc, #308]	; (80029e4 <HAL_GPIO_Init+0x2c4>)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	089b      	lsrs	r3, r3, #2
 80028b2:	3302      	adds	r3, #2
 80028b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	220f      	movs	r2, #15
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4013      	ands	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028d6:	d00d      	beq.n	80028f4 <HAL_GPIO_Init+0x1d4>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a43      	ldr	r2, [pc, #268]	; (80029e8 <HAL_GPIO_Init+0x2c8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d007      	beq.n	80028f0 <HAL_GPIO_Init+0x1d0>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a42      	ldr	r2, [pc, #264]	; (80029ec <HAL_GPIO_Init+0x2cc>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d101      	bne.n	80028ec <HAL_GPIO_Init+0x1cc>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e004      	b.n	80028f6 <HAL_GPIO_Init+0x1d6>
 80028ec:	2307      	movs	r3, #7
 80028ee:	e002      	b.n	80028f6 <HAL_GPIO_Init+0x1d6>
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <HAL_GPIO_Init+0x1d6>
 80028f4:	2300      	movs	r3, #0
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	f002 0203 	and.w	r2, r2, #3
 80028fc:	0092      	lsls	r2, r2, #2
 80028fe:	4093      	lsls	r3, r2
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002906:	4937      	ldr	r1, [pc, #220]	; (80029e4 <HAL_GPIO_Init+0x2c4>)
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	089b      	lsrs	r3, r3, #2
 800290c:	3302      	adds	r3, #2
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002914:	4b36      	ldr	r3, [pc, #216]	; (80029f0 <HAL_GPIO_Init+0x2d0>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	43db      	mvns	r3, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4313      	orrs	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002938:	4a2d      	ldr	r2, [pc, #180]	; (80029f0 <HAL_GPIO_Init+0x2d0>)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800293e:	4b2c      	ldr	r3, [pc, #176]	; (80029f0 <HAL_GPIO_Init+0x2d0>)
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	43db      	mvns	r3, r3
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4013      	ands	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002962:	4a23      	ldr	r2, [pc, #140]	; (80029f0 <HAL_GPIO_Init+0x2d0>)
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002968:	4b21      	ldr	r3, [pc, #132]	; (80029f0 <HAL_GPIO_Init+0x2d0>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	43db      	mvns	r3, r3
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800298c:	4a18      	ldr	r2, [pc, #96]	; (80029f0 <HAL_GPIO_Init+0x2d0>)
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002992:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <HAL_GPIO_Init+0x2d0>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	43db      	mvns	r3, r3
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4013      	ands	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029b6:	4a0e      	ldr	r2, [pc, #56]	; (80029f0 <HAL_GPIO_Init+0x2d0>)
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	3301      	adds	r3, #1
 80029c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	fa22 f303 	lsr.w	r3, r2, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f47f aeaf 	bne.w	8002730 <HAL_GPIO_Init+0x10>
  }
}
 80029d2:	bf00      	nop
 80029d4:	bf00      	nop
 80029d6:	371c      	adds	r7, #28
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40010000 	.word	0x40010000
 80029e8:	48000400 	.word	0x48000400
 80029ec:	48000800 	.word	0x48000800
 80029f0:	40010400 	.word	0x40010400

080029f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	807b      	strh	r3, [r7, #2]
 8002a00:	4613      	mov	r3, r2
 8002a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a04:	787b      	ldrb	r3, [r7, #1]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a0a:	887a      	ldrh	r2, [r7, #2]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a10:	e002      	b.n	8002a18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a12:	887a      	ldrh	r2, [r7, #2]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a28:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a04      	ldr	r2, [pc, #16]	; (8002a40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a32:	6013      	str	r3, [r2, #0]
}
 8002a34:	bf00      	nop
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40007000 	.word	0x40007000

08002a44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a48:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <HAL_PWREx_GetVoltageRange+0x18>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40007000 	.word	0x40007000

08002a60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a6e:	d130      	bne.n	8002ad2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a70:	4b23      	ldr	r3, [pc, #140]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a7c:	d038      	beq.n	8002af0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a7e:	4b20      	ldr	r3, [pc, #128]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a86:	4a1e      	ldr	r2, [pc, #120]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a8c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a8e:	4b1d      	ldr	r3, [pc, #116]	; (8002b04 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2232      	movs	r2, #50	; 0x32
 8002a94:	fb02 f303 	mul.w	r3, r2, r3
 8002a98:	4a1b      	ldr	r2, [pc, #108]	; (8002b08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	0c9b      	lsrs	r3, r3, #18
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aa4:	e002      	b.n	8002aac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aac:	4b14      	ldr	r3, [pc, #80]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab8:	d102      	bne.n	8002ac0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1f2      	bne.n	8002aa6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ac0:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002acc:	d110      	bne.n	8002af0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e00f      	b.n	8002af2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ad2:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ade:	d007      	beq.n	8002af0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ae0:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ae8:	4a05      	ldr	r2, [pc, #20]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40007000 	.word	0x40007000
 8002b04:	20000078 	.word	0x20000078
 8002b08:	431bde83 	.word	0x431bde83

08002b0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b088      	sub	sp, #32
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d102      	bne.n	8002b20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	f000 bc02 	b.w	8003324 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b20:	4b96      	ldr	r3, [pc, #600]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 030c 	and.w	r3, r3, #12
 8002b28:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b2a:	4b94      	ldr	r3, [pc, #592]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0310 	and.w	r3, r3, #16
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80e4 	beq.w	8002d0a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d007      	beq.n	8002b58 <HAL_RCC_OscConfig+0x4c>
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	2b0c      	cmp	r3, #12
 8002b4c:	f040 808b 	bne.w	8002c66 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	f040 8087 	bne.w	8002c66 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b58:	4b88      	ldr	r3, [pc, #544]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_RCC_OscConfig+0x64>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e3d9      	b.n	8003324 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a1a      	ldr	r2, [r3, #32]
 8002b74:	4b81      	ldr	r3, [pc, #516]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d004      	beq.n	8002b8a <HAL_RCC_OscConfig+0x7e>
 8002b80:	4b7e      	ldr	r3, [pc, #504]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b88:	e005      	b.n	8002b96 <HAL_RCC_OscConfig+0x8a>
 8002b8a:	4b7c      	ldr	r3, [pc, #496]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d223      	bcs.n	8002be2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 fd8c 	bl	80036bc <RCC_SetFlashLatencyFromMSIRange>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e3ba      	b.n	8003324 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bae:	4b73      	ldr	r3, [pc, #460]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a72      	ldr	r2, [pc, #456]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002bb4:	f043 0308 	orr.w	r3, r3, #8
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	4b70      	ldr	r3, [pc, #448]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	496d      	ldr	r1, [pc, #436]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bcc:	4b6b      	ldr	r3, [pc, #428]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	021b      	lsls	r3, r3, #8
 8002bda:	4968      	ldr	r1, [pc, #416]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	604b      	str	r3, [r1, #4]
 8002be0:	e025      	b.n	8002c2e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002be2:	4b66      	ldr	r3, [pc, #408]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a65      	ldr	r2, [pc, #404]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002be8:	f043 0308 	orr.w	r3, r3, #8
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	4b63      	ldr	r3, [pc, #396]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	4960      	ldr	r1, [pc, #384]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c00:	4b5e      	ldr	r3, [pc, #376]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	021b      	lsls	r3, r3, #8
 8002c0e:	495b      	ldr	r1, [pc, #364]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 fd4c 	bl	80036bc <RCC_SetFlashLatencyFromMSIRange>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e37a      	b.n	8003324 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c2e:	f000 fc81 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 8002c32:	4602      	mov	r2, r0
 8002c34:	4b51      	ldr	r3, [pc, #324]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	091b      	lsrs	r3, r3, #4
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	4950      	ldr	r1, [pc, #320]	; (8002d80 <HAL_RCC_OscConfig+0x274>)
 8002c40:	5ccb      	ldrb	r3, [r1, r3]
 8002c42:	f003 031f 	and.w	r3, r3, #31
 8002c46:	fa22 f303 	lsr.w	r3, r2, r3
 8002c4a:	4a4e      	ldr	r2, [pc, #312]	; (8002d84 <HAL_RCC_OscConfig+0x278>)
 8002c4c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c4e:	4b4e      	ldr	r3, [pc, #312]	; (8002d88 <HAL_RCC_OscConfig+0x27c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff f95c 	bl	8001f10 <HAL_InitTick>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d052      	beq.n	8002d08 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
 8002c64:	e35e      	b.n	8003324 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d032      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c6e:	4b43      	ldr	r3, [pc, #268]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a42      	ldr	r2, [pc, #264]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c7a:	f7ff f999 	bl	8001fb0 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c82:	f7ff f995 	bl	8001fb0 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e347      	b.n	8003324 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c94:	4b39      	ldr	r3, [pc, #228]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ca0:	4b36      	ldr	r3, [pc, #216]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a35      	ldr	r2, [pc, #212]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002ca6:	f043 0308 	orr.w	r3, r3, #8
 8002caa:	6013      	str	r3, [r2, #0]
 8002cac:	4b33      	ldr	r3, [pc, #204]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	4930      	ldr	r1, [pc, #192]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cbe:	4b2f      	ldr	r3, [pc, #188]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	021b      	lsls	r3, r3, #8
 8002ccc:	492b      	ldr	r1, [pc, #172]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	604b      	str	r3, [r1, #4]
 8002cd2:	e01a      	b.n	8002d0a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002cd4:	4b29      	ldr	r3, [pc, #164]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a28      	ldr	r2, [pc, #160]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002cda:	f023 0301 	bic.w	r3, r3, #1
 8002cde:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ce0:	f7ff f966 	bl	8001fb0 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ce8:	f7ff f962 	bl	8001fb0 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e314      	b.n	8003324 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cfa:	4b20      	ldr	r3, [pc, #128]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x1dc>
 8002d06:	e000      	b.n	8002d0a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d073      	beq.n	8002dfe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d005      	beq.n	8002d28 <HAL_RCC_OscConfig+0x21c>
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	2b0c      	cmp	r3, #12
 8002d20:	d10e      	bne.n	8002d40 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d10b      	bne.n	8002d40 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d28:	4b14      	ldr	r3, [pc, #80]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d063      	beq.n	8002dfc <HAL_RCC_OscConfig+0x2f0>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d15f      	bne.n	8002dfc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e2f1      	b.n	8003324 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d48:	d106      	bne.n	8002d58 <HAL_RCC_OscConfig+0x24c>
 8002d4a:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a0b      	ldr	r2, [pc, #44]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	e025      	b.n	8002da4 <HAL_RCC_OscConfig+0x298>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d60:	d114      	bne.n	8002d8c <HAL_RCC_OscConfig+0x280>
 8002d62:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a05      	ldr	r2, [pc, #20]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	4b03      	ldr	r3, [pc, #12]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a02      	ldr	r2, [pc, #8]	; (8002d7c <HAL_RCC_OscConfig+0x270>)
 8002d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	e013      	b.n	8002da4 <HAL_RCC_OscConfig+0x298>
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	080091c8 	.word	0x080091c8
 8002d84:	20000078 	.word	0x20000078
 8002d88:	2000007c 	.word	0x2000007c
 8002d8c:	4ba0      	ldr	r3, [pc, #640]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a9f      	ldr	r2, [pc, #636]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	4b9d      	ldr	r3, [pc, #628]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a9c      	ldr	r2, [pc, #624]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d013      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dac:	f7ff f900 	bl	8001fb0 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db4:	f7ff f8fc 	bl	8001fb0 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b64      	cmp	r3, #100	; 0x64
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e2ae      	b.n	8003324 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dc6:	4b92      	ldr	r3, [pc, #584]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f0      	beq.n	8002db4 <HAL_RCC_OscConfig+0x2a8>
 8002dd2:	e014      	b.n	8002dfe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd4:	f7ff f8ec 	bl	8001fb0 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ddc:	f7ff f8e8 	bl	8001fb0 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b64      	cmp	r3, #100	; 0x64
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e29a      	b.n	8003324 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dee:	4b88      	ldr	r3, [pc, #544]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0x2d0>
 8002dfa:	e000      	b.n	8002dfe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d060      	beq.n	8002ecc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d005      	beq.n	8002e1c <HAL_RCC_OscConfig+0x310>
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	2b0c      	cmp	r3, #12
 8002e14:	d119      	bne.n	8002e4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d116      	bne.n	8002e4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e1c:	4b7c      	ldr	r3, [pc, #496]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <HAL_RCC_OscConfig+0x328>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e277      	b.n	8003324 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e34:	4b76      	ldr	r3, [pc, #472]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	061b      	lsls	r3, r3, #24
 8002e42:	4973      	ldr	r1, [pc, #460]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e48:	e040      	b.n	8002ecc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d023      	beq.n	8002e9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e52:	4b6f      	ldr	r3, [pc, #444]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a6e      	ldr	r2, [pc, #440]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5e:	f7ff f8a7 	bl	8001fb0 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e66:	f7ff f8a3 	bl	8001fb0 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e255      	b.n	8003324 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e78:	4b65      	ldr	r3, [pc, #404]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e84:	4b62      	ldr	r3, [pc, #392]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	061b      	lsls	r3, r3, #24
 8002e92:	495f      	ldr	r1, [pc, #380]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	604b      	str	r3, [r1, #4]
 8002e98:	e018      	b.n	8002ecc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e9a:	4b5d      	ldr	r3, [pc, #372]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a5c      	ldr	r2, [pc, #368]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ea4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea6:	f7ff f883 	bl	8001fb0 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eae:	f7ff f87f 	bl	8001fb0 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e231      	b.n	8003324 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ec0:	4b53      	ldr	r3, [pc, #332]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1f0      	bne.n	8002eae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d03c      	beq.n	8002f52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d01c      	beq.n	8002f1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee0:	4b4b      	ldr	r3, [pc, #300]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee6:	4a4a      	ldr	r2, [pc, #296]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef0:	f7ff f85e 	bl	8001fb0 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef8:	f7ff f85a 	bl	8001fb0 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e20c      	b.n	8003324 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f0a:	4b41      	ldr	r3, [pc, #260]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0ef      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x3ec>
 8002f18:	e01b      	b.n	8002f52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f1a:	4b3d      	ldr	r3, [pc, #244]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f20:	4a3b      	ldr	r2, [pc, #236]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002f22:	f023 0301 	bic.w	r3, r3, #1
 8002f26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2a:	f7ff f841 	bl	8001fb0 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f32:	f7ff f83d 	bl	8001fb0 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e1ef      	b.n	8003324 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f44:	4b32      	ldr	r3, [pc, #200]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1ef      	bne.n	8002f32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 80a6 	beq.w	80030ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f60:	2300      	movs	r3, #0
 8002f62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f64:	4b2a      	ldr	r3, [pc, #168]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10d      	bne.n	8002f8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f70:	4b27      	ldr	r3, [pc, #156]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f74:	4a26      	ldr	r2, [pc, #152]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f7c:	4b24      	ldr	r3, [pc, #144]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f8c:	4b21      	ldr	r3, [pc, #132]	; (8003014 <HAL_RCC_OscConfig+0x508>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d118      	bne.n	8002fca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f98:	4b1e      	ldr	r3, [pc, #120]	; (8003014 <HAL_RCC_OscConfig+0x508>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a1d      	ldr	r2, [pc, #116]	; (8003014 <HAL_RCC_OscConfig+0x508>)
 8002f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fa4:	f7ff f804 	bl	8001fb0 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fac:	f7ff f800 	bl	8001fb0 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e1b2      	b.n	8003324 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fbe:	4b15      	ldr	r3, [pc, #84]	; (8003014 <HAL_RCC_OscConfig+0x508>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d108      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x4d8>
 8002fd2:	4b0f      	ldr	r3, [pc, #60]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd8:	4a0d      	ldr	r2, [pc, #52]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fe2:	e029      	b.n	8003038 <HAL_RCC_OscConfig+0x52c>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b05      	cmp	r3, #5
 8002fea:	d115      	bne.n	8003018 <HAL_RCC_OscConfig+0x50c>
 8002fec:	4b08      	ldr	r3, [pc, #32]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff2:	4a07      	ldr	r2, [pc, #28]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002ff4:	f043 0304 	orr.w	r3, r3, #4
 8002ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ffc:	4b04      	ldr	r3, [pc, #16]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8002ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003002:	4a03      	ldr	r2, [pc, #12]	; (8003010 <HAL_RCC_OscConfig+0x504>)
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800300c:	e014      	b.n	8003038 <HAL_RCC_OscConfig+0x52c>
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000
 8003014:	40007000 	.word	0x40007000
 8003018:	4b9a      	ldr	r3, [pc, #616]	; (8003284 <HAL_RCC_OscConfig+0x778>)
 800301a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301e:	4a99      	ldr	r2, [pc, #612]	; (8003284 <HAL_RCC_OscConfig+0x778>)
 8003020:	f023 0301 	bic.w	r3, r3, #1
 8003024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003028:	4b96      	ldr	r3, [pc, #600]	; (8003284 <HAL_RCC_OscConfig+0x778>)
 800302a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302e:	4a95      	ldr	r2, [pc, #596]	; (8003284 <HAL_RCC_OscConfig+0x778>)
 8003030:	f023 0304 	bic.w	r3, r3, #4
 8003034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d016      	beq.n	800306e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003040:	f7fe ffb6 	bl	8001fb0 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003046:	e00a      	b.n	800305e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003048:	f7fe ffb2 	bl	8001fb0 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	f241 3288 	movw	r2, #5000	; 0x1388
 8003056:	4293      	cmp	r3, r2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e162      	b.n	8003324 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800305e:	4b89      	ldr	r3, [pc, #548]	; (8003284 <HAL_RCC_OscConfig+0x778>)
 8003060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0ed      	beq.n	8003048 <HAL_RCC_OscConfig+0x53c>
 800306c:	e015      	b.n	800309a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306e:	f7fe ff9f 	bl	8001fb0 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003074:	e00a      	b.n	800308c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003076:	f7fe ff9b 	bl	8001fb0 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	f241 3288 	movw	r2, #5000	; 0x1388
 8003084:	4293      	cmp	r3, r2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e14b      	b.n	8003324 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800308c:	4b7d      	ldr	r3, [pc, #500]	; (8003284 <HAL_RCC_OscConfig+0x778>)
 800308e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1ed      	bne.n	8003076 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800309a:	7ffb      	ldrb	r3, [r7, #31]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d105      	bne.n	80030ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a0:	4b78      	ldr	r3, [pc, #480]	; (8003284 <HAL_RCC_OscConfig+0x778>)
 80030a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a4:	4a77      	ldr	r2, [pc, #476]	; (8003284 <HAL_RCC_OscConfig+0x778>)
 80030a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0320 	and.w	r3, r3, #32
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d03c      	beq.n	8003132 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d01c      	beq.n	80030fa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030c0:	4b70      	ldr	r3, [pc, #448]	; (8003284 <HAL_RCC_OscConfig+0x778>)
 80030c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030c6:	4a6f      	ldr	r2, [pc, #444]	; (8003284 <HAL_RCC_OscConfig+0x778>)
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d0:	f7fe ff6e 	bl	8001fb0 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030d8:	f7fe ff6a 	bl	8001fb0 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e11c      	b.n	8003324 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030ea:	4b66      	ldr	r3, [pc, #408]	; (8003284 <HAL_RCC_OscConfig+0x778>)
 80030ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0ef      	beq.n	80030d8 <HAL_RCC_OscConfig+0x5cc>
 80030f8:	e01b      	b.n	8003132 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030fa:	4b62      	ldr	r3, [pc, #392]	; (8003284 <HAL_RCC_OscConfig+0x778>)
 80030fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003100:	4a60      	ldr	r2, [pc, #384]	; (8003284 <HAL_RCC_OscConfig+0x778>)
 8003102:	f023 0301 	bic.w	r3, r3, #1
 8003106:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310a:	f7fe ff51 	bl	8001fb0 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003112:	f7fe ff4d 	bl	8001fb0 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e0ff      	b.n	8003324 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003124:	4b57      	ldr	r3, [pc, #348]	; (8003284 <HAL_RCC_OscConfig+0x778>)
 8003126:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1ef      	bne.n	8003112 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 80f3 	beq.w	8003322 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	2b02      	cmp	r3, #2
 8003142:	f040 80c9 	bne.w	80032d8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003146:	4b4f      	ldr	r3, [pc, #316]	; (8003284 <HAL_RCC_OscConfig+0x778>)
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f003 0203 	and.w	r2, r3, #3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003156:	429a      	cmp	r2, r3
 8003158:	d12c      	bne.n	80031b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003164:	3b01      	subs	r3, #1
 8003166:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003168:	429a      	cmp	r2, r3
 800316a:	d123      	bne.n	80031b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003176:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003178:	429a      	cmp	r2, r3
 800317a:	d11b      	bne.n	80031b4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003186:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003188:	429a      	cmp	r2, r3
 800318a:	d113      	bne.n	80031b4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003196:	085b      	lsrs	r3, r3, #1
 8003198:	3b01      	subs	r3, #1
 800319a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800319c:	429a      	cmp	r2, r3
 800319e:	d109      	bne.n	80031b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	085b      	lsrs	r3, r3, #1
 80031ac:	3b01      	subs	r3, #1
 80031ae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d06b      	beq.n	800328c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	2b0c      	cmp	r3, #12
 80031b8:	d062      	beq.n	8003280 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80031ba:	4b32      	ldr	r3, [pc, #200]	; (8003284 <HAL_RCC_OscConfig+0x778>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e0ac      	b.n	8003324 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80031ca:	4b2e      	ldr	r3, [pc, #184]	; (8003284 <HAL_RCC_OscConfig+0x778>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a2d      	ldr	r2, [pc, #180]	; (8003284 <HAL_RCC_OscConfig+0x778>)
 80031d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031d4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031d6:	f7fe feeb 	bl	8001fb0 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031de:	f7fe fee7 	bl	8001fb0 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e099      	b.n	8003324 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031f0:	4b24      	ldr	r3, [pc, #144]	; (8003284 <HAL_RCC_OscConfig+0x778>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1f0      	bne.n	80031de <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031fc:	4b21      	ldr	r3, [pc, #132]	; (8003284 <HAL_RCC_OscConfig+0x778>)
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	4b21      	ldr	r3, [pc, #132]	; (8003288 <HAL_RCC_OscConfig+0x77c>)
 8003202:	4013      	ands	r3, r2
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800320c:	3a01      	subs	r2, #1
 800320e:	0112      	lsls	r2, r2, #4
 8003210:	4311      	orrs	r1, r2
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003216:	0212      	lsls	r2, r2, #8
 8003218:	4311      	orrs	r1, r2
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800321e:	0852      	lsrs	r2, r2, #1
 8003220:	3a01      	subs	r2, #1
 8003222:	0552      	lsls	r2, r2, #21
 8003224:	4311      	orrs	r1, r2
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800322a:	0852      	lsrs	r2, r2, #1
 800322c:	3a01      	subs	r2, #1
 800322e:	0652      	lsls	r2, r2, #25
 8003230:	4311      	orrs	r1, r2
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003236:	06d2      	lsls	r2, r2, #27
 8003238:	430a      	orrs	r2, r1
 800323a:	4912      	ldr	r1, [pc, #72]	; (8003284 <HAL_RCC_OscConfig+0x778>)
 800323c:	4313      	orrs	r3, r2
 800323e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003240:	4b10      	ldr	r3, [pc, #64]	; (8003284 <HAL_RCC_OscConfig+0x778>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a0f      	ldr	r2, [pc, #60]	; (8003284 <HAL_RCC_OscConfig+0x778>)
 8003246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800324a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800324c:	4b0d      	ldr	r3, [pc, #52]	; (8003284 <HAL_RCC_OscConfig+0x778>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	4a0c      	ldr	r2, [pc, #48]	; (8003284 <HAL_RCC_OscConfig+0x778>)
 8003252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003256:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003258:	f7fe feaa 	bl	8001fb0 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003260:	f7fe fea6 	bl	8001fb0 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e058      	b.n	8003324 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003272:	4b04      	ldr	r3, [pc, #16]	; (8003284 <HAL_RCC_OscConfig+0x778>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800327e:	e050      	b.n	8003322 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e04f      	b.n	8003324 <HAL_RCC_OscConfig+0x818>
 8003284:	40021000 	.word	0x40021000
 8003288:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800328c:	4b27      	ldr	r3, [pc, #156]	; (800332c <HAL_RCC_OscConfig+0x820>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d144      	bne.n	8003322 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003298:	4b24      	ldr	r3, [pc, #144]	; (800332c <HAL_RCC_OscConfig+0x820>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a23      	ldr	r2, [pc, #140]	; (800332c <HAL_RCC_OscConfig+0x820>)
 800329e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032a4:	4b21      	ldr	r3, [pc, #132]	; (800332c <HAL_RCC_OscConfig+0x820>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	4a20      	ldr	r2, [pc, #128]	; (800332c <HAL_RCC_OscConfig+0x820>)
 80032aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032b0:	f7fe fe7e 	bl	8001fb0 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b8:	f7fe fe7a 	bl	8001fb0 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e02c      	b.n	8003324 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ca:	4b18      	ldr	r3, [pc, #96]	; (800332c <HAL_RCC_OscConfig+0x820>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0f0      	beq.n	80032b8 <HAL_RCC_OscConfig+0x7ac>
 80032d6:	e024      	b.n	8003322 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	2b0c      	cmp	r3, #12
 80032dc:	d01f      	beq.n	800331e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032de:	4b13      	ldr	r3, [pc, #76]	; (800332c <HAL_RCC_OscConfig+0x820>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a12      	ldr	r2, [pc, #72]	; (800332c <HAL_RCC_OscConfig+0x820>)
 80032e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ea:	f7fe fe61 	bl	8001fb0 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f2:	f7fe fe5d 	bl	8001fb0 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e00f      	b.n	8003324 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003304:	4b09      	ldr	r3, [pc, #36]	; (800332c <HAL_RCC_OscConfig+0x820>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f0      	bne.n	80032f2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003310:	4b06      	ldr	r3, [pc, #24]	; (800332c <HAL_RCC_OscConfig+0x820>)
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	4905      	ldr	r1, [pc, #20]	; (800332c <HAL_RCC_OscConfig+0x820>)
 8003316:	4b06      	ldr	r3, [pc, #24]	; (8003330 <HAL_RCC_OscConfig+0x824>)
 8003318:	4013      	ands	r3, r2
 800331a:	60cb      	str	r3, [r1, #12]
 800331c:	e001      	b.n	8003322 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3720      	adds	r7, #32
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40021000 	.word	0x40021000
 8003330:	feeefffc 	.word	0xfeeefffc

08003334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0e7      	b.n	8003518 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003348:	4b75      	ldr	r3, [pc, #468]	; (8003520 <HAL_RCC_ClockConfig+0x1ec>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d910      	bls.n	8003378 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003356:	4b72      	ldr	r3, [pc, #456]	; (8003520 <HAL_RCC_ClockConfig+0x1ec>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f023 0207 	bic.w	r2, r3, #7
 800335e:	4970      	ldr	r1, [pc, #448]	; (8003520 <HAL_RCC_ClockConfig+0x1ec>)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	4313      	orrs	r3, r2
 8003364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003366:	4b6e      	ldr	r3, [pc, #440]	; (8003520 <HAL_RCC_ClockConfig+0x1ec>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d001      	beq.n	8003378 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e0cf      	b.n	8003518 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d010      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	4b66      	ldr	r3, [pc, #408]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003390:	429a      	cmp	r2, r3
 8003392:	d908      	bls.n	80033a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003394:	4b63      	ldr	r3, [pc, #396]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	4960      	ldr	r1, [pc, #384]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d04c      	beq.n	800344c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b03      	cmp	r3, #3
 80033b8:	d107      	bne.n	80033ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ba:	4b5a      	ldr	r3, [pc, #360]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d121      	bne.n	800340a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e0a6      	b.n	8003518 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d107      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033d2:	4b54      	ldr	r3, [pc, #336]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d115      	bne.n	800340a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e09a      	b.n	8003518 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d107      	bne.n	80033fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033ea:	4b4e      	ldr	r3, [pc, #312]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d109      	bne.n	800340a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e08e      	b.n	8003518 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033fa:	4b4a      	ldr	r3, [pc, #296]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e086      	b.n	8003518 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800340a:	4b46      	ldr	r3, [pc, #280]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f023 0203 	bic.w	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	4943      	ldr	r1, [pc, #268]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 8003418:	4313      	orrs	r3, r2
 800341a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800341c:	f7fe fdc8 	bl	8001fb0 <HAL_GetTick>
 8003420:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003422:	e00a      	b.n	800343a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003424:	f7fe fdc4 	bl	8001fb0 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e06e      	b.n	8003518 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343a:	4b3a      	ldr	r3, [pc, #232]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 020c 	and.w	r2, r3, #12
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	429a      	cmp	r2, r3
 800344a:	d1eb      	bne.n	8003424 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d010      	beq.n	800347a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	4b31      	ldr	r3, [pc, #196]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003464:	429a      	cmp	r2, r3
 8003466:	d208      	bcs.n	800347a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003468:	4b2e      	ldr	r3, [pc, #184]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	492b      	ldr	r1, [pc, #172]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800347a:	4b29      	ldr	r3, [pc, #164]	; (8003520 <HAL_RCC_ClockConfig+0x1ec>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d210      	bcs.n	80034aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003488:	4b25      	ldr	r3, [pc, #148]	; (8003520 <HAL_RCC_ClockConfig+0x1ec>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f023 0207 	bic.w	r2, r3, #7
 8003490:	4923      	ldr	r1, [pc, #140]	; (8003520 <HAL_RCC_ClockConfig+0x1ec>)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	4313      	orrs	r3, r2
 8003496:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003498:	4b21      	ldr	r3, [pc, #132]	; (8003520 <HAL_RCC_ClockConfig+0x1ec>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d001      	beq.n	80034aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e036      	b.n	8003518 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d008      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034b6:	4b1b      	ldr	r3, [pc, #108]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	4918      	ldr	r1, [pc, #96]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d009      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034d4:	4b13      	ldr	r3, [pc, #76]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	4910      	ldr	r1, [pc, #64]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034e8:	f000 f824 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 80034ec:	4602      	mov	r2, r0
 80034ee:	4b0d      	ldr	r3, [pc, #52]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	091b      	lsrs	r3, r3, #4
 80034f4:	f003 030f 	and.w	r3, r3, #15
 80034f8:	490b      	ldr	r1, [pc, #44]	; (8003528 <HAL_RCC_ClockConfig+0x1f4>)
 80034fa:	5ccb      	ldrb	r3, [r1, r3]
 80034fc:	f003 031f 	and.w	r3, r3, #31
 8003500:	fa22 f303 	lsr.w	r3, r2, r3
 8003504:	4a09      	ldr	r2, [pc, #36]	; (800352c <HAL_RCC_ClockConfig+0x1f8>)
 8003506:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003508:	4b09      	ldr	r3, [pc, #36]	; (8003530 <HAL_RCC_ClockConfig+0x1fc>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f7fe fcff 	bl	8001f10 <HAL_InitTick>
 8003512:	4603      	mov	r3, r0
 8003514:	72fb      	strb	r3, [r7, #11]

  return status;
 8003516:	7afb      	ldrb	r3, [r7, #11]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40022000 	.word	0x40022000
 8003524:	40021000 	.word	0x40021000
 8003528:	080091c8 	.word	0x080091c8
 800352c:	20000078 	.word	0x20000078
 8003530:	2000007c 	.word	0x2000007c

08003534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003534:	b480      	push	{r7}
 8003536:	b089      	sub	sp, #36	; 0x24
 8003538:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
 800353e:	2300      	movs	r3, #0
 8003540:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003542:	4b3e      	ldr	r3, [pc, #248]	; (800363c <HAL_RCC_GetSysClockFreq+0x108>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800354c:	4b3b      	ldr	r3, [pc, #236]	; (800363c <HAL_RCC_GetSysClockFreq+0x108>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 0303 	and.w	r3, r3, #3
 8003554:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_RCC_GetSysClockFreq+0x34>
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	2b0c      	cmp	r3, #12
 8003560:	d121      	bne.n	80035a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d11e      	bne.n	80035a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003568:	4b34      	ldr	r3, [pc, #208]	; (800363c <HAL_RCC_GetSysClockFreq+0x108>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d107      	bne.n	8003584 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003574:	4b31      	ldr	r3, [pc, #196]	; (800363c <HAL_RCC_GetSysClockFreq+0x108>)
 8003576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800357a:	0a1b      	lsrs	r3, r3, #8
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	61fb      	str	r3, [r7, #28]
 8003582:	e005      	b.n	8003590 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003584:	4b2d      	ldr	r3, [pc, #180]	; (800363c <HAL_RCC_GetSysClockFreq+0x108>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	091b      	lsrs	r3, r3, #4
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003590:	4a2b      	ldr	r2, [pc, #172]	; (8003640 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003598:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10d      	bne.n	80035bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035a4:	e00a      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d102      	bne.n	80035b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035ac:	4b25      	ldr	r3, [pc, #148]	; (8003644 <HAL_RCC_GetSysClockFreq+0x110>)
 80035ae:	61bb      	str	r3, [r7, #24]
 80035b0:	e004      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d101      	bne.n	80035bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035b8:	4b23      	ldr	r3, [pc, #140]	; (8003648 <HAL_RCC_GetSysClockFreq+0x114>)
 80035ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	2b0c      	cmp	r3, #12
 80035c0:	d134      	bne.n	800362c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035c2:	4b1e      	ldr	r3, [pc, #120]	; (800363c <HAL_RCC_GetSysClockFreq+0x108>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d003      	beq.n	80035da <HAL_RCC_GetSysClockFreq+0xa6>
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2b03      	cmp	r3, #3
 80035d6:	d003      	beq.n	80035e0 <HAL_RCC_GetSysClockFreq+0xac>
 80035d8:	e005      	b.n	80035e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80035da:	4b1a      	ldr	r3, [pc, #104]	; (8003644 <HAL_RCC_GetSysClockFreq+0x110>)
 80035dc:	617b      	str	r3, [r7, #20]
      break;
 80035de:	e005      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80035e0:	4b19      	ldr	r3, [pc, #100]	; (8003648 <HAL_RCC_GetSysClockFreq+0x114>)
 80035e2:	617b      	str	r3, [r7, #20]
      break;
 80035e4:	e002      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	617b      	str	r3, [r7, #20]
      break;
 80035ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035ec:	4b13      	ldr	r3, [pc, #76]	; (800363c <HAL_RCC_GetSysClockFreq+0x108>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	091b      	lsrs	r3, r3, #4
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	3301      	adds	r3, #1
 80035f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80035fa:	4b10      	ldr	r3, [pc, #64]	; (800363c <HAL_RCC_GetSysClockFreq+0x108>)
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	0a1b      	lsrs	r3, r3, #8
 8003600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	fb03 f202 	mul.w	r2, r3, r2
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003610:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003612:	4b0a      	ldr	r3, [pc, #40]	; (800363c <HAL_RCC_GetSysClockFreq+0x108>)
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	0e5b      	lsrs	r3, r3, #25
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	3301      	adds	r3, #1
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	fbb2 f3f3 	udiv	r3, r2, r3
 800362a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800362c:	69bb      	ldr	r3, [r7, #24]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3724      	adds	r7, #36	; 0x24
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	40021000 	.word	0x40021000
 8003640:	080091e0 	.word	0x080091e0
 8003644:	00f42400 	.word	0x00f42400
 8003648:	007a1200 	.word	0x007a1200

0800364c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003650:	4b03      	ldr	r3, [pc, #12]	; (8003660 <HAL_RCC_GetHCLKFreq+0x14>)
 8003652:	681b      	ldr	r3, [r3, #0]
}
 8003654:	4618      	mov	r0, r3
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	20000078 	.word	0x20000078

08003664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003668:	f7ff fff0 	bl	800364c <HAL_RCC_GetHCLKFreq>
 800366c:	4602      	mov	r2, r0
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	0a1b      	lsrs	r3, r3, #8
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	4904      	ldr	r1, [pc, #16]	; (800368c <HAL_RCC_GetPCLK1Freq+0x28>)
 800367a:	5ccb      	ldrb	r3, [r1, r3]
 800367c:	f003 031f 	and.w	r3, r3, #31
 8003680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003684:	4618      	mov	r0, r3
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40021000 	.word	0x40021000
 800368c:	080091d8 	.word	0x080091d8

08003690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003694:	f7ff ffda 	bl	800364c <HAL_RCC_GetHCLKFreq>
 8003698:	4602      	mov	r2, r0
 800369a:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	0adb      	lsrs	r3, r3, #11
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	4904      	ldr	r1, [pc, #16]	; (80036b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036a6:	5ccb      	ldrb	r3, [r1, r3]
 80036a8:	f003 031f 	and.w	r3, r3, #31
 80036ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40021000 	.word	0x40021000
 80036b8:	080091d8 	.word	0x080091d8

080036bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036c4:	2300      	movs	r3, #0
 80036c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036c8:	4b2a      	ldr	r3, [pc, #168]	; (8003774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80036d4:	f7ff f9b6 	bl	8002a44 <HAL_PWREx_GetVoltageRange>
 80036d8:	6178      	str	r0, [r7, #20]
 80036da:	e014      	b.n	8003706 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80036dc:	4b25      	ldr	r3, [pc, #148]	; (8003774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e0:	4a24      	ldr	r2, [pc, #144]	; (8003774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e6:	6593      	str	r3, [r2, #88]	; 0x58
 80036e8:	4b22      	ldr	r3, [pc, #136]	; (8003774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80036f4:	f7ff f9a6 	bl	8002a44 <HAL_PWREx_GetVoltageRange>
 80036f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80036fa:	4b1e      	ldr	r3, [pc, #120]	; (8003774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fe:	4a1d      	ldr	r2, [pc, #116]	; (8003774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003704:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800370c:	d10b      	bne.n	8003726 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b80      	cmp	r3, #128	; 0x80
 8003712:	d919      	bls.n	8003748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2ba0      	cmp	r3, #160	; 0xa0
 8003718:	d902      	bls.n	8003720 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800371a:	2302      	movs	r3, #2
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	e013      	b.n	8003748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003720:	2301      	movs	r3, #1
 8003722:	613b      	str	r3, [r7, #16]
 8003724:	e010      	b.n	8003748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b80      	cmp	r3, #128	; 0x80
 800372a:	d902      	bls.n	8003732 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800372c:	2303      	movs	r3, #3
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	e00a      	b.n	8003748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b80      	cmp	r3, #128	; 0x80
 8003736:	d102      	bne.n	800373e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003738:	2302      	movs	r3, #2
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	e004      	b.n	8003748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b70      	cmp	r3, #112	; 0x70
 8003742:	d101      	bne.n	8003748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003744:	2301      	movs	r3, #1
 8003746:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f023 0207 	bic.w	r2, r3, #7
 8003750:	4909      	ldr	r1, [pc, #36]	; (8003778 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	4313      	orrs	r3, r2
 8003756:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003758:	4b07      	ldr	r3, [pc, #28]	; (8003778 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	429a      	cmp	r2, r3
 8003764:	d001      	beq.n	800376a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40021000 	.word	0x40021000
 8003778:	40022000 	.word	0x40022000

0800377c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003784:	2300      	movs	r3, #0
 8003786:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003788:	2300      	movs	r3, #0
 800378a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003794:	2b00      	cmp	r3, #0
 8003796:	d031      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037a0:	d01a      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80037a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037a6:	d814      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d009      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037b0:	d10f      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80037b2:	4b5d      	ldr	r3, [pc, #372]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	4a5c      	ldr	r2, [pc, #368]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037bc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037be:	e00c      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3304      	adds	r3, #4
 80037c4:	2100      	movs	r1, #0
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 f9de 	bl	8003b88 <RCCEx_PLLSAI1_Config>
 80037cc:	4603      	mov	r3, r0
 80037ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037d0:	e003      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	74fb      	strb	r3, [r7, #19]
      break;
 80037d6:	e000      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80037d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037da:	7cfb      	ldrb	r3, [r7, #19]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10b      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037e0:	4b51      	ldr	r3, [pc, #324]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ee:	494e      	ldr	r1, [pc, #312]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80037f6:	e001      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f8:	7cfb      	ldrb	r3, [r7, #19]
 80037fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 809e 	beq.w	8003946 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800380a:	2300      	movs	r3, #0
 800380c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800380e:	4b46      	ldr	r3, [pc, #280]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800381e:	2300      	movs	r3, #0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00d      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003824:	4b40      	ldr	r3, [pc, #256]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003828:	4a3f      	ldr	r2, [pc, #252]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800382a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800382e:	6593      	str	r3, [r2, #88]	; 0x58
 8003830:	4b3d      	ldr	r3, [pc, #244]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003838:	60bb      	str	r3, [r7, #8]
 800383a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800383c:	2301      	movs	r3, #1
 800383e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003840:	4b3a      	ldr	r3, [pc, #232]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a39      	ldr	r2, [pc, #228]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800384a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800384c:	f7fe fbb0 	bl	8001fb0 <HAL_GetTick>
 8003850:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003852:	e009      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003854:	f7fe fbac 	bl	8001fb0 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d902      	bls.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	74fb      	strb	r3, [r7, #19]
        break;
 8003866:	e005      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003868:	4b30      	ldr	r3, [pc, #192]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0ef      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003874:	7cfb      	ldrb	r3, [r7, #19]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d15a      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800387a:	4b2b      	ldr	r3, [pc, #172]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800387c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003884:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01e      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	429a      	cmp	r2, r3
 8003894:	d019      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003896:	4b24      	ldr	r3, [pc, #144]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038a2:	4b21      	ldr	r3, [pc, #132]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a8:	4a1f      	ldr	r2, [pc, #124]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038b2:	4b1d      	ldr	r3, [pc, #116]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b8:	4a1b      	ldr	r2, [pc, #108]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038c2:	4a19      	ldr	r2, [pc, #100]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d016      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fe fb6c 	bl	8001fb0 <HAL_GetTick>
 80038d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038da:	e00b      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038dc:	f7fe fb68 	bl	8001fb0 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d902      	bls.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	74fb      	strb	r3, [r7, #19]
            break;
 80038f2:	e006      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038f4:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0ec      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003902:	7cfb      	ldrb	r3, [r7, #19]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10b      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003908:	4b07      	ldr	r3, [pc, #28]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800390a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003916:	4904      	ldr	r1, [pc, #16]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800391e:	e009      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003920:	7cfb      	ldrb	r3, [r7, #19]
 8003922:	74bb      	strb	r3, [r7, #18]
 8003924:	e006      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003926:	bf00      	nop
 8003928:	40021000 	.word	0x40021000
 800392c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003930:	7cfb      	ldrb	r3, [r7, #19]
 8003932:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003934:	7c7b      	ldrb	r3, [r7, #17]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d105      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800393a:	4b8a      	ldr	r3, [pc, #552]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800393c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393e:	4a89      	ldr	r2, [pc, #548]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003944:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003952:	4b84      	ldr	r3, [pc, #528]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003958:	f023 0203 	bic.w	r2, r3, #3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	4980      	ldr	r1, [pc, #512]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003962:	4313      	orrs	r3, r2
 8003964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00a      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003974:	4b7b      	ldr	r3, [pc, #492]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397a:	f023 020c 	bic.w	r2, r3, #12
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	4978      	ldr	r1, [pc, #480]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003984:	4313      	orrs	r3, r2
 8003986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0320 	and.w	r3, r3, #32
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00a      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003996:	4b73      	ldr	r3, [pc, #460]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a4:	496f      	ldr	r1, [pc, #444]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00a      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039b8:	4b6a      	ldr	r3, [pc, #424]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039be:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c6:	4967      	ldr	r1, [pc, #412]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00a      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039da:	4b62      	ldr	r3, [pc, #392]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e8:	495e      	ldr	r1, [pc, #376]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00a      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039fc:	4b59      	ldr	r3, [pc, #356]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0a:	4956      	ldr	r1, [pc, #344]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00a      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a1e:	4b51      	ldr	r3, [pc, #324]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2c:	494d      	ldr	r1, [pc, #308]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d028      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a40:	4b48      	ldr	r3, [pc, #288]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	4945      	ldr	r1, [pc, #276]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a5e:	d106      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a60:	4b40      	ldr	r3, [pc, #256]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	4a3f      	ldr	r2, [pc, #252]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a6a:	60d3      	str	r3, [r2, #12]
 8003a6c:	e011      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a76:	d10c      	bne.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 f882 	bl	8003b88 <RCCEx_PLLSAI1_Config>
 8003a84:	4603      	mov	r3, r0
 8003a86:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a88:	7cfb      	ldrb	r3, [r7, #19]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003a8e:	7cfb      	ldrb	r3, [r7, #19]
 8003a90:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d028      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a9e:	4b31      	ldr	r3, [pc, #196]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aac:	492d      	ldr	r1, [pc, #180]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003abc:	d106      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003abe:	4b29      	ldr	r3, [pc, #164]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	4a28      	ldr	r2, [pc, #160]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ac4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ac8:	60d3      	str	r3, [r2, #12]
 8003aca:	e011      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ad4:	d10c      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	3304      	adds	r3, #4
 8003ada:	2101      	movs	r1, #1
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 f853 	bl	8003b88 <RCCEx_PLLSAI1_Config>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ae6:	7cfb      	ldrb	r3, [r7, #19]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003aec:	7cfb      	ldrb	r3, [r7, #19]
 8003aee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d01c      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003afc:	4b19      	ldr	r3, [pc, #100]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b0a:	4916      	ldr	r1, [pc, #88]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b1a:	d10c      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3304      	adds	r3, #4
 8003b20:	2102      	movs	r1, #2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 f830 	bl	8003b88 <RCCEx_PLLSAI1_Config>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b2c:	7cfb      	ldrb	r3, [r7, #19]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003b32:	7cfb      	ldrb	r3, [r7, #19]
 8003b34:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00a      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b42:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b48:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b50:	4904      	ldr	r1, [pc, #16]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b58:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	40021000 	.word	0x40021000

08003b68 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003b6c:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a04      	ldr	r2, [pc, #16]	; (8003b84 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003b72:	f043 0304 	orr.w	r3, r3, #4
 8003b76:	6013      	str	r3, [r2, #0]
}
 8003b78:	bf00      	nop
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000

08003b88 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b96:	4b74      	ldr	r3, [pc, #464]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d018      	beq.n	8003bd4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ba2:	4b71      	ldr	r3, [pc, #452]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f003 0203 	and.w	r2, r3, #3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d10d      	bne.n	8003bce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
       ||
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d009      	beq.n	8003bce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003bba:	4b6b      	ldr	r3, [pc, #428]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	091b      	lsrs	r3, r3, #4
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	1c5a      	adds	r2, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
       ||
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d047      	beq.n	8003c5e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	73fb      	strb	r3, [r7, #15]
 8003bd2:	e044      	b.n	8003c5e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	d018      	beq.n	8003c0e <RCCEx_PLLSAI1_Config+0x86>
 8003bdc:	2b03      	cmp	r3, #3
 8003bde:	d825      	bhi.n	8003c2c <RCCEx_PLLSAI1_Config+0xa4>
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d002      	beq.n	8003bea <RCCEx_PLLSAI1_Config+0x62>
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d009      	beq.n	8003bfc <RCCEx_PLLSAI1_Config+0x74>
 8003be8:	e020      	b.n	8003c2c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bea:	4b5f      	ldr	r3, [pc, #380]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d11d      	bne.n	8003c32 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bfa:	e01a      	b.n	8003c32 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bfc:	4b5a      	ldr	r3, [pc, #360]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d116      	bne.n	8003c36 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c0c:	e013      	b.n	8003c36 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c0e:	4b56      	ldr	r3, [pc, #344]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10f      	bne.n	8003c3a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c1a:	4b53      	ldr	r3, [pc, #332]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d109      	bne.n	8003c3a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c2a:	e006      	b.n	8003c3a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c30:	e004      	b.n	8003c3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c32:	bf00      	nop
 8003c34:	e002      	b.n	8003c3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c36:	bf00      	nop
 8003c38:	e000      	b.n	8003c3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10d      	bne.n	8003c5e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c42:	4b49      	ldr	r3, [pc, #292]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6819      	ldr	r1, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	430b      	orrs	r3, r1
 8003c58:	4943      	ldr	r1, [pc, #268]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d17c      	bne.n	8003d5e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c64:	4b40      	ldr	r3, [pc, #256]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a3f      	ldr	r2, [pc, #252]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c70:	f7fe f99e 	bl	8001fb0 <HAL_GetTick>
 8003c74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c76:	e009      	b.n	8003c8c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c78:	f7fe f99a 	bl	8001fb0 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d902      	bls.n	8003c8c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	73fb      	strb	r3, [r7, #15]
        break;
 8003c8a:	e005      	b.n	8003c98 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c8c:	4b36      	ldr	r3, [pc, #216]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1ef      	bne.n	8003c78 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d15f      	bne.n	8003d5e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d110      	bne.n	8003cc6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ca4:	4b30      	ldr	r3, [pc, #192]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003cac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6892      	ldr	r2, [r2, #8]
 8003cb4:	0211      	lsls	r1, r2, #8
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	68d2      	ldr	r2, [r2, #12]
 8003cba:	06d2      	lsls	r2, r2, #27
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	492a      	ldr	r1, [pc, #168]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	610b      	str	r3, [r1, #16]
 8003cc4:	e027      	b.n	8003d16 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d112      	bne.n	8003cf2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ccc:	4b26      	ldr	r3, [pc, #152]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003cd4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6892      	ldr	r2, [r2, #8]
 8003cdc:	0211      	lsls	r1, r2, #8
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6912      	ldr	r2, [r2, #16]
 8003ce2:	0852      	lsrs	r2, r2, #1
 8003ce4:	3a01      	subs	r2, #1
 8003ce6:	0552      	lsls	r2, r2, #21
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	491f      	ldr	r1, [pc, #124]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	610b      	str	r3, [r1, #16]
 8003cf0:	e011      	b.n	8003d16 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cf2:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003cfa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6892      	ldr	r2, [r2, #8]
 8003d02:	0211      	lsls	r1, r2, #8
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6952      	ldr	r2, [r2, #20]
 8003d08:	0852      	lsrs	r2, r2, #1
 8003d0a:	3a01      	subs	r2, #1
 8003d0c:	0652      	lsls	r2, r2, #25
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	4915      	ldr	r1, [pc, #84]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d16:	4b14      	ldr	r3, [pc, #80]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a13      	ldr	r2, [pc, #76]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d20:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d22:	f7fe f945 	bl	8001fb0 <HAL_GetTick>
 8003d26:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d28:	e009      	b.n	8003d3e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d2a:	f7fe f941 	bl	8001fb0 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d902      	bls.n	8003d3e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	73fb      	strb	r3, [r7, #15]
          break;
 8003d3c:	e005      	b.n	8003d4a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d3e:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0ef      	beq.n	8003d2a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d106      	bne.n	8003d5e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d50:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	4903      	ldr	r1, [pc, #12]	; (8003d68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40021000 	.word	0x40021000

08003d6c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d06c      	beq.n	8003e58 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d106      	bne.n	8003d98 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7fd fe26 	bl	80019e4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	22ca      	movs	r2, #202	; 0xca
 8003da6:	625a      	str	r2, [r3, #36]	; 0x24
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2253      	movs	r2, #83	; 0x53
 8003dae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f87c 	bl	8003eae <RTC_EnterInitMode>
 8003db6:	4603      	mov	r3, r0
 8003db8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d14b      	bne.n	8003e58 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6812      	ldr	r2, [r2, #0]
 8003dca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003dce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dd2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6899      	ldr	r1, [r3, #8]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	68d2      	ldr	r2, [r2, #12]
 8003dfa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6919      	ldr	r1, [r3, #16]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	041a      	lsls	r2, r3, #16
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f87f 	bl	8003f14 <RTC_ExitInitMode>
 8003e16:	4603      	mov	r3, r0
 8003e18:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d11b      	bne.n	8003e58 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0203 	bic.w	r2, r2, #3
 8003e2e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69da      	ldr	r2, [r3, #28]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	22ff      	movs	r2, #255	; 0xff
 8003e4e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b084      	sub	sp, #16
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e78:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003e7a:	f7fe f899 	bl	8001fb0 <HAL_GetTick>
 8003e7e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003e80:	e009      	b.n	8003e96 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003e82:	f7fe f895 	bl	8001fb0 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e90:	d901      	bls.n	8003e96 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e007      	b.n	8003ea6 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f003 0320 	and.w	r3, r3, #32
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0ee      	beq.n	8003e82 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d120      	bne.n	8003f0a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003ed2:	f7fe f86d 	bl	8001fb0 <HAL_GetTick>
 8003ed6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003ed8:	e00d      	b.n	8003ef6 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003eda:	f7fe f869 	bl	8001fb0 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ee8:	d905      	bls.n	8003ef6 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d102      	bne.n	8003f0a <RTC_EnterInitMode+0x5c>
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	d1e7      	bne.n	8003eda <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003f20:	4b1a      	ldr	r3, [pc, #104]	; (8003f8c <RTC_ExitInitMode+0x78>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	4a19      	ldr	r2, [pc, #100]	; (8003f8c <RTC_ExitInitMode+0x78>)
 8003f26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f2a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003f2c:	4b17      	ldr	r3, [pc, #92]	; (8003f8c <RTC_ExitInitMode+0x78>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 0320 	and.w	r3, r3, #32
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10c      	bne.n	8003f52 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff ff92 	bl	8003e62 <HAL_RTC_WaitForSynchro>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d01e      	beq.n	8003f82 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2203      	movs	r2, #3
 8003f48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	73fb      	strb	r3, [r7, #15]
 8003f50:	e017      	b.n	8003f82 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003f52:	4b0e      	ldr	r3, [pc, #56]	; (8003f8c <RTC_ExitInitMode+0x78>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	4a0d      	ldr	r2, [pc, #52]	; (8003f8c <RTC_ExitInitMode+0x78>)
 8003f58:	f023 0320 	bic.w	r3, r3, #32
 8003f5c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7ff ff7f 	bl	8003e62 <HAL_RTC_WaitForSynchro>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2203      	movs	r2, #3
 8003f6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003f76:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <RTC_ExitInitMode+0x78>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	4a04      	ldr	r2, [pc, #16]	; (8003f8c <RTC_ExitInitMode+0x78>)
 8003f7c:	f043 0320 	orr.w	r3, r3, #32
 8003f80:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40002800 	.word	0x40002800

08003f90 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003f98:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8003f9a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003f9e:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00b      	beq.n	8003fc6 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003fbe:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f80b 	bl	8003fdc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8003fce:	bf00      	nop
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40010400 	.word	0x40010400

08003fdc <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e049      	b.n	8004096 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d106      	bne.n	800401c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7fd fd1c 	bl	8001a54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3304      	adds	r3, #4
 800402c:	4619      	mov	r1, r3
 800402e:	4610      	mov	r0, r2
 8004030:	f000 fa00 	bl	8004434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
	...

080040a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d001      	beq.n	80040b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e03b      	b.n	8004130 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2202      	movs	r2, #2
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a19      	ldr	r2, [pc, #100]	; (800413c <HAL_TIM_Base_Start_IT+0x9c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d009      	beq.n	80040ee <HAL_TIM_Base_Start_IT+0x4e>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e2:	d004      	beq.n	80040ee <HAL_TIM_Base_Start_IT+0x4e>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a15      	ldr	r2, [pc, #84]	; (8004140 <HAL_TIM_Base_Start_IT+0xa0>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d115      	bne.n	800411a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	4b13      	ldr	r3, [pc, #76]	; (8004144 <HAL_TIM_Base_Start_IT+0xa4>)
 80040f6:	4013      	ands	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b06      	cmp	r3, #6
 80040fe:	d015      	beq.n	800412c <HAL_TIM_Base_Start_IT+0x8c>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004106:	d011      	beq.n	800412c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004118:	e008      	b.n	800412c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f042 0201 	orr.w	r2, r2, #1
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	e000      	b.n	800412e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800412c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	40012c00 	.word	0x40012c00
 8004140:	40014000 	.word	0x40014000
 8004144:	00010007 	.word	0x00010007

08004148 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0201 	bic.w	r2, r2, #1
 800415e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6a1a      	ldr	r2, [r3, #32]
 8004166:	f241 1311 	movw	r3, #4369	; 0x1111
 800416a:	4013      	ands	r3, r2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10f      	bne.n	8004190 <HAL_TIM_Base_Stop_IT+0x48>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6a1a      	ldr	r2, [r3, #32]
 8004176:	f240 4344 	movw	r3, #1092	; 0x444
 800417a:	4013      	ands	r3, r2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d107      	bne.n	8004190 <HAL_TIM_Base_Stop_IT+0x48>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0201 	bic.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b082      	sub	sp, #8
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d122      	bne.n	8004202 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d11b      	bne.n	8004202 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f06f 0202 	mvn.w	r2, #2
 80041d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	f003 0303 	and.w	r3, r3, #3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d003      	beq.n	80041f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f905 	bl	80043f8 <HAL_TIM_IC_CaptureCallback>
 80041ee:	e005      	b.n	80041fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f8f7 	bl	80043e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f908 	bl	800440c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	f003 0304 	and.w	r3, r3, #4
 800420c:	2b04      	cmp	r3, #4
 800420e:	d122      	bne.n	8004256 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f003 0304 	and.w	r3, r3, #4
 800421a:	2b04      	cmp	r3, #4
 800421c:	d11b      	bne.n	8004256 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f06f 0204 	mvn.w	r2, #4
 8004226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f8db 	bl	80043f8 <HAL_TIM_IC_CaptureCallback>
 8004242:	e005      	b.n	8004250 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f8cd 	bl	80043e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f8de 	bl	800440c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b08      	cmp	r3, #8
 8004262:	d122      	bne.n	80042aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b08      	cmp	r3, #8
 8004270:	d11b      	bne.n	80042aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f06f 0208 	mvn.w	r2, #8
 800427a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2204      	movs	r2, #4
 8004280:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 f8b1 	bl	80043f8 <HAL_TIM_IC_CaptureCallback>
 8004296:	e005      	b.n	80042a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 f8a3 	bl	80043e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f8b4 	bl	800440c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	f003 0310 	and.w	r3, r3, #16
 80042b4:	2b10      	cmp	r3, #16
 80042b6:	d122      	bne.n	80042fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f003 0310 	and.w	r3, r3, #16
 80042c2:	2b10      	cmp	r3, #16
 80042c4:	d11b      	bne.n	80042fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f06f 0210 	mvn.w	r2, #16
 80042ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2208      	movs	r2, #8
 80042d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f887 	bl	80043f8 <HAL_TIM_IC_CaptureCallback>
 80042ea:	e005      	b.n	80042f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f879 	bl	80043e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f88a 	bl	800440c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b01      	cmp	r3, #1
 800430a:	d10e      	bne.n	800432a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b01      	cmp	r3, #1
 8004318:	d107      	bne.n	800432a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f06f 0201 	mvn.w	r2, #1
 8004322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7fd fadd 	bl	80018e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004334:	2b80      	cmp	r3, #128	; 0x80
 8004336:	d10e      	bne.n	8004356 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004342:	2b80      	cmp	r3, #128	; 0x80
 8004344:	d107      	bne.n	8004356 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800434e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f943 	bl	80045dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004364:	d10e      	bne.n	8004384 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004370:	2b80      	cmp	r3, #128	; 0x80
 8004372:	d107      	bne.n	8004384 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800437c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f936 	bl	80045f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438e:	2b40      	cmp	r3, #64	; 0x40
 8004390:	d10e      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439c:	2b40      	cmp	r3, #64	; 0x40
 800439e:	d107      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f838 	bl	8004420 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	d10e      	bne.n	80043dc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f003 0320 	and.w	r3, r3, #32
 80043c8:	2b20      	cmp	r3, #32
 80043ca:	d107      	bne.n	80043dc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f06f 0220 	mvn.w	r2, #32
 80043d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f8f6 	bl	80045c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043dc:	bf00      	nop
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a2a      	ldr	r2, [pc, #168]	; (80044f0 <TIM_Base_SetConfig+0xbc>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d003      	beq.n	8004454 <TIM_Base_SetConfig+0x20>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004452:	d108      	bne.n	8004466 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a21      	ldr	r2, [pc, #132]	; (80044f0 <TIM_Base_SetConfig+0xbc>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d00b      	beq.n	8004486 <TIM_Base_SetConfig+0x52>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004474:	d007      	beq.n	8004486 <TIM_Base_SetConfig+0x52>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a1e      	ldr	r2, [pc, #120]	; (80044f4 <TIM_Base_SetConfig+0xc0>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d003      	beq.n	8004486 <TIM_Base_SetConfig+0x52>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a1d      	ldr	r2, [pc, #116]	; (80044f8 <TIM_Base_SetConfig+0xc4>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d108      	bne.n	8004498 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800448c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4313      	orrs	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a0c      	ldr	r2, [pc, #48]	; (80044f0 <TIM_Base_SetConfig+0xbc>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d007      	beq.n	80044d4 <TIM_Base_SetConfig+0xa0>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a0b      	ldr	r2, [pc, #44]	; (80044f4 <TIM_Base_SetConfig+0xc0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d003      	beq.n	80044d4 <TIM_Base_SetConfig+0xa0>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a0a      	ldr	r2, [pc, #40]	; (80044f8 <TIM_Base_SetConfig+0xc4>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d103      	bne.n	80044dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	615a      	str	r2, [r3, #20]
}
 80044e2:	bf00      	nop
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	40012c00 	.word	0x40012c00
 80044f4:	40014000 	.word	0x40014000
 80044f8:	40014400 	.word	0x40014400

080044fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800450c:	2b01      	cmp	r3, #1
 800450e:	d101      	bne.n	8004514 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004510:	2302      	movs	r3, #2
 8004512:	e04f      	b.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a21      	ldr	r2, [pc, #132]	; (80045c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d108      	bne.n	8004550 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004544:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	4313      	orrs	r3, r2
 800454e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004556:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a14      	ldr	r2, [pc, #80]	; (80045c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d009      	beq.n	8004588 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457c:	d004      	beq.n	8004588 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a10      	ldr	r2, [pc, #64]	; (80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d10c      	bne.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800458e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	4313      	orrs	r3, r2
 8004598:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	40012c00 	.word	0x40012c00
 80045c4:	40014000 	.word	0x40014000

080045c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e040      	b.n	8004698 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800461a:	2b00      	cmp	r3, #0
 800461c:	d106      	bne.n	800462c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7fd fa3a 	bl	8001aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2224      	movs	r2, #36	; 0x24
 8004630:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 0201 	bic.w	r2, r2, #1
 8004640:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fbca 	bl	8004ddc <UART_SetConfig>
 8004648:	4603      	mov	r3, r0
 800464a:	2b01      	cmp	r3, #1
 800464c:	d101      	bne.n	8004652 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e022      	b.n	8004698 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	2b00      	cmp	r3, #0
 8004658:	d002      	beq.n	8004660 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fdea 	bl	8005234 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800466e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800467e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0201 	orr.w	r2, r2, #1
 800468e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 fe71 	bl	8005378 <UART_CheckIdleState>
 8004696:	4603      	mov	r3, r0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08a      	sub	sp, #40	; 0x28
 80046a4:	af02      	add	r7, sp, #8
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	603b      	str	r3, [r7, #0]
 80046ac:	4613      	mov	r3, r2
 80046ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046b4:	2b20      	cmp	r3, #32
 80046b6:	f040 8082 	bne.w	80047be <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <HAL_UART_Transmit+0x26>
 80046c0:	88fb      	ldrh	r3, [r7, #6]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e07a      	b.n	80047c0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_UART_Transmit+0x38>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e073      	b.n	80047c0 <HAL_UART_Transmit+0x120>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2221      	movs	r2, #33	; 0x21
 80046ec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046ee:	f7fd fc5f 	bl	8001fb0 <HAL_GetTick>
 80046f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	88fa      	ldrh	r2, [r7, #6]
 80046f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	88fa      	ldrh	r2, [r7, #6]
 8004700:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800470c:	d108      	bne.n	8004720 <HAL_UART_Transmit+0x80>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d104      	bne.n	8004720 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004716:	2300      	movs	r3, #0
 8004718:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	61bb      	str	r3, [r7, #24]
 800471e:	e003      	b.n	8004728 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004724:	2300      	movs	r3, #0
 8004726:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004730:	e02d      	b.n	800478e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2200      	movs	r2, #0
 800473a:	2180      	movs	r1, #128	; 0x80
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 fe64 	bl	800540a <UART_WaitOnFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e039      	b.n	80047c0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10b      	bne.n	800476a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	881a      	ldrh	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800475e:	b292      	uxth	r2, r2
 8004760:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	3302      	adds	r3, #2
 8004766:	61bb      	str	r3, [r7, #24]
 8004768:	e008      	b.n	800477c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	781a      	ldrb	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	b292      	uxth	r2, r2
 8004774:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	3301      	adds	r3, #1
 800477a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004794:	b29b      	uxth	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1cb      	bne.n	8004732 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2200      	movs	r2, #0
 80047a2:	2140      	movs	r1, #64	; 0x40
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 fe30 	bl	800540a <UART_WaitOnFlagUntilTimeout>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e005      	b.n	80047c0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2220      	movs	r2, #32
 80047b8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	e000      	b.n	80047c0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80047be:	2302      	movs	r3, #2
  }
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3720      	adds	r7, #32
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b0ba      	sub	sp, #232	; 0xe8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80047f2:	f640 030f 	movw	r3, #2063	; 0x80f
 80047f6:	4013      	ands	r3, r2
 80047f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80047fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004800:	2b00      	cmp	r3, #0
 8004802:	d115      	bne.n	8004830 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004808:	f003 0320 	and.w	r3, r3, #32
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00f      	beq.n	8004830 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004814:	f003 0320 	and.w	r3, r3, #32
 8004818:	2b00      	cmp	r3, #0
 800481a:	d009      	beq.n	8004830 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 82a6 	beq.w	8004d72 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	4798      	blx	r3
      }
      return;
 800482e:	e2a0      	b.n	8004d72 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004830:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 8117 	beq.w	8004a68 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800483a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d106      	bne.n	8004854 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004846:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800484a:	4b85      	ldr	r3, [pc, #532]	; (8004a60 <HAL_UART_IRQHandler+0x298>)
 800484c:	4013      	ands	r3, r2
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 810a 	beq.w	8004a68 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d011      	beq.n	8004884 <HAL_UART_IRQHandler+0xbc>
 8004860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00b      	beq.n	8004884 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2201      	movs	r2, #1
 8004872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800487a:	f043 0201 	orr.w	r2, r3, #1
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d011      	beq.n	80048b4 <HAL_UART_IRQHandler+0xec>
 8004890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00b      	beq.n	80048b4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2202      	movs	r2, #2
 80048a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048aa:	f043 0204 	orr.w	r2, r3, #4
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d011      	beq.n	80048e4 <HAL_UART_IRQHandler+0x11c>
 80048c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00b      	beq.n	80048e4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2204      	movs	r2, #4
 80048d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048da:	f043 0202 	orr.w	r2, r3, #2
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048e8:	f003 0308 	and.w	r3, r3, #8
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d017      	beq.n	8004920 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048f4:	f003 0320 	and.w	r3, r3, #32
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d105      	bne.n	8004908 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80048fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004900:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00b      	beq.n	8004920 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2208      	movs	r2, #8
 800490e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004916:	f043 0208 	orr.w	r2, r3, #8
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004928:	2b00      	cmp	r3, #0
 800492a:	d012      	beq.n	8004952 <HAL_UART_IRQHandler+0x18a>
 800492c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004930:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00c      	beq.n	8004952 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004940:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004948:	f043 0220 	orr.w	r2, r3, #32
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 820c 	beq.w	8004d76 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800495e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004962:	f003 0320 	and.w	r3, r3, #32
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00d      	beq.n	8004986 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800496a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b00      	cmp	r3, #0
 8004974:	d007      	beq.n	8004986 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800498c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499a:	2b40      	cmp	r3, #64	; 0x40
 800499c:	d005      	beq.n	80049aa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800499e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d04f      	beq.n	8004a4a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 febe 	bl	800572c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ba:	2b40      	cmp	r3, #64	; 0x40
 80049bc:	d141      	bne.n	8004a42 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3308      	adds	r3, #8
 80049c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049cc:	e853 3f00 	ldrex	r3, [r3]
 80049d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80049d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3308      	adds	r3, #8
 80049e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80049f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80049fa:	e841 2300 	strex	r3, r2, [r1]
 80049fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1d9      	bne.n	80049be <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d013      	beq.n	8004a3a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a16:	4a13      	ldr	r2, [pc, #76]	; (8004a64 <HAL_UART_IRQHandler+0x29c>)
 8004a18:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fd fd5e 	bl	80024e0 <HAL_DMA_Abort_IT>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d017      	beq.n	8004a5a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004a34:	4610      	mov	r0, r2
 8004a36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a38:	e00f      	b.n	8004a5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f9c4 	bl	8004dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a40:	e00b      	b.n	8004a5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f9c0 	bl	8004dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a48:	e007      	b.n	8004a5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f9bc 	bl	8004dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004a58:	e18d      	b.n	8004d76 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a5a:	bf00      	nop
    return;
 8004a5c:	e18b      	b.n	8004d76 <HAL_UART_IRQHandler+0x5ae>
 8004a5e:	bf00      	nop
 8004a60:	04000120 	.word	0x04000120
 8004a64:	080059cb 	.word	0x080059cb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	f040 8146 	bne.w	8004cfe <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a76:	f003 0310 	and.w	r3, r3, #16
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 813f 	beq.w	8004cfe <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a84:	f003 0310 	and.w	r3, r3, #16
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 8138 	beq.w	8004cfe <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2210      	movs	r2, #16
 8004a94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa0:	2b40      	cmp	r3, #64	; 0x40
 8004aa2:	f040 80b4 	bne.w	8004c0e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ab2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 815f 	beq.w	8004d7a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ac2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	f080 8157 	bcs.w	8004d7a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ad2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f040 8085 	bne.w	8004bf2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004af4:	e853 3f00 	ldrex	r3, [r3]
 8004af8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004afc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b16:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b22:	e841 2300 	strex	r3, r2, [r1]
 8004b26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1da      	bne.n	8004ae8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3308      	adds	r3, #8
 8004b38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b3c:	e853 3f00 	ldrex	r3, [r3]
 8004b40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b44:	f023 0301 	bic.w	r3, r3, #1
 8004b48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3308      	adds	r3, #8
 8004b52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b56:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b5a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b62:	e841 2300 	strex	r3, r2, [r1]
 8004b66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1e1      	bne.n	8004b32 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3308      	adds	r3, #8
 8004b74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b78:	e853 3f00 	ldrex	r3, [r3]
 8004b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3308      	adds	r3, #8
 8004b8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b9a:	e841 2300 	strex	r3, r2, [r1]
 8004b9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1e3      	bne.n	8004b6e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bba:	e853 3f00 	ldrex	r3, [r3]
 8004bbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004bc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bc2:	f023 0310 	bic.w	r3, r3, #16
 8004bc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bd6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bdc:	e841 2300 	strex	r3, r2, [r1]
 8004be0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e4      	bne.n	8004bb2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fd fc39 	bl	8002464 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	4619      	mov	r1, r3
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7fc fea4 	bl	8001954 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c0c:	e0b5      	b.n	8004d7a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 80a7 	beq.w	8004d7e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004c30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 80a2 	beq.w	8004d7e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c42:	e853 3f00 	ldrex	r3, [r3]
 8004c46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	461a      	mov	r2, r3
 8004c58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c5c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c5e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c64:	e841 2300 	strex	r3, r2, [r1]
 8004c68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1e4      	bne.n	8004c3a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3308      	adds	r3, #8
 8004c76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	e853 3f00 	ldrex	r3, [r3]
 8004c7e:	623b      	str	r3, [r7, #32]
   return(result);
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	f023 0301 	bic.w	r3, r3, #1
 8004c86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	3308      	adds	r3, #8
 8004c90:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c94:	633a      	str	r2, [r7, #48]	; 0x30
 8004c96:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c9c:	e841 2300 	strex	r3, r2, [r1]
 8004ca0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1e3      	bne.n	8004c70 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2220      	movs	r2, #32
 8004cac:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	e853 3f00 	ldrex	r3, [r3]
 8004cc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0310 	bic.w	r3, r3, #16
 8004cce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004cdc:	61fb      	str	r3, [r7, #28]
 8004cde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce0:	69b9      	ldr	r1, [r7, #24]
 8004ce2:	69fa      	ldr	r2, [r7, #28]
 8004ce4:	e841 2300 	strex	r3, r2, [r1]
 8004ce8:	617b      	str	r3, [r7, #20]
   return(result);
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1e4      	bne.n	8004cba <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7fc fe2c 	bl	8001954 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cfc:	e03f      	b.n	8004d7e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00e      	beq.n	8004d28 <HAL_UART_IRQHandler+0x560>
 8004d0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d008      	beq.n	8004d28 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 fe92 	bl	8005a4a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d26:	e02d      	b.n	8004d84 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00e      	beq.n	8004d52 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d008      	beq.n	8004d52 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01c      	beq.n	8004d82 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	4798      	blx	r3
    }
    return;
 8004d50:	e017      	b.n	8004d82 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d012      	beq.n	8004d84 <HAL_UART_IRQHandler+0x5bc>
 8004d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00c      	beq.n	8004d84 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fe43 	bl	80059f6 <UART_EndTransmit_IT>
    return;
 8004d70:	e008      	b.n	8004d84 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004d72:	bf00      	nop
 8004d74:	e006      	b.n	8004d84 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004d76:	bf00      	nop
 8004d78:	e004      	b.n	8004d84 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004d7a:	bf00      	nop
 8004d7c:	e002      	b.n	8004d84 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004d7e:	bf00      	nop
 8004d80:	e000      	b.n	8004d84 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004d82:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004d84:	37e8      	adds	r7, #232	; 0xe8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop

08004d8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004de0:	b08a      	sub	sp, #40	; 0x28
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	431a      	orrs	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	4bb4      	ldr	r3, [pc, #720]	; (80050dc <UART_SetConfig+0x300>)
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	6812      	ldr	r2, [r2, #0]
 8004e12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e14:	430b      	orrs	r3, r1
 8004e16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4aa9      	ldr	r2, [pc, #676]	; (80050e0 <UART_SetConfig+0x304>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d004      	beq.n	8004e48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e44:	4313      	orrs	r3, r2
 8004e46:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4aa0      	ldr	r2, [pc, #640]	; (80050e4 <UART_SetConfig+0x308>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d126      	bne.n	8004eb4 <UART_SetConfig+0xd8>
 8004e66:	4ba0      	ldr	r3, [pc, #640]	; (80050e8 <UART_SetConfig+0x30c>)
 8004e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6c:	f003 0303 	and.w	r3, r3, #3
 8004e70:	2b03      	cmp	r3, #3
 8004e72:	d81b      	bhi.n	8004eac <UART_SetConfig+0xd0>
 8004e74:	a201      	add	r2, pc, #4	; (adr r2, 8004e7c <UART_SetConfig+0xa0>)
 8004e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7a:	bf00      	nop
 8004e7c:	08004e8d 	.word	0x08004e8d
 8004e80:	08004e9d 	.word	0x08004e9d
 8004e84:	08004e95 	.word	0x08004e95
 8004e88:	08004ea5 	.word	0x08004ea5
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e92:	e080      	b.n	8004f96 <UART_SetConfig+0x1ba>
 8004e94:	2302      	movs	r3, #2
 8004e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e9a:	e07c      	b.n	8004f96 <UART_SetConfig+0x1ba>
 8004e9c:	2304      	movs	r3, #4
 8004e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ea2:	e078      	b.n	8004f96 <UART_SetConfig+0x1ba>
 8004ea4:	2308      	movs	r3, #8
 8004ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eaa:	e074      	b.n	8004f96 <UART_SetConfig+0x1ba>
 8004eac:	2310      	movs	r3, #16
 8004eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eb2:	e070      	b.n	8004f96 <UART_SetConfig+0x1ba>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a8c      	ldr	r2, [pc, #560]	; (80050ec <UART_SetConfig+0x310>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d138      	bne.n	8004f30 <UART_SetConfig+0x154>
 8004ebe:	4b8a      	ldr	r3, [pc, #552]	; (80050e8 <UART_SetConfig+0x30c>)
 8004ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec4:	f003 030c 	and.w	r3, r3, #12
 8004ec8:	2b0c      	cmp	r3, #12
 8004eca:	d82d      	bhi.n	8004f28 <UART_SetConfig+0x14c>
 8004ecc:	a201      	add	r2, pc, #4	; (adr r2, 8004ed4 <UART_SetConfig+0xf8>)
 8004ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed2:	bf00      	nop
 8004ed4:	08004f09 	.word	0x08004f09
 8004ed8:	08004f29 	.word	0x08004f29
 8004edc:	08004f29 	.word	0x08004f29
 8004ee0:	08004f29 	.word	0x08004f29
 8004ee4:	08004f19 	.word	0x08004f19
 8004ee8:	08004f29 	.word	0x08004f29
 8004eec:	08004f29 	.word	0x08004f29
 8004ef0:	08004f29 	.word	0x08004f29
 8004ef4:	08004f11 	.word	0x08004f11
 8004ef8:	08004f29 	.word	0x08004f29
 8004efc:	08004f29 	.word	0x08004f29
 8004f00:	08004f29 	.word	0x08004f29
 8004f04:	08004f21 	.word	0x08004f21
 8004f08:	2300      	movs	r3, #0
 8004f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f0e:	e042      	b.n	8004f96 <UART_SetConfig+0x1ba>
 8004f10:	2302      	movs	r3, #2
 8004f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f16:	e03e      	b.n	8004f96 <UART_SetConfig+0x1ba>
 8004f18:	2304      	movs	r3, #4
 8004f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f1e:	e03a      	b.n	8004f96 <UART_SetConfig+0x1ba>
 8004f20:	2308      	movs	r3, #8
 8004f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f26:	e036      	b.n	8004f96 <UART_SetConfig+0x1ba>
 8004f28:	2310      	movs	r3, #16
 8004f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f2e:	e032      	b.n	8004f96 <UART_SetConfig+0x1ba>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a6a      	ldr	r2, [pc, #424]	; (80050e0 <UART_SetConfig+0x304>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d12a      	bne.n	8004f90 <UART_SetConfig+0x1b4>
 8004f3a:	4b6b      	ldr	r3, [pc, #428]	; (80050e8 <UART_SetConfig+0x30c>)
 8004f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f48:	d01a      	beq.n	8004f80 <UART_SetConfig+0x1a4>
 8004f4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f4e:	d81b      	bhi.n	8004f88 <UART_SetConfig+0x1ac>
 8004f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f54:	d00c      	beq.n	8004f70 <UART_SetConfig+0x194>
 8004f56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f5a:	d815      	bhi.n	8004f88 <UART_SetConfig+0x1ac>
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d003      	beq.n	8004f68 <UART_SetConfig+0x18c>
 8004f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f64:	d008      	beq.n	8004f78 <UART_SetConfig+0x19c>
 8004f66:	e00f      	b.n	8004f88 <UART_SetConfig+0x1ac>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f6e:	e012      	b.n	8004f96 <UART_SetConfig+0x1ba>
 8004f70:	2302      	movs	r3, #2
 8004f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f76:	e00e      	b.n	8004f96 <UART_SetConfig+0x1ba>
 8004f78:	2304      	movs	r3, #4
 8004f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f7e:	e00a      	b.n	8004f96 <UART_SetConfig+0x1ba>
 8004f80:	2308      	movs	r3, #8
 8004f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f86:	e006      	b.n	8004f96 <UART_SetConfig+0x1ba>
 8004f88:	2310      	movs	r3, #16
 8004f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f8e:	e002      	b.n	8004f96 <UART_SetConfig+0x1ba>
 8004f90:	2310      	movs	r3, #16
 8004f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a51      	ldr	r2, [pc, #324]	; (80050e0 <UART_SetConfig+0x304>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d17a      	bne.n	8005096 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004fa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d824      	bhi.n	8004ff2 <UART_SetConfig+0x216>
 8004fa8:	a201      	add	r2, pc, #4	; (adr r2, 8004fb0 <UART_SetConfig+0x1d4>)
 8004faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fae:	bf00      	nop
 8004fb0:	08004fd5 	.word	0x08004fd5
 8004fb4:	08004ff3 	.word	0x08004ff3
 8004fb8:	08004fdd 	.word	0x08004fdd
 8004fbc:	08004ff3 	.word	0x08004ff3
 8004fc0:	08004fe3 	.word	0x08004fe3
 8004fc4:	08004ff3 	.word	0x08004ff3
 8004fc8:	08004ff3 	.word	0x08004ff3
 8004fcc:	08004ff3 	.word	0x08004ff3
 8004fd0:	08004feb 	.word	0x08004feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fd4:	f7fe fb46 	bl	8003664 <HAL_RCC_GetPCLK1Freq>
 8004fd8:	61f8      	str	r0, [r7, #28]
        break;
 8004fda:	e010      	b.n	8004ffe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fdc:	4b44      	ldr	r3, [pc, #272]	; (80050f0 <UART_SetConfig+0x314>)
 8004fde:	61fb      	str	r3, [r7, #28]
        break;
 8004fe0:	e00d      	b.n	8004ffe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fe2:	f7fe faa7 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 8004fe6:	61f8      	str	r0, [r7, #28]
        break;
 8004fe8:	e009      	b.n	8004ffe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fee:	61fb      	str	r3, [r7, #28]
        break;
 8004ff0:	e005      	b.n	8004ffe <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ffc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 8107 	beq.w	8005214 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	4613      	mov	r3, r2
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	4413      	add	r3, r2
 8005010:	69fa      	ldr	r2, [r7, #28]
 8005012:	429a      	cmp	r2, r3
 8005014:	d305      	bcc.n	8005022 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800501c:	69fa      	ldr	r2, [r7, #28]
 800501e:	429a      	cmp	r2, r3
 8005020:	d903      	bls.n	800502a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005028:	e0f4      	b.n	8005214 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	2200      	movs	r2, #0
 800502e:	461c      	mov	r4, r3
 8005030:	4615      	mov	r5, r2
 8005032:	f04f 0200 	mov.w	r2, #0
 8005036:	f04f 0300 	mov.w	r3, #0
 800503a:	022b      	lsls	r3, r5, #8
 800503c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005040:	0222      	lsls	r2, r4, #8
 8005042:	68f9      	ldr	r1, [r7, #12]
 8005044:	6849      	ldr	r1, [r1, #4]
 8005046:	0849      	lsrs	r1, r1, #1
 8005048:	2000      	movs	r0, #0
 800504a:	4688      	mov	r8, r1
 800504c:	4681      	mov	r9, r0
 800504e:	eb12 0a08 	adds.w	sl, r2, r8
 8005052:	eb43 0b09 	adc.w	fp, r3, r9
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	603b      	str	r3, [r7, #0]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005064:	4650      	mov	r0, sl
 8005066:	4659      	mov	r1, fp
 8005068:	f7fb fde6 	bl	8000c38 <__aeabi_uldivmod>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4613      	mov	r3, r2
 8005072:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800507a:	d308      	bcc.n	800508e <UART_SetConfig+0x2b2>
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005082:	d204      	bcs.n	800508e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	60da      	str	r2, [r3, #12]
 800508c:	e0c2      	b.n	8005214 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005094:	e0be      	b.n	8005214 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800509e:	d16a      	bne.n	8005176 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80050a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d834      	bhi.n	8005112 <UART_SetConfig+0x336>
 80050a8:	a201      	add	r2, pc, #4	; (adr r2, 80050b0 <UART_SetConfig+0x2d4>)
 80050aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ae:	bf00      	nop
 80050b0:	080050d5 	.word	0x080050d5
 80050b4:	080050f5 	.word	0x080050f5
 80050b8:	080050fd 	.word	0x080050fd
 80050bc:	08005113 	.word	0x08005113
 80050c0:	08005103 	.word	0x08005103
 80050c4:	08005113 	.word	0x08005113
 80050c8:	08005113 	.word	0x08005113
 80050cc:	08005113 	.word	0x08005113
 80050d0:	0800510b 	.word	0x0800510b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050d4:	f7fe fac6 	bl	8003664 <HAL_RCC_GetPCLK1Freq>
 80050d8:	61f8      	str	r0, [r7, #28]
        break;
 80050da:	e020      	b.n	800511e <UART_SetConfig+0x342>
 80050dc:	efff69f3 	.word	0xefff69f3
 80050e0:	40008000 	.word	0x40008000
 80050e4:	40013800 	.word	0x40013800
 80050e8:	40021000 	.word	0x40021000
 80050ec:	40004400 	.word	0x40004400
 80050f0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050f4:	f7fe facc 	bl	8003690 <HAL_RCC_GetPCLK2Freq>
 80050f8:	61f8      	str	r0, [r7, #28]
        break;
 80050fa:	e010      	b.n	800511e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050fc:	4b4c      	ldr	r3, [pc, #304]	; (8005230 <UART_SetConfig+0x454>)
 80050fe:	61fb      	str	r3, [r7, #28]
        break;
 8005100:	e00d      	b.n	800511e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005102:	f7fe fa17 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 8005106:	61f8      	str	r0, [r7, #28]
        break;
 8005108:	e009      	b.n	800511e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800510a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800510e:	61fb      	str	r3, [r7, #28]
        break;
 8005110:	e005      	b.n	800511e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800511c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d077      	beq.n	8005214 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	005a      	lsls	r2, r3, #1
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	085b      	lsrs	r3, r3, #1
 800512e:	441a      	add	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	fbb2 f3f3 	udiv	r3, r2, r3
 8005138:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	2b0f      	cmp	r3, #15
 800513e:	d916      	bls.n	800516e <UART_SetConfig+0x392>
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005146:	d212      	bcs.n	800516e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	b29b      	uxth	r3, r3
 800514c:	f023 030f 	bic.w	r3, r3, #15
 8005150:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	085b      	lsrs	r3, r3, #1
 8005156:	b29b      	uxth	r3, r3
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	b29a      	uxth	r2, r3
 800515e:	8afb      	ldrh	r3, [r7, #22]
 8005160:	4313      	orrs	r3, r2
 8005162:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	8afa      	ldrh	r2, [r7, #22]
 800516a:	60da      	str	r2, [r3, #12]
 800516c:	e052      	b.n	8005214 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005174:	e04e      	b.n	8005214 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005176:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800517a:	2b08      	cmp	r3, #8
 800517c:	d827      	bhi.n	80051ce <UART_SetConfig+0x3f2>
 800517e:	a201      	add	r2, pc, #4	; (adr r2, 8005184 <UART_SetConfig+0x3a8>)
 8005180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005184:	080051a9 	.word	0x080051a9
 8005188:	080051b1 	.word	0x080051b1
 800518c:	080051b9 	.word	0x080051b9
 8005190:	080051cf 	.word	0x080051cf
 8005194:	080051bf 	.word	0x080051bf
 8005198:	080051cf 	.word	0x080051cf
 800519c:	080051cf 	.word	0x080051cf
 80051a0:	080051cf 	.word	0x080051cf
 80051a4:	080051c7 	.word	0x080051c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051a8:	f7fe fa5c 	bl	8003664 <HAL_RCC_GetPCLK1Freq>
 80051ac:	61f8      	str	r0, [r7, #28]
        break;
 80051ae:	e014      	b.n	80051da <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051b0:	f7fe fa6e 	bl	8003690 <HAL_RCC_GetPCLK2Freq>
 80051b4:	61f8      	str	r0, [r7, #28]
        break;
 80051b6:	e010      	b.n	80051da <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051b8:	4b1d      	ldr	r3, [pc, #116]	; (8005230 <UART_SetConfig+0x454>)
 80051ba:	61fb      	str	r3, [r7, #28]
        break;
 80051bc:	e00d      	b.n	80051da <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051be:	f7fe f9b9 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 80051c2:	61f8      	str	r0, [r7, #28]
        break;
 80051c4:	e009      	b.n	80051da <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ca:	61fb      	str	r3, [r7, #28]
        break;
 80051cc:	e005      	b.n	80051da <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80051d8:	bf00      	nop
    }

    if (pclk != 0U)
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d019      	beq.n	8005214 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	085a      	lsrs	r2, r3, #1
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	441a      	add	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	2b0f      	cmp	r3, #15
 80051f8:	d909      	bls.n	800520e <UART_SetConfig+0x432>
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005200:	d205      	bcs.n	800520e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	b29a      	uxth	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	60da      	str	r2, [r3, #12]
 800520c:	e002      	b.n	8005214 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005220:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005224:	4618      	mov	r0, r3
 8005226:	3728      	adds	r7, #40	; 0x28
 8005228:	46bd      	mov	sp, r7
 800522a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800522e:	bf00      	nop
 8005230:	00f42400 	.word	0x00f42400

08005234 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00a      	beq.n	800525e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	430a      	orrs	r2, r1
 800527e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00a      	beq.n	80052a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	f003 0308 	and.w	r3, r3, #8
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00a      	beq.n	80052c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	f003 0310 	and.w	r3, r3, #16
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00a      	beq.n	80052e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	f003 0320 	and.w	r3, r3, #32
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005310:	2b00      	cmp	r3, #0
 8005312:	d01a      	beq.n	800534a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005332:	d10a      	bne.n	800534a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	605a      	str	r2, [r3, #4]
  }
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af02      	add	r7, sp, #8
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005388:	f7fc fe12 	bl	8001fb0 <HAL_GetTick>
 800538c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0308 	and.w	r3, r3, #8
 8005398:	2b08      	cmp	r3, #8
 800539a:	d10e      	bne.n	80053ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800539c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f82d 	bl	800540a <UART_WaitOnFlagUntilTimeout>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e023      	b.n	8005402 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	2b04      	cmp	r3, #4
 80053c6:	d10e      	bne.n	80053e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f817 	bl	800540a <UART_WaitOnFlagUntilTimeout>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e00d      	b.n	8005402 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2220      	movs	r2, #32
 80053ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2220      	movs	r2, #32
 80053f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b09c      	sub	sp, #112	; 0x70
 800540e:	af00      	add	r7, sp, #0
 8005410:	60f8      	str	r0, [r7, #12]
 8005412:	60b9      	str	r1, [r7, #8]
 8005414:	603b      	str	r3, [r7, #0]
 8005416:	4613      	mov	r3, r2
 8005418:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800541a:	e0a5      	b.n	8005568 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800541c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800541e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005422:	f000 80a1 	beq.w	8005568 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005426:	f7fc fdc3 	bl	8001fb0 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005432:	429a      	cmp	r2, r3
 8005434:	d302      	bcc.n	800543c <UART_WaitOnFlagUntilTimeout+0x32>
 8005436:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005438:	2b00      	cmp	r3, #0
 800543a:	d13e      	bne.n	80054ba <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800544a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800544c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005450:	667b      	str	r3, [r7, #100]	; 0x64
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	461a      	mov	r2, r3
 8005458:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800545a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800545c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005460:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005462:	e841 2300 	strex	r3, r2, [r1]
 8005466:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1e6      	bne.n	800543c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3308      	adds	r3, #8
 8005474:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005478:	e853 3f00 	ldrex	r3, [r3]
 800547c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800547e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005480:	f023 0301 	bic.w	r3, r3, #1
 8005484:	663b      	str	r3, [r7, #96]	; 0x60
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3308      	adds	r3, #8
 800548c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800548e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005490:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005492:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005494:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005496:	e841 2300 	strex	r3, r2, [r1]
 800549a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800549c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1e5      	bne.n	800546e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2220      	movs	r2, #32
 80054a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2220      	movs	r2, #32
 80054ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e067      	b.n	800558a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d04f      	beq.n	8005568 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054d6:	d147      	bne.n	8005568 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054e0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ea:	e853 3f00 	ldrex	r3, [r3]
 80054ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	461a      	mov	r2, r3
 80054fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005500:	637b      	str	r3, [r7, #52]	; 0x34
 8005502:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005504:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005506:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005508:	e841 2300 	strex	r3, r2, [r1]
 800550c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800550e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1e6      	bne.n	80054e2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	3308      	adds	r3, #8
 800551a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	e853 3f00 	ldrex	r3, [r3]
 8005522:	613b      	str	r3, [r7, #16]
   return(result);
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	f023 0301 	bic.w	r3, r3, #1
 800552a:	66bb      	str	r3, [r7, #104]	; 0x68
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3308      	adds	r3, #8
 8005532:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005534:	623a      	str	r2, [r7, #32]
 8005536:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005538:	69f9      	ldr	r1, [r7, #28]
 800553a:	6a3a      	ldr	r2, [r7, #32]
 800553c:	e841 2300 	strex	r3, r2, [r1]
 8005540:	61bb      	str	r3, [r7, #24]
   return(result);
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1e5      	bne.n	8005514 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2220      	movs	r2, #32
 800554c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2220      	movs	r2, #32
 8005552:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2220      	movs	r2, #32
 8005558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e010      	b.n	800558a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	69da      	ldr	r2, [r3, #28]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	4013      	ands	r3, r2
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	429a      	cmp	r2, r3
 8005576:	bf0c      	ite	eq
 8005578:	2301      	moveq	r3, #1
 800557a:	2300      	movne	r3, #0
 800557c:	b2db      	uxtb	r3, r3
 800557e:	461a      	mov	r2, r3
 8005580:	79fb      	ldrb	r3, [r7, #7]
 8005582:	429a      	cmp	r2, r3
 8005584:	f43f af4a 	beq.w	800541c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3770      	adds	r7, #112	; 0x70
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
	...

08005594 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b096      	sub	sp, #88	; 0x58
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	4613      	mov	r3, r2
 80055a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	88fa      	ldrh	r2, [r7, #6]
 80055ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2222      	movs	r2, #34	; 0x22
 80055bc:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d02b      	beq.n	800561e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ca:	4a42      	ldr	r2, [pc, #264]	; (80056d4 <UART_Start_Receive_DMA+0x140>)
 80055cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d2:	4a41      	ldr	r2, [pc, #260]	; (80056d8 <UART_Start_Receive_DMA+0x144>)
 80055d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055da:	4a40      	ldr	r2, [pc, #256]	; (80056dc <UART_Start_Receive_DMA+0x148>)
 80055dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e2:	2200      	movs	r2, #0
 80055e4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3324      	adds	r3, #36	; 0x24
 80055f0:	4619      	mov	r1, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f6:	461a      	mov	r2, r3
 80055f8:	88fb      	ldrh	r3, [r7, #6]
 80055fa:	f7fc fed3 	bl	80023a4 <HAL_DMA_Start_IT>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00c      	beq.n	800561e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2210      	movs	r2, #16
 8005608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2220      	movs	r2, #32
 8005618:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e055      	b.n	80056ca <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d018      	beq.n	8005660 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005636:	e853 3f00 	ldrex	r3, [r3]
 800563a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800563c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005642:	657b      	str	r3, [r7, #84]	; 0x54
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	461a      	mov	r2, r3
 800564a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800564c:	64bb      	str	r3, [r7, #72]	; 0x48
 800564e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005650:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005652:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005654:	e841 2300 	strex	r3, r2, [r1]
 8005658:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800565a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1e6      	bne.n	800562e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3308      	adds	r3, #8
 8005666:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566a:	e853 3f00 	ldrex	r3, [r3]
 800566e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	f043 0301 	orr.w	r3, r3, #1
 8005676:	653b      	str	r3, [r7, #80]	; 0x50
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3308      	adds	r3, #8
 800567e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005680:	637a      	str	r2, [r7, #52]	; 0x34
 8005682:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005684:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005686:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005688:	e841 2300 	strex	r3, r2, [r1]
 800568c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800568e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1e5      	bne.n	8005660 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3308      	adds	r3, #8
 800569a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	e853 3f00 	ldrex	r3, [r3]
 80056a2:	613b      	str	r3, [r7, #16]
   return(result);
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	3308      	adds	r3, #8
 80056b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056b4:	623a      	str	r2, [r7, #32]
 80056b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b8:	69f9      	ldr	r1, [r7, #28]
 80056ba:	6a3a      	ldr	r2, [r7, #32]
 80056bc:	e841 2300 	strex	r3, r2, [r1]
 80056c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1e5      	bne.n	8005694 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3758      	adds	r7, #88	; 0x58
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	080057f3 	.word	0x080057f3
 80056d8:	08005917 	.word	0x08005917
 80056dc:	0800594f 	.word	0x0800594f

080056e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b089      	sub	sp, #36	; 0x24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	e853 3f00 	ldrex	r3, [r3]
 80056f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80056fc:	61fb      	str	r3, [r7, #28]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	461a      	mov	r2, r3
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	61bb      	str	r3, [r7, #24]
 8005708:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570a:	6979      	ldr	r1, [r7, #20]
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	613b      	str	r3, [r7, #16]
   return(result);
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e6      	bne.n	80056e8 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2220      	movs	r2, #32
 800571e:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005720:	bf00      	nop
 8005722:	3724      	adds	r7, #36	; 0x24
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800572c:	b480      	push	{r7}
 800572e:	b095      	sub	sp, #84	; 0x54
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573c:	e853 3f00 	ldrex	r3, [r3]
 8005740:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005748:	64fb      	str	r3, [r7, #76]	; 0x4c
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	461a      	mov	r2, r3
 8005750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005752:	643b      	str	r3, [r7, #64]	; 0x40
 8005754:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005756:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005758:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800575a:	e841 2300 	strex	r3, r2, [r1]
 800575e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1e6      	bne.n	8005734 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3308      	adds	r3, #8
 800576c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	e853 3f00 	ldrex	r3, [r3]
 8005774:	61fb      	str	r3, [r7, #28]
   return(result);
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	f023 0301 	bic.w	r3, r3, #1
 800577c:	64bb      	str	r3, [r7, #72]	; 0x48
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3308      	adds	r3, #8
 8005784:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005786:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005788:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800578c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800578e:	e841 2300 	strex	r3, r2, [r1]
 8005792:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1e5      	bne.n	8005766 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d118      	bne.n	80057d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	e853 3f00 	ldrex	r3, [r3]
 80057ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f023 0310 	bic.w	r3, r3, #16
 80057b6:	647b      	str	r3, [r7, #68]	; 0x44
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	461a      	mov	r2, r3
 80057be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057c0:	61bb      	str	r3, [r7, #24]
 80057c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c4:	6979      	ldr	r1, [r7, #20]
 80057c6:	69ba      	ldr	r2, [r7, #24]
 80057c8:	e841 2300 	strex	r3, r2, [r1]
 80057cc:	613b      	str	r3, [r7, #16]
   return(result);
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1e6      	bne.n	80057a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2220      	movs	r2, #32
 80057d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80057e6:	bf00      	nop
 80057e8:	3754      	adds	r7, #84	; 0x54
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b09c      	sub	sp, #112	; 0x70
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fe:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0320 	and.w	r3, r3, #32
 800580a:	2b00      	cmp	r3, #0
 800580c:	d170      	bne.n	80058f0 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800580e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005810:	2200      	movs	r2, #0
 8005812:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800581e:	e853 3f00 	ldrex	r3, [r3]
 8005822:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005826:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800582a:	66bb      	str	r3, [r7, #104]	; 0x68
 800582c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	461a      	mov	r2, r3
 8005832:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005834:	65bb      	str	r3, [r7, #88]	; 0x58
 8005836:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800583a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800583c:	e841 2300 	strex	r3, r2, [r1]
 8005840:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1e6      	bne.n	8005816 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	3308      	adds	r3, #8
 800584e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005852:	e853 3f00 	ldrex	r3, [r3]
 8005856:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800585a:	f023 0301 	bic.w	r3, r3, #1
 800585e:	667b      	str	r3, [r7, #100]	; 0x64
 8005860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3308      	adds	r3, #8
 8005866:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005868:	647a      	str	r2, [r7, #68]	; 0x44
 800586a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800586e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005870:	e841 2300 	strex	r3, r2, [r1]
 8005874:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e5      	bne.n	8005848 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800587c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3308      	adds	r3, #8
 8005882:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	e853 3f00 	ldrex	r3, [r3]
 800588a:	623b      	str	r3, [r7, #32]
   return(result);
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005892:	663b      	str	r3, [r7, #96]	; 0x60
 8005894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3308      	adds	r3, #8
 800589a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800589c:	633a      	str	r2, [r7, #48]	; 0x30
 800589e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058a4:	e841 2300 	strex	r3, r2, [r1]
 80058a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1e5      	bne.n	800587c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80058b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b2:	2220      	movs	r2, #32
 80058b4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d118      	bne.n	80058f0 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	e853 3f00 	ldrex	r3, [r3]
 80058ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0310 	bic.w	r3, r3, #16
 80058d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	461a      	mov	r2, r3
 80058da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058dc:	61fb      	str	r3, [r7, #28]
 80058de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e0:	69b9      	ldr	r1, [r7, #24]
 80058e2:	69fa      	ldr	r2, [r7, #28]
 80058e4:	e841 2300 	strex	r3, r2, [r1]
 80058e8:	617b      	str	r3, [r7, #20]
   return(result);
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1e6      	bne.n	80058be <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d107      	bne.n	8005908 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80058fe:	4619      	mov	r1, r3
 8005900:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005902:	f7fc f827 	bl	8001954 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005906:	e002      	b.n	800590e <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8005908:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800590a:	f7ff fa49 	bl	8004da0 <HAL_UART_RxCpltCallback>
}
 800590e:	bf00      	nop
 8005910:	3770      	adds	r7, #112	; 0x70
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b084      	sub	sp, #16
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005922:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005928:	2b01      	cmp	r3, #1
 800592a:	d109      	bne.n	8005940 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005932:	085b      	lsrs	r3, r3, #1
 8005934:	b29b      	uxth	r3, r3
 8005936:	4619      	mov	r1, r3
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f7fc f80b 	bl	8001954 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800593e:	e002      	b.n	8005946 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f7ff fa37 	bl	8004db4 <HAL_UART_RxHalfCpltCallback>
}
 8005946:	bf00      	nop
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b086      	sub	sp, #24
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005960:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005966:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005972:	2b80      	cmp	r3, #128	; 0x80
 8005974:	d109      	bne.n	800598a <UART_DMAError+0x3c>
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	2b21      	cmp	r3, #33	; 0x21
 800597a:	d106      	bne.n	800598a <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	2200      	movs	r2, #0
 8005980:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005984:	6978      	ldr	r0, [r7, #20]
 8005986:	f7ff feab 	bl	80056e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005994:	2b40      	cmp	r3, #64	; 0x40
 8005996:	d109      	bne.n	80059ac <UART_DMAError+0x5e>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2b22      	cmp	r3, #34	; 0x22
 800599c:	d106      	bne.n	80059ac <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80059a6:	6978      	ldr	r0, [r7, #20]
 80059a8:	f7ff fec0 	bl	800572c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059b2:	f043 0210 	orr.w	r2, r3, #16
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059bc:	6978      	ldr	r0, [r7, #20]
 80059be:	f7ff fa03 	bl	8004dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059c2:	bf00      	nop
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b084      	sub	sp, #16
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f7ff f9ed 	bl	8004dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059ee:	bf00      	nop
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b088      	sub	sp, #32
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	e853 3f00 	ldrex	r3, [r3]
 8005a0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a12:	61fb      	str	r3, [r7, #28]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	61bb      	str	r3, [r7, #24]
 8005a1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a20:	6979      	ldr	r1, [r7, #20]
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	e841 2300 	strex	r3, r2, [r1]
 8005a28:	613b      	str	r3, [r7, #16]
   return(result);
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e6      	bne.n	80059fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2220      	movs	r2, #32
 8005a34:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7ff f9a5 	bl	8004d8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a42:	bf00      	nop
 8005a44:	3720      	adds	r7, #32
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a52:	bf00      	nop
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b08c      	sub	sp, #48	; 0x30
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	60f8      	str	r0, [r7, #12]
 8005a66:	60b9      	str	r1, [r7, #8]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a70:	2b20      	cmp	r3, #32
 8005a72:	d14a      	bne.n	8005b0a <HAL_UARTEx_ReceiveToIdle_DMA+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 8005a7a:	88fb      	ldrh	r3, [r7, #6]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e043      	b.n	8005b0c <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
    }

    __HAL_LOCK(huart);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d101      	bne.n	8005a92 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 8005a8e:	2302      	movs	r3, #2
 8005a90:	e03c      	b.n	8005b0c <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005aa0:	88fb      	ldrh	r3, [r7, #6]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	68b9      	ldr	r1, [r7, #8]
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f7ff fd74 	bl	8005594 <UART_Start_Receive_DMA>
 8005aac:	4603      	mov	r3, r0
 8005aae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005ab2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d124      	bne.n	8005b04 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d11d      	bne.n	8005afe <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2210      	movs	r2, #16
 8005ac8:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	e853 3f00 	ldrex	r3, [r3]
 8005ad6:	617b      	str	r3, [r7, #20]
   return(result);
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f043 0310 	orr.w	r3, r3, #16
 8005ade:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8005aea:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aec:	6a39      	ldr	r1, [r7, #32]
 8005aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af0:	e841 2300 	strex	r3, r2, [r1]
 8005af4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1e6      	bne.n	8005aca <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 8005afc:	e002      	b.n	8005b04 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005b04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b08:	e000      	b.n	8005b0c <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  }
  else
  {
    return HAL_BUSY;
 8005b0a:	2302      	movs	r3, #2
  }
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3730      	adds	r7, #48	; 0x30
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <__errno>:
 8005b14:	4b01      	ldr	r3, [pc, #4]	; (8005b1c <__errno+0x8>)
 8005b16:	6818      	ldr	r0, [r3, #0]
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	20000084 	.word	0x20000084

08005b20 <__libc_init_array>:
 8005b20:	b570      	push	{r4, r5, r6, lr}
 8005b22:	4d0d      	ldr	r5, [pc, #52]	; (8005b58 <__libc_init_array+0x38>)
 8005b24:	4c0d      	ldr	r4, [pc, #52]	; (8005b5c <__libc_init_array+0x3c>)
 8005b26:	1b64      	subs	r4, r4, r5
 8005b28:	10a4      	asrs	r4, r4, #2
 8005b2a:	2600      	movs	r6, #0
 8005b2c:	42a6      	cmp	r6, r4
 8005b2e:	d109      	bne.n	8005b44 <__libc_init_array+0x24>
 8005b30:	4d0b      	ldr	r5, [pc, #44]	; (8005b60 <__libc_init_array+0x40>)
 8005b32:	4c0c      	ldr	r4, [pc, #48]	; (8005b64 <__libc_init_array+0x44>)
 8005b34:	f003 f9fe 	bl	8008f34 <_init>
 8005b38:	1b64      	subs	r4, r4, r5
 8005b3a:	10a4      	asrs	r4, r4, #2
 8005b3c:	2600      	movs	r6, #0
 8005b3e:	42a6      	cmp	r6, r4
 8005b40:	d105      	bne.n	8005b4e <__libc_init_array+0x2e>
 8005b42:	bd70      	pop	{r4, r5, r6, pc}
 8005b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b48:	4798      	blx	r3
 8005b4a:	3601      	adds	r6, #1
 8005b4c:	e7ee      	b.n	8005b2c <__libc_init_array+0xc>
 8005b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b52:	4798      	blx	r3
 8005b54:	3601      	adds	r6, #1
 8005b56:	e7f2      	b.n	8005b3e <__libc_init_array+0x1e>
 8005b58:	080096a0 	.word	0x080096a0
 8005b5c:	080096a0 	.word	0x080096a0
 8005b60:	080096a0 	.word	0x080096a0
 8005b64:	080096a4 	.word	0x080096a4

08005b68 <memcpy>:
 8005b68:	440a      	add	r2, r1
 8005b6a:	4291      	cmp	r1, r2
 8005b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b70:	d100      	bne.n	8005b74 <memcpy+0xc>
 8005b72:	4770      	bx	lr
 8005b74:	b510      	push	{r4, lr}
 8005b76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b7e:	4291      	cmp	r1, r2
 8005b80:	d1f9      	bne.n	8005b76 <memcpy+0xe>
 8005b82:	bd10      	pop	{r4, pc}

08005b84 <memset>:
 8005b84:	4402      	add	r2, r0
 8005b86:	4603      	mov	r3, r0
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d100      	bne.n	8005b8e <memset+0xa>
 8005b8c:	4770      	bx	lr
 8005b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b92:	e7f9      	b.n	8005b88 <memset+0x4>

08005b94 <siprintf>:
 8005b94:	b40e      	push	{r1, r2, r3}
 8005b96:	b500      	push	{lr}
 8005b98:	b09c      	sub	sp, #112	; 0x70
 8005b9a:	ab1d      	add	r3, sp, #116	; 0x74
 8005b9c:	9002      	str	r0, [sp, #8]
 8005b9e:	9006      	str	r0, [sp, #24]
 8005ba0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ba4:	4809      	ldr	r0, [pc, #36]	; (8005bcc <siprintf+0x38>)
 8005ba6:	9107      	str	r1, [sp, #28]
 8005ba8:	9104      	str	r1, [sp, #16]
 8005baa:	4909      	ldr	r1, [pc, #36]	; (8005bd0 <siprintf+0x3c>)
 8005bac:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bb0:	9105      	str	r1, [sp, #20]
 8005bb2:	6800      	ldr	r0, [r0, #0]
 8005bb4:	9301      	str	r3, [sp, #4]
 8005bb6:	a902      	add	r1, sp, #8
 8005bb8:	f002 f96a 	bl	8007e90 <_svfiprintf_r>
 8005bbc:	9b02      	ldr	r3, [sp, #8]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	701a      	strb	r2, [r3, #0]
 8005bc2:	b01c      	add	sp, #112	; 0x70
 8005bc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bc8:	b003      	add	sp, #12
 8005bca:	4770      	bx	lr
 8005bcc:	20000084 	.word	0x20000084
 8005bd0:	ffff0208 	.word	0xffff0208

08005bd4 <strncmp>:
 8005bd4:	b510      	push	{r4, lr}
 8005bd6:	b17a      	cbz	r2, 8005bf8 <strncmp+0x24>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	3901      	subs	r1, #1
 8005bdc:	1884      	adds	r4, r0, r2
 8005bde:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005be2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005be6:	4290      	cmp	r0, r2
 8005be8:	d101      	bne.n	8005bee <strncmp+0x1a>
 8005bea:	42a3      	cmp	r3, r4
 8005bec:	d101      	bne.n	8005bf2 <strncmp+0x1e>
 8005bee:	1a80      	subs	r0, r0, r2
 8005bf0:	bd10      	pop	{r4, pc}
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	d1f3      	bne.n	8005bde <strncmp+0xa>
 8005bf6:	e7fa      	b.n	8005bee <strncmp+0x1a>
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	e7f9      	b.n	8005bf0 <strncmp+0x1c>

08005bfc <strstr>:
 8005bfc:	780a      	ldrb	r2, [r1, #0]
 8005bfe:	b570      	push	{r4, r5, r6, lr}
 8005c00:	b96a      	cbnz	r2, 8005c1e <strstr+0x22>
 8005c02:	bd70      	pop	{r4, r5, r6, pc}
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d109      	bne.n	8005c1c <strstr+0x20>
 8005c08:	460c      	mov	r4, r1
 8005c0a:	4605      	mov	r5, r0
 8005c0c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d0f6      	beq.n	8005c02 <strstr+0x6>
 8005c14:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005c18:	429e      	cmp	r6, r3
 8005c1a:	d0f7      	beq.n	8005c0c <strstr+0x10>
 8005c1c:	3001      	adds	r0, #1
 8005c1e:	7803      	ldrb	r3, [r0, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1ef      	bne.n	8005c04 <strstr+0x8>
 8005c24:	4618      	mov	r0, r3
 8005c26:	e7ec      	b.n	8005c02 <strstr+0x6>

08005c28 <sulp>:
 8005c28:	b570      	push	{r4, r5, r6, lr}
 8005c2a:	4604      	mov	r4, r0
 8005c2c:	460d      	mov	r5, r1
 8005c2e:	ec45 4b10 	vmov	d0, r4, r5
 8005c32:	4616      	mov	r6, r2
 8005c34:	f001 fe8a 	bl	800794c <__ulp>
 8005c38:	ec51 0b10 	vmov	r0, r1, d0
 8005c3c:	b17e      	cbz	r6, 8005c5e <sulp+0x36>
 8005c3e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005c42:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	dd09      	ble.n	8005c5e <sulp+0x36>
 8005c4a:	051b      	lsls	r3, r3, #20
 8005c4c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005c50:	2400      	movs	r4, #0
 8005c52:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005c56:	4622      	mov	r2, r4
 8005c58:	462b      	mov	r3, r5
 8005c5a:	f7fa fccd 	bl	80005f8 <__aeabi_dmul>
 8005c5e:	bd70      	pop	{r4, r5, r6, pc}

08005c60 <_strtod_l>:
 8005c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c64:	ed2d 8b02 	vpush	{d8}
 8005c68:	b09d      	sub	sp, #116	; 0x74
 8005c6a:	461f      	mov	r7, r3
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	9318      	str	r3, [sp, #96]	; 0x60
 8005c70:	4ba2      	ldr	r3, [pc, #648]	; (8005efc <_strtod_l+0x29c>)
 8005c72:	9213      	str	r2, [sp, #76]	; 0x4c
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	9305      	str	r3, [sp, #20]
 8005c78:	4604      	mov	r4, r0
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	4688      	mov	r8, r1
 8005c7e:	f7fa faa7 	bl	80001d0 <strlen>
 8005c82:	f04f 0a00 	mov.w	sl, #0
 8005c86:	4605      	mov	r5, r0
 8005c88:	f04f 0b00 	mov.w	fp, #0
 8005c8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005c90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c92:	781a      	ldrb	r2, [r3, #0]
 8005c94:	2a2b      	cmp	r2, #43	; 0x2b
 8005c96:	d04e      	beq.n	8005d36 <_strtod_l+0xd6>
 8005c98:	d83b      	bhi.n	8005d12 <_strtod_l+0xb2>
 8005c9a:	2a0d      	cmp	r2, #13
 8005c9c:	d834      	bhi.n	8005d08 <_strtod_l+0xa8>
 8005c9e:	2a08      	cmp	r2, #8
 8005ca0:	d834      	bhi.n	8005d0c <_strtod_l+0xac>
 8005ca2:	2a00      	cmp	r2, #0
 8005ca4:	d03e      	beq.n	8005d24 <_strtod_l+0xc4>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	930a      	str	r3, [sp, #40]	; 0x28
 8005caa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005cac:	7833      	ldrb	r3, [r6, #0]
 8005cae:	2b30      	cmp	r3, #48	; 0x30
 8005cb0:	f040 80b0 	bne.w	8005e14 <_strtod_l+0x1b4>
 8005cb4:	7873      	ldrb	r3, [r6, #1]
 8005cb6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005cba:	2b58      	cmp	r3, #88	; 0x58
 8005cbc:	d168      	bne.n	8005d90 <_strtod_l+0x130>
 8005cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cc0:	9301      	str	r3, [sp, #4]
 8005cc2:	ab18      	add	r3, sp, #96	; 0x60
 8005cc4:	9702      	str	r7, [sp, #8]
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	4a8d      	ldr	r2, [pc, #564]	; (8005f00 <_strtod_l+0x2a0>)
 8005cca:	ab19      	add	r3, sp, #100	; 0x64
 8005ccc:	a917      	add	r1, sp, #92	; 0x5c
 8005cce:	4620      	mov	r0, r4
 8005cd0:	f000 ffa8 	bl	8006c24 <__gethex>
 8005cd4:	f010 0707 	ands.w	r7, r0, #7
 8005cd8:	4605      	mov	r5, r0
 8005cda:	d005      	beq.n	8005ce8 <_strtod_l+0x88>
 8005cdc:	2f06      	cmp	r7, #6
 8005cde:	d12c      	bne.n	8005d3a <_strtod_l+0xda>
 8005ce0:	3601      	adds	r6, #1
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	9617      	str	r6, [sp, #92]	; 0x5c
 8005ce6:	930a      	str	r3, [sp, #40]	; 0x28
 8005ce8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f040 8590 	bne.w	8006810 <_strtod_l+0xbb0>
 8005cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cf2:	b1eb      	cbz	r3, 8005d30 <_strtod_l+0xd0>
 8005cf4:	4652      	mov	r2, sl
 8005cf6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005cfa:	ec43 2b10 	vmov	d0, r2, r3
 8005cfe:	b01d      	add	sp, #116	; 0x74
 8005d00:	ecbd 8b02 	vpop	{d8}
 8005d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d08:	2a20      	cmp	r2, #32
 8005d0a:	d1cc      	bne.n	8005ca6 <_strtod_l+0x46>
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005d10:	e7be      	b.n	8005c90 <_strtod_l+0x30>
 8005d12:	2a2d      	cmp	r2, #45	; 0x2d
 8005d14:	d1c7      	bne.n	8005ca6 <_strtod_l+0x46>
 8005d16:	2201      	movs	r2, #1
 8005d18:	920a      	str	r2, [sp, #40]	; 0x28
 8005d1a:	1c5a      	adds	r2, r3, #1
 8005d1c:	9217      	str	r2, [sp, #92]	; 0x5c
 8005d1e:	785b      	ldrb	r3, [r3, #1]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1c2      	bne.n	8005caa <_strtod_l+0x4a>
 8005d24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005d26:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f040 856e 	bne.w	800680c <_strtod_l+0xbac>
 8005d30:	4652      	mov	r2, sl
 8005d32:	465b      	mov	r3, fp
 8005d34:	e7e1      	b.n	8005cfa <_strtod_l+0x9a>
 8005d36:	2200      	movs	r2, #0
 8005d38:	e7ee      	b.n	8005d18 <_strtod_l+0xb8>
 8005d3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005d3c:	b13a      	cbz	r2, 8005d4e <_strtod_l+0xee>
 8005d3e:	2135      	movs	r1, #53	; 0x35
 8005d40:	a81a      	add	r0, sp, #104	; 0x68
 8005d42:	f001 ff0e 	bl	8007b62 <__copybits>
 8005d46:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005d48:	4620      	mov	r0, r4
 8005d4a:	f001 facd 	bl	80072e8 <_Bfree>
 8005d4e:	3f01      	subs	r7, #1
 8005d50:	2f04      	cmp	r7, #4
 8005d52:	d806      	bhi.n	8005d62 <_strtod_l+0x102>
 8005d54:	e8df f007 	tbb	[pc, r7]
 8005d58:	1714030a 	.word	0x1714030a
 8005d5c:	0a          	.byte	0x0a
 8005d5d:	00          	.byte	0x00
 8005d5e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005d62:	0728      	lsls	r0, r5, #28
 8005d64:	d5c0      	bpl.n	8005ce8 <_strtod_l+0x88>
 8005d66:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005d6a:	e7bd      	b.n	8005ce8 <_strtod_l+0x88>
 8005d6c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005d70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005d72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005d76:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005d7a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005d7e:	e7f0      	b.n	8005d62 <_strtod_l+0x102>
 8005d80:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005f04 <_strtod_l+0x2a4>
 8005d84:	e7ed      	b.n	8005d62 <_strtod_l+0x102>
 8005d86:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005d8a:	f04f 3aff 	mov.w	sl, #4294967295
 8005d8e:	e7e8      	b.n	8005d62 <_strtod_l+0x102>
 8005d90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d92:	1c5a      	adds	r2, r3, #1
 8005d94:	9217      	str	r2, [sp, #92]	; 0x5c
 8005d96:	785b      	ldrb	r3, [r3, #1]
 8005d98:	2b30      	cmp	r3, #48	; 0x30
 8005d9a:	d0f9      	beq.n	8005d90 <_strtod_l+0x130>
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d0a3      	beq.n	8005ce8 <_strtod_l+0x88>
 8005da0:	2301      	movs	r3, #1
 8005da2:	f04f 0900 	mov.w	r9, #0
 8005da6:	9304      	str	r3, [sp, #16]
 8005da8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005daa:	9308      	str	r3, [sp, #32]
 8005dac:	f8cd 901c 	str.w	r9, [sp, #28]
 8005db0:	464f      	mov	r7, r9
 8005db2:	220a      	movs	r2, #10
 8005db4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005db6:	7806      	ldrb	r6, [r0, #0]
 8005db8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005dbc:	b2d9      	uxtb	r1, r3
 8005dbe:	2909      	cmp	r1, #9
 8005dc0:	d92a      	bls.n	8005e18 <_strtod_l+0x1b8>
 8005dc2:	9905      	ldr	r1, [sp, #20]
 8005dc4:	462a      	mov	r2, r5
 8005dc6:	f7ff ff05 	bl	8005bd4 <strncmp>
 8005dca:	b398      	cbz	r0, 8005e34 <_strtod_l+0x1d4>
 8005dcc:	2000      	movs	r0, #0
 8005dce:	4632      	mov	r2, r6
 8005dd0:	463d      	mov	r5, r7
 8005dd2:	9005      	str	r0, [sp, #20]
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2a65      	cmp	r2, #101	; 0x65
 8005dd8:	d001      	beq.n	8005dde <_strtod_l+0x17e>
 8005dda:	2a45      	cmp	r2, #69	; 0x45
 8005ddc:	d118      	bne.n	8005e10 <_strtod_l+0x1b0>
 8005dde:	b91d      	cbnz	r5, 8005de8 <_strtod_l+0x188>
 8005de0:	9a04      	ldr	r2, [sp, #16]
 8005de2:	4302      	orrs	r2, r0
 8005de4:	d09e      	beq.n	8005d24 <_strtod_l+0xc4>
 8005de6:	2500      	movs	r5, #0
 8005de8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005dec:	f108 0201 	add.w	r2, r8, #1
 8005df0:	9217      	str	r2, [sp, #92]	; 0x5c
 8005df2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005df6:	2a2b      	cmp	r2, #43	; 0x2b
 8005df8:	d075      	beq.n	8005ee6 <_strtod_l+0x286>
 8005dfa:	2a2d      	cmp	r2, #45	; 0x2d
 8005dfc:	d07b      	beq.n	8005ef6 <_strtod_l+0x296>
 8005dfe:	f04f 0c00 	mov.w	ip, #0
 8005e02:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005e06:	2909      	cmp	r1, #9
 8005e08:	f240 8082 	bls.w	8005f10 <_strtod_l+0x2b0>
 8005e0c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005e10:	2600      	movs	r6, #0
 8005e12:	e09d      	b.n	8005f50 <_strtod_l+0x2f0>
 8005e14:	2300      	movs	r3, #0
 8005e16:	e7c4      	b.n	8005da2 <_strtod_l+0x142>
 8005e18:	2f08      	cmp	r7, #8
 8005e1a:	bfd8      	it	le
 8005e1c:	9907      	ldrle	r1, [sp, #28]
 8005e1e:	f100 0001 	add.w	r0, r0, #1
 8005e22:	bfda      	itte	le
 8005e24:	fb02 3301 	mlale	r3, r2, r1, r3
 8005e28:	9307      	strle	r3, [sp, #28]
 8005e2a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005e2e:	3701      	adds	r7, #1
 8005e30:	9017      	str	r0, [sp, #92]	; 0x5c
 8005e32:	e7bf      	b.n	8005db4 <_strtod_l+0x154>
 8005e34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e36:	195a      	adds	r2, r3, r5
 8005e38:	9217      	str	r2, [sp, #92]	; 0x5c
 8005e3a:	5d5a      	ldrb	r2, [r3, r5]
 8005e3c:	2f00      	cmp	r7, #0
 8005e3e:	d037      	beq.n	8005eb0 <_strtod_l+0x250>
 8005e40:	9005      	str	r0, [sp, #20]
 8005e42:	463d      	mov	r5, r7
 8005e44:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005e48:	2b09      	cmp	r3, #9
 8005e4a:	d912      	bls.n	8005e72 <_strtod_l+0x212>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e7c2      	b.n	8005dd6 <_strtod_l+0x176>
 8005e50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e52:	1c5a      	adds	r2, r3, #1
 8005e54:	9217      	str	r2, [sp, #92]	; 0x5c
 8005e56:	785a      	ldrb	r2, [r3, #1]
 8005e58:	3001      	adds	r0, #1
 8005e5a:	2a30      	cmp	r2, #48	; 0x30
 8005e5c:	d0f8      	beq.n	8005e50 <_strtod_l+0x1f0>
 8005e5e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005e62:	2b08      	cmp	r3, #8
 8005e64:	f200 84d9 	bhi.w	800681a <_strtod_l+0xbba>
 8005e68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e6a:	9005      	str	r0, [sp, #20]
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	9308      	str	r3, [sp, #32]
 8005e70:	4605      	mov	r5, r0
 8005e72:	3a30      	subs	r2, #48	; 0x30
 8005e74:	f100 0301 	add.w	r3, r0, #1
 8005e78:	d014      	beq.n	8005ea4 <_strtod_l+0x244>
 8005e7a:	9905      	ldr	r1, [sp, #20]
 8005e7c:	4419      	add	r1, r3
 8005e7e:	9105      	str	r1, [sp, #20]
 8005e80:	462b      	mov	r3, r5
 8005e82:	eb00 0e05 	add.w	lr, r0, r5
 8005e86:	210a      	movs	r1, #10
 8005e88:	4573      	cmp	r3, lr
 8005e8a:	d113      	bne.n	8005eb4 <_strtod_l+0x254>
 8005e8c:	182b      	adds	r3, r5, r0
 8005e8e:	2b08      	cmp	r3, #8
 8005e90:	f105 0501 	add.w	r5, r5, #1
 8005e94:	4405      	add	r5, r0
 8005e96:	dc1c      	bgt.n	8005ed2 <_strtod_l+0x272>
 8005e98:	9907      	ldr	r1, [sp, #28]
 8005e9a:	230a      	movs	r3, #10
 8005e9c:	fb03 2301 	mla	r3, r3, r1, r2
 8005ea0:	9307      	str	r3, [sp, #28]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005ea6:	1c51      	adds	r1, r2, #1
 8005ea8:	9117      	str	r1, [sp, #92]	; 0x5c
 8005eaa:	7852      	ldrb	r2, [r2, #1]
 8005eac:	4618      	mov	r0, r3
 8005eae:	e7c9      	b.n	8005e44 <_strtod_l+0x1e4>
 8005eb0:	4638      	mov	r0, r7
 8005eb2:	e7d2      	b.n	8005e5a <_strtod_l+0x1fa>
 8005eb4:	2b08      	cmp	r3, #8
 8005eb6:	dc04      	bgt.n	8005ec2 <_strtod_l+0x262>
 8005eb8:	9e07      	ldr	r6, [sp, #28]
 8005eba:	434e      	muls	r6, r1
 8005ebc:	9607      	str	r6, [sp, #28]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	e7e2      	b.n	8005e88 <_strtod_l+0x228>
 8005ec2:	f103 0c01 	add.w	ip, r3, #1
 8005ec6:	f1bc 0f10 	cmp.w	ip, #16
 8005eca:	bfd8      	it	le
 8005ecc:	fb01 f909 	mulle.w	r9, r1, r9
 8005ed0:	e7f5      	b.n	8005ebe <_strtod_l+0x25e>
 8005ed2:	2d10      	cmp	r5, #16
 8005ed4:	bfdc      	itt	le
 8005ed6:	230a      	movle	r3, #10
 8005ed8:	fb03 2909 	mlale	r9, r3, r9, r2
 8005edc:	e7e1      	b.n	8005ea2 <_strtod_l+0x242>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	9305      	str	r3, [sp, #20]
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e77c      	b.n	8005de0 <_strtod_l+0x180>
 8005ee6:	f04f 0c00 	mov.w	ip, #0
 8005eea:	f108 0202 	add.w	r2, r8, #2
 8005eee:	9217      	str	r2, [sp, #92]	; 0x5c
 8005ef0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005ef4:	e785      	b.n	8005e02 <_strtod_l+0x1a2>
 8005ef6:	f04f 0c01 	mov.w	ip, #1
 8005efa:	e7f6      	b.n	8005eea <_strtod_l+0x28a>
 8005efc:	08009498 	.word	0x08009498
 8005f00:	08009220 	.word	0x08009220
 8005f04:	7ff00000 	.word	0x7ff00000
 8005f08:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005f0a:	1c51      	adds	r1, r2, #1
 8005f0c:	9117      	str	r1, [sp, #92]	; 0x5c
 8005f0e:	7852      	ldrb	r2, [r2, #1]
 8005f10:	2a30      	cmp	r2, #48	; 0x30
 8005f12:	d0f9      	beq.n	8005f08 <_strtod_l+0x2a8>
 8005f14:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005f18:	2908      	cmp	r1, #8
 8005f1a:	f63f af79 	bhi.w	8005e10 <_strtod_l+0x1b0>
 8005f1e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005f22:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005f24:	9206      	str	r2, [sp, #24]
 8005f26:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005f28:	1c51      	adds	r1, r2, #1
 8005f2a:	9117      	str	r1, [sp, #92]	; 0x5c
 8005f2c:	7852      	ldrb	r2, [r2, #1]
 8005f2e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005f32:	2e09      	cmp	r6, #9
 8005f34:	d937      	bls.n	8005fa6 <_strtod_l+0x346>
 8005f36:	9e06      	ldr	r6, [sp, #24]
 8005f38:	1b89      	subs	r1, r1, r6
 8005f3a:	2908      	cmp	r1, #8
 8005f3c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005f40:	dc02      	bgt.n	8005f48 <_strtod_l+0x2e8>
 8005f42:	4576      	cmp	r6, lr
 8005f44:	bfa8      	it	ge
 8005f46:	4676      	movge	r6, lr
 8005f48:	f1bc 0f00 	cmp.w	ip, #0
 8005f4c:	d000      	beq.n	8005f50 <_strtod_l+0x2f0>
 8005f4e:	4276      	negs	r6, r6
 8005f50:	2d00      	cmp	r5, #0
 8005f52:	d14d      	bne.n	8005ff0 <_strtod_l+0x390>
 8005f54:	9904      	ldr	r1, [sp, #16]
 8005f56:	4301      	orrs	r1, r0
 8005f58:	f47f aec6 	bne.w	8005ce8 <_strtod_l+0x88>
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f47f aee1 	bne.w	8005d24 <_strtod_l+0xc4>
 8005f62:	2a69      	cmp	r2, #105	; 0x69
 8005f64:	d027      	beq.n	8005fb6 <_strtod_l+0x356>
 8005f66:	dc24      	bgt.n	8005fb2 <_strtod_l+0x352>
 8005f68:	2a49      	cmp	r2, #73	; 0x49
 8005f6a:	d024      	beq.n	8005fb6 <_strtod_l+0x356>
 8005f6c:	2a4e      	cmp	r2, #78	; 0x4e
 8005f6e:	f47f aed9 	bne.w	8005d24 <_strtod_l+0xc4>
 8005f72:	499f      	ldr	r1, [pc, #636]	; (80061f0 <_strtod_l+0x590>)
 8005f74:	a817      	add	r0, sp, #92	; 0x5c
 8005f76:	f001 f8ad 	bl	80070d4 <__match>
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	f43f aed2 	beq.w	8005d24 <_strtod_l+0xc4>
 8005f80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2b28      	cmp	r3, #40	; 0x28
 8005f86:	d12d      	bne.n	8005fe4 <_strtod_l+0x384>
 8005f88:	499a      	ldr	r1, [pc, #616]	; (80061f4 <_strtod_l+0x594>)
 8005f8a:	aa1a      	add	r2, sp, #104	; 0x68
 8005f8c:	a817      	add	r0, sp, #92	; 0x5c
 8005f8e:	f001 f8b5 	bl	80070fc <__hexnan>
 8005f92:	2805      	cmp	r0, #5
 8005f94:	d126      	bne.n	8005fe4 <_strtod_l+0x384>
 8005f96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f98:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005f9c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005fa0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005fa4:	e6a0      	b.n	8005ce8 <_strtod_l+0x88>
 8005fa6:	210a      	movs	r1, #10
 8005fa8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005fac:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005fb0:	e7b9      	b.n	8005f26 <_strtod_l+0x2c6>
 8005fb2:	2a6e      	cmp	r2, #110	; 0x6e
 8005fb4:	e7db      	b.n	8005f6e <_strtod_l+0x30e>
 8005fb6:	4990      	ldr	r1, [pc, #576]	; (80061f8 <_strtod_l+0x598>)
 8005fb8:	a817      	add	r0, sp, #92	; 0x5c
 8005fba:	f001 f88b 	bl	80070d4 <__match>
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	f43f aeb0 	beq.w	8005d24 <_strtod_l+0xc4>
 8005fc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005fc6:	498d      	ldr	r1, [pc, #564]	; (80061fc <_strtod_l+0x59c>)
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	a817      	add	r0, sp, #92	; 0x5c
 8005fcc:	9317      	str	r3, [sp, #92]	; 0x5c
 8005fce:	f001 f881 	bl	80070d4 <__match>
 8005fd2:	b910      	cbnz	r0, 8005fda <_strtod_l+0x37a>
 8005fd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	9317      	str	r3, [sp, #92]	; 0x5c
 8005fda:	f8df b230 	ldr.w	fp, [pc, #560]	; 800620c <_strtod_l+0x5ac>
 8005fde:	f04f 0a00 	mov.w	sl, #0
 8005fe2:	e681      	b.n	8005ce8 <_strtod_l+0x88>
 8005fe4:	4886      	ldr	r0, [pc, #536]	; (8006200 <_strtod_l+0x5a0>)
 8005fe6:	f002 fb43 	bl	8008670 <nan>
 8005fea:	ec5b ab10 	vmov	sl, fp, d0
 8005fee:	e67b      	b.n	8005ce8 <_strtod_l+0x88>
 8005ff0:	9b05      	ldr	r3, [sp, #20]
 8005ff2:	9807      	ldr	r0, [sp, #28]
 8005ff4:	1af3      	subs	r3, r6, r3
 8005ff6:	2f00      	cmp	r7, #0
 8005ff8:	bf08      	it	eq
 8005ffa:	462f      	moveq	r7, r5
 8005ffc:	2d10      	cmp	r5, #16
 8005ffe:	9306      	str	r3, [sp, #24]
 8006000:	46a8      	mov	r8, r5
 8006002:	bfa8      	it	ge
 8006004:	f04f 0810 	movge.w	r8, #16
 8006008:	f7fa fa7c 	bl	8000504 <__aeabi_ui2d>
 800600c:	2d09      	cmp	r5, #9
 800600e:	4682      	mov	sl, r0
 8006010:	468b      	mov	fp, r1
 8006012:	dd13      	ble.n	800603c <_strtod_l+0x3dc>
 8006014:	4b7b      	ldr	r3, [pc, #492]	; (8006204 <_strtod_l+0x5a4>)
 8006016:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800601a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800601e:	f7fa faeb 	bl	80005f8 <__aeabi_dmul>
 8006022:	4682      	mov	sl, r0
 8006024:	4648      	mov	r0, r9
 8006026:	468b      	mov	fp, r1
 8006028:	f7fa fa6c 	bl	8000504 <__aeabi_ui2d>
 800602c:	4602      	mov	r2, r0
 800602e:	460b      	mov	r3, r1
 8006030:	4650      	mov	r0, sl
 8006032:	4659      	mov	r1, fp
 8006034:	f7fa f92a 	bl	800028c <__adddf3>
 8006038:	4682      	mov	sl, r0
 800603a:	468b      	mov	fp, r1
 800603c:	2d0f      	cmp	r5, #15
 800603e:	dc38      	bgt.n	80060b2 <_strtod_l+0x452>
 8006040:	9b06      	ldr	r3, [sp, #24]
 8006042:	2b00      	cmp	r3, #0
 8006044:	f43f ae50 	beq.w	8005ce8 <_strtod_l+0x88>
 8006048:	dd24      	ble.n	8006094 <_strtod_l+0x434>
 800604a:	2b16      	cmp	r3, #22
 800604c:	dc0b      	bgt.n	8006066 <_strtod_l+0x406>
 800604e:	496d      	ldr	r1, [pc, #436]	; (8006204 <_strtod_l+0x5a4>)
 8006050:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006054:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006058:	4652      	mov	r2, sl
 800605a:	465b      	mov	r3, fp
 800605c:	f7fa facc 	bl	80005f8 <__aeabi_dmul>
 8006060:	4682      	mov	sl, r0
 8006062:	468b      	mov	fp, r1
 8006064:	e640      	b.n	8005ce8 <_strtod_l+0x88>
 8006066:	9a06      	ldr	r2, [sp, #24]
 8006068:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800606c:	4293      	cmp	r3, r2
 800606e:	db20      	blt.n	80060b2 <_strtod_l+0x452>
 8006070:	4c64      	ldr	r4, [pc, #400]	; (8006204 <_strtod_l+0x5a4>)
 8006072:	f1c5 050f 	rsb	r5, r5, #15
 8006076:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800607a:	4652      	mov	r2, sl
 800607c:	465b      	mov	r3, fp
 800607e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006082:	f7fa fab9 	bl	80005f8 <__aeabi_dmul>
 8006086:	9b06      	ldr	r3, [sp, #24]
 8006088:	1b5d      	subs	r5, r3, r5
 800608a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800608e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006092:	e7e3      	b.n	800605c <_strtod_l+0x3fc>
 8006094:	9b06      	ldr	r3, [sp, #24]
 8006096:	3316      	adds	r3, #22
 8006098:	db0b      	blt.n	80060b2 <_strtod_l+0x452>
 800609a:	9b05      	ldr	r3, [sp, #20]
 800609c:	1b9e      	subs	r6, r3, r6
 800609e:	4b59      	ldr	r3, [pc, #356]	; (8006204 <_strtod_l+0x5a4>)
 80060a0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80060a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80060a8:	4650      	mov	r0, sl
 80060aa:	4659      	mov	r1, fp
 80060ac:	f7fa fbce 	bl	800084c <__aeabi_ddiv>
 80060b0:	e7d6      	b.n	8006060 <_strtod_l+0x400>
 80060b2:	9b06      	ldr	r3, [sp, #24]
 80060b4:	eba5 0808 	sub.w	r8, r5, r8
 80060b8:	4498      	add	r8, r3
 80060ba:	f1b8 0f00 	cmp.w	r8, #0
 80060be:	dd74      	ble.n	80061aa <_strtod_l+0x54a>
 80060c0:	f018 030f 	ands.w	r3, r8, #15
 80060c4:	d00a      	beq.n	80060dc <_strtod_l+0x47c>
 80060c6:	494f      	ldr	r1, [pc, #316]	; (8006204 <_strtod_l+0x5a4>)
 80060c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80060cc:	4652      	mov	r2, sl
 80060ce:	465b      	mov	r3, fp
 80060d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060d4:	f7fa fa90 	bl	80005f8 <__aeabi_dmul>
 80060d8:	4682      	mov	sl, r0
 80060da:	468b      	mov	fp, r1
 80060dc:	f038 080f 	bics.w	r8, r8, #15
 80060e0:	d04f      	beq.n	8006182 <_strtod_l+0x522>
 80060e2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80060e6:	dd22      	ble.n	800612e <_strtod_l+0x4ce>
 80060e8:	2500      	movs	r5, #0
 80060ea:	462e      	mov	r6, r5
 80060ec:	9507      	str	r5, [sp, #28]
 80060ee:	9505      	str	r5, [sp, #20]
 80060f0:	2322      	movs	r3, #34	; 0x22
 80060f2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800620c <_strtod_l+0x5ac>
 80060f6:	6023      	str	r3, [r4, #0]
 80060f8:	f04f 0a00 	mov.w	sl, #0
 80060fc:	9b07      	ldr	r3, [sp, #28]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f43f adf2 	beq.w	8005ce8 <_strtod_l+0x88>
 8006104:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006106:	4620      	mov	r0, r4
 8006108:	f001 f8ee 	bl	80072e8 <_Bfree>
 800610c:	9905      	ldr	r1, [sp, #20]
 800610e:	4620      	mov	r0, r4
 8006110:	f001 f8ea 	bl	80072e8 <_Bfree>
 8006114:	4631      	mov	r1, r6
 8006116:	4620      	mov	r0, r4
 8006118:	f001 f8e6 	bl	80072e8 <_Bfree>
 800611c:	9907      	ldr	r1, [sp, #28]
 800611e:	4620      	mov	r0, r4
 8006120:	f001 f8e2 	bl	80072e8 <_Bfree>
 8006124:	4629      	mov	r1, r5
 8006126:	4620      	mov	r0, r4
 8006128:	f001 f8de 	bl	80072e8 <_Bfree>
 800612c:	e5dc      	b.n	8005ce8 <_strtod_l+0x88>
 800612e:	4b36      	ldr	r3, [pc, #216]	; (8006208 <_strtod_l+0x5a8>)
 8006130:	9304      	str	r3, [sp, #16]
 8006132:	2300      	movs	r3, #0
 8006134:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006138:	4650      	mov	r0, sl
 800613a:	4659      	mov	r1, fp
 800613c:	4699      	mov	r9, r3
 800613e:	f1b8 0f01 	cmp.w	r8, #1
 8006142:	dc21      	bgt.n	8006188 <_strtod_l+0x528>
 8006144:	b10b      	cbz	r3, 800614a <_strtod_l+0x4ea>
 8006146:	4682      	mov	sl, r0
 8006148:	468b      	mov	fp, r1
 800614a:	4b2f      	ldr	r3, [pc, #188]	; (8006208 <_strtod_l+0x5a8>)
 800614c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006150:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006154:	4652      	mov	r2, sl
 8006156:	465b      	mov	r3, fp
 8006158:	e9d9 0100 	ldrd	r0, r1, [r9]
 800615c:	f7fa fa4c 	bl	80005f8 <__aeabi_dmul>
 8006160:	4b2a      	ldr	r3, [pc, #168]	; (800620c <_strtod_l+0x5ac>)
 8006162:	460a      	mov	r2, r1
 8006164:	400b      	ands	r3, r1
 8006166:	492a      	ldr	r1, [pc, #168]	; (8006210 <_strtod_l+0x5b0>)
 8006168:	428b      	cmp	r3, r1
 800616a:	4682      	mov	sl, r0
 800616c:	d8bc      	bhi.n	80060e8 <_strtod_l+0x488>
 800616e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006172:	428b      	cmp	r3, r1
 8006174:	bf86      	itte	hi
 8006176:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006214 <_strtod_l+0x5b4>
 800617a:	f04f 3aff 	movhi.w	sl, #4294967295
 800617e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006182:	2300      	movs	r3, #0
 8006184:	9304      	str	r3, [sp, #16]
 8006186:	e084      	b.n	8006292 <_strtod_l+0x632>
 8006188:	f018 0f01 	tst.w	r8, #1
 800618c:	d005      	beq.n	800619a <_strtod_l+0x53a>
 800618e:	9b04      	ldr	r3, [sp, #16]
 8006190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006194:	f7fa fa30 	bl	80005f8 <__aeabi_dmul>
 8006198:	2301      	movs	r3, #1
 800619a:	9a04      	ldr	r2, [sp, #16]
 800619c:	3208      	adds	r2, #8
 800619e:	f109 0901 	add.w	r9, r9, #1
 80061a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80061a6:	9204      	str	r2, [sp, #16]
 80061a8:	e7c9      	b.n	800613e <_strtod_l+0x4de>
 80061aa:	d0ea      	beq.n	8006182 <_strtod_l+0x522>
 80061ac:	f1c8 0800 	rsb	r8, r8, #0
 80061b0:	f018 020f 	ands.w	r2, r8, #15
 80061b4:	d00a      	beq.n	80061cc <_strtod_l+0x56c>
 80061b6:	4b13      	ldr	r3, [pc, #76]	; (8006204 <_strtod_l+0x5a4>)
 80061b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061bc:	4650      	mov	r0, sl
 80061be:	4659      	mov	r1, fp
 80061c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c4:	f7fa fb42 	bl	800084c <__aeabi_ddiv>
 80061c8:	4682      	mov	sl, r0
 80061ca:	468b      	mov	fp, r1
 80061cc:	ea5f 1828 	movs.w	r8, r8, asr #4
 80061d0:	d0d7      	beq.n	8006182 <_strtod_l+0x522>
 80061d2:	f1b8 0f1f 	cmp.w	r8, #31
 80061d6:	dd1f      	ble.n	8006218 <_strtod_l+0x5b8>
 80061d8:	2500      	movs	r5, #0
 80061da:	462e      	mov	r6, r5
 80061dc:	9507      	str	r5, [sp, #28]
 80061de:	9505      	str	r5, [sp, #20]
 80061e0:	2322      	movs	r3, #34	; 0x22
 80061e2:	f04f 0a00 	mov.w	sl, #0
 80061e6:	f04f 0b00 	mov.w	fp, #0
 80061ea:	6023      	str	r3, [r4, #0]
 80061ec:	e786      	b.n	80060fc <_strtod_l+0x49c>
 80061ee:	bf00      	nop
 80061f0:	0800921d 	.word	0x0800921d
 80061f4:	08009234 	.word	0x08009234
 80061f8:	08009214 	.word	0x08009214
 80061fc:	08009217 	.word	0x08009217
 8006200:	0800931f 	.word	0x0800931f
 8006204:	08009530 	.word	0x08009530
 8006208:	08009508 	.word	0x08009508
 800620c:	7ff00000 	.word	0x7ff00000
 8006210:	7ca00000 	.word	0x7ca00000
 8006214:	7fefffff 	.word	0x7fefffff
 8006218:	f018 0310 	ands.w	r3, r8, #16
 800621c:	bf18      	it	ne
 800621e:	236a      	movne	r3, #106	; 0x6a
 8006220:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80065d0 <_strtod_l+0x970>
 8006224:	9304      	str	r3, [sp, #16]
 8006226:	4650      	mov	r0, sl
 8006228:	4659      	mov	r1, fp
 800622a:	2300      	movs	r3, #0
 800622c:	f018 0f01 	tst.w	r8, #1
 8006230:	d004      	beq.n	800623c <_strtod_l+0x5dc>
 8006232:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006236:	f7fa f9df 	bl	80005f8 <__aeabi_dmul>
 800623a:	2301      	movs	r3, #1
 800623c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006240:	f109 0908 	add.w	r9, r9, #8
 8006244:	d1f2      	bne.n	800622c <_strtod_l+0x5cc>
 8006246:	b10b      	cbz	r3, 800624c <_strtod_l+0x5ec>
 8006248:	4682      	mov	sl, r0
 800624a:	468b      	mov	fp, r1
 800624c:	9b04      	ldr	r3, [sp, #16]
 800624e:	b1c3      	cbz	r3, 8006282 <_strtod_l+0x622>
 8006250:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006254:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006258:	2b00      	cmp	r3, #0
 800625a:	4659      	mov	r1, fp
 800625c:	dd11      	ble.n	8006282 <_strtod_l+0x622>
 800625e:	2b1f      	cmp	r3, #31
 8006260:	f340 8124 	ble.w	80064ac <_strtod_l+0x84c>
 8006264:	2b34      	cmp	r3, #52	; 0x34
 8006266:	bfde      	ittt	le
 8006268:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800626c:	f04f 33ff 	movle.w	r3, #4294967295
 8006270:	fa03 f202 	lslle.w	r2, r3, r2
 8006274:	f04f 0a00 	mov.w	sl, #0
 8006278:	bfcc      	ite	gt
 800627a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800627e:	ea02 0b01 	andle.w	fp, r2, r1
 8006282:	2200      	movs	r2, #0
 8006284:	2300      	movs	r3, #0
 8006286:	4650      	mov	r0, sl
 8006288:	4659      	mov	r1, fp
 800628a:	f7fa fc1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800628e:	2800      	cmp	r0, #0
 8006290:	d1a2      	bne.n	80061d8 <_strtod_l+0x578>
 8006292:	9b07      	ldr	r3, [sp, #28]
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	9908      	ldr	r1, [sp, #32]
 8006298:	462b      	mov	r3, r5
 800629a:	463a      	mov	r2, r7
 800629c:	4620      	mov	r0, r4
 800629e:	f001 f88b 	bl	80073b8 <__s2b>
 80062a2:	9007      	str	r0, [sp, #28]
 80062a4:	2800      	cmp	r0, #0
 80062a6:	f43f af1f 	beq.w	80060e8 <_strtod_l+0x488>
 80062aa:	9b05      	ldr	r3, [sp, #20]
 80062ac:	1b9e      	subs	r6, r3, r6
 80062ae:	9b06      	ldr	r3, [sp, #24]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	bfb4      	ite	lt
 80062b4:	4633      	movlt	r3, r6
 80062b6:	2300      	movge	r3, #0
 80062b8:	930c      	str	r3, [sp, #48]	; 0x30
 80062ba:	9b06      	ldr	r3, [sp, #24]
 80062bc:	2500      	movs	r5, #0
 80062be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80062c2:	9312      	str	r3, [sp, #72]	; 0x48
 80062c4:	462e      	mov	r6, r5
 80062c6:	9b07      	ldr	r3, [sp, #28]
 80062c8:	4620      	mov	r0, r4
 80062ca:	6859      	ldr	r1, [r3, #4]
 80062cc:	f000 ffcc 	bl	8007268 <_Balloc>
 80062d0:	9005      	str	r0, [sp, #20]
 80062d2:	2800      	cmp	r0, #0
 80062d4:	f43f af0c 	beq.w	80060f0 <_strtod_l+0x490>
 80062d8:	9b07      	ldr	r3, [sp, #28]
 80062da:	691a      	ldr	r2, [r3, #16]
 80062dc:	3202      	adds	r2, #2
 80062de:	f103 010c 	add.w	r1, r3, #12
 80062e2:	0092      	lsls	r2, r2, #2
 80062e4:	300c      	adds	r0, #12
 80062e6:	f7ff fc3f 	bl	8005b68 <memcpy>
 80062ea:	ec4b ab10 	vmov	d0, sl, fp
 80062ee:	aa1a      	add	r2, sp, #104	; 0x68
 80062f0:	a919      	add	r1, sp, #100	; 0x64
 80062f2:	4620      	mov	r0, r4
 80062f4:	f001 fba6 	bl	8007a44 <__d2b>
 80062f8:	ec4b ab18 	vmov	d8, sl, fp
 80062fc:	9018      	str	r0, [sp, #96]	; 0x60
 80062fe:	2800      	cmp	r0, #0
 8006300:	f43f aef6 	beq.w	80060f0 <_strtod_l+0x490>
 8006304:	2101      	movs	r1, #1
 8006306:	4620      	mov	r0, r4
 8006308:	f001 f8f0 	bl	80074ec <__i2b>
 800630c:	4606      	mov	r6, r0
 800630e:	2800      	cmp	r0, #0
 8006310:	f43f aeee 	beq.w	80060f0 <_strtod_l+0x490>
 8006314:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006316:	9904      	ldr	r1, [sp, #16]
 8006318:	2b00      	cmp	r3, #0
 800631a:	bfab      	itete	ge
 800631c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800631e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006320:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006322:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006326:	bfac      	ite	ge
 8006328:	eb03 0902 	addge.w	r9, r3, r2
 800632c:	1ad7      	sublt	r7, r2, r3
 800632e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006330:	eba3 0801 	sub.w	r8, r3, r1
 8006334:	4490      	add	r8, r2
 8006336:	4ba1      	ldr	r3, [pc, #644]	; (80065bc <_strtod_l+0x95c>)
 8006338:	f108 38ff 	add.w	r8, r8, #4294967295
 800633c:	4598      	cmp	r8, r3
 800633e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006342:	f280 80c7 	bge.w	80064d4 <_strtod_l+0x874>
 8006346:	eba3 0308 	sub.w	r3, r3, r8
 800634a:	2b1f      	cmp	r3, #31
 800634c:	eba2 0203 	sub.w	r2, r2, r3
 8006350:	f04f 0101 	mov.w	r1, #1
 8006354:	f300 80b1 	bgt.w	80064ba <_strtod_l+0x85a>
 8006358:	fa01 f303 	lsl.w	r3, r1, r3
 800635c:	930d      	str	r3, [sp, #52]	; 0x34
 800635e:	2300      	movs	r3, #0
 8006360:	9308      	str	r3, [sp, #32]
 8006362:	eb09 0802 	add.w	r8, r9, r2
 8006366:	9b04      	ldr	r3, [sp, #16]
 8006368:	45c1      	cmp	r9, r8
 800636a:	4417      	add	r7, r2
 800636c:	441f      	add	r7, r3
 800636e:	464b      	mov	r3, r9
 8006370:	bfa8      	it	ge
 8006372:	4643      	movge	r3, r8
 8006374:	42bb      	cmp	r3, r7
 8006376:	bfa8      	it	ge
 8006378:	463b      	movge	r3, r7
 800637a:	2b00      	cmp	r3, #0
 800637c:	bfc2      	ittt	gt
 800637e:	eba8 0803 	subgt.w	r8, r8, r3
 8006382:	1aff      	subgt	r7, r7, r3
 8006384:	eba9 0903 	subgt.w	r9, r9, r3
 8006388:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800638a:	2b00      	cmp	r3, #0
 800638c:	dd17      	ble.n	80063be <_strtod_l+0x75e>
 800638e:	4631      	mov	r1, r6
 8006390:	461a      	mov	r2, r3
 8006392:	4620      	mov	r0, r4
 8006394:	f001 f96a 	bl	800766c <__pow5mult>
 8006398:	4606      	mov	r6, r0
 800639a:	2800      	cmp	r0, #0
 800639c:	f43f aea8 	beq.w	80060f0 <_strtod_l+0x490>
 80063a0:	4601      	mov	r1, r0
 80063a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80063a4:	4620      	mov	r0, r4
 80063a6:	f001 f8b7 	bl	8007518 <__multiply>
 80063aa:	900b      	str	r0, [sp, #44]	; 0x2c
 80063ac:	2800      	cmp	r0, #0
 80063ae:	f43f ae9f 	beq.w	80060f0 <_strtod_l+0x490>
 80063b2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80063b4:	4620      	mov	r0, r4
 80063b6:	f000 ff97 	bl	80072e8 <_Bfree>
 80063ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063bc:	9318      	str	r3, [sp, #96]	; 0x60
 80063be:	f1b8 0f00 	cmp.w	r8, #0
 80063c2:	f300 808c 	bgt.w	80064de <_strtod_l+0x87e>
 80063c6:	9b06      	ldr	r3, [sp, #24]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	dd08      	ble.n	80063de <_strtod_l+0x77e>
 80063cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80063ce:	9905      	ldr	r1, [sp, #20]
 80063d0:	4620      	mov	r0, r4
 80063d2:	f001 f94b 	bl	800766c <__pow5mult>
 80063d6:	9005      	str	r0, [sp, #20]
 80063d8:	2800      	cmp	r0, #0
 80063da:	f43f ae89 	beq.w	80060f0 <_strtod_l+0x490>
 80063de:	2f00      	cmp	r7, #0
 80063e0:	dd08      	ble.n	80063f4 <_strtod_l+0x794>
 80063e2:	9905      	ldr	r1, [sp, #20]
 80063e4:	463a      	mov	r2, r7
 80063e6:	4620      	mov	r0, r4
 80063e8:	f001 f99a 	bl	8007720 <__lshift>
 80063ec:	9005      	str	r0, [sp, #20]
 80063ee:	2800      	cmp	r0, #0
 80063f0:	f43f ae7e 	beq.w	80060f0 <_strtod_l+0x490>
 80063f4:	f1b9 0f00 	cmp.w	r9, #0
 80063f8:	dd08      	ble.n	800640c <_strtod_l+0x7ac>
 80063fa:	4631      	mov	r1, r6
 80063fc:	464a      	mov	r2, r9
 80063fe:	4620      	mov	r0, r4
 8006400:	f001 f98e 	bl	8007720 <__lshift>
 8006404:	4606      	mov	r6, r0
 8006406:	2800      	cmp	r0, #0
 8006408:	f43f ae72 	beq.w	80060f0 <_strtod_l+0x490>
 800640c:	9a05      	ldr	r2, [sp, #20]
 800640e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006410:	4620      	mov	r0, r4
 8006412:	f001 fa11 	bl	8007838 <__mdiff>
 8006416:	4605      	mov	r5, r0
 8006418:	2800      	cmp	r0, #0
 800641a:	f43f ae69 	beq.w	80060f0 <_strtod_l+0x490>
 800641e:	68c3      	ldr	r3, [r0, #12]
 8006420:	930b      	str	r3, [sp, #44]	; 0x2c
 8006422:	2300      	movs	r3, #0
 8006424:	60c3      	str	r3, [r0, #12]
 8006426:	4631      	mov	r1, r6
 8006428:	f001 f9ea 	bl	8007800 <__mcmp>
 800642c:	2800      	cmp	r0, #0
 800642e:	da60      	bge.n	80064f2 <_strtod_l+0x892>
 8006430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006432:	ea53 030a 	orrs.w	r3, r3, sl
 8006436:	f040 8082 	bne.w	800653e <_strtod_l+0x8de>
 800643a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800643e:	2b00      	cmp	r3, #0
 8006440:	d17d      	bne.n	800653e <_strtod_l+0x8de>
 8006442:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006446:	0d1b      	lsrs	r3, r3, #20
 8006448:	051b      	lsls	r3, r3, #20
 800644a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800644e:	d976      	bls.n	800653e <_strtod_l+0x8de>
 8006450:	696b      	ldr	r3, [r5, #20]
 8006452:	b913      	cbnz	r3, 800645a <_strtod_l+0x7fa>
 8006454:	692b      	ldr	r3, [r5, #16]
 8006456:	2b01      	cmp	r3, #1
 8006458:	dd71      	ble.n	800653e <_strtod_l+0x8de>
 800645a:	4629      	mov	r1, r5
 800645c:	2201      	movs	r2, #1
 800645e:	4620      	mov	r0, r4
 8006460:	f001 f95e 	bl	8007720 <__lshift>
 8006464:	4631      	mov	r1, r6
 8006466:	4605      	mov	r5, r0
 8006468:	f001 f9ca 	bl	8007800 <__mcmp>
 800646c:	2800      	cmp	r0, #0
 800646e:	dd66      	ble.n	800653e <_strtod_l+0x8de>
 8006470:	9904      	ldr	r1, [sp, #16]
 8006472:	4a53      	ldr	r2, [pc, #332]	; (80065c0 <_strtod_l+0x960>)
 8006474:	465b      	mov	r3, fp
 8006476:	2900      	cmp	r1, #0
 8006478:	f000 8081 	beq.w	800657e <_strtod_l+0x91e>
 800647c:	ea02 010b 	and.w	r1, r2, fp
 8006480:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006484:	dc7b      	bgt.n	800657e <_strtod_l+0x91e>
 8006486:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800648a:	f77f aea9 	ble.w	80061e0 <_strtod_l+0x580>
 800648e:	4b4d      	ldr	r3, [pc, #308]	; (80065c4 <_strtod_l+0x964>)
 8006490:	4650      	mov	r0, sl
 8006492:	4659      	mov	r1, fp
 8006494:	2200      	movs	r2, #0
 8006496:	f7fa f8af 	bl	80005f8 <__aeabi_dmul>
 800649a:	460b      	mov	r3, r1
 800649c:	4303      	orrs	r3, r0
 800649e:	bf08      	it	eq
 80064a0:	2322      	moveq	r3, #34	; 0x22
 80064a2:	4682      	mov	sl, r0
 80064a4:	468b      	mov	fp, r1
 80064a6:	bf08      	it	eq
 80064a8:	6023      	streq	r3, [r4, #0]
 80064aa:	e62b      	b.n	8006104 <_strtod_l+0x4a4>
 80064ac:	f04f 32ff 	mov.w	r2, #4294967295
 80064b0:	fa02 f303 	lsl.w	r3, r2, r3
 80064b4:	ea03 0a0a 	and.w	sl, r3, sl
 80064b8:	e6e3      	b.n	8006282 <_strtod_l+0x622>
 80064ba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80064be:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80064c2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80064c6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80064ca:	fa01 f308 	lsl.w	r3, r1, r8
 80064ce:	9308      	str	r3, [sp, #32]
 80064d0:	910d      	str	r1, [sp, #52]	; 0x34
 80064d2:	e746      	b.n	8006362 <_strtod_l+0x702>
 80064d4:	2300      	movs	r3, #0
 80064d6:	9308      	str	r3, [sp, #32]
 80064d8:	2301      	movs	r3, #1
 80064da:	930d      	str	r3, [sp, #52]	; 0x34
 80064dc:	e741      	b.n	8006362 <_strtod_l+0x702>
 80064de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80064e0:	4642      	mov	r2, r8
 80064e2:	4620      	mov	r0, r4
 80064e4:	f001 f91c 	bl	8007720 <__lshift>
 80064e8:	9018      	str	r0, [sp, #96]	; 0x60
 80064ea:	2800      	cmp	r0, #0
 80064ec:	f47f af6b 	bne.w	80063c6 <_strtod_l+0x766>
 80064f0:	e5fe      	b.n	80060f0 <_strtod_l+0x490>
 80064f2:	465f      	mov	r7, fp
 80064f4:	d16e      	bne.n	80065d4 <_strtod_l+0x974>
 80064f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80064f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80064fc:	b342      	cbz	r2, 8006550 <_strtod_l+0x8f0>
 80064fe:	4a32      	ldr	r2, [pc, #200]	; (80065c8 <_strtod_l+0x968>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d128      	bne.n	8006556 <_strtod_l+0x8f6>
 8006504:	9b04      	ldr	r3, [sp, #16]
 8006506:	4651      	mov	r1, sl
 8006508:	b1eb      	cbz	r3, 8006546 <_strtod_l+0x8e6>
 800650a:	4b2d      	ldr	r3, [pc, #180]	; (80065c0 <_strtod_l+0x960>)
 800650c:	403b      	ands	r3, r7
 800650e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006512:	f04f 32ff 	mov.w	r2, #4294967295
 8006516:	d819      	bhi.n	800654c <_strtod_l+0x8ec>
 8006518:	0d1b      	lsrs	r3, r3, #20
 800651a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800651e:	fa02 f303 	lsl.w	r3, r2, r3
 8006522:	4299      	cmp	r1, r3
 8006524:	d117      	bne.n	8006556 <_strtod_l+0x8f6>
 8006526:	4b29      	ldr	r3, [pc, #164]	; (80065cc <_strtod_l+0x96c>)
 8006528:	429f      	cmp	r7, r3
 800652a:	d102      	bne.n	8006532 <_strtod_l+0x8d2>
 800652c:	3101      	adds	r1, #1
 800652e:	f43f addf 	beq.w	80060f0 <_strtod_l+0x490>
 8006532:	4b23      	ldr	r3, [pc, #140]	; (80065c0 <_strtod_l+0x960>)
 8006534:	403b      	ands	r3, r7
 8006536:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800653a:	f04f 0a00 	mov.w	sl, #0
 800653e:	9b04      	ldr	r3, [sp, #16]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1a4      	bne.n	800648e <_strtod_l+0x82e>
 8006544:	e5de      	b.n	8006104 <_strtod_l+0x4a4>
 8006546:	f04f 33ff 	mov.w	r3, #4294967295
 800654a:	e7ea      	b.n	8006522 <_strtod_l+0x8c2>
 800654c:	4613      	mov	r3, r2
 800654e:	e7e8      	b.n	8006522 <_strtod_l+0x8c2>
 8006550:	ea53 030a 	orrs.w	r3, r3, sl
 8006554:	d08c      	beq.n	8006470 <_strtod_l+0x810>
 8006556:	9b08      	ldr	r3, [sp, #32]
 8006558:	b1db      	cbz	r3, 8006592 <_strtod_l+0x932>
 800655a:	423b      	tst	r3, r7
 800655c:	d0ef      	beq.n	800653e <_strtod_l+0x8de>
 800655e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006560:	9a04      	ldr	r2, [sp, #16]
 8006562:	4650      	mov	r0, sl
 8006564:	4659      	mov	r1, fp
 8006566:	b1c3      	cbz	r3, 800659a <_strtod_l+0x93a>
 8006568:	f7ff fb5e 	bl	8005c28 <sulp>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	ec51 0b18 	vmov	r0, r1, d8
 8006574:	f7f9 fe8a 	bl	800028c <__adddf3>
 8006578:	4682      	mov	sl, r0
 800657a:	468b      	mov	fp, r1
 800657c:	e7df      	b.n	800653e <_strtod_l+0x8de>
 800657e:	4013      	ands	r3, r2
 8006580:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006584:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006588:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800658c:	f04f 3aff 	mov.w	sl, #4294967295
 8006590:	e7d5      	b.n	800653e <_strtod_l+0x8de>
 8006592:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006594:	ea13 0f0a 	tst.w	r3, sl
 8006598:	e7e0      	b.n	800655c <_strtod_l+0x8fc>
 800659a:	f7ff fb45 	bl	8005c28 <sulp>
 800659e:	4602      	mov	r2, r0
 80065a0:	460b      	mov	r3, r1
 80065a2:	ec51 0b18 	vmov	r0, r1, d8
 80065a6:	f7f9 fe6f 	bl	8000288 <__aeabi_dsub>
 80065aa:	2200      	movs	r2, #0
 80065ac:	2300      	movs	r3, #0
 80065ae:	4682      	mov	sl, r0
 80065b0:	468b      	mov	fp, r1
 80065b2:	f7fa fa89 	bl	8000ac8 <__aeabi_dcmpeq>
 80065b6:	2800      	cmp	r0, #0
 80065b8:	d0c1      	beq.n	800653e <_strtod_l+0x8de>
 80065ba:	e611      	b.n	80061e0 <_strtod_l+0x580>
 80065bc:	fffffc02 	.word	0xfffffc02
 80065c0:	7ff00000 	.word	0x7ff00000
 80065c4:	39500000 	.word	0x39500000
 80065c8:	000fffff 	.word	0x000fffff
 80065cc:	7fefffff 	.word	0x7fefffff
 80065d0:	08009248 	.word	0x08009248
 80065d4:	4631      	mov	r1, r6
 80065d6:	4628      	mov	r0, r5
 80065d8:	f001 fa90 	bl	8007afc <__ratio>
 80065dc:	ec59 8b10 	vmov	r8, r9, d0
 80065e0:	ee10 0a10 	vmov	r0, s0
 80065e4:	2200      	movs	r2, #0
 80065e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80065ea:	4649      	mov	r1, r9
 80065ec:	f7fa fa80 	bl	8000af0 <__aeabi_dcmple>
 80065f0:	2800      	cmp	r0, #0
 80065f2:	d07a      	beq.n	80066ea <_strtod_l+0xa8a>
 80065f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d04a      	beq.n	8006690 <_strtod_l+0xa30>
 80065fa:	4b95      	ldr	r3, [pc, #596]	; (8006850 <_strtod_l+0xbf0>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006602:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006850 <_strtod_l+0xbf0>
 8006606:	f04f 0800 	mov.w	r8, #0
 800660a:	4b92      	ldr	r3, [pc, #584]	; (8006854 <_strtod_l+0xbf4>)
 800660c:	403b      	ands	r3, r7
 800660e:	930d      	str	r3, [sp, #52]	; 0x34
 8006610:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006612:	4b91      	ldr	r3, [pc, #580]	; (8006858 <_strtod_l+0xbf8>)
 8006614:	429a      	cmp	r2, r3
 8006616:	f040 80b0 	bne.w	800677a <_strtod_l+0xb1a>
 800661a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800661e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006622:	ec4b ab10 	vmov	d0, sl, fp
 8006626:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800662a:	f001 f98f 	bl	800794c <__ulp>
 800662e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006632:	ec53 2b10 	vmov	r2, r3, d0
 8006636:	f7f9 ffdf 	bl	80005f8 <__aeabi_dmul>
 800663a:	4652      	mov	r2, sl
 800663c:	465b      	mov	r3, fp
 800663e:	f7f9 fe25 	bl	800028c <__adddf3>
 8006642:	460b      	mov	r3, r1
 8006644:	4983      	ldr	r1, [pc, #524]	; (8006854 <_strtod_l+0xbf4>)
 8006646:	4a85      	ldr	r2, [pc, #532]	; (800685c <_strtod_l+0xbfc>)
 8006648:	4019      	ands	r1, r3
 800664a:	4291      	cmp	r1, r2
 800664c:	4682      	mov	sl, r0
 800664e:	d960      	bls.n	8006712 <_strtod_l+0xab2>
 8006650:	ee18 3a90 	vmov	r3, s17
 8006654:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006658:	4293      	cmp	r3, r2
 800665a:	d104      	bne.n	8006666 <_strtod_l+0xa06>
 800665c:	ee18 3a10 	vmov	r3, s16
 8006660:	3301      	adds	r3, #1
 8006662:	f43f ad45 	beq.w	80060f0 <_strtod_l+0x490>
 8006666:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006868 <_strtod_l+0xc08>
 800666a:	f04f 3aff 	mov.w	sl, #4294967295
 800666e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006670:	4620      	mov	r0, r4
 8006672:	f000 fe39 	bl	80072e8 <_Bfree>
 8006676:	9905      	ldr	r1, [sp, #20]
 8006678:	4620      	mov	r0, r4
 800667a:	f000 fe35 	bl	80072e8 <_Bfree>
 800667e:	4631      	mov	r1, r6
 8006680:	4620      	mov	r0, r4
 8006682:	f000 fe31 	bl	80072e8 <_Bfree>
 8006686:	4629      	mov	r1, r5
 8006688:	4620      	mov	r0, r4
 800668a:	f000 fe2d 	bl	80072e8 <_Bfree>
 800668e:	e61a      	b.n	80062c6 <_strtod_l+0x666>
 8006690:	f1ba 0f00 	cmp.w	sl, #0
 8006694:	d11b      	bne.n	80066ce <_strtod_l+0xa6e>
 8006696:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800669a:	b9f3      	cbnz	r3, 80066da <_strtod_l+0xa7a>
 800669c:	4b6c      	ldr	r3, [pc, #432]	; (8006850 <_strtod_l+0xbf0>)
 800669e:	2200      	movs	r2, #0
 80066a0:	4640      	mov	r0, r8
 80066a2:	4649      	mov	r1, r9
 80066a4:	f7fa fa1a 	bl	8000adc <__aeabi_dcmplt>
 80066a8:	b9d0      	cbnz	r0, 80066e0 <_strtod_l+0xa80>
 80066aa:	4640      	mov	r0, r8
 80066ac:	4649      	mov	r1, r9
 80066ae:	4b6c      	ldr	r3, [pc, #432]	; (8006860 <_strtod_l+0xc00>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	f7f9 ffa1 	bl	80005f8 <__aeabi_dmul>
 80066b6:	4680      	mov	r8, r0
 80066b8:	4689      	mov	r9, r1
 80066ba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80066be:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80066c2:	9315      	str	r3, [sp, #84]	; 0x54
 80066c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80066c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80066cc:	e79d      	b.n	800660a <_strtod_l+0x9aa>
 80066ce:	f1ba 0f01 	cmp.w	sl, #1
 80066d2:	d102      	bne.n	80066da <_strtod_l+0xa7a>
 80066d4:	2f00      	cmp	r7, #0
 80066d6:	f43f ad83 	beq.w	80061e0 <_strtod_l+0x580>
 80066da:	4b62      	ldr	r3, [pc, #392]	; (8006864 <_strtod_l+0xc04>)
 80066dc:	2200      	movs	r2, #0
 80066de:	e78e      	b.n	80065fe <_strtod_l+0x99e>
 80066e0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006860 <_strtod_l+0xc00>
 80066e4:	f04f 0800 	mov.w	r8, #0
 80066e8:	e7e7      	b.n	80066ba <_strtod_l+0xa5a>
 80066ea:	4b5d      	ldr	r3, [pc, #372]	; (8006860 <_strtod_l+0xc00>)
 80066ec:	4640      	mov	r0, r8
 80066ee:	4649      	mov	r1, r9
 80066f0:	2200      	movs	r2, #0
 80066f2:	f7f9 ff81 	bl	80005f8 <__aeabi_dmul>
 80066f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066f8:	4680      	mov	r8, r0
 80066fa:	4689      	mov	r9, r1
 80066fc:	b933      	cbnz	r3, 800670c <_strtod_l+0xaac>
 80066fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006702:	900e      	str	r0, [sp, #56]	; 0x38
 8006704:	930f      	str	r3, [sp, #60]	; 0x3c
 8006706:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800670a:	e7dd      	b.n	80066c8 <_strtod_l+0xa68>
 800670c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006710:	e7f9      	b.n	8006706 <_strtod_l+0xaa6>
 8006712:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006716:	9b04      	ldr	r3, [sp, #16]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1a8      	bne.n	800666e <_strtod_l+0xa0e>
 800671c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006720:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006722:	0d1b      	lsrs	r3, r3, #20
 8006724:	051b      	lsls	r3, r3, #20
 8006726:	429a      	cmp	r2, r3
 8006728:	d1a1      	bne.n	800666e <_strtod_l+0xa0e>
 800672a:	4640      	mov	r0, r8
 800672c:	4649      	mov	r1, r9
 800672e:	f7fa fa9b 	bl	8000c68 <__aeabi_d2lz>
 8006732:	f7f9 ff33 	bl	800059c <__aeabi_l2d>
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	4640      	mov	r0, r8
 800673c:	4649      	mov	r1, r9
 800673e:	f7f9 fda3 	bl	8000288 <__aeabi_dsub>
 8006742:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006744:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006748:	ea43 030a 	orr.w	r3, r3, sl
 800674c:	4313      	orrs	r3, r2
 800674e:	4680      	mov	r8, r0
 8006750:	4689      	mov	r9, r1
 8006752:	d055      	beq.n	8006800 <_strtod_l+0xba0>
 8006754:	a336      	add	r3, pc, #216	; (adr r3, 8006830 <_strtod_l+0xbd0>)
 8006756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675a:	f7fa f9bf 	bl	8000adc <__aeabi_dcmplt>
 800675e:	2800      	cmp	r0, #0
 8006760:	f47f acd0 	bne.w	8006104 <_strtod_l+0x4a4>
 8006764:	a334      	add	r3, pc, #208	; (adr r3, 8006838 <_strtod_l+0xbd8>)
 8006766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676a:	4640      	mov	r0, r8
 800676c:	4649      	mov	r1, r9
 800676e:	f7fa f9d3 	bl	8000b18 <__aeabi_dcmpgt>
 8006772:	2800      	cmp	r0, #0
 8006774:	f43f af7b 	beq.w	800666e <_strtod_l+0xa0e>
 8006778:	e4c4      	b.n	8006104 <_strtod_l+0x4a4>
 800677a:	9b04      	ldr	r3, [sp, #16]
 800677c:	b333      	cbz	r3, 80067cc <_strtod_l+0xb6c>
 800677e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006780:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006784:	d822      	bhi.n	80067cc <_strtod_l+0xb6c>
 8006786:	a32e      	add	r3, pc, #184	; (adr r3, 8006840 <_strtod_l+0xbe0>)
 8006788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678c:	4640      	mov	r0, r8
 800678e:	4649      	mov	r1, r9
 8006790:	f7fa f9ae 	bl	8000af0 <__aeabi_dcmple>
 8006794:	b1a0      	cbz	r0, 80067c0 <_strtod_l+0xb60>
 8006796:	4649      	mov	r1, r9
 8006798:	4640      	mov	r0, r8
 800679a:	f7fa f9dd 	bl	8000b58 <__aeabi_d2uiz>
 800679e:	2801      	cmp	r0, #1
 80067a0:	bf38      	it	cc
 80067a2:	2001      	movcc	r0, #1
 80067a4:	f7f9 feae 	bl	8000504 <__aeabi_ui2d>
 80067a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067aa:	4680      	mov	r8, r0
 80067ac:	4689      	mov	r9, r1
 80067ae:	bb23      	cbnz	r3, 80067fa <_strtod_l+0xb9a>
 80067b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80067b4:	9010      	str	r0, [sp, #64]	; 0x40
 80067b6:	9311      	str	r3, [sp, #68]	; 0x44
 80067b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80067bc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80067c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80067c4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80067c8:	1a9b      	subs	r3, r3, r2
 80067ca:	9309      	str	r3, [sp, #36]	; 0x24
 80067cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80067d0:	eeb0 0a48 	vmov.f32	s0, s16
 80067d4:	eef0 0a68 	vmov.f32	s1, s17
 80067d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80067dc:	f001 f8b6 	bl	800794c <__ulp>
 80067e0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80067e4:	ec53 2b10 	vmov	r2, r3, d0
 80067e8:	f7f9 ff06 	bl	80005f8 <__aeabi_dmul>
 80067ec:	ec53 2b18 	vmov	r2, r3, d8
 80067f0:	f7f9 fd4c 	bl	800028c <__adddf3>
 80067f4:	4682      	mov	sl, r0
 80067f6:	468b      	mov	fp, r1
 80067f8:	e78d      	b.n	8006716 <_strtod_l+0xab6>
 80067fa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80067fe:	e7db      	b.n	80067b8 <_strtod_l+0xb58>
 8006800:	a311      	add	r3, pc, #68	; (adr r3, 8006848 <_strtod_l+0xbe8>)
 8006802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006806:	f7fa f969 	bl	8000adc <__aeabi_dcmplt>
 800680a:	e7b2      	b.n	8006772 <_strtod_l+0xb12>
 800680c:	2300      	movs	r3, #0
 800680e:	930a      	str	r3, [sp, #40]	; 0x28
 8006810:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006812:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006814:	6013      	str	r3, [r2, #0]
 8006816:	f7ff ba6b 	b.w	8005cf0 <_strtod_l+0x90>
 800681a:	2a65      	cmp	r2, #101	; 0x65
 800681c:	f43f ab5f 	beq.w	8005ede <_strtod_l+0x27e>
 8006820:	2a45      	cmp	r2, #69	; 0x45
 8006822:	f43f ab5c 	beq.w	8005ede <_strtod_l+0x27e>
 8006826:	2301      	movs	r3, #1
 8006828:	f7ff bb94 	b.w	8005f54 <_strtod_l+0x2f4>
 800682c:	f3af 8000 	nop.w
 8006830:	94a03595 	.word	0x94a03595
 8006834:	3fdfffff 	.word	0x3fdfffff
 8006838:	35afe535 	.word	0x35afe535
 800683c:	3fe00000 	.word	0x3fe00000
 8006840:	ffc00000 	.word	0xffc00000
 8006844:	41dfffff 	.word	0x41dfffff
 8006848:	94a03595 	.word	0x94a03595
 800684c:	3fcfffff 	.word	0x3fcfffff
 8006850:	3ff00000 	.word	0x3ff00000
 8006854:	7ff00000 	.word	0x7ff00000
 8006858:	7fe00000 	.word	0x7fe00000
 800685c:	7c9fffff 	.word	0x7c9fffff
 8006860:	3fe00000 	.word	0x3fe00000
 8006864:	bff00000 	.word	0xbff00000
 8006868:	7fefffff 	.word	0x7fefffff

0800686c <strtof>:
 800686c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006870:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8006920 <strtof+0xb4>
 8006874:	4b26      	ldr	r3, [pc, #152]	; (8006910 <strtof+0xa4>)
 8006876:	460a      	mov	r2, r1
 8006878:	ed2d 8b02 	vpush	{d8}
 800687c:	4601      	mov	r1, r0
 800687e:	f8d8 0000 	ldr.w	r0, [r8]
 8006882:	f7ff f9ed 	bl	8005c60 <_strtod_l>
 8006886:	ec55 4b10 	vmov	r4, r5, d0
 800688a:	ee10 2a10 	vmov	r2, s0
 800688e:	ee10 0a10 	vmov	r0, s0
 8006892:	462b      	mov	r3, r5
 8006894:	4629      	mov	r1, r5
 8006896:	f7fa f949 	bl	8000b2c <__aeabi_dcmpun>
 800689a:	b190      	cbz	r0, 80068c2 <strtof+0x56>
 800689c:	2d00      	cmp	r5, #0
 800689e:	481d      	ldr	r0, [pc, #116]	; (8006914 <strtof+0xa8>)
 80068a0:	da09      	bge.n	80068b6 <strtof+0x4a>
 80068a2:	f001 fefd 	bl	80086a0 <nanf>
 80068a6:	eeb1 8a40 	vneg.f32	s16, s0
 80068aa:	eeb0 0a48 	vmov.f32	s0, s16
 80068ae:	ecbd 8b02 	vpop	{d8}
 80068b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068b6:	ecbd 8b02 	vpop	{d8}
 80068ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068be:	f001 beef 	b.w	80086a0 <nanf>
 80068c2:	4620      	mov	r0, r4
 80068c4:	4629      	mov	r1, r5
 80068c6:	f7fa f967 	bl	8000b98 <__aeabi_d2f>
 80068ca:	ee08 0a10 	vmov	s16, r0
 80068ce:	eddf 7a12 	vldr	s15, [pc, #72]	; 8006918 <strtof+0xac>
 80068d2:	eeb0 7ac8 	vabs.f32	s14, s16
 80068d6:	eeb4 7a67 	vcmp.f32	s14, s15
 80068da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068de:	dde4      	ble.n	80068aa <strtof+0x3e>
 80068e0:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80068e4:	4b0d      	ldr	r3, [pc, #52]	; (800691c <strtof+0xb0>)
 80068e6:	f04f 32ff 	mov.w	r2, #4294967295
 80068ea:	4620      	mov	r0, r4
 80068ec:	4639      	mov	r1, r7
 80068ee:	f7fa f91d 	bl	8000b2c <__aeabi_dcmpun>
 80068f2:	b940      	cbnz	r0, 8006906 <strtof+0x9a>
 80068f4:	4b09      	ldr	r3, [pc, #36]	; (800691c <strtof+0xb0>)
 80068f6:	f04f 32ff 	mov.w	r2, #4294967295
 80068fa:	4620      	mov	r0, r4
 80068fc:	4639      	mov	r1, r7
 80068fe:	f7fa f8f7 	bl	8000af0 <__aeabi_dcmple>
 8006902:	2800      	cmp	r0, #0
 8006904:	d0d1      	beq.n	80068aa <strtof+0x3e>
 8006906:	f8d8 3000 	ldr.w	r3, [r8]
 800690a:	2222      	movs	r2, #34	; 0x22
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	e7cc      	b.n	80068aa <strtof+0x3e>
 8006910:	200000ec 	.word	0x200000ec
 8006914:	0800931f 	.word	0x0800931f
 8006918:	7f7fffff 	.word	0x7f7fffff
 800691c:	7fefffff 	.word	0x7fefffff
 8006920:	20000084 	.word	0x20000084

08006924 <strtok>:
 8006924:	4b16      	ldr	r3, [pc, #88]	; (8006980 <strtok+0x5c>)
 8006926:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006928:	681e      	ldr	r6, [r3, #0]
 800692a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800692c:	4605      	mov	r5, r0
 800692e:	b9fc      	cbnz	r4, 8006970 <strtok+0x4c>
 8006930:	2050      	movs	r0, #80	; 0x50
 8006932:	9101      	str	r1, [sp, #4]
 8006934:	f000 fc7e 	bl	8007234 <malloc>
 8006938:	9901      	ldr	r1, [sp, #4]
 800693a:	65b0      	str	r0, [r6, #88]	; 0x58
 800693c:	4602      	mov	r2, r0
 800693e:	b920      	cbnz	r0, 800694a <strtok+0x26>
 8006940:	4b10      	ldr	r3, [pc, #64]	; (8006984 <strtok+0x60>)
 8006942:	4811      	ldr	r0, [pc, #68]	; (8006988 <strtok+0x64>)
 8006944:	2157      	movs	r1, #87	; 0x57
 8006946:	f000 f8d5 	bl	8006af4 <__assert_func>
 800694a:	e9c0 4400 	strd	r4, r4, [r0]
 800694e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006952:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006956:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800695a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800695e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006962:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006966:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800696a:	6184      	str	r4, [r0, #24]
 800696c:	7704      	strb	r4, [r0, #28]
 800696e:	6244      	str	r4, [r0, #36]	; 0x24
 8006970:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8006972:	2301      	movs	r3, #1
 8006974:	4628      	mov	r0, r5
 8006976:	b002      	add	sp, #8
 8006978:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800697c:	f000 b806 	b.w	800698c <__strtok_r>
 8006980:	20000084 	.word	0x20000084
 8006984:	08009270 	.word	0x08009270
 8006988:	08009287 	.word	0x08009287

0800698c <__strtok_r>:
 800698c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800698e:	b908      	cbnz	r0, 8006994 <__strtok_r+0x8>
 8006990:	6810      	ldr	r0, [r2, #0]
 8006992:	b188      	cbz	r0, 80069b8 <__strtok_r+0x2c>
 8006994:	4604      	mov	r4, r0
 8006996:	4620      	mov	r0, r4
 8006998:	f814 5b01 	ldrb.w	r5, [r4], #1
 800699c:	460f      	mov	r7, r1
 800699e:	f817 6b01 	ldrb.w	r6, [r7], #1
 80069a2:	b91e      	cbnz	r6, 80069ac <__strtok_r+0x20>
 80069a4:	b965      	cbnz	r5, 80069c0 <__strtok_r+0x34>
 80069a6:	6015      	str	r5, [r2, #0]
 80069a8:	4628      	mov	r0, r5
 80069aa:	e005      	b.n	80069b8 <__strtok_r+0x2c>
 80069ac:	42b5      	cmp	r5, r6
 80069ae:	d1f6      	bne.n	800699e <__strtok_r+0x12>
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1f0      	bne.n	8006996 <__strtok_r+0xa>
 80069b4:	6014      	str	r4, [r2, #0]
 80069b6:	7003      	strb	r3, [r0, #0]
 80069b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069ba:	461c      	mov	r4, r3
 80069bc:	e00c      	b.n	80069d8 <__strtok_r+0x4c>
 80069be:	b915      	cbnz	r5, 80069c6 <__strtok_r+0x3a>
 80069c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80069c4:	460e      	mov	r6, r1
 80069c6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80069ca:	42ab      	cmp	r3, r5
 80069cc:	d1f7      	bne.n	80069be <__strtok_r+0x32>
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d0f3      	beq.n	80069ba <__strtok_r+0x2e>
 80069d2:	2300      	movs	r3, #0
 80069d4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80069d8:	6014      	str	r4, [r2, #0]
 80069da:	e7ed      	b.n	80069b8 <__strtok_r+0x2c>

080069dc <_strtol_l.constprop.0>:
 80069dc:	2b01      	cmp	r3, #1
 80069de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069e2:	d001      	beq.n	80069e8 <_strtol_l.constprop.0+0xc>
 80069e4:	2b24      	cmp	r3, #36	; 0x24
 80069e6:	d906      	bls.n	80069f6 <_strtol_l.constprop.0+0x1a>
 80069e8:	f7ff f894 	bl	8005b14 <__errno>
 80069ec:	2316      	movs	r3, #22
 80069ee:	6003      	str	r3, [r0, #0]
 80069f0:	2000      	movs	r0, #0
 80069f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006adc <_strtol_l.constprop.0+0x100>
 80069fa:	460d      	mov	r5, r1
 80069fc:	462e      	mov	r6, r5
 80069fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a02:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006a06:	f017 0708 	ands.w	r7, r7, #8
 8006a0a:	d1f7      	bne.n	80069fc <_strtol_l.constprop.0+0x20>
 8006a0c:	2c2d      	cmp	r4, #45	; 0x2d
 8006a0e:	d132      	bne.n	8006a76 <_strtol_l.constprop.0+0x9a>
 8006a10:	782c      	ldrb	r4, [r5, #0]
 8006a12:	2701      	movs	r7, #1
 8006a14:	1cb5      	adds	r5, r6, #2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d05b      	beq.n	8006ad2 <_strtol_l.constprop.0+0xf6>
 8006a1a:	2b10      	cmp	r3, #16
 8006a1c:	d109      	bne.n	8006a32 <_strtol_l.constprop.0+0x56>
 8006a1e:	2c30      	cmp	r4, #48	; 0x30
 8006a20:	d107      	bne.n	8006a32 <_strtol_l.constprop.0+0x56>
 8006a22:	782c      	ldrb	r4, [r5, #0]
 8006a24:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006a28:	2c58      	cmp	r4, #88	; 0x58
 8006a2a:	d14d      	bne.n	8006ac8 <_strtol_l.constprop.0+0xec>
 8006a2c:	786c      	ldrb	r4, [r5, #1]
 8006a2e:	2310      	movs	r3, #16
 8006a30:	3502      	adds	r5, #2
 8006a32:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006a36:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a3a:	f04f 0c00 	mov.w	ip, #0
 8006a3e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006a42:	4666      	mov	r6, ip
 8006a44:	fb03 8a19 	mls	sl, r3, r9, r8
 8006a48:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006a4c:	f1be 0f09 	cmp.w	lr, #9
 8006a50:	d816      	bhi.n	8006a80 <_strtol_l.constprop.0+0xa4>
 8006a52:	4674      	mov	r4, lr
 8006a54:	42a3      	cmp	r3, r4
 8006a56:	dd24      	ble.n	8006aa2 <_strtol_l.constprop.0+0xc6>
 8006a58:	f1bc 0f00 	cmp.w	ip, #0
 8006a5c:	db1e      	blt.n	8006a9c <_strtol_l.constprop.0+0xc0>
 8006a5e:	45b1      	cmp	r9, r6
 8006a60:	d31c      	bcc.n	8006a9c <_strtol_l.constprop.0+0xc0>
 8006a62:	d101      	bne.n	8006a68 <_strtol_l.constprop.0+0x8c>
 8006a64:	45a2      	cmp	sl, r4
 8006a66:	db19      	blt.n	8006a9c <_strtol_l.constprop.0+0xc0>
 8006a68:	fb06 4603 	mla	r6, r6, r3, r4
 8006a6c:	f04f 0c01 	mov.w	ip, #1
 8006a70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a74:	e7e8      	b.n	8006a48 <_strtol_l.constprop.0+0x6c>
 8006a76:	2c2b      	cmp	r4, #43	; 0x2b
 8006a78:	bf04      	itt	eq
 8006a7a:	782c      	ldrbeq	r4, [r5, #0]
 8006a7c:	1cb5      	addeq	r5, r6, #2
 8006a7e:	e7ca      	b.n	8006a16 <_strtol_l.constprop.0+0x3a>
 8006a80:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006a84:	f1be 0f19 	cmp.w	lr, #25
 8006a88:	d801      	bhi.n	8006a8e <_strtol_l.constprop.0+0xb2>
 8006a8a:	3c37      	subs	r4, #55	; 0x37
 8006a8c:	e7e2      	b.n	8006a54 <_strtol_l.constprop.0+0x78>
 8006a8e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006a92:	f1be 0f19 	cmp.w	lr, #25
 8006a96:	d804      	bhi.n	8006aa2 <_strtol_l.constprop.0+0xc6>
 8006a98:	3c57      	subs	r4, #87	; 0x57
 8006a9a:	e7db      	b.n	8006a54 <_strtol_l.constprop.0+0x78>
 8006a9c:	f04f 3cff 	mov.w	ip, #4294967295
 8006aa0:	e7e6      	b.n	8006a70 <_strtol_l.constprop.0+0x94>
 8006aa2:	f1bc 0f00 	cmp.w	ip, #0
 8006aa6:	da05      	bge.n	8006ab4 <_strtol_l.constprop.0+0xd8>
 8006aa8:	2322      	movs	r3, #34	; 0x22
 8006aaa:	6003      	str	r3, [r0, #0]
 8006aac:	4646      	mov	r6, r8
 8006aae:	b942      	cbnz	r2, 8006ac2 <_strtol_l.constprop.0+0xe6>
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	e79e      	b.n	80069f2 <_strtol_l.constprop.0+0x16>
 8006ab4:	b107      	cbz	r7, 8006ab8 <_strtol_l.constprop.0+0xdc>
 8006ab6:	4276      	negs	r6, r6
 8006ab8:	2a00      	cmp	r2, #0
 8006aba:	d0f9      	beq.n	8006ab0 <_strtol_l.constprop.0+0xd4>
 8006abc:	f1bc 0f00 	cmp.w	ip, #0
 8006ac0:	d000      	beq.n	8006ac4 <_strtol_l.constprop.0+0xe8>
 8006ac2:	1e69      	subs	r1, r5, #1
 8006ac4:	6011      	str	r1, [r2, #0]
 8006ac6:	e7f3      	b.n	8006ab0 <_strtol_l.constprop.0+0xd4>
 8006ac8:	2430      	movs	r4, #48	; 0x30
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1b1      	bne.n	8006a32 <_strtol_l.constprop.0+0x56>
 8006ace:	2308      	movs	r3, #8
 8006ad0:	e7af      	b.n	8006a32 <_strtol_l.constprop.0+0x56>
 8006ad2:	2c30      	cmp	r4, #48	; 0x30
 8006ad4:	d0a5      	beq.n	8006a22 <_strtol_l.constprop.0+0x46>
 8006ad6:	230a      	movs	r3, #10
 8006ad8:	e7ab      	b.n	8006a32 <_strtol_l.constprop.0+0x56>
 8006ada:	bf00      	nop
 8006adc:	08009321 	.word	0x08009321

08006ae0 <strtol>:
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	460a      	mov	r2, r1
 8006ae4:	4601      	mov	r1, r0
 8006ae6:	4802      	ldr	r0, [pc, #8]	; (8006af0 <strtol+0x10>)
 8006ae8:	6800      	ldr	r0, [r0, #0]
 8006aea:	f7ff bf77 	b.w	80069dc <_strtol_l.constprop.0>
 8006aee:	bf00      	nop
 8006af0:	20000084 	.word	0x20000084

08006af4 <__assert_func>:
 8006af4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006af6:	4614      	mov	r4, r2
 8006af8:	461a      	mov	r2, r3
 8006afa:	4b09      	ldr	r3, [pc, #36]	; (8006b20 <__assert_func+0x2c>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4605      	mov	r5, r0
 8006b00:	68d8      	ldr	r0, [r3, #12]
 8006b02:	b14c      	cbz	r4, 8006b18 <__assert_func+0x24>
 8006b04:	4b07      	ldr	r3, [pc, #28]	; (8006b24 <__assert_func+0x30>)
 8006b06:	9100      	str	r1, [sp, #0]
 8006b08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b0c:	4906      	ldr	r1, [pc, #24]	; (8006b28 <__assert_func+0x34>)
 8006b0e:	462b      	mov	r3, r5
 8006b10:	f000 f80e 	bl	8006b30 <fiprintf>
 8006b14:	f001 fe98 	bl	8008848 <abort>
 8006b18:	4b04      	ldr	r3, [pc, #16]	; (8006b2c <__assert_func+0x38>)
 8006b1a:	461c      	mov	r4, r3
 8006b1c:	e7f3      	b.n	8006b06 <__assert_func+0x12>
 8006b1e:	bf00      	nop
 8006b20:	20000084 	.word	0x20000084
 8006b24:	080092e4 	.word	0x080092e4
 8006b28:	080092f1 	.word	0x080092f1
 8006b2c:	0800931f 	.word	0x0800931f

08006b30 <fiprintf>:
 8006b30:	b40e      	push	{r1, r2, r3}
 8006b32:	b503      	push	{r0, r1, lr}
 8006b34:	4601      	mov	r1, r0
 8006b36:	ab03      	add	r3, sp, #12
 8006b38:	4805      	ldr	r0, [pc, #20]	; (8006b50 <fiprintf+0x20>)
 8006b3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b3e:	6800      	ldr	r0, [r0, #0]
 8006b40:	9301      	str	r3, [sp, #4]
 8006b42:	f001 facf 	bl	80080e4 <_vfiprintf_r>
 8006b46:	b002      	add	sp, #8
 8006b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b4c:	b003      	add	sp, #12
 8006b4e:	4770      	bx	lr
 8006b50:	20000084 	.word	0x20000084

08006b54 <rshift>:
 8006b54:	6903      	ldr	r3, [r0, #16]
 8006b56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006b5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006b62:	f100 0414 	add.w	r4, r0, #20
 8006b66:	dd45      	ble.n	8006bf4 <rshift+0xa0>
 8006b68:	f011 011f 	ands.w	r1, r1, #31
 8006b6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006b70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006b74:	d10c      	bne.n	8006b90 <rshift+0x3c>
 8006b76:	f100 0710 	add.w	r7, r0, #16
 8006b7a:	4629      	mov	r1, r5
 8006b7c:	42b1      	cmp	r1, r6
 8006b7e:	d334      	bcc.n	8006bea <rshift+0x96>
 8006b80:	1a9b      	subs	r3, r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	1eea      	subs	r2, r5, #3
 8006b86:	4296      	cmp	r6, r2
 8006b88:	bf38      	it	cc
 8006b8a:	2300      	movcc	r3, #0
 8006b8c:	4423      	add	r3, r4
 8006b8e:	e015      	b.n	8006bbc <rshift+0x68>
 8006b90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006b94:	f1c1 0820 	rsb	r8, r1, #32
 8006b98:	40cf      	lsrs	r7, r1
 8006b9a:	f105 0e04 	add.w	lr, r5, #4
 8006b9e:	46a1      	mov	r9, r4
 8006ba0:	4576      	cmp	r6, lr
 8006ba2:	46f4      	mov	ip, lr
 8006ba4:	d815      	bhi.n	8006bd2 <rshift+0x7e>
 8006ba6:	1a9a      	subs	r2, r3, r2
 8006ba8:	0092      	lsls	r2, r2, #2
 8006baa:	3a04      	subs	r2, #4
 8006bac:	3501      	adds	r5, #1
 8006bae:	42ae      	cmp	r6, r5
 8006bb0:	bf38      	it	cc
 8006bb2:	2200      	movcc	r2, #0
 8006bb4:	18a3      	adds	r3, r4, r2
 8006bb6:	50a7      	str	r7, [r4, r2]
 8006bb8:	b107      	cbz	r7, 8006bbc <rshift+0x68>
 8006bba:	3304      	adds	r3, #4
 8006bbc:	1b1a      	subs	r2, r3, r4
 8006bbe:	42a3      	cmp	r3, r4
 8006bc0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006bc4:	bf08      	it	eq
 8006bc6:	2300      	moveq	r3, #0
 8006bc8:	6102      	str	r2, [r0, #16]
 8006bca:	bf08      	it	eq
 8006bcc:	6143      	streq	r3, [r0, #20]
 8006bce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bd2:	f8dc c000 	ldr.w	ip, [ip]
 8006bd6:	fa0c fc08 	lsl.w	ip, ip, r8
 8006bda:	ea4c 0707 	orr.w	r7, ip, r7
 8006bde:	f849 7b04 	str.w	r7, [r9], #4
 8006be2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006be6:	40cf      	lsrs	r7, r1
 8006be8:	e7da      	b.n	8006ba0 <rshift+0x4c>
 8006bea:	f851 cb04 	ldr.w	ip, [r1], #4
 8006bee:	f847 cf04 	str.w	ip, [r7, #4]!
 8006bf2:	e7c3      	b.n	8006b7c <rshift+0x28>
 8006bf4:	4623      	mov	r3, r4
 8006bf6:	e7e1      	b.n	8006bbc <rshift+0x68>

08006bf8 <__hexdig_fun>:
 8006bf8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006bfc:	2b09      	cmp	r3, #9
 8006bfe:	d802      	bhi.n	8006c06 <__hexdig_fun+0xe>
 8006c00:	3820      	subs	r0, #32
 8006c02:	b2c0      	uxtb	r0, r0
 8006c04:	4770      	bx	lr
 8006c06:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006c0a:	2b05      	cmp	r3, #5
 8006c0c:	d801      	bhi.n	8006c12 <__hexdig_fun+0x1a>
 8006c0e:	3847      	subs	r0, #71	; 0x47
 8006c10:	e7f7      	b.n	8006c02 <__hexdig_fun+0xa>
 8006c12:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006c16:	2b05      	cmp	r3, #5
 8006c18:	d801      	bhi.n	8006c1e <__hexdig_fun+0x26>
 8006c1a:	3827      	subs	r0, #39	; 0x27
 8006c1c:	e7f1      	b.n	8006c02 <__hexdig_fun+0xa>
 8006c1e:	2000      	movs	r0, #0
 8006c20:	4770      	bx	lr
	...

08006c24 <__gethex>:
 8006c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c28:	ed2d 8b02 	vpush	{d8}
 8006c2c:	b089      	sub	sp, #36	; 0x24
 8006c2e:	ee08 0a10 	vmov	s16, r0
 8006c32:	9304      	str	r3, [sp, #16]
 8006c34:	4bb4      	ldr	r3, [pc, #720]	; (8006f08 <__gethex+0x2e4>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	9301      	str	r3, [sp, #4]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	468b      	mov	fp, r1
 8006c3e:	4690      	mov	r8, r2
 8006c40:	f7f9 fac6 	bl	80001d0 <strlen>
 8006c44:	9b01      	ldr	r3, [sp, #4]
 8006c46:	f8db 2000 	ldr.w	r2, [fp]
 8006c4a:	4403      	add	r3, r0
 8006c4c:	4682      	mov	sl, r0
 8006c4e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006c52:	9305      	str	r3, [sp, #20]
 8006c54:	1c93      	adds	r3, r2, #2
 8006c56:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006c5a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006c5e:	32fe      	adds	r2, #254	; 0xfe
 8006c60:	18d1      	adds	r1, r2, r3
 8006c62:	461f      	mov	r7, r3
 8006c64:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006c68:	9100      	str	r1, [sp, #0]
 8006c6a:	2830      	cmp	r0, #48	; 0x30
 8006c6c:	d0f8      	beq.n	8006c60 <__gethex+0x3c>
 8006c6e:	f7ff ffc3 	bl	8006bf8 <__hexdig_fun>
 8006c72:	4604      	mov	r4, r0
 8006c74:	2800      	cmp	r0, #0
 8006c76:	d13a      	bne.n	8006cee <__gethex+0xca>
 8006c78:	9901      	ldr	r1, [sp, #4]
 8006c7a:	4652      	mov	r2, sl
 8006c7c:	4638      	mov	r0, r7
 8006c7e:	f7fe ffa9 	bl	8005bd4 <strncmp>
 8006c82:	4605      	mov	r5, r0
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d168      	bne.n	8006d5a <__gethex+0x136>
 8006c88:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006c8c:	eb07 060a 	add.w	r6, r7, sl
 8006c90:	f7ff ffb2 	bl	8006bf8 <__hexdig_fun>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d062      	beq.n	8006d5e <__gethex+0x13a>
 8006c98:	4633      	mov	r3, r6
 8006c9a:	7818      	ldrb	r0, [r3, #0]
 8006c9c:	2830      	cmp	r0, #48	; 0x30
 8006c9e:	461f      	mov	r7, r3
 8006ca0:	f103 0301 	add.w	r3, r3, #1
 8006ca4:	d0f9      	beq.n	8006c9a <__gethex+0x76>
 8006ca6:	f7ff ffa7 	bl	8006bf8 <__hexdig_fun>
 8006caa:	2301      	movs	r3, #1
 8006cac:	fab0 f480 	clz	r4, r0
 8006cb0:	0964      	lsrs	r4, r4, #5
 8006cb2:	4635      	mov	r5, r6
 8006cb4:	9300      	str	r3, [sp, #0]
 8006cb6:	463a      	mov	r2, r7
 8006cb8:	4616      	mov	r6, r2
 8006cba:	3201      	adds	r2, #1
 8006cbc:	7830      	ldrb	r0, [r6, #0]
 8006cbe:	f7ff ff9b 	bl	8006bf8 <__hexdig_fun>
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	d1f8      	bne.n	8006cb8 <__gethex+0x94>
 8006cc6:	9901      	ldr	r1, [sp, #4]
 8006cc8:	4652      	mov	r2, sl
 8006cca:	4630      	mov	r0, r6
 8006ccc:	f7fe ff82 	bl	8005bd4 <strncmp>
 8006cd0:	b980      	cbnz	r0, 8006cf4 <__gethex+0xd0>
 8006cd2:	b94d      	cbnz	r5, 8006ce8 <__gethex+0xc4>
 8006cd4:	eb06 050a 	add.w	r5, r6, sl
 8006cd8:	462a      	mov	r2, r5
 8006cda:	4616      	mov	r6, r2
 8006cdc:	3201      	adds	r2, #1
 8006cde:	7830      	ldrb	r0, [r6, #0]
 8006ce0:	f7ff ff8a 	bl	8006bf8 <__hexdig_fun>
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	d1f8      	bne.n	8006cda <__gethex+0xb6>
 8006ce8:	1bad      	subs	r5, r5, r6
 8006cea:	00ad      	lsls	r5, r5, #2
 8006cec:	e004      	b.n	8006cf8 <__gethex+0xd4>
 8006cee:	2400      	movs	r4, #0
 8006cf0:	4625      	mov	r5, r4
 8006cf2:	e7e0      	b.n	8006cb6 <__gethex+0x92>
 8006cf4:	2d00      	cmp	r5, #0
 8006cf6:	d1f7      	bne.n	8006ce8 <__gethex+0xc4>
 8006cf8:	7833      	ldrb	r3, [r6, #0]
 8006cfa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006cfe:	2b50      	cmp	r3, #80	; 0x50
 8006d00:	d13b      	bne.n	8006d7a <__gethex+0x156>
 8006d02:	7873      	ldrb	r3, [r6, #1]
 8006d04:	2b2b      	cmp	r3, #43	; 0x2b
 8006d06:	d02c      	beq.n	8006d62 <__gethex+0x13e>
 8006d08:	2b2d      	cmp	r3, #45	; 0x2d
 8006d0a:	d02e      	beq.n	8006d6a <__gethex+0x146>
 8006d0c:	1c71      	adds	r1, r6, #1
 8006d0e:	f04f 0900 	mov.w	r9, #0
 8006d12:	7808      	ldrb	r0, [r1, #0]
 8006d14:	f7ff ff70 	bl	8006bf8 <__hexdig_fun>
 8006d18:	1e43      	subs	r3, r0, #1
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b18      	cmp	r3, #24
 8006d1e:	d82c      	bhi.n	8006d7a <__gethex+0x156>
 8006d20:	f1a0 0210 	sub.w	r2, r0, #16
 8006d24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006d28:	f7ff ff66 	bl	8006bf8 <__hexdig_fun>
 8006d2c:	1e43      	subs	r3, r0, #1
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b18      	cmp	r3, #24
 8006d32:	d91d      	bls.n	8006d70 <__gethex+0x14c>
 8006d34:	f1b9 0f00 	cmp.w	r9, #0
 8006d38:	d000      	beq.n	8006d3c <__gethex+0x118>
 8006d3a:	4252      	negs	r2, r2
 8006d3c:	4415      	add	r5, r2
 8006d3e:	f8cb 1000 	str.w	r1, [fp]
 8006d42:	b1e4      	cbz	r4, 8006d7e <__gethex+0x15a>
 8006d44:	9b00      	ldr	r3, [sp, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	bf14      	ite	ne
 8006d4a:	2700      	movne	r7, #0
 8006d4c:	2706      	moveq	r7, #6
 8006d4e:	4638      	mov	r0, r7
 8006d50:	b009      	add	sp, #36	; 0x24
 8006d52:	ecbd 8b02 	vpop	{d8}
 8006d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d5a:	463e      	mov	r6, r7
 8006d5c:	4625      	mov	r5, r4
 8006d5e:	2401      	movs	r4, #1
 8006d60:	e7ca      	b.n	8006cf8 <__gethex+0xd4>
 8006d62:	f04f 0900 	mov.w	r9, #0
 8006d66:	1cb1      	adds	r1, r6, #2
 8006d68:	e7d3      	b.n	8006d12 <__gethex+0xee>
 8006d6a:	f04f 0901 	mov.w	r9, #1
 8006d6e:	e7fa      	b.n	8006d66 <__gethex+0x142>
 8006d70:	230a      	movs	r3, #10
 8006d72:	fb03 0202 	mla	r2, r3, r2, r0
 8006d76:	3a10      	subs	r2, #16
 8006d78:	e7d4      	b.n	8006d24 <__gethex+0x100>
 8006d7a:	4631      	mov	r1, r6
 8006d7c:	e7df      	b.n	8006d3e <__gethex+0x11a>
 8006d7e:	1bf3      	subs	r3, r6, r7
 8006d80:	3b01      	subs	r3, #1
 8006d82:	4621      	mov	r1, r4
 8006d84:	2b07      	cmp	r3, #7
 8006d86:	dc0b      	bgt.n	8006da0 <__gethex+0x17c>
 8006d88:	ee18 0a10 	vmov	r0, s16
 8006d8c:	f000 fa6c 	bl	8007268 <_Balloc>
 8006d90:	4604      	mov	r4, r0
 8006d92:	b940      	cbnz	r0, 8006da6 <__gethex+0x182>
 8006d94:	4b5d      	ldr	r3, [pc, #372]	; (8006f0c <__gethex+0x2e8>)
 8006d96:	4602      	mov	r2, r0
 8006d98:	21de      	movs	r1, #222	; 0xde
 8006d9a:	485d      	ldr	r0, [pc, #372]	; (8006f10 <__gethex+0x2ec>)
 8006d9c:	f7ff feaa 	bl	8006af4 <__assert_func>
 8006da0:	3101      	adds	r1, #1
 8006da2:	105b      	asrs	r3, r3, #1
 8006da4:	e7ee      	b.n	8006d84 <__gethex+0x160>
 8006da6:	f100 0914 	add.w	r9, r0, #20
 8006daa:	f04f 0b00 	mov.w	fp, #0
 8006dae:	f1ca 0301 	rsb	r3, sl, #1
 8006db2:	f8cd 9008 	str.w	r9, [sp, #8]
 8006db6:	f8cd b000 	str.w	fp, [sp]
 8006dba:	9306      	str	r3, [sp, #24]
 8006dbc:	42b7      	cmp	r7, r6
 8006dbe:	d340      	bcc.n	8006e42 <__gethex+0x21e>
 8006dc0:	9802      	ldr	r0, [sp, #8]
 8006dc2:	9b00      	ldr	r3, [sp, #0]
 8006dc4:	f840 3b04 	str.w	r3, [r0], #4
 8006dc8:	eba0 0009 	sub.w	r0, r0, r9
 8006dcc:	1080      	asrs	r0, r0, #2
 8006dce:	0146      	lsls	r6, r0, #5
 8006dd0:	6120      	str	r0, [r4, #16]
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 fb3a 	bl	800744c <__hi0bits>
 8006dd8:	1a30      	subs	r0, r6, r0
 8006dda:	f8d8 6000 	ldr.w	r6, [r8]
 8006dde:	42b0      	cmp	r0, r6
 8006de0:	dd63      	ble.n	8006eaa <__gethex+0x286>
 8006de2:	1b87      	subs	r7, r0, r6
 8006de4:	4639      	mov	r1, r7
 8006de6:	4620      	mov	r0, r4
 8006de8:	f000 fede 	bl	8007ba8 <__any_on>
 8006dec:	4682      	mov	sl, r0
 8006dee:	b1a8      	cbz	r0, 8006e1c <__gethex+0x1f8>
 8006df0:	1e7b      	subs	r3, r7, #1
 8006df2:	1159      	asrs	r1, r3, #5
 8006df4:	f003 021f 	and.w	r2, r3, #31
 8006df8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006dfc:	f04f 0a01 	mov.w	sl, #1
 8006e00:	fa0a f202 	lsl.w	r2, sl, r2
 8006e04:	420a      	tst	r2, r1
 8006e06:	d009      	beq.n	8006e1c <__gethex+0x1f8>
 8006e08:	4553      	cmp	r3, sl
 8006e0a:	dd05      	ble.n	8006e18 <__gethex+0x1f4>
 8006e0c:	1eb9      	subs	r1, r7, #2
 8006e0e:	4620      	mov	r0, r4
 8006e10:	f000 feca 	bl	8007ba8 <__any_on>
 8006e14:	2800      	cmp	r0, #0
 8006e16:	d145      	bne.n	8006ea4 <__gethex+0x280>
 8006e18:	f04f 0a02 	mov.w	sl, #2
 8006e1c:	4639      	mov	r1, r7
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f7ff fe98 	bl	8006b54 <rshift>
 8006e24:	443d      	add	r5, r7
 8006e26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e2a:	42ab      	cmp	r3, r5
 8006e2c:	da4c      	bge.n	8006ec8 <__gethex+0x2a4>
 8006e2e:	ee18 0a10 	vmov	r0, s16
 8006e32:	4621      	mov	r1, r4
 8006e34:	f000 fa58 	bl	80072e8 <_Bfree>
 8006e38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	6013      	str	r3, [r2, #0]
 8006e3e:	27a3      	movs	r7, #163	; 0xa3
 8006e40:	e785      	b.n	8006d4e <__gethex+0x12a>
 8006e42:	1e73      	subs	r3, r6, #1
 8006e44:	9a05      	ldr	r2, [sp, #20]
 8006e46:	9303      	str	r3, [sp, #12]
 8006e48:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d019      	beq.n	8006e84 <__gethex+0x260>
 8006e50:	f1bb 0f20 	cmp.w	fp, #32
 8006e54:	d107      	bne.n	8006e66 <__gethex+0x242>
 8006e56:	9b02      	ldr	r3, [sp, #8]
 8006e58:	9a00      	ldr	r2, [sp, #0]
 8006e5a:	f843 2b04 	str.w	r2, [r3], #4
 8006e5e:	9302      	str	r3, [sp, #8]
 8006e60:	2300      	movs	r3, #0
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	469b      	mov	fp, r3
 8006e66:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006e6a:	f7ff fec5 	bl	8006bf8 <__hexdig_fun>
 8006e6e:	9b00      	ldr	r3, [sp, #0]
 8006e70:	f000 000f 	and.w	r0, r0, #15
 8006e74:	fa00 f00b 	lsl.w	r0, r0, fp
 8006e78:	4303      	orrs	r3, r0
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	f10b 0b04 	add.w	fp, fp, #4
 8006e80:	9b03      	ldr	r3, [sp, #12]
 8006e82:	e00d      	b.n	8006ea0 <__gethex+0x27c>
 8006e84:	9b03      	ldr	r3, [sp, #12]
 8006e86:	9a06      	ldr	r2, [sp, #24]
 8006e88:	4413      	add	r3, r2
 8006e8a:	42bb      	cmp	r3, r7
 8006e8c:	d3e0      	bcc.n	8006e50 <__gethex+0x22c>
 8006e8e:	4618      	mov	r0, r3
 8006e90:	9901      	ldr	r1, [sp, #4]
 8006e92:	9307      	str	r3, [sp, #28]
 8006e94:	4652      	mov	r2, sl
 8006e96:	f7fe fe9d 	bl	8005bd4 <strncmp>
 8006e9a:	9b07      	ldr	r3, [sp, #28]
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	d1d7      	bne.n	8006e50 <__gethex+0x22c>
 8006ea0:	461e      	mov	r6, r3
 8006ea2:	e78b      	b.n	8006dbc <__gethex+0x198>
 8006ea4:	f04f 0a03 	mov.w	sl, #3
 8006ea8:	e7b8      	b.n	8006e1c <__gethex+0x1f8>
 8006eaa:	da0a      	bge.n	8006ec2 <__gethex+0x29e>
 8006eac:	1a37      	subs	r7, r6, r0
 8006eae:	4621      	mov	r1, r4
 8006eb0:	ee18 0a10 	vmov	r0, s16
 8006eb4:	463a      	mov	r2, r7
 8006eb6:	f000 fc33 	bl	8007720 <__lshift>
 8006eba:	1bed      	subs	r5, r5, r7
 8006ebc:	4604      	mov	r4, r0
 8006ebe:	f100 0914 	add.w	r9, r0, #20
 8006ec2:	f04f 0a00 	mov.w	sl, #0
 8006ec6:	e7ae      	b.n	8006e26 <__gethex+0x202>
 8006ec8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006ecc:	42a8      	cmp	r0, r5
 8006ece:	dd72      	ble.n	8006fb6 <__gethex+0x392>
 8006ed0:	1b45      	subs	r5, r0, r5
 8006ed2:	42ae      	cmp	r6, r5
 8006ed4:	dc36      	bgt.n	8006f44 <__gethex+0x320>
 8006ed6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d02a      	beq.n	8006f34 <__gethex+0x310>
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	d02c      	beq.n	8006f3c <__gethex+0x318>
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d11c      	bne.n	8006f20 <__gethex+0x2fc>
 8006ee6:	42ae      	cmp	r6, r5
 8006ee8:	d11a      	bne.n	8006f20 <__gethex+0x2fc>
 8006eea:	2e01      	cmp	r6, #1
 8006eec:	d112      	bne.n	8006f14 <__gethex+0x2f0>
 8006eee:	9a04      	ldr	r2, [sp, #16]
 8006ef0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006ef4:	6013      	str	r3, [r2, #0]
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	6123      	str	r3, [r4, #16]
 8006efa:	f8c9 3000 	str.w	r3, [r9]
 8006efe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f00:	2762      	movs	r7, #98	; 0x62
 8006f02:	601c      	str	r4, [r3, #0]
 8006f04:	e723      	b.n	8006d4e <__gethex+0x12a>
 8006f06:	bf00      	nop
 8006f08:	08009498 	.word	0x08009498
 8006f0c:	08009421 	.word	0x08009421
 8006f10:	08009432 	.word	0x08009432
 8006f14:	1e71      	subs	r1, r6, #1
 8006f16:	4620      	mov	r0, r4
 8006f18:	f000 fe46 	bl	8007ba8 <__any_on>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	d1e6      	bne.n	8006eee <__gethex+0x2ca>
 8006f20:	ee18 0a10 	vmov	r0, s16
 8006f24:	4621      	mov	r1, r4
 8006f26:	f000 f9df 	bl	80072e8 <_Bfree>
 8006f2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	6013      	str	r3, [r2, #0]
 8006f30:	2750      	movs	r7, #80	; 0x50
 8006f32:	e70c      	b.n	8006d4e <__gethex+0x12a>
 8006f34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1f2      	bne.n	8006f20 <__gethex+0x2fc>
 8006f3a:	e7d8      	b.n	8006eee <__gethex+0x2ca>
 8006f3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1d5      	bne.n	8006eee <__gethex+0x2ca>
 8006f42:	e7ed      	b.n	8006f20 <__gethex+0x2fc>
 8006f44:	1e6f      	subs	r7, r5, #1
 8006f46:	f1ba 0f00 	cmp.w	sl, #0
 8006f4a:	d131      	bne.n	8006fb0 <__gethex+0x38c>
 8006f4c:	b127      	cbz	r7, 8006f58 <__gethex+0x334>
 8006f4e:	4639      	mov	r1, r7
 8006f50:	4620      	mov	r0, r4
 8006f52:	f000 fe29 	bl	8007ba8 <__any_on>
 8006f56:	4682      	mov	sl, r0
 8006f58:	117b      	asrs	r3, r7, #5
 8006f5a:	2101      	movs	r1, #1
 8006f5c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006f60:	f007 071f 	and.w	r7, r7, #31
 8006f64:	fa01 f707 	lsl.w	r7, r1, r7
 8006f68:	421f      	tst	r7, r3
 8006f6a:	4629      	mov	r1, r5
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	bf18      	it	ne
 8006f70:	f04a 0a02 	orrne.w	sl, sl, #2
 8006f74:	1b76      	subs	r6, r6, r5
 8006f76:	f7ff fded 	bl	8006b54 <rshift>
 8006f7a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006f7e:	2702      	movs	r7, #2
 8006f80:	f1ba 0f00 	cmp.w	sl, #0
 8006f84:	d048      	beq.n	8007018 <__gethex+0x3f4>
 8006f86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d015      	beq.n	8006fba <__gethex+0x396>
 8006f8e:	2b03      	cmp	r3, #3
 8006f90:	d017      	beq.n	8006fc2 <__gethex+0x39e>
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d109      	bne.n	8006faa <__gethex+0x386>
 8006f96:	f01a 0f02 	tst.w	sl, #2
 8006f9a:	d006      	beq.n	8006faa <__gethex+0x386>
 8006f9c:	f8d9 0000 	ldr.w	r0, [r9]
 8006fa0:	ea4a 0a00 	orr.w	sl, sl, r0
 8006fa4:	f01a 0f01 	tst.w	sl, #1
 8006fa8:	d10e      	bne.n	8006fc8 <__gethex+0x3a4>
 8006faa:	f047 0710 	orr.w	r7, r7, #16
 8006fae:	e033      	b.n	8007018 <__gethex+0x3f4>
 8006fb0:	f04f 0a01 	mov.w	sl, #1
 8006fb4:	e7d0      	b.n	8006f58 <__gethex+0x334>
 8006fb6:	2701      	movs	r7, #1
 8006fb8:	e7e2      	b.n	8006f80 <__gethex+0x35c>
 8006fba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fbc:	f1c3 0301 	rsb	r3, r3, #1
 8006fc0:	9315      	str	r3, [sp, #84]	; 0x54
 8006fc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d0f0      	beq.n	8006faa <__gethex+0x386>
 8006fc8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006fcc:	f104 0314 	add.w	r3, r4, #20
 8006fd0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006fd4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006fd8:	f04f 0c00 	mov.w	ip, #0
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fe2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006fe6:	d01c      	beq.n	8007022 <__gethex+0x3fe>
 8006fe8:	3201      	adds	r2, #1
 8006fea:	6002      	str	r2, [r0, #0]
 8006fec:	2f02      	cmp	r7, #2
 8006fee:	f104 0314 	add.w	r3, r4, #20
 8006ff2:	d13f      	bne.n	8007074 <__gethex+0x450>
 8006ff4:	f8d8 2000 	ldr.w	r2, [r8]
 8006ff8:	3a01      	subs	r2, #1
 8006ffa:	42b2      	cmp	r2, r6
 8006ffc:	d10a      	bne.n	8007014 <__gethex+0x3f0>
 8006ffe:	1171      	asrs	r1, r6, #5
 8007000:	2201      	movs	r2, #1
 8007002:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007006:	f006 061f 	and.w	r6, r6, #31
 800700a:	fa02 f606 	lsl.w	r6, r2, r6
 800700e:	421e      	tst	r6, r3
 8007010:	bf18      	it	ne
 8007012:	4617      	movne	r7, r2
 8007014:	f047 0720 	orr.w	r7, r7, #32
 8007018:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800701a:	601c      	str	r4, [r3, #0]
 800701c:	9b04      	ldr	r3, [sp, #16]
 800701e:	601d      	str	r5, [r3, #0]
 8007020:	e695      	b.n	8006d4e <__gethex+0x12a>
 8007022:	4299      	cmp	r1, r3
 8007024:	f843 cc04 	str.w	ip, [r3, #-4]
 8007028:	d8d8      	bhi.n	8006fdc <__gethex+0x3b8>
 800702a:	68a3      	ldr	r3, [r4, #8]
 800702c:	459b      	cmp	fp, r3
 800702e:	db19      	blt.n	8007064 <__gethex+0x440>
 8007030:	6861      	ldr	r1, [r4, #4]
 8007032:	ee18 0a10 	vmov	r0, s16
 8007036:	3101      	adds	r1, #1
 8007038:	f000 f916 	bl	8007268 <_Balloc>
 800703c:	4681      	mov	r9, r0
 800703e:	b918      	cbnz	r0, 8007048 <__gethex+0x424>
 8007040:	4b1a      	ldr	r3, [pc, #104]	; (80070ac <__gethex+0x488>)
 8007042:	4602      	mov	r2, r0
 8007044:	2184      	movs	r1, #132	; 0x84
 8007046:	e6a8      	b.n	8006d9a <__gethex+0x176>
 8007048:	6922      	ldr	r2, [r4, #16]
 800704a:	3202      	adds	r2, #2
 800704c:	f104 010c 	add.w	r1, r4, #12
 8007050:	0092      	lsls	r2, r2, #2
 8007052:	300c      	adds	r0, #12
 8007054:	f7fe fd88 	bl	8005b68 <memcpy>
 8007058:	4621      	mov	r1, r4
 800705a:	ee18 0a10 	vmov	r0, s16
 800705e:	f000 f943 	bl	80072e8 <_Bfree>
 8007062:	464c      	mov	r4, r9
 8007064:	6923      	ldr	r3, [r4, #16]
 8007066:	1c5a      	adds	r2, r3, #1
 8007068:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800706c:	6122      	str	r2, [r4, #16]
 800706e:	2201      	movs	r2, #1
 8007070:	615a      	str	r2, [r3, #20]
 8007072:	e7bb      	b.n	8006fec <__gethex+0x3c8>
 8007074:	6922      	ldr	r2, [r4, #16]
 8007076:	455a      	cmp	r2, fp
 8007078:	dd0b      	ble.n	8007092 <__gethex+0x46e>
 800707a:	2101      	movs	r1, #1
 800707c:	4620      	mov	r0, r4
 800707e:	f7ff fd69 	bl	8006b54 <rshift>
 8007082:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007086:	3501      	adds	r5, #1
 8007088:	42ab      	cmp	r3, r5
 800708a:	f6ff aed0 	blt.w	8006e2e <__gethex+0x20a>
 800708e:	2701      	movs	r7, #1
 8007090:	e7c0      	b.n	8007014 <__gethex+0x3f0>
 8007092:	f016 061f 	ands.w	r6, r6, #31
 8007096:	d0fa      	beq.n	800708e <__gethex+0x46a>
 8007098:	4453      	add	r3, sl
 800709a:	f1c6 0620 	rsb	r6, r6, #32
 800709e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80070a2:	f000 f9d3 	bl	800744c <__hi0bits>
 80070a6:	42b0      	cmp	r0, r6
 80070a8:	dbe7      	blt.n	800707a <__gethex+0x456>
 80070aa:	e7f0      	b.n	800708e <__gethex+0x46a>
 80070ac:	08009421 	.word	0x08009421

080070b0 <L_shift>:
 80070b0:	f1c2 0208 	rsb	r2, r2, #8
 80070b4:	0092      	lsls	r2, r2, #2
 80070b6:	b570      	push	{r4, r5, r6, lr}
 80070b8:	f1c2 0620 	rsb	r6, r2, #32
 80070bc:	6843      	ldr	r3, [r0, #4]
 80070be:	6804      	ldr	r4, [r0, #0]
 80070c0:	fa03 f506 	lsl.w	r5, r3, r6
 80070c4:	432c      	orrs	r4, r5
 80070c6:	40d3      	lsrs	r3, r2
 80070c8:	6004      	str	r4, [r0, #0]
 80070ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80070ce:	4288      	cmp	r0, r1
 80070d0:	d3f4      	bcc.n	80070bc <L_shift+0xc>
 80070d2:	bd70      	pop	{r4, r5, r6, pc}

080070d4 <__match>:
 80070d4:	b530      	push	{r4, r5, lr}
 80070d6:	6803      	ldr	r3, [r0, #0]
 80070d8:	3301      	adds	r3, #1
 80070da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070de:	b914      	cbnz	r4, 80070e6 <__match+0x12>
 80070e0:	6003      	str	r3, [r0, #0]
 80070e2:	2001      	movs	r0, #1
 80070e4:	bd30      	pop	{r4, r5, pc}
 80070e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80070ee:	2d19      	cmp	r5, #25
 80070f0:	bf98      	it	ls
 80070f2:	3220      	addls	r2, #32
 80070f4:	42a2      	cmp	r2, r4
 80070f6:	d0f0      	beq.n	80070da <__match+0x6>
 80070f8:	2000      	movs	r0, #0
 80070fa:	e7f3      	b.n	80070e4 <__match+0x10>

080070fc <__hexnan>:
 80070fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007100:	680b      	ldr	r3, [r1, #0]
 8007102:	115e      	asrs	r6, r3, #5
 8007104:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007108:	f013 031f 	ands.w	r3, r3, #31
 800710c:	b087      	sub	sp, #28
 800710e:	bf18      	it	ne
 8007110:	3604      	addne	r6, #4
 8007112:	2500      	movs	r5, #0
 8007114:	1f37      	subs	r7, r6, #4
 8007116:	4690      	mov	r8, r2
 8007118:	6802      	ldr	r2, [r0, #0]
 800711a:	9301      	str	r3, [sp, #4]
 800711c:	4682      	mov	sl, r0
 800711e:	f846 5c04 	str.w	r5, [r6, #-4]
 8007122:	46b9      	mov	r9, r7
 8007124:	463c      	mov	r4, r7
 8007126:	9502      	str	r5, [sp, #8]
 8007128:	46ab      	mov	fp, r5
 800712a:	7851      	ldrb	r1, [r2, #1]
 800712c:	1c53      	adds	r3, r2, #1
 800712e:	9303      	str	r3, [sp, #12]
 8007130:	b341      	cbz	r1, 8007184 <__hexnan+0x88>
 8007132:	4608      	mov	r0, r1
 8007134:	9205      	str	r2, [sp, #20]
 8007136:	9104      	str	r1, [sp, #16]
 8007138:	f7ff fd5e 	bl	8006bf8 <__hexdig_fun>
 800713c:	2800      	cmp	r0, #0
 800713e:	d14f      	bne.n	80071e0 <__hexnan+0xe4>
 8007140:	9904      	ldr	r1, [sp, #16]
 8007142:	9a05      	ldr	r2, [sp, #20]
 8007144:	2920      	cmp	r1, #32
 8007146:	d818      	bhi.n	800717a <__hexnan+0x7e>
 8007148:	9b02      	ldr	r3, [sp, #8]
 800714a:	459b      	cmp	fp, r3
 800714c:	dd13      	ble.n	8007176 <__hexnan+0x7a>
 800714e:	454c      	cmp	r4, r9
 8007150:	d206      	bcs.n	8007160 <__hexnan+0x64>
 8007152:	2d07      	cmp	r5, #7
 8007154:	dc04      	bgt.n	8007160 <__hexnan+0x64>
 8007156:	462a      	mov	r2, r5
 8007158:	4649      	mov	r1, r9
 800715a:	4620      	mov	r0, r4
 800715c:	f7ff ffa8 	bl	80070b0 <L_shift>
 8007160:	4544      	cmp	r4, r8
 8007162:	d950      	bls.n	8007206 <__hexnan+0x10a>
 8007164:	2300      	movs	r3, #0
 8007166:	f1a4 0904 	sub.w	r9, r4, #4
 800716a:	f844 3c04 	str.w	r3, [r4, #-4]
 800716e:	f8cd b008 	str.w	fp, [sp, #8]
 8007172:	464c      	mov	r4, r9
 8007174:	461d      	mov	r5, r3
 8007176:	9a03      	ldr	r2, [sp, #12]
 8007178:	e7d7      	b.n	800712a <__hexnan+0x2e>
 800717a:	2929      	cmp	r1, #41	; 0x29
 800717c:	d156      	bne.n	800722c <__hexnan+0x130>
 800717e:	3202      	adds	r2, #2
 8007180:	f8ca 2000 	str.w	r2, [sl]
 8007184:	f1bb 0f00 	cmp.w	fp, #0
 8007188:	d050      	beq.n	800722c <__hexnan+0x130>
 800718a:	454c      	cmp	r4, r9
 800718c:	d206      	bcs.n	800719c <__hexnan+0xa0>
 800718e:	2d07      	cmp	r5, #7
 8007190:	dc04      	bgt.n	800719c <__hexnan+0xa0>
 8007192:	462a      	mov	r2, r5
 8007194:	4649      	mov	r1, r9
 8007196:	4620      	mov	r0, r4
 8007198:	f7ff ff8a 	bl	80070b0 <L_shift>
 800719c:	4544      	cmp	r4, r8
 800719e:	d934      	bls.n	800720a <__hexnan+0x10e>
 80071a0:	f1a8 0204 	sub.w	r2, r8, #4
 80071a4:	4623      	mov	r3, r4
 80071a6:	f853 1b04 	ldr.w	r1, [r3], #4
 80071aa:	f842 1f04 	str.w	r1, [r2, #4]!
 80071ae:	429f      	cmp	r7, r3
 80071b0:	d2f9      	bcs.n	80071a6 <__hexnan+0xaa>
 80071b2:	1b3b      	subs	r3, r7, r4
 80071b4:	f023 0303 	bic.w	r3, r3, #3
 80071b8:	3304      	adds	r3, #4
 80071ba:	3401      	adds	r4, #1
 80071bc:	3e03      	subs	r6, #3
 80071be:	42b4      	cmp	r4, r6
 80071c0:	bf88      	it	hi
 80071c2:	2304      	movhi	r3, #4
 80071c4:	4443      	add	r3, r8
 80071c6:	2200      	movs	r2, #0
 80071c8:	f843 2b04 	str.w	r2, [r3], #4
 80071cc:	429f      	cmp	r7, r3
 80071ce:	d2fb      	bcs.n	80071c8 <__hexnan+0xcc>
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	b91b      	cbnz	r3, 80071dc <__hexnan+0xe0>
 80071d4:	4547      	cmp	r7, r8
 80071d6:	d127      	bne.n	8007228 <__hexnan+0x12c>
 80071d8:	2301      	movs	r3, #1
 80071da:	603b      	str	r3, [r7, #0]
 80071dc:	2005      	movs	r0, #5
 80071de:	e026      	b.n	800722e <__hexnan+0x132>
 80071e0:	3501      	adds	r5, #1
 80071e2:	2d08      	cmp	r5, #8
 80071e4:	f10b 0b01 	add.w	fp, fp, #1
 80071e8:	dd06      	ble.n	80071f8 <__hexnan+0xfc>
 80071ea:	4544      	cmp	r4, r8
 80071ec:	d9c3      	bls.n	8007176 <__hexnan+0x7a>
 80071ee:	2300      	movs	r3, #0
 80071f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80071f4:	2501      	movs	r5, #1
 80071f6:	3c04      	subs	r4, #4
 80071f8:	6822      	ldr	r2, [r4, #0]
 80071fa:	f000 000f 	and.w	r0, r0, #15
 80071fe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007202:	6022      	str	r2, [r4, #0]
 8007204:	e7b7      	b.n	8007176 <__hexnan+0x7a>
 8007206:	2508      	movs	r5, #8
 8007208:	e7b5      	b.n	8007176 <__hexnan+0x7a>
 800720a:	9b01      	ldr	r3, [sp, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0df      	beq.n	80071d0 <__hexnan+0xd4>
 8007210:	f04f 32ff 	mov.w	r2, #4294967295
 8007214:	f1c3 0320 	rsb	r3, r3, #32
 8007218:	fa22 f303 	lsr.w	r3, r2, r3
 800721c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007220:	401a      	ands	r2, r3
 8007222:	f846 2c04 	str.w	r2, [r6, #-4]
 8007226:	e7d3      	b.n	80071d0 <__hexnan+0xd4>
 8007228:	3f04      	subs	r7, #4
 800722a:	e7d1      	b.n	80071d0 <__hexnan+0xd4>
 800722c:	2004      	movs	r0, #4
 800722e:	b007      	add	sp, #28
 8007230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007234 <malloc>:
 8007234:	4b02      	ldr	r3, [pc, #8]	; (8007240 <malloc+0xc>)
 8007236:	4601      	mov	r1, r0
 8007238:	6818      	ldr	r0, [r3, #0]
 800723a:	f000 bd59 	b.w	8007cf0 <_malloc_r>
 800723e:	bf00      	nop
 8007240:	20000084 	.word	0x20000084

08007244 <__ascii_mbtowc>:
 8007244:	b082      	sub	sp, #8
 8007246:	b901      	cbnz	r1, 800724a <__ascii_mbtowc+0x6>
 8007248:	a901      	add	r1, sp, #4
 800724a:	b142      	cbz	r2, 800725e <__ascii_mbtowc+0x1a>
 800724c:	b14b      	cbz	r3, 8007262 <__ascii_mbtowc+0x1e>
 800724e:	7813      	ldrb	r3, [r2, #0]
 8007250:	600b      	str	r3, [r1, #0]
 8007252:	7812      	ldrb	r2, [r2, #0]
 8007254:	1e10      	subs	r0, r2, #0
 8007256:	bf18      	it	ne
 8007258:	2001      	movne	r0, #1
 800725a:	b002      	add	sp, #8
 800725c:	4770      	bx	lr
 800725e:	4610      	mov	r0, r2
 8007260:	e7fb      	b.n	800725a <__ascii_mbtowc+0x16>
 8007262:	f06f 0001 	mvn.w	r0, #1
 8007266:	e7f8      	b.n	800725a <__ascii_mbtowc+0x16>

08007268 <_Balloc>:
 8007268:	b570      	push	{r4, r5, r6, lr}
 800726a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800726c:	4604      	mov	r4, r0
 800726e:	460d      	mov	r5, r1
 8007270:	b976      	cbnz	r6, 8007290 <_Balloc+0x28>
 8007272:	2010      	movs	r0, #16
 8007274:	f7ff ffde 	bl	8007234 <malloc>
 8007278:	4602      	mov	r2, r0
 800727a:	6260      	str	r0, [r4, #36]	; 0x24
 800727c:	b920      	cbnz	r0, 8007288 <_Balloc+0x20>
 800727e:	4b18      	ldr	r3, [pc, #96]	; (80072e0 <_Balloc+0x78>)
 8007280:	4818      	ldr	r0, [pc, #96]	; (80072e4 <_Balloc+0x7c>)
 8007282:	2166      	movs	r1, #102	; 0x66
 8007284:	f7ff fc36 	bl	8006af4 <__assert_func>
 8007288:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800728c:	6006      	str	r6, [r0, #0]
 800728e:	60c6      	str	r6, [r0, #12]
 8007290:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007292:	68f3      	ldr	r3, [r6, #12]
 8007294:	b183      	cbz	r3, 80072b8 <_Balloc+0x50>
 8007296:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800729e:	b9b8      	cbnz	r0, 80072d0 <_Balloc+0x68>
 80072a0:	2101      	movs	r1, #1
 80072a2:	fa01 f605 	lsl.w	r6, r1, r5
 80072a6:	1d72      	adds	r2, r6, #5
 80072a8:	0092      	lsls	r2, r2, #2
 80072aa:	4620      	mov	r0, r4
 80072ac:	f000 fc9d 	bl	8007bea <_calloc_r>
 80072b0:	b160      	cbz	r0, 80072cc <_Balloc+0x64>
 80072b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072b6:	e00e      	b.n	80072d6 <_Balloc+0x6e>
 80072b8:	2221      	movs	r2, #33	; 0x21
 80072ba:	2104      	movs	r1, #4
 80072bc:	4620      	mov	r0, r4
 80072be:	f000 fc94 	bl	8007bea <_calloc_r>
 80072c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072c4:	60f0      	str	r0, [r6, #12]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d1e4      	bne.n	8007296 <_Balloc+0x2e>
 80072cc:	2000      	movs	r0, #0
 80072ce:	bd70      	pop	{r4, r5, r6, pc}
 80072d0:	6802      	ldr	r2, [r0, #0]
 80072d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072d6:	2300      	movs	r3, #0
 80072d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072dc:	e7f7      	b.n	80072ce <_Balloc+0x66>
 80072de:	bf00      	nop
 80072e0:	08009270 	.word	0x08009270
 80072e4:	080094ac 	.word	0x080094ac

080072e8 <_Bfree>:
 80072e8:	b570      	push	{r4, r5, r6, lr}
 80072ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80072ec:	4605      	mov	r5, r0
 80072ee:	460c      	mov	r4, r1
 80072f0:	b976      	cbnz	r6, 8007310 <_Bfree+0x28>
 80072f2:	2010      	movs	r0, #16
 80072f4:	f7ff ff9e 	bl	8007234 <malloc>
 80072f8:	4602      	mov	r2, r0
 80072fa:	6268      	str	r0, [r5, #36]	; 0x24
 80072fc:	b920      	cbnz	r0, 8007308 <_Bfree+0x20>
 80072fe:	4b09      	ldr	r3, [pc, #36]	; (8007324 <_Bfree+0x3c>)
 8007300:	4809      	ldr	r0, [pc, #36]	; (8007328 <_Bfree+0x40>)
 8007302:	218a      	movs	r1, #138	; 0x8a
 8007304:	f7ff fbf6 	bl	8006af4 <__assert_func>
 8007308:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800730c:	6006      	str	r6, [r0, #0]
 800730e:	60c6      	str	r6, [r0, #12]
 8007310:	b13c      	cbz	r4, 8007322 <_Bfree+0x3a>
 8007312:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007314:	6862      	ldr	r2, [r4, #4]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800731c:	6021      	str	r1, [r4, #0]
 800731e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007322:	bd70      	pop	{r4, r5, r6, pc}
 8007324:	08009270 	.word	0x08009270
 8007328:	080094ac 	.word	0x080094ac

0800732c <__multadd>:
 800732c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007330:	690d      	ldr	r5, [r1, #16]
 8007332:	4607      	mov	r7, r0
 8007334:	460c      	mov	r4, r1
 8007336:	461e      	mov	r6, r3
 8007338:	f101 0c14 	add.w	ip, r1, #20
 800733c:	2000      	movs	r0, #0
 800733e:	f8dc 3000 	ldr.w	r3, [ip]
 8007342:	b299      	uxth	r1, r3
 8007344:	fb02 6101 	mla	r1, r2, r1, r6
 8007348:	0c1e      	lsrs	r6, r3, #16
 800734a:	0c0b      	lsrs	r3, r1, #16
 800734c:	fb02 3306 	mla	r3, r2, r6, r3
 8007350:	b289      	uxth	r1, r1
 8007352:	3001      	adds	r0, #1
 8007354:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007358:	4285      	cmp	r5, r0
 800735a:	f84c 1b04 	str.w	r1, [ip], #4
 800735e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007362:	dcec      	bgt.n	800733e <__multadd+0x12>
 8007364:	b30e      	cbz	r6, 80073aa <__multadd+0x7e>
 8007366:	68a3      	ldr	r3, [r4, #8]
 8007368:	42ab      	cmp	r3, r5
 800736a:	dc19      	bgt.n	80073a0 <__multadd+0x74>
 800736c:	6861      	ldr	r1, [r4, #4]
 800736e:	4638      	mov	r0, r7
 8007370:	3101      	adds	r1, #1
 8007372:	f7ff ff79 	bl	8007268 <_Balloc>
 8007376:	4680      	mov	r8, r0
 8007378:	b928      	cbnz	r0, 8007386 <__multadd+0x5a>
 800737a:	4602      	mov	r2, r0
 800737c:	4b0c      	ldr	r3, [pc, #48]	; (80073b0 <__multadd+0x84>)
 800737e:	480d      	ldr	r0, [pc, #52]	; (80073b4 <__multadd+0x88>)
 8007380:	21b5      	movs	r1, #181	; 0xb5
 8007382:	f7ff fbb7 	bl	8006af4 <__assert_func>
 8007386:	6922      	ldr	r2, [r4, #16]
 8007388:	3202      	adds	r2, #2
 800738a:	f104 010c 	add.w	r1, r4, #12
 800738e:	0092      	lsls	r2, r2, #2
 8007390:	300c      	adds	r0, #12
 8007392:	f7fe fbe9 	bl	8005b68 <memcpy>
 8007396:	4621      	mov	r1, r4
 8007398:	4638      	mov	r0, r7
 800739a:	f7ff ffa5 	bl	80072e8 <_Bfree>
 800739e:	4644      	mov	r4, r8
 80073a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073a4:	3501      	adds	r5, #1
 80073a6:	615e      	str	r6, [r3, #20]
 80073a8:	6125      	str	r5, [r4, #16]
 80073aa:	4620      	mov	r0, r4
 80073ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073b0:	08009421 	.word	0x08009421
 80073b4:	080094ac 	.word	0x080094ac

080073b8 <__s2b>:
 80073b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073bc:	460c      	mov	r4, r1
 80073be:	4615      	mov	r5, r2
 80073c0:	461f      	mov	r7, r3
 80073c2:	2209      	movs	r2, #9
 80073c4:	3308      	adds	r3, #8
 80073c6:	4606      	mov	r6, r0
 80073c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80073cc:	2100      	movs	r1, #0
 80073ce:	2201      	movs	r2, #1
 80073d0:	429a      	cmp	r2, r3
 80073d2:	db09      	blt.n	80073e8 <__s2b+0x30>
 80073d4:	4630      	mov	r0, r6
 80073d6:	f7ff ff47 	bl	8007268 <_Balloc>
 80073da:	b940      	cbnz	r0, 80073ee <__s2b+0x36>
 80073dc:	4602      	mov	r2, r0
 80073de:	4b19      	ldr	r3, [pc, #100]	; (8007444 <__s2b+0x8c>)
 80073e0:	4819      	ldr	r0, [pc, #100]	; (8007448 <__s2b+0x90>)
 80073e2:	21ce      	movs	r1, #206	; 0xce
 80073e4:	f7ff fb86 	bl	8006af4 <__assert_func>
 80073e8:	0052      	lsls	r2, r2, #1
 80073ea:	3101      	adds	r1, #1
 80073ec:	e7f0      	b.n	80073d0 <__s2b+0x18>
 80073ee:	9b08      	ldr	r3, [sp, #32]
 80073f0:	6143      	str	r3, [r0, #20]
 80073f2:	2d09      	cmp	r5, #9
 80073f4:	f04f 0301 	mov.w	r3, #1
 80073f8:	6103      	str	r3, [r0, #16]
 80073fa:	dd16      	ble.n	800742a <__s2b+0x72>
 80073fc:	f104 0909 	add.w	r9, r4, #9
 8007400:	46c8      	mov	r8, r9
 8007402:	442c      	add	r4, r5
 8007404:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007408:	4601      	mov	r1, r0
 800740a:	3b30      	subs	r3, #48	; 0x30
 800740c:	220a      	movs	r2, #10
 800740e:	4630      	mov	r0, r6
 8007410:	f7ff ff8c 	bl	800732c <__multadd>
 8007414:	45a0      	cmp	r8, r4
 8007416:	d1f5      	bne.n	8007404 <__s2b+0x4c>
 8007418:	f1a5 0408 	sub.w	r4, r5, #8
 800741c:	444c      	add	r4, r9
 800741e:	1b2d      	subs	r5, r5, r4
 8007420:	1963      	adds	r3, r4, r5
 8007422:	42bb      	cmp	r3, r7
 8007424:	db04      	blt.n	8007430 <__s2b+0x78>
 8007426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800742a:	340a      	adds	r4, #10
 800742c:	2509      	movs	r5, #9
 800742e:	e7f6      	b.n	800741e <__s2b+0x66>
 8007430:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007434:	4601      	mov	r1, r0
 8007436:	3b30      	subs	r3, #48	; 0x30
 8007438:	220a      	movs	r2, #10
 800743a:	4630      	mov	r0, r6
 800743c:	f7ff ff76 	bl	800732c <__multadd>
 8007440:	e7ee      	b.n	8007420 <__s2b+0x68>
 8007442:	bf00      	nop
 8007444:	08009421 	.word	0x08009421
 8007448:	080094ac 	.word	0x080094ac

0800744c <__hi0bits>:
 800744c:	0c03      	lsrs	r3, r0, #16
 800744e:	041b      	lsls	r3, r3, #16
 8007450:	b9d3      	cbnz	r3, 8007488 <__hi0bits+0x3c>
 8007452:	0400      	lsls	r0, r0, #16
 8007454:	2310      	movs	r3, #16
 8007456:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800745a:	bf04      	itt	eq
 800745c:	0200      	lsleq	r0, r0, #8
 800745e:	3308      	addeq	r3, #8
 8007460:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007464:	bf04      	itt	eq
 8007466:	0100      	lsleq	r0, r0, #4
 8007468:	3304      	addeq	r3, #4
 800746a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800746e:	bf04      	itt	eq
 8007470:	0080      	lsleq	r0, r0, #2
 8007472:	3302      	addeq	r3, #2
 8007474:	2800      	cmp	r0, #0
 8007476:	db05      	blt.n	8007484 <__hi0bits+0x38>
 8007478:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800747c:	f103 0301 	add.w	r3, r3, #1
 8007480:	bf08      	it	eq
 8007482:	2320      	moveq	r3, #32
 8007484:	4618      	mov	r0, r3
 8007486:	4770      	bx	lr
 8007488:	2300      	movs	r3, #0
 800748a:	e7e4      	b.n	8007456 <__hi0bits+0xa>

0800748c <__lo0bits>:
 800748c:	6803      	ldr	r3, [r0, #0]
 800748e:	f013 0207 	ands.w	r2, r3, #7
 8007492:	4601      	mov	r1, r0
 8007494:	d00b      	beq.n	80074ae <__lo0bits+0x22>
 8007496:	07da      	lsls	r2, r3, #31
 8007498:	d423      	bmi.n	80074e2 <__lo0bits+0x56>
 800749a:	0798      	lsls	r0, r3, #30
 800749c:	bf49      	itett	mi
 800749e:	085b      	lsrmi	r3, r3, #1
 80074a0:	089b      	lsrpl	r3, r3, #2
 80074a2:	2001      	movmi	r0, #1
 80074a4:	600b      	strmi	r3, [r1, #0]
 80074a6:	bf5c      	itt	pl
 80074a8:	600b      	strpl	r3, [r1, #0]
 80074aa:	2002      	movpl	r0, #2
 80074ac:	4770      	bx	lr
 80074ae:	b298      	uxth	r0, r3
 80074b0:	b9a8      	cbnz	r0, 80074de <__lo0bits+0x52>
 80074b2:	0c1b      	lsrs	r3, r3, #16
 80074b4:	2010      	movs	r0, #16
 80074b6:	b2da      	uxtb	r2, r3
 80074b8:	b90a      	cbnz	r2, 80074be <__lo0bits+0x32>
 80074ba:	3008      	adds	r0, #8
 80074bc:	0a1b      	lsrs	r3, r3, #8
 80074be:	071a      	lsls	r2, r3, #28
 80074c0:	bf04      	itt	eq
 80074c2:	091b      	lsreq	r3, r3, #4
 80074c4:	3004      	addeq	r0, #4
 80074c6:	079a      	lsls	r2, r3, #30
 80074c8:	bf04      	itt	eq
 80074ca:	089b      	lsreq	r3, r3, #2
 80074cc:	3002      	addeq	r0, #2
 80074ce:	07da      	lsls	r2, r3, #31
 80074d0:	d403      	bmi.n	80074da <__lo0bits+0x4e>
 80074d2:	085b      	lsrs	r3, r3, #1
 80074d4:	f100 0001 	add.w	r0, r0, #1
 80074d8:	d005      	beq.n	80074e6 <__lo0bits+0x5a>
 80074da:	600b      	str	r3, [r1, #0]
 80074dc:	4770      	bx	lr
 80074de:	4610      	mov	r0, r2
 80074e0:	e7e9      	b.n	80074b6 <__lo0bits+0x2a>
 80074e2:	2000      	movs	r0, #0
 80074e4:	4770      	bx	lr
 80074e6:	2020      	movs	r0, #32
 80074e8:	4770      	bx	lr
	...

080074ec <__i2b>:
 80074ec:	b510      	push	{r4, lr}
 80074ee:	460c      	mov	r4, r1
 80074f0:	2101      	movs	r1, #1
 80074f2:	f7ff feb9 	bl	8007268 <_Balloc>
 80074f6:	4602      	mov	r2, r0
 80074f8:	b928      	cbnz	r0, 8007506 <__i2b+0x1a>
 80074fa:	4b05      	ldr	r3, [pc, #20]	; (8007510 <__i2b+0x24>)
 80074fc:	4805      	ldr	r0, [pc, #20]	; (8007514 <__i2b+0x28>)
 80074fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007502:	f7ff faf7 	bl	8006af4 <__assert_func>
 8007506:	2301      	movs	r3, #1
 8007508:	6144      	str	r4, [r0, #20]
 800750a:	6103      	str	r3, [r0, #16]
 800750c:	bd10      	pop	{r4, pc}
 800750e:	bf00      	nop
 8007510:	08009421 	.word	0x08009421
 8007514:	080094ac 	.word	0x080094ac

08007518 <__multiply>:
 8007518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800751c:	4691      	mov	r9, r2
 800751e:	690a      	ldr	r2, [r1, #16]
 8007520:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007524:	429a      	cmp	r2, r3
 8007526:	bfb8      	it	lt
 8007528:	460b      	movlt	r3, r1
 800752a:	460c      	mov	r4, r1
 800752c:	bfbc      	itt	lt
 800752e:	464c      	movlt	r4, r9
 8007530:	4699      	movlt	r9, r3
 8007532:	6927      	ldr	r7, [r4, #16]
 8007534:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007538:	68a3      	ldr	r3, [r4, #8]
 800753a:	6861      	ldr	r1, [r4, #4]
 800753c:	eb07 060a 	add.w	r6, r7, sl
 8007540:	42b3      	cmp	r3, r6
 8007542:	b085      	sub	sp, #20
 8007544:	bfb8      	it	lt
 8007546:	3101      	addlt	r1, #1
 8007548:	f7ff fe8e 	bl	8007268 <_Balloc>
 800754c:	b930      	cbnz	r0, 800755c <__multiply+0x44>
 800754e:	4602      	mov	r2, r0
 8007550:	4b44      	ldr	r3, [pc, #272]	; (8007664 <__multiply+0x14c>)
 8007552:	4845      	ldr	r0, [pc, #276]	; (8007668 <__multiply+0x150>)
 8007554:	f240 115d 	movw	r1, #349	; 0x15d
 8007558:	f7ff facc 	bl	8006af4 <__assert_func>
 800755c:	f100 0514 	add.w	r5, r0, #20
 8007560:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007564:	462b      	mov	r3, r5
 8007566:	2200      	movs	r2, #0
 8007568:	4543      	cmp	r3, r8
 800756a:	d321      	bcc.n	80075b0 <__multiply+0x98>
 800756c:	f104 0314 	add.w	r3, r4, #20
 8007570:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007574:	f109 0314 	add.w	r3, r9, #20
 8007578:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800757c:	9202      	str	r2, [sp, #8]
 800757e:	1b3a      	subs	r2, r7, r4
 8007580:	3a15      	subs	r2, #21
 8007582:	f022 0203 	bic.w	r2, r2, #3
 8007586:	3204      	adds	r2, #4
 8007588:	f104 0115 	add.w	r1, r4, #21
 800758c:	428f      	cmp	r7, r1
 800758e:	bf38      	it	cc
 8007590:	2204      	movcc	r2, #4
 8007592:	9201      	str	r2, [sp, #4]
 8007594:	9a02      	ldr	r2, [sp, #8]
 8007596:	9303      	str	r3, [sp, #12]
 8007598:	429a      	cmp	r2, r3
 800759a:	d80c      	bhi.n	80075b6 <__multiply+0x9e>
 800759c:	2e00      	cmp	r6, #0
 800759e:	dd03      	ble.n	80075a8 <__multiply+0x90>
 80075a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d05a      	beq.n	800765e <__multiply+0x146>
 80075a8:	6106      	str	r6, [r0, #16]
 80075aa:	b005      	add	sp, #20
 80075ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b0:	f843 2b04 	str.w	r2, [r3], #4
 80075b4:	e7d8      	b.n	8007568 <__multiply+0x50>
 80075b6:	f8b3 a000 	ldrh.w	sl, [r3]
 80075ba:	f1ba 0f00 	cmp.w	sl, #0
 80075be:	d024      	beq.n	800760a <__multiply+0xf2>
 80075c0:	f104 0e14 	add.w	lr, r4, #20
 80075c4:	46a9      	mov	r9, r5
 80075c6:	f04f 0c00 	mov.w	ip, #0
 80075ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 80075ce:	f8d9 1000 	ldr.w	r1, [r9]
 80075d2:	fa1f fb82 	uxth.w	fp, r2
 80075d6:	b289      	uxth	r1, r1
 80075d8:	fb0a 110b 	mla	r1, sl, fp, r1
 80075dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80075e0:	f8d9 2000 	ldr.w	r2, [r9]
 80075e4:	4461      	add	r1, ip
 80075e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80075ea:	fb0a c20b 	mla	r2, sl, fp, ip
 80075ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80075f2:	b289      	uxth	r1, r1
 80075f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80075f8:	4577      	cmp	r7, lr
 80075fa:	f849 1b04 	str.w	r1, [r9], #4
 80075fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007602:	d8e2      	bhi.n	80075ca <__multiply+0xb2>
 8007604:	9a01      	ldr	r2, [sp, #4]
 8007606:	f845 c002 	str.w	ip, [r5, r2]
 800760a:	9a03      	ldr	r2, [sp, #12]
 800760c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007610:	3304      	adds	r3, #4
 8007612:	f1b9 0f00 	cmp.w	r9, #0
 8007616:	d020      	beq.n	800765a <__multiply+0x142>
 8007618:	6829      	ldr	r1, [r5, #0]
 800761a:	f104 0c14 	add.w	ip, r4, #20
 800761e:	46ae      	mov	lr, r5
 8007620:	f04f 0a00 	mov.w	sl, #0
 8007624:	f8bc b000 	ldrh.w	fp, [ip]
 8007628:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800762c:	fb09 220b 	mla	r2, r9, fp, r2
 8007630:	4492      	add	sl, r2
 8007632:	b289      	uxth	r1, r1
 8007634:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007638:	f84e 1b04 	str.w	r1, [lr], #4
 800763c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007640:	f8be 1000 	ldrh.w	r1, [lr]
 8007644:	0c12      	lsrs	r2, r2, #16
 8007646:	fb09 1102 	mla	r1, r9, r2, r1
 800764a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800764e:	4567      	cmp	r7, ip
 8007650:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007654:	d8e6      	bhi.n	8007624 <__multiply+0x10c>
 8007656:	9a01      	ldr	r2, [sp, #4]
 8007658:	50a9      	str	r1, [r5, r2]
 800765a:	3504      	adds	r5, #4
 800765c:	e79a      	b.n	8007594 <__multiply+0x7c>
 800765e:	3e01      	subs	r6, #1
 8007660:	e79c      	b.n	800759c <__multiply+0x84>
 8007662:	bf00      	nop
 8007664:	08009421 	.word	0x08009421
 8007668:	080094ac 	.word	0x080094ac

0800766c <__pow5mult>:
 800766c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007670:	4615      	mov	r5, r2
 8007672:	f012 0203 	ands.w	r2, r2, #3
 8007676:	4606      	mov	r6, r0
 8007678:	460f      	mov	r7, r1
 800767a:	d007      	beq.n	800768c <__pow5mult+0x20>
 800767c:	4c25      	ldr	r4, [pc, #148]	; (8007714 <__pow5mult+0xa8>)
 800767e:	3a01      	subs	r2, #1
 8007680:	2300      	movs	r3, #0
 8007682:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007686:	f7ff fe51 	bl	800732c <__multadd>
 800768a:	4607      	mov	r7, r0
 800768c:	10ad      	asrs	r5, r5, #2
 800768e:	d03d      	beq.n	800770c <__pow5mult+0xa0>
 8007690:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007692:	b97c      	cbnz	r4, 80076b4 <__pow5mult+0x48>
 8007694:	2010      	movs	r0, #16
 8007696:	f7ff fdcd 	bl	8007234 <malloc>
 800769a:	4602      	mov	r2, r0
 800769c:	6270      	str	r0, [r6, #36]	; 0x24
 800769e:	b928      	cbnz	r0, 80076ac <__pow5mult+0x40>
 80076a0:	4b1d      	ldr	r3, [pc, #116]	; (8007718 <__pow5mult+0xac>)
 80076a2:	481e      	ldr	r0, [pc, #120]	; (800771c <__pow5mult+0xb0>)
 80076a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80076a8:	f7ff fa24 	bl	8006af4 <__assert_func>
 80076ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80076b0:	6004      	str	r4, [r0, #0]
 80076b2:	60c4      	str	r4, [r0, #12]
 80076b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80076b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80076bc:	b94c      	cbnz	r4, 80076d2 <__pow5mult+0x66>
 80076be:	f240 2171 	movw	r1, #625	; 0x271
 80076c2:	4630      	mov	r0, r6
 80076c4:	f7ff ff12 	bl	80074ec <__i2b>
 80076c8:	2300      	movs	r3, #0
 80076ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80076ce:	4604      	mov	r4, r0
 80076d0:	6003      	str	r3, [r0, #0]
 80076d2:	f04f 0900 	mov.w	r9, #0
 80076d6:	07eb      	lsls	r3, r5, #31
 80076d8:	d50a      	bpl.n	80076f0 <__pow5mult+0x84>
 80076da:	4639      	mov	r1, r7
 80076dc:	4622      	mov	r2, r4
 80076de:	4630      	mov	r0, r6
 80076e0:	f7ff ff1a 	bl	8007518 <__multiply>
 80076e4:	4639      	mov	r1, r7
 80076e6:	4680      	mov	r8, r0
 80076e8:	4630      	mov	r0, r6
 80076ea:	f7ff fdfd 	bl	80072e8 <_Bfree>
 80076ee:	4647      	mov	r7, r8
 80076f0:	106d      	asrs	r5, r5, #1
 80076f2:	d00b      	beq.n	800770c <__pow5mult+0xa0>
 80076f4:	6820      	ldr	r0, [r4, #0]
 80076f6:	b938      	cbnz	r0, 8007708 <__pow5mult+0x9c>
 80076f8:	4622      	mov	r2, r4
 80076fa:	4621      	mov	r1, r4
 80076fc:	4630      	mov	r0, r6
 80076fe:	f7ff ff0b 	bl	8007518 <__multiply>
 8007702:	6020      	str	r0, [r4, #0]
 8007704:	f8c0 9000 	str.w	r9, [r0]
 8007708:	4604      	mov	r4, r0
 800770a:	e7e4      	b.n	80076d6 <__pow5mult+0x6a>
 800770c:	4638      	mov	r0, r7
 800770e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007712:	bf00      	nop
 8007714:	080095f8 	.word	0x080095f8
 8007718:	08009270 	.word	0x08009270
 800771c:	080094ac 	.word	0x080094ac

08007720 <__lshift>:
 8007720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007724:	460c      	mov	r4, r1
 8007726:	6849      	ldr	r1, [r1, #4]
 8007728:	6923      	ldr	r3, [r4, #16]
 800772a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800772e:	68a3      	ldr	r3, [r4, #8]
 8007730:	4607      	mov	r7, r0
 8007732:	4691      	mov	r9, r2
 8007734:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007738:	f108 0601 	add.w	r6, r8, #1
 800773c:	42b3      	cmp	r3, r6
 800773e:	db0b      	blt.n	8007758 <__lshift+0x38>
 8007740:	4638      	mov	r0, r7
 8007742:	f7ff fd91 	bl	8007268 <_Balloc>
 8007746:	4605      	mov	r5, r0
 8007748:	b948      	cbnz	r0, 800775e <__lshift+0x3e>
 800774a:	4602      	mov	r2, r0
 800774c:	4b2a      	ldr	r3, [pc, #168]	; (80077f8 <__lshift+0xd8>)
 800774e:	482b      	ldr	r0, [pc, #172]	; (80077fc <__lshift+0xdc>)
 8007750:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007754:	f7ff f9ce 	bl	8006af4 <__assert_func>
 8007758:	3101      	adds	r1, #1
 800775a:	005b      	lsls	r3, r3, #1
 800775c:	e7ee      	b.n	800773c <__lshift+0x1c>
 800775e:	2300      	movs	r3, #0
 8007760:	f100 0114 	add.w	r1, r0, #20
 8007764:	f100 0210 	add.w	r2, r0, #16
 8007768:	4618      	mov	r0, r3
 800776a:	4553      	cmp	r3, sl
 800776c:	db37      	blt.n	80077de <__lshift+0xbe>
 800776e:	6920      	ldr	r0, [r4, #16]
 8007770:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007774:	f104 0314 	add.w	r3, r4, #20
 8007778:	f019 091f 	ands.w	r9, r9, #31
 800777c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007780:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007784:	d02f      	beq.n	80077e6 <__lshift+0xc6>
 8007786:	f1c9 0e20 	rsb	lr, r9, #32
 800778a:	468a      	mov	sl, r1
 800778c:	f04f 0c00 	mov.w	ip, #0
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	fa02 f209 	lsl.w	r2, r2, r9
 8007796:	ea42 020c 	orr.w	r2, r2, ip
 800779a:	f84a 2b04 	str.w	r2, [sl], #4
 800779e:	f853 2b04 	ldr.w	r2, [r3], #4
 80077a2:	4298      	cmp	r0, r3
 80077a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80077a8:	d8f2      	bhi.n	8007790 <__lshift+0x70>
 80077aa:	1b03      	subs	r3, r0, r4
 80077ac:	3b15      	subs	r3, #21
 80077ae:	f023 0303 	bic.w	r3, r3, #3
 80077b2:	3304      	adds	r3, #4
 80077b4:	f104 0215 	add.w	r2, r4, #21
 80077b8:	4290      	cmp	r0, r2
 80077ba:	bf38      	it	cc
 80077bc:	2304      	movcc	r3, #4
 80077be:	f841 c003 	str.w	ip, [r1, r3]
 80077c2:	f1bc 0f00 	cmp.w	ip, #0
 80077c6:	d001      	beq.n	80077cc <__lshift+0xac>
 80077c8:	f108 0602 	add.w	r6, r8, #2
 80077cc:	3e01      	subs	r6, #1
 80077ce:	4638      	mov	r0, r7
 80077d0:	612e      	str	r6, [r5, #16]
 80077d2:	4621      	mov	r1, r4
 80077d4:	f7ff fd88 	bl	80072e8 <_Bfree>
 80077d8:	4628      	mov	r0, r5
 80077da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077de:	f842 0f04 	str.w	r0, [r2, #4]!
 80077e2:	3301      	adds	r3, #1
 80077e4:	e7c1      	b.n	800776a <__lshift+0x4a>
 80077e6:	3904      	subs	r1, #4
 80077e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80077ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80077f0:	4298      	cmp	r0, r3
 80077f2:	d8f9      	bhi.n	80077e8 <__lshift+0xc8>
 80077f4:	e7ea      	b.n	80077cc <__lshift+0xac>
 80077f6:	bf00      	nop
 80077f8:	08009421 	.word	0x08009421
 80077fc:	080094ac 	.word	0x080094ac

08007800 <__mcmp>:
 8007800:	b530      	push	{r4, r5, lr}
 8007802:	6902      	ldr	r2, [r0, #16]
 8007804:	690c      	ldr	r4, [r1, #16]
 8007806:	1b12      	subs	r2, r2, r4
 8007808:	d10e      	bne.n	8007828 <__mcmp+0x28>
 800780a:	f100 0314 	add.w	r3, r0, #20
 800780e:	3114      	adds	r1, #20
 8007810:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007814:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007818:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800781c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007820:	42a5      	cmp	r5, r4
 8007822:	d003      	beq.n	800782c <__mcmp+0x2c>
 8007824:	d305      	bcc.n	8007832 <__mcmp+0x32>
 8007826:	2201      	movs	r2, #1
 8007828:	4610      	mov	r0, r2
 800782a:	bd30      	pop	{r4, r5, pc}
 800782c:	4283      	cmp	r3, r0
 800782e:	d3f3      	bcc.n	8007818 <__mcmp+0x18>
 8007830:	e7fa      	b.n	8007828 <__mcmp+0x28>
 8007832:	f04f 32ff 	mov.w	r2, #4294967295
 8007836:	e7f7      	b.n	8007828 <__mcmp+0x28>

08007838 <__mdiff>:
 8007838:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800783c:	460c      	mov	r4, r1
 800783e:	4606      	mov	r6, r0
 8007840:	4611      	mov	r1, r2
 8007842:	4620      	mov	r0, r4
 8007844:	4690      	mov	r8, r2
 8007846:	f7ff ffdb 	bl	8007800 <__mcmp>
 800784a:	1e05      	subs	r5, r0, #0
 800784c:	d110      	bne.n	8007870 <__mdiff+0x38>
 800784e:	4629      	mov	r1, r5
 8007850:	4630      	mov	r0, r6
 8007852:	f7ff fd09 	bl	8007268 <_Balloc>
 8007856:	b930      	cbnz	r0, 8007866 <__mdiff+0x2e>
 8007858:	4b3a      	ldr	r3, [pc, #232]	; (8007944 <__mdiff+0x10c>)
 800785a:	4602      	mov	r2, r0
 800785c:	f240 2132 	movw	r1, #562	; 0x232
 8007860:	4839      	ldr	r0, [pc, #228]	; (8007948 <__mdiff+0x110>)
 8007862:	f7ff f947 	bl	8006af4 <__assert_func>
 8007866:	2301      	movs	r3, #1
 8007868:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800786c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007870:	bfa4      	itt	ge
 8007872:	4643      	movge	r3, r8
 8007874:	46a0      	movge	r8, r4
 8007876:	4630      	mov	r0, r6
 8007878:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800787c:	bfa6      	itte	ge
 800787e:	461c      	movge	r4, r3
 8007880:	2500      	movge	r5, #0
 8007882:	2501      	movlt	r5, #1
 8007884:	f7ff fcf0 	bl	8007268 <_Balloc>
 8007888:	b920      	cbnz	r0, 8007894 <__mdiff+0x5c>
 800788a:	4b2e      	ldr	r3, [pc, #184]	; (8007944 <__mdiff+0x10c>)
 800788c:	4602      	mov	r2, r0
 800788e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007892:	e7e5      	b.n	8007860 <__mdiff+0x28>
 8007894:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007898:	6926      	ldr	r6, [r4, #16]
 800789a:	60c5      	str	r5, [r0, #12]
 800789c:	f104 0914 	add.w	r9, r4, #20
 80078a0:	f108 0514 	add.w	r5, r8, #20
 80078a4:	f100 0e14 	add.w	lr, r0, #20
 80078a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80078ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80078b0:	f108 0210 	add.w	r2, r8, #16
 80078b4:	46f2      	mov	sl, lr
 80078b6:	2100      	movs	r1, #0
 80078b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80078bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80078c0:	fa1f f883 	uxth.w	r8, r3
 80078c4:	fa11 f18b 	uxtah	r1, r1, fp
 80078c8:	0c1b      	lsrs	r3, r3, #16
 80078ca:	eba1 0808 	sub.w	r8, r1, r8
 80078ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80078d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80078d6:	fa1f f888 	uxth.w	r8, r8
 80078da:	1419      	asrs	r1, r3, #16
 80078dc:	454e      	cmp	r6, r9
 80078de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80078e2:	f84a 3b04 	str.w	r3, [sl], #4
 80078e6:	d8e7      	bhi.n	80078b8 <__mdiff+0x80>
 80078e8:	1b33      	subs	r3, r6, r4
 80078ea:	3b15      	subs	r3, #21
 80078ec:	f023 0303 	bic.w	r3, r3, #3
 80078f0:	3304      	adds	r3, #4
 80078f2:	3415      	adds	r4, #21
 80078f4:	42a6      	cmp	r6, r4
 80078f6:	bf38      	it	cc
 80078f8:	2304      	movcc	r3, #4
 80078fa:	441d      	add	r5, r3
 80078fc:	4473      	add	r3, lr
 80078fe:	469e      	mov	lr, r3
 8007900:	462e      	mov	r6, r5
 8007902:	4566      	cmp	r6, ip
 8007904:	d30e      	bcc.n	8007924 <__mdiff+0xec>
 8007906:	f10c 0203 	add.w	r2, ip, #3
 800790a:	1b52      	subs	r2, r2, r5
 800790c:	f022 0203 	bic.w	r2, r2, #3
 8007910:	3d03      	subs	r5, #3
 8007912:	45ac      	cmp	ip, r5
 8007914:	bf38      	it	cc
 8007916:	2200      	movcc	r2, #0
 8007918:	441a      	add	r2, r3
 800791a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800791e:	b17b      	cbz	r3, 8007940 <__mdiff+0x108>
 8007920:	6107      	str	r7, [r0, #16]
 8007922:	e7a3      	b.n	800786c <__mdiff+0x34>
 8007924:	f856 8b04 	ldr.w	r8, [r6], #4
 8007928:	fa11 f288 	uxtah	r2, r1, r8
 800792c:	1414      	asrs	r4, r2, #16
 800792e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007932:	b292      	uxth	r2, r2
 8007934:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007938:	f84e 2b04 	str.w	r2, [lr], #4
 800793c:	1421      	asrs	r1, r4, #16
 800793e:	e7e0      	b.n	8007902 <__mdiff+0xca>
 8007940:	3f01      	subs	r7, #1
 8007942:	e7ea      	b.n	800791a <__mdiff+0xe2>
 8007944:	08009421 	.word	0x08009421
 8007948:	080094ac 	.word	0x080094ac

0800794c <__ulp>:
 800794c:	b082      	sub	sp, #8
 800794e:	ed8d 0b00 	vstr	d0, [sp]
 8007952:	9b01      	ldr	r3, [sp, #4]
 8007954:	4912      	ldr	r1, [pc, #72]	; (80079a0 <__ulp+0x54>)
 8007956:	4019      	ands	r1, r3
 8007958:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800795c:	2900      	cmp	r1, #0
 800795e:	dd05      	ble.n	800796c <__ulp+0x20>
 8007960:	2200      	movs	r2, #0
 8007962:	460b      	mov	r3, r1
 8007964:	ec43 2b10 	vmov	d0, r2, r3
 8007968:	b002      	add	sp, #8
 800796a:	4770      	bx	lr
 800796c:	4249      	negs	r1, r1
 800796e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007972:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007976:	f04f 0200 	mov.w	r2, #0
 800797a:	f04f 0300 	mov.w	r3, #0
 800797e:	da04      	bge.n	800798a <__ulp+0x3e>
 8007980:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007984:	fa41 f300 	asr.w	r3, r1, r0
 8007988:	e7ec      	b.n	8007964 <__ulp+0x18>
 800798a:	f1a0 0114 	sub.w	r1, r0, #20
 800798e:	291e      	cmp	r1, #30
 8007990:	bfda      	itte	le
 8007992:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007996:	fa20 f101 	lsrle.w	r1, r0, r1
 800799a:	2101      	movgt	r1, #1
 800799c:	460a      	mov	r2, r1
 800799e:	e7e1      	b.n	8007964 <__ulp+0x18>
 80079a0:	7ff00000 	.word	0x7ff00000

080079a4 <__b2d>:
 80079a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079a6:	6905      	ldr	r5, [r0, #16]
 80079a8:	f100 0714 	add.w	r7, r0, #20
 80079ac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80079b0:	1f2e      	subs	r6, r5, #4
 80079b2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80079b6:	4620      	mov	r0, r4
 80079b8:	f7ff fd48 	bl	800744c <__hi0bits>
 80079bc:	f1c0 0320 	rsb	r3, r0, #32
 80079c0:	280a      	cmp	r0, #10
 80079c2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007a40 <__b2d+0x9c>
 80079c6:	600b      	str	r3, [r1, #0]
 80079c8:	dc14      	bgt.n	80079f4 <__b2d+0x50>
 80079ca:	f1c0 0e0b 	rsb	lr, r0, #11
 80079ce:	fa24 f10e 	lsr.w	r1, r4, lr
 80079d2:	42b7      	cmp	r7, r6
 80079d4:	ea41 030c 	orr.w	r3, r1, ip
 80079d8:	bf34      	ite	cc
 80079da:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80079de:	2100      	movcs	r1, #0
 80079e0:	3015      	adds	r0, #21
 80079e2:	fa04 f000 	lsl.w	r0, r4, r0
 80079e6:	fa21 f10e 	lsr.w	r1, r1, lr
 80079ea:	ea40 0201 	orr.w	r2, r0, r1
 80079ee:	ec43 2b10 	vmov	d0, r2, r3
 80079f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079f4:	42b7      	cmp	r7, r6
 80079f6:	bf3a      	itte	cc
 80079f8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80079fc:	f1a5 0608 	subcc.w	r6, r5, #8
 8007a00:	2100      	movcs	r1, #0
 8007a02:	380b      	subs	r0, #11
 8007a04:	d017      	beq.n	8007a36 <__b2d+0x92>
 8007a06:	f1c0 0c20 	rsb	ip, r0, #32
 8007a0a:	fa04 f500 	lsl.w	r5, r4, r0
 8007a0e:	42be      	cmp	r6, r7
 8007a10:	fa21 f40c 	lsr.w	r4, r1, ip
 8007a14:	ea45 0504 	orr.w	r5, r5, r4
 8007a18:	bf8c      	ite	hi
 8007a1a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007a1e:	2400      	movls	r4, #0
 8007a20:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007a24:	fa01 f000 	lsl.w	r0, r1, r0
 8007a28:	fa24 f40c 	lsr.w	r4, r4, ip
 8007a2c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007a30:	ea40 0204 	orr.w	r2, r0, r4
 8007a34:	e7db      	b.n	80079ee <__b2d+0x4a>
 8007a36:	ea44 030c 	orr.w	r3, r4, ip
 8007a3a:	460a      	mov	r2, r1
 8007a3c:	e7d7      	b.n	80079ee <__b2d+0x4a>
 8007a3e:	bf00      	nop
 8007a40:	3ff00000 	.word	0x3ff00000

08007a44 <__d2b>:
 8007a44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a48:	4689      	mov	r9, r1
 8007a4a:	2101      	movs	r1, #1
 8007a4c:	ec57 6b10 	vmov	r6, r7, d0
 8007a50:	4690      	mov	r8, r2
 8007a52:	f7ff fc09 	bl	8007268 <_Balloc>
 8007a56:	4604      	mov	r4, r0
 8007a58:	b930      	cbnz	r0, 8007a68 <__d2b+0x24>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	4b25      	ldr	r3, [pc, #148]	; (8007af4 <__d2b+0xb0>)
 8007a5e:	4826      	ldr	r0, [pc, #152]	; (8007af8 <__d2b+0xb4>)
 8007a60:	f240 310a 	movw	r1, #778	; 0x30a
 8007a64:	f7ff f846 	bl	8006af4 <__assert_func>
 8007a68:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007a6c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007a70:	bb35      	cbnz	r5, 8007ac0 <__d2b+0x7c>
 8007a72:	2e00      	cmp	r6, #0
 8007a74:	9301      	str	r3, [sp, #4]
 8007a76:	d028      	beq.n	8007aca <__d2b+0x86>
 8007a78:	4668      	mov	r0, sp
 8007a7a:	9600      	str	r6, [sp, #0]
 8007a7c:	f7ff fd06 	bl	800748c <__lo0bits>
 8007a80:	9900      	ldr	r1, [sp, #0]
 8007a82:	b300      	cbz	r0, 8007ac6 <__d2b+0x82>
 8007a84:	9a01      	ldr	r2, [sp, #4]
 8007a86:	f1c0 0320 	rsb	r3, r0, #32
 8007a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a8e:	430b      	orrs	r3, r1
 8007a90:	40c2      	lsrs	r2, r0
 8007a92:	6163      	str	r3, [r4, #20]
 8007a94:	9201      	str	r2, [sp, #4]
 8007a96:	9b01      	ldr	r3, [sp, #4]
 8007a98:	61a3      	str	r3, [r4, #24]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	bf14      	ite	ne
 8007a9e:	2202      	movne	r2, #2
 8007aa0:	2201      	moveq	r2, #1
 8007aa2:	6122      	str	r2, [r4, #16]
 8007aa4:	b1d5      	cbz	r5, 8007adc <__d2b+0x98>
 8007aa6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007aaa:	4405      	add	r5, r0
 8007aac:	f8c9 5000 	str.w	r5, [r9]
 8007ab0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007ab4:	f8c8 0000 	str.w	r0, [r8]
 8007ab8:	4620      	mov	r0, r4
 8007aba:	b003      	add	sp, #12
 8007abc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ac0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ac4:	e7d5      	b.n	8007a72 <__d2b+0x2e>
 8007ac6:	6161      	str	r1, [r4, #20]
 8007ac8:	e7e5      	b.n	8007a96 <__d2b+0x52>
 8007aca:	a801      	add	r0, sp, #4
 8007acc:	f7ff fcde 	bl	800748c <__lo0bits>
 8007ad0:	9b01      	ldr	r3, [sp, #4]
 8007ad2:	6163      	str	r3, [r4, #20]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	6122      	str	r2, [r4, #16]
 8007ad8:	3020      	adds	r0, #32
 8007ada:	e7e3      	b.n	8007aa4 <__d2b+0x60>
 8007adc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ae0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ae4:	f8c9 0000 	str.w	r0, [r9]
 8007ae8:	6918      	ldr	r0, [r3, #16]
 8007aea:	f7ff fcaf 	bl	800744c <__hi0bits>
 8007aee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007af2:	e7df      	b.n	8007ab4 <__d2b+0x70>
 8007af4:	08009421 	.word	0x08009421
 8007af8:	080094ac 	.word	0x080094ac

08007afc <__ratio>:
 8007afc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b00:	4688      	mov	r8, r1
 8007b02:	4669      	mov	r1, sp
 8007b04:	4681      	mov	r9, r0
 8007b06:	f7ff ff4d 	bl	80079a4 <__b2d>
 8007b0a:	a901      	add	r1, sp, #4
 8007b0c:	4640      	mov	r0, r8
 8007b0e:	ec55 4b10 	vmov	r4, r5, d0
 8007b12:	f7ff ff47 	bl	80079a4 <__b2d>
 8007b16:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b1a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007b1e:	eba3 0c02 	sub.w	ip, r3, r2
 8007b22:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007b26:	1a9b      	subs	r3, r3, r2
 8007b28:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007b2c:	ec51 0b10 	vmov	r0, r1, d0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	bfd6      	itet	le
 8007b34:	460a      	movle	r2, r1
 8007b36:	462a      	movgt	r2, r5
 8007b38:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007b3c:	468b      	mov	fp, r1
 8007b3e:	462f      	mov	r7, r5
 8007b40:	bfd4      	ite	le
 8007b42:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007b46:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	ee10 2a10 	vmov	r2, s0
 8007b50:	465b      	mov	r3, fp
 8007b52:	4639      	mov	r1, r7
 8007b54:	f7f8 fe7a 	bl	800084c <__aeabi_ddiv>
 8007b58:	ec41 0b10 	vmov	d0, r0, r1
 8007b5c:	b003      	add	sp, #12
 8007b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b62 <__copybits>:
 8007b62:	3901      	subs	r1, #1
 8007b64:	b570      	push	{r4, r5, r6, lr}
 8007b66:	1149      	asrs	r1, r1, #5
 8007b68:	6914      	ldr	r4, [r2, #16]
 8007b6a:	3101      	adds	r1, #1
 8007b6c:	f102 0314 	add.w	r3, r2, #20
 8007b70:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007b74:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007b78:	1f05      	subs	r5, r0, #4
 8007b7a:	42a3      	cmp	r3, r4
 8007b7c:	d30c      	bcc.n	8007b98 <__copybits+0x36>
 8007b7e:	1aa3      	subs	r3, r4, r2
 8007b80:	3b11      	subs	r3, #17
 8007b82:	f023 0303 	bic.w	r3, r3, #3
 8007b86:	3211      	adds	r2, #17
 8007b88:	42a2      	cmp	r2, r4
 8007b8a:	bf88      	it	hi
 8007b8c:	2300      	movhi	r3, #0
 8007b8e:	4418      	add	r0, r3
 8007b90:	2300      	movs	r3, #0
 8007b92:	4288      	cmp	r0, r1
 8007b94:	d305      	bcc.n	8007ba2 <__copybits+0x40>
 8007b96:	bd70      	pop	{r4, r5, r6, pc}
 8007b98:	f853 6b04 	ldr.w	r6, [r3], #4
 8007b9c:	f845 6f04 	str.w	r6, [r5, #4]!
 8007ba0:	e7eb      	b.n	8007b7a <__copybits+0x18>
 8007ba2:	f840 3b04 	str.w	r3, [r0], #4
 8007ba6:	e7f4      	b.n	8007b92 <__copybits+0x30>

08007ba8 <__any_on>:
 8007ba8:	f100 0214 	add.w	r2, r0, #20
 8007bac:	6900      	ldr	r0, [r0, #16]
 8007bae:	114b      	asrs	r3, r1, #5
 8007bb0:	4298      	cmp	r0, r3
 8007bb2:	b510      	push	{r4, lr}
 8007bb4:	db11      	blt.n	8007bda <__any_on+0x32>
 8007bb6:	dd0a      	ble.n	8007bce <__any_on+0x26>
 8007bb8:	f011 011f 	ands.w	r1, r1, #31
 8007bbc:	d007      	beq.n	8007bce <__any_on+0x26>
 8007bbe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007bc2:	fa24 f001 	lsr.w	r0, r4, r1
 8007bc6:	fa00 f101 	lsl.w	r1, r0, r1
 8007bca:	428c      	cmp	r4, r1
 8007bcc:	d10b      	bne.n	8007be6 <__any_on+0x3e>
 8007bce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d803      	bhi.n	8007bde <__any_on+0x36>
 8007bd6:	2000      	movs	r0, #0
 8007bd8:	bd10      	pop	{r4, pc}
 8007bda:	4603      	mov	r3, r0
 8007bdc:	e7f7      	b.n	8007bce <__any_on+0x26>
 8007bde:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007be2:	2900      	cmp	r1, #0
 8007be4:	d0f5      	beq.n	8007bd2 <__any_on+0x2a>
 8007be6:	2001      	movs	r0, #1
 8007be8:	e7f6      	b.n	8007bd8 <__any_on+0x30>

08007bea <_calloc_r>:
 8007bea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bec:	fba1 2402 	umull	r2, r4, r1, r2
 8007bf0:	b94c      	cbnz	r4, 8007c06 <_calloc_r+0x1c>
 8007bf2:	4611      	mov	r1, r2
 8007bf4:	9201      	str	r2, [sp, #4]
 8007bf6:	f000 f87b 	bl	8007cf0 <_malloc_r>
 8007bfa:	9a01      	ldr	r2, [sp, #4]
 8007bfc:	4605      	mov	r5, r0
 8007bfe:	b930      	cbnz	r0, 8007c0e <_calloc_r+0x24>
 8007c00:	4628      	mov	r0, r5
 8007c02:	b003      	add	sp, #12
 8007c04:	bd30      	pop	{r4, r5, pc}
 8007c06:	220c      	movs	r2, #12
 8007c08:	6002      	str	r2, [r0, #0]
 8007c0a:	2500      	movs	r5, #0
 8007c0c:	e7f8      	b.n	8007c00 <_calloc_r+0x16>
 8007c0e:	4621      	mov	r1, r4
 8007c10:	f7fd ffb8 	bl	8005b84 <memset>
 8007c14:	e7f4      	b.n	8007c00 <_calloc_r+0x16>
	...

08007c18 <_free_r>:
 8007c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c1a:	2900      	cmp	r1, #0
 8007c1c:	d044      	beq.n	8007ca8 <_free_r+0x90>
 8007c1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c22:	9001      	str	r0, [sp, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f1a1 0404 	sub.w	r4, r1, #4
 8007c2a:	bfb8      	it	lt
 8007c2c:	18e4      	addlt	r4, r4, r3
 8007c2e:	f001 f84d 	bl	8008ccc <__malloc_lock>
 8007c32:	4a1e      	ldr	r2, [pc, #120]	; (8007cac <_free_r+0x94>)
 8007c34:	9801      	ldr	r0, [sp, #4]
 8007c36:	6813      	ldr	r3, [r2, #0]
 8007c38:	b933      	cbnz	r3, 8007c48 <_free_r+0x30>
 8007c3a:	6063      	str	r3, [r4, #4]
 8007c3c:	6014      	str	r4, [r2, #0]
 8007c3e:	b003      	add	sp, #12
 8007c40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c44:	f001 b848 	b.w	8008cd8 <__malloc_unlock>
 8007c48:	42a3      	cmp	r3, r4
 8007c4a:	d908      	bls.n	8007c5e <_free_r+0x46>
 8007c4c:	6825      	ldr	r5, [r4, #0]
 8007c4e:	1961      	adds	r1, r4, r5
 8007c50:	428b      	cmp	r3, r1
 8007c52:	bf01      	itttt	eq
 8007c54:	6819      	ldreq	r1, [r3, #0]
 8007c56:	685b      	ldreq	r3, [r3, #4]
 8007c58:	1949      	addeq	r1, r1, r5
 8007c5a:	6021      	streq	r1, [r4, #0]
 8007c5c:	e7ed      	b.n	8007c3a <_free_r+0x22>
 8007c5e:	461a      	mov	r2, r3
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	b10b      	cbz	r3, 8007c68 <_free_r+0x50>
 8007c64:	42a3      	cmp	r3, r4
 8007c66:	d9fa      	bls.n	8007c5e <_free_r+0x46>
 8007c68:	6811      	ldr	r1, [r2, #0]
 8007c6a:	1855      	adds	r5, r2, r1
 8007c6c:	42a5      	cmp	r5, r4
 8007c6e:	d10b      	bne.n	8007c88 <_free_r+0x70>
 8007c70:	6824      	ldr	r4, [r4, #0]
 8007c72:	4421      	add	r1, r4
 8007c74:	1854      	adds	r4, r2, r1
 8007c76:	42a3      	cmp	r3, r4
 8007c78:	6011      	str	r1, [r2, #0]
 8007c7a:	d1e0      	bne.n	8007c3e <_free_r+0x26>
 8007c7c:	681c      	ldr	r4, [r3, #0]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	6053      	str	r3, [r2, #4]
 8007c82:	4421      	add	r1, r4
 8007c84:	6011      	str	r1, [r2, #0]
 8007c86:	e7da      	b.n	8007c3e <_free_r+0x26>
 8007c88:	d902      	bls.n	8007c90 <_free_r+0x78>
 8007c8a:	230c      	movs	r3, #12
 8007c8c:	6003      	str	r3, [r0, #0]
 8007c8e:	e7d6      	b.n	8007c3e <_free_r+0x26>
 8007c90:	6825      	ldr	r5, [r4, #0]
 8007c92:	1961      	adds	r1, r4, r5
 8007c94:	428b      	cmp	r3, r1
 8007c96:	bf04      	itt	eq
 8007c98:	6819      	ldreq	r1, [r3, #0]
 8007c9a:	685b      	ldreq	r3, [r3, #4]
 8007c9c:	6063      	str	r3, [r4, #4]
 8007c9e:	bf04      	itt	eq
 8007ca0:	1949      	addeq	r1, r1, r5
 8007ca2:	6021      	streq	r1, [r4, #0]
 8007ca4:	6054      	str	r4, [r2, #4]
 8007ca6:	e7ca      	b.n	8007c3e <_free_r+0x26>
 8007ca8:	b003      	add	sp, #12
 8007caa:	bd30      	pop	{r4, r5, pc}
 8007cac:	2000066c 	.word	0x2000066c

08007cb0 <sbrk_aligned>:
 8007cb0:	b570      	push	{r4, r5, r6, lr}
 8007cb2:	4e0e      	ldr	r6, [pc, #56]	; (8007cec <sbrk_aligned+0x3c>)
 8007cb4:	460c      	mov	r4, r1
 8007cb6:	6831      	ldr	r1, [r6, #0]
 8007cb8:	4605      	mov	r5, r0
 8007cba:	b911      	cbnz	r1, 8007cc2 <sbrk_aligned+0x12>
 8007cbc:	f000 fce0 	bl	8008680 <_sbrk_r>
 8007cc0:	6030      	str	r0, [r6, #0]
 8007cc2:	4621      	mov	r1, r4
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	f000 fcdb 	bl	8008680 <_sbrk_r>
 8007cca:	1c43      	adds	r3, r0, #1
 8007ccc:	d00a      	beq.n	8007ce4 <sbrk_aligned+0x34>
 8007cce:	1cc4      	adds	r4, r0, #3
 8007cd0:	f024 0403 	bic.w	r4, r4, #3
 8007cd4:	42a0      	cmp	r0, r4
 8007cd6:	d007      	beq.n	8007ce8 <sbrk_aligned+0x38>
 8007cd8:	1a21      	subs	r1, r4, r0
 8007cda:	4628      	mov	r0, r5
 8007cdc:	f000 fcd0 	bl	8008680 <_sbrk_r>
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d101      	bne.n	8007ce8 <sbrk_aligned+0x38>
 8007ce4:	f04f 34ff 	mov.w	r4, #4294967295
 8007ce8:	4620      	mov	r0, r4
 8007cea:	bd70      	pop	{r4, r5, r6, pc}
 8007cec:	20000670 	.word	0x20000670

08007cf0 <_malloc_r>:
 8007cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cf4:	1ccd      	adds	r5, r1, #3
 8007cf6:	f025 0503 	bic.w	r5, r5, #3
 8007cfa:	3508      	adds	r5, #8
 8007cfc:	2d0c      	cmp	r5, #12
 8007cfe:	bf38      	it	cc
 8007d00:	250c      	movcc	r5, #12
 8007d02:	2d00      	cmp	r5, #0
 8007d04:	4607      	mov	r7, r0
 8007d06:	db01      	blt.n	8007d0c <_malloc_r+0x1c>
 8007d08:	42a9      	cmp	r1, r5
 8007d0a:	d905      	bls.n	8007d18 <_malloc_r+0x28>
 8007d0c:	230c      	movs	r3, #12
 8007d0e:	603b      	str	r3, [r7, #0]
 8007d10:	2600      	movs	r6, #0
 8007d12:	4630      	mov	r0, r6
 8007d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d18:	4e2e      	ldr	r6, [pc, #184]	; (8007dd4 <_malloc_r+0xe4>)
 8007d1a:	f000 ffd7 	bl	8008ccc <__malloc_lock>
 8007d1e:	6833      	ldr	r3, [r6, #0]
 8007d20:	461c      	mov	r4, r3
 8007d22:	bb34      	cbnz	r4, 8007d72 <_malloc_r+0x82>
 8007d24:	4629      	mov	r1, r5
 8007d26:	4638      	mov	r0, r7
 8007d28:	f7ff ffc2 	bl	8007cb0 <sbrk_aligned>
 8007d2c:	1c43      	adds	r3, r0, #1
 8007d2e:	4604      	mov	r4, r0
 8007d30:	d14d      	bne.n	8007dce <_malloc_r+0xde>
 8007d32:	6834      	ldr	r4, [r6, #0]
 8007d34:	4626      	mov	r6, r4
 8007d36:	2e00      	cmp	r6, #0
 8007d38:	d140      	bne.n	8007dbc <_malloc_r+0xcc>
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	4631      	mov	r1, r6
 8007d3e:	4638      	mov	r0, r7
 8007d40:	eb04 0803 	add.w	r8, r4, r3
 8007d44:	f000 fc9c 	bl	8008680 <_sbrk_r>
 8007d48:	4580      	cmp	r8, r0
 8007d4a:	d13a      	bne.n	8007dc2 <_malloc_r+0xd2>
 8007d4c:	6821      	ldr	r1, [r4, #0]
 8007d4e:	3503      	adds	r5, #3
 8007d50:	1a6d      	subs	r5, r5, r1
 8007d52:	f025 0503 	bic.w	r5, r5, #3
 8007d56:	3508      	adds	r5, #8
 8007d58:	2d0c      	cmp	r5, #12
 8007d5a:	bf38      	it	cc
 8007d5c:	250c      	movcc	r5, #12
 8007d5e:	4629      	mov	r1, r5
 8007d60:	4638      	mov	r0, r7
 8007d62:	f7ff ffa5 	bl	8007cb0 <sbrk_aligned>
 8007d66:	3001      	adds	r0, #1
 8007d68:	d02b      	beq.n	8007dc2 <_malloc_r+0xd2>
 8007d6a:	6823      	ldr	r3, [r4, #0]
 8007d6c:	442b      	add	r3, r5
 8007d6e:	6023      	str	r3, [r4, #0]
 8007d70:	e00e      	b.n	8007d90 <_malloc_r+0xa0>
 8007d72:	6822      	ldr	r2, [r4, #0]
 8007d74:	1b52      	subs	r2, r2, r5
 8007d76:	d41e      	bmi.n	8007db6 <_malloc_r+0xc6>
 8007d78:	2a0b      	cmp	r2, #11
 8007d7a:	d916      	bls.n	8007daa <_malloc_r+0xba>
 8007d7c:	1961      	adds	r1, r4, r5
 8007d7e:	42a3      	cmp	r3, r4
 8007d80:	6025      	str	r5, [r4, #0]
 8007d82:	bf18      	it	ne
 8007d84:	6059      	strne	r1, [r3, #4]
 8007d86:	6863      	ldr	r3, [r4, #4]
 8007d88:	bf08      	it	eq
 8007d8a:	6031      	streq	r1, [r6, #0]
 8007d8c:	5162      	str	r2, [r4, r5]
 8007d8e:	604b      	str	r3, [r1, #4]
 8007d90:	4638      	mov	r0, r7
 8007d92:	f104 060b 	add.w	r6, r4, #11
 8007d96:	f000 ff9f 	bl	8008cd8 <__malloc_unlock>
 8007d9a:	f026 0607 	bic.w	r6, r6, #7
 8007d9e:	1d23      	adds	r3, r4, #4
 8007da0:	1af2      	subs	r2, r6, r3
 8007da2:	d0b6      	beq.n	8007d12 <_malloc_r+0x22>
 8007da4:	1b9b      	subs	r3, r3, r6
 8007da6:	50a3      	str	r3, [r4, r2]
 8007da8:	e7b3      	b.n	8007d12 <_malloc_r+0x22>
 8007daa:	6862      	ldr	r2, [r4, #4]
 8007dac:	42a3      	cmp	r3, r4
 8007dae:	bf0c      	ite	eq
 8007db0:	6032      	streq	r2, [r6, #0]
 8007db2:	605a      	strne	r2, [r3, #4]
 8007db4:	e7ec      	b.n	8007d90 <_malloc_r+0xa0>
 8007db6:	4623      	mov	r3, r4
 8007db8:	6864      	ldr	r4, [r4, #4]
 8007dba:	e7b2      	b.n	8007d22 <_malloc_r+0x32>
 8007dbc:	4634      	mov	r4, r6
 8007dbe:	6876      	ldr	r6, [r6, #4]
 8007dc0:	e7b9      	b.n	8007d36 <_malloc_r+0x46>
 8007dc2:	230c      	movs	r3, #12
 8007dc4:	603b      	str	r3, [r7, #0]
 8007dc6:	4638      	mov	r0, r7
 8007dc8:	f000 ff86 	bl	8008cd8 <__malloc_unlock>
 8007dcc:	e7a1      	b.n	8007d12 <_malloc_r+0x22>
 8007dce:	6025      	str	r5, [r4, #0]
 8007dd0:	e7de      	b.n	8007d90 <_malloc_r+0xa0>
 8007dd2:	bf00      	nop
 8007dd4:	2000066c 	.word	0x2000066c

08007dd8 <__ssputs_r>:
 8007dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ddc:	688e      	ldr	r6, [r1, #8]
 8007dde:	429e      	cmp	r6, r3
 8007de0:	4682      	mov	sl, r0
 8007de2:	460c      	mov	r4, r1
 8007de4:	4690      	mov	r8, r2
 8007de6:	461f      	mov	r7, r3
 8007de8:	d838      	bhi.n	8007e5c <__ssputs_r+0x84>
 8007dea:	898a      	ldrh	r2, [r1, #12]
 8007dec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007df0:	d032      	beq.n	8007e58 <__ssputs_r+0x80>
 8007df2:	6825      	ldr	r5, [r4, #0]
 8007df4:	6909      	ldr	r1, [r1, #16]
 8007df6:	eba5 0901 	sub.w	r9, r5, r1
 8007dfa:	6965      	ldr	r5, [r4, #20]
 8007dfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e04:	3301      	adds	r3, #1
 8007e06:	444b      	add	r3, r9
 8007e08:	106d      	asrs	r5, r5, #1
 8007e0a:	429d      	cmp	r5, r3
 8007e0c:	bf38      	it	cc
 8007e0e:	461d      	movcc	r5, r3
 8007e10:	0553      	lsls	r3, r2, #21
 8007e12:	d531      	bpl.n	8007e78 <__ssputs_r+0xa0>
 8007e14:	4629      	mov	r1, r5
 8007e16:	f7ff ff6b 	bl	8007cf0 <_malloc_r>
 8007e1a:	4606      	mov	r6, r0
 8007e1c:	b950      	cbnz	r0, 8007e34 <__ssputs_r+0x5c>
 8007e1e:	230c      	movs	r3, #12
 8007e20:	f8ca 3000 	str.w	r3, [sl]
 8007e24:	89a3      	ldrh	r3, [r4, #12]
 8007e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e2a:	81a3      	strh	r3, [r4, #12]
 8007e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e34:	6921      	ldr	r1, [r4, #16]
 8007e36:	464a      	mov	r2, r9
 8007e38:	f7fd fe96 	bl	8005b68 <memcpy>
 8007e3c:	89a3      	ldrh	r3, [r4, #12]
 8007e3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e46:	81a3      	strh	r3, [r4, #12]
 8007e48:	6126      	str	r6, [r4, #16]
 8007e4a:	6165      	str	r5, [r4, #20]
 8007e4c:	444e      	add	r6, r9
 8007e4e:	eba5 0509 	sub.w	r5, r5, r9
 8007e52:	6026      	str	r6, [r4, #0]
 8007e54:	60a5      	str	r5, [r4, #8]
 8007e56:	463e      	mov	r6, r7
 8007e58:	42be      	cmp	r6, r7
 8007e5a:	d900      	bls.n	8007e5e <__ssputs_r+0x86>
 8007e5c:	463e      	mov	r6, r7
 8007e5e:	6820      	ldr	r0, [r4, #0]
 8007e60:	4632      	mov	r2, r6
 8007e62:	4641      	mov	r1, r8
 8007e64:	f000 ff18 	bl	8008c98 <memmove>
 8007e68:	68a3      	ldr	r3, [r4, #8]
 8007e6a:	1b9b      	subs	r3, r3, r6
 8007e6c:	60a3      	str	r3, [r4, #8]
 8007e6e:	6823      	ldr	r3, [r4, #0]
 8007e70:	4433      	add	r3, r6
 8007e72:	6023      	str	r3, [r4, #0]
 8007e74:	2000      	movs	r0, #0
 8007e76:	e7db      	b.n	8007e30 <__ssputs_r+0x58>
 8007e78:	462a      	mov	r2, r5
 8007e7a:	f000 ff33 	bl	8008ce4 <_realloc_r>
 8007e7e:	4606      	mov	r6, r0
 8007e80:	2800      	cmp	r0, #0
 8007e82:	d1e1      	bne.n	8007e48 <__ssputs_r+0x70>
 8007e84:	6921      	ldr	r1, [r4, #16]
 8007e86:	4650      	mov	r0, sl
 8007e88:	f7ff fec6 	bl	8007c18 <_free_r>
 8007e8c:	e7c7      	b.n	8007e1e <__ssputs_r+0x46>
	...

08007e90 <_svfiprintf_r>:
 8007e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e94:	4698      	mov	r8, r3
 8007e96:	898b      	ldrh	r3, [r1, #12]
 8007e98:	061b      	lsls	r3, r3, #24
 8007e9a:	b09d      	sub	sp, #116	; 0x74
 8007e9c:	4607      	mov	r7, r0
 8007e9e:	460d      	mov	r5, r1
 8007ea0:	4614      	mov	r4, r2
 8007ea2:	d50e      	bpl.n	8007ec2 <_svfiprintf_r+0x32>
 8007ea4:	690b      	ldr	r3, [r1, #16]
 8007ea6:	b963      	cbnz	r3, 8007ec2 <_svfiprintf_r+0x32>
 8007ea8:	2140      	movs	r1, #64	; 0x40
 8007eaa:	f7ff ff21 	bl	8007cf0 <_malloc_r>
 8007eae:	6028      	str	r0, [r5, #0]
 8007eb0:	6128      	str	r0, [r5, #16]
 8007eb2:	b920      	cbnz	r0, 8007ebe <_svfiprintf_r+0x2e>
 8007eb4:	230c      	movs	r3, #12
 8007eb6:	603b      	str	r3, [r7, #0]
 8007eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ebc:	e0d1      	b.n	8008062 <_svfiprintf_r+0x1d2>
 8007ebe:	2340      	movs	r3, #64	; 0x40
 8007ec0:	616b      	str	r3, [r5, #20]
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ec6:	2320      	movs	r3, #32
 8007ec8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ecc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ed0:	2330      	movs	r3, #48	; 0x30
 8007ed2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800807c <_svfiprintf_r+0x1ec>
 8007ed6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007eda:	f04f 0901 	mov.w	r9, #1
 8007ede:	4623      	mov	r3, r4
 8007ee0:	469a      	mov	sl, r3
 8007ee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ee6:	b10a      	cbz	r2, 8007eec <_svfiprintf_r+0x5c>
 8007ee8:	2a25      	cmp	r2, #37	; 0x25
 8007eea:	d1f9      	bne.n	8007ee0 <_svfiprintf_r+0x50>
 8007eec:	ebba 0b04 	subs.w	fp, sl, r4
 8007ef0:	d00b      	beq.n	8007f0a <_svfiprintf_r+0x7a>
 8007ef2:	465b      	mov	r3, fp
 8007ef4:	4622      	mov	r2, r4
 8007ef6:	4629      	mov	r1, r5
 8007ef8:	4638      	mov	r0, r7
 8007efa:	f7ff ff6d 	bl	8007dd8 <__ssputs_r>
 8007efe:	3001      	adds	r0, #1
 8007f00:	f000 80aa 	beq.w	8008058 <_svfiprintf_r+0x1c8>
 8007f04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f06:	445a      	add	r2, fp
 8007f08:	9209      	str	r2, [sp, #36]	; 0x24
 8007f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f000 80a2 	beq.w	8008058 <_svfiprintf_r+0x1c8>
 8007f14:	2300      	movs	r3, #0
 8007f16:	f04f 32ff 	mov.w	r2, #4294967295
 8007f1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f1e:	f10a 0a01 	add.w	sl, sl, #1
 8007f22:	9304      	str	r3, [sp, #16]
 8007f24:	9307      	str	r3, [sp, #28]
 8007f26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f2a:	931a      	str	r3, [sp, #104]	; 0x68
 8007f2c:	4654      	mov	r4, sl
 8007f2e:	2205      	movs	r2, #5
 8007f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f34:	4851      	ldr	r0, [pc, #324]	; (800807c <_svfiprintf_r+0x1ec>)
 8007f36:	f7f8 f953 	bl	80001e0 <memchr>
 8007f3a:	9a04      	ldr	r2, [sp, #16]
 8007f3c:	b9d8      	cbnz	r0, 8007f76 <_svfiprintf_r+0xe6>
 8007f3e:	06d0      	lsls	r0, r2, #27
 8007f40:	bf44      	itt	mi
 8007f42:	2320      	movmi	r3, #32
 8007f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f48:	0711      	lsls	r1, r2, #28
 8007f4a:	bf44      	itt	mi
 8007f4c:	232b      	movmi	r3, #43	; 0x2b
 8007f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f52:	f89a 3000 	ldrb.w	r3, [sl]
 8007f56:	2b2a      	cmp	r3, #42	; 0x2a
 8007f58:	d015      	beq.n	8007f86 <_svfiprintf_r+0xf6>
 8007f5a:	9a07      	ldr	r2, [sp, #28]
 8007f5c:	4654      	mov	r4, sl
 8007f5e:	2000      	movs	r0, #0
 8007f60:	f04f 0c0a 	mov.w	ip, #10
 8007f64:	4621      	mov	r1, r4
 8007f66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f6a:	3b30      	subs	r3, #48	; 0x30
 8007f6c:	2b09      	cmp	r3, #9
 8007f6e:	d94e      	bls.n	800800e <_svfiprintf_r+0x17e>
 8007f70:	b1b0      	cbz	r0, 8007fa0 <_svfiprintf_r+0x110>
 8007f72:	9207      	str	r2, [sp, #28]
 8007f74:	e014      	b.n	8007fa0 <_svfiprintf_r+0x110>
 8007f76:	eba0 0308 	sub.w	r3, r0, r8
 8007f7a:	fa09 f303 	lsl.w	r3, r9, r3
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	9304      	str	r3, [sp, #16]
 8007f82:	46a2      	mov	sl, r4
 8007f84:	e7d2      	b.n	8007f2c <_svfiprintf_r+0x9c>
 8007f86:	9b03      	ldr	r3, [sp, #12]
 8007f88:	1d19      	adds	r1, r3, #4
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	9103      	str	r1, [sp, #12]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	bfbb      	ittet	lt
 8007f92:	425b      	neglt	r3, r3
 8007f94:	f042 0202 	orrlt.w	r2, r2, #2
 8007f98:	9307      	strge	r3, [sp, #28]
 8007f9a:	9307      	strlt	r3, [sp, #28]
 8007f9c:	bfb8      	it	lt
 8007f9e:	9204      	strlt	r2, [sp, #16]
 8007fa0:	7823      	ldrb	r3, [r4, #0]
 8007fa2:	2b2e      	cmp	r3, #46	; 0x2e
 8007fa4:	d10c      	bne.n	8007fc0 <_svfiprintf_r+0x130>
 8007fa6:	7863      	ldrb	r3, [r4, #1]
 8007fa8:	2b2a      	cmp	r3, #42	; 0x2a
 8007faa:	d135      	bne.n	8008018 <_svfiprintf_r+0x188>
 8007fac:	9b03      	ldr	r3, [sp, #12]
 8007fae:	1d1a      	adds	r2, r3, #4
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	9203      	str	r2, [sp, #12]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	bfb8      	it	lt
 8007fb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007fbc:	3402      	adds	r4, #2
 8007fbe:	9305      	str	r3, [sp, #20]
 8007fc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800808c <_svfiprintf_r+0x1fc>
 8007fc4:	7821      	ldrb	r1, [r4, #0]
 8007fc6:	2203      	movs	r2, #3
 8007fc8:	4650      	mov	r0, sl
 8007fca:	f7f8 f909 	bl	80001e0 <memchr>
 8007fce:	b140      	cbz	r0, 8007fe2 <_svfiprintf_r+0x152>
 8007fd0:	2340      	movs	r3, #64	; 0x40
 8007fd2:	eba0 000a 	sub.w	r0, r0, sl
 8007fd6:	fa03 f000 	lsl.w	r0, r3, r0
 8007fda:	9b04      	ldr	r3, [sp, #16]
 8007fdc:	4303      	orrs	r3, r0
 8007fde:	3401      	adds	r4, #1
 8007fe0:	9304      	str	r3, [sp, #16]
 8007fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fe6:	4826      	ldr	r0, [pc, #152]	; (8008080 <_svfiprintf_r+0x1f0>)
 8007fe8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fec:	2206      	movs	r2, #6
 8007fee:	f7f8 f8f7 	bl	80001e0 <memchr>
 8007ff2:	2800      	cmp	r0, #0
 8007ff4:	d038      	beq.n	8008068 <_svfiprintf_r+0x1d8>
 8007ff6:	4b23      	ldr	r3, [pc, #140]	; (8008084 <_svfiprintf_r+0x1f4>)
 8007ff8:	bb1b      	cbnz	r3, 8008042 <_svfiprintf_r+0x1b2>
 8007ffa:	9b03      	ldr	r3, [sp, #12]
 8007ffc:	3307      	adds	r3, #7
 8007ffe:	f023 0307 	bic.w	r3, r3, #7
 8008002:	3308      	adds	r3, #8
 8008004:	9303      	str	r3, [sp, #12]
 8008006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008008:	4433      	add	r3, r6
 800800a:	9309      	str	r3, [sp, #36]	; 0x24
 800800c:	e767      	b.n	8007ede <_svfiprintf_r+0x4e>
 800800e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008012:	460c      	mov	r4, r1
 8008014:	2001      	movs	r0, #1
 8008016:	e7a5      	b.n	8007f64 <_svfiprintf_r+0xd4>
 8008018:	2300      	movs	r3, #0
 800801a:	3401      	adds	r4, #1
 800801c:	9305      	str	r3, [sp, #20]
 800801e:	4619      	mov	r1, r3
 8008020:	f04f 0c0a 	mov.w	ip, #10
 8008024:	4620      	mov	r0, r4
 8008026:	f810 2b01 	ldrb.w	r2, [r0], #1
 800802a:	3a30      	subs	r2, #48	; 0x30
 800802c:	2a09      	cmp	r2, #9
 800802e:	d903      	bls.n	8008038 <_svfiprintf_r+0x1a8>
 8008030:	2b00      	cmp	r3, #0
 8008032:	d0c5      	beq.n	8007fc0 <_svfiprintf_r+0x130>
 8008034:	9105      	str	r1, [sp, #20]
 8008036:	e7c3      	b.n	8007fc0 <_svfiprintf_r+0x130>
 8008038:	fb0c 2101 	mla	r1, ip, r1, r2
 800803c:	4604      	mov	r4, r0
 800803e:	2301      	movs	r3, #1
 8008040:	e7f0      	b.n	8008024 <_svfiprintf_r+0x194>
 8008042:	ab03      	add	r3, sp, #12
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	462a      	mov	r2, r5
 8008048:	4b0f      	ldr	r3, [pc, #60]	; (8008088 <_svfiprintf_r+0x1f8>)
 800804a:	a904      	add	r1, sp, #16
 800804c:	4638      	mov	r0, r7
 800804e:	f3af 8000 	nop.w
 8008052:	1c42      	adds	r2, r0, #1
 8008054:	4606      	mov	r6, r0
 8008056:	d1d6      	bne.n	8008006 <_svfiprintf_r+0x176>
 8008058:	89ab      	ldrh	r3, [r5, #12]
 800805a:	065b      	lsls	r3, r3, #25
 800805c:	f53f af2c 	bmi.w	8007eb8 <_svfiprintf_r+0x28>
 8008060:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008062:	b01d      	add	sp, #116	; 0x74
 8008064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008068:	ab03      	add	r3, sp, #12
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	462a      	mov	r2, r5
 800806e:	4b06      	ldr	r3, [pc, #24]	; (8008088 <_svfiprintf_r+0x1f8>)
 8008070:	a904      	add	r1, sp, #16
 8008072:	4638      	mov	r0, r7
 8008074:	f000 f9d4 	bl	8008420 <_printf_i>
 8008078:	e7eb      	b.n	8008052 <_svfiprintf_r+0x1c2>
 800807a:	bf00      	nop
 800807c:	08009604 	.word	0x08009604
 8008080:	0800960e 	.word	0x0800960e
 8008084:	00000000 	.word	0x00000000
 8008088:	08007dd9 	.word	0x08007dd9
 800808c:	0800960a 	.word	0x0800960a

08008090 <__sfputc_r>:
 8008090:	6893      	ldr	r3, [r2, #8]
 8008092:	3b01      	subs	r3, #1
 8008094:	2b00      	cmp	r3, #0
 8008096:	b410      	push	{r4}
 8008098:	6093      	str	r3, [r2, #8]
 800809a:	da08      	bge.n	80080ae <__sfputc_r+0x1e>
 800809c:	6994      	ldr	r4, [r2, #24]
 800809e:	42a3      	cmp	r3, r4
 80080a0:	db01      	blt.n	80080a6 <__sfputc_r+0x16>
 80080a2:	290a      	cmp	r1, #10
 80080a4:	d103      	bne.n	80080ae <__sfputc_r+0x1e>
 80080a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080aa:	f000 baff 	b.w	80086ac <__swbuf_r>
 80080ae:	6813      	ldr	r3, [r2, #0]
 80080b0:	1c58      	adds	r0, r3, #1
 80080b2:	6010      	str	r0, [r2, #0]
 80080b4:	7019      	strb	r1, [r3, #0]
 80080b6:	4608      	mov	r0, r1
 80080b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080bc:	4770      	bx	lr

080080be <__sfputs_r>:
 80080be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080c0:	4606      	mov	r6, r0
 80080c2:	460f      	mov	r7, r1
 80080c4:	4614      	mov	r4, r2
 80080c6:	18d5      	adds	r5, r2, r3
 80080c8:	42ac      	cmp	r4, r5
 80080ca:	d101      	bne.n	80080d0 <__sfputs_r+0x12>
 80080cc:	2000      	movs	r0, #0
 80080ce:	e007      	b.n	80080e0 <__sfputs_r+0x22>
 80080d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080d4:	463a      	mov	r2, r7
 80080d6:	4630      	mov	r0, r6
 80080d8:	f7ff ffda 	bl	8008090 <__sfputc_r>
 80080dc:	1c43      	adds	r3, r0, #1
 80080de:	d1f3      	bne.n	80080c8 <__sfputs_r+0xa>
 80080e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080080e4 <_vfiprintf_r>:
 80080e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e8:	460d      	mov	r5, r1
 80080ea:	b09d      	sub	sp, #116	; 0x74
 80080ec:	4614      	mov	r4, r2
 80080ee:	4698      	mov	r8, r3
 80080f0:	4606      	mov	r6, r0
 80080f2:	b118      	cbz	r0, 80080fc <_vfiprintf_r+0x18>
 80080f4:	6983      	ldr	r3, [r0, #24]
 80080f6:	b90b      	cbnz	r3, 80080fc <_vfiprintf_r+0x18>
 80080f8:	f000 fcc8 	bl	8008a8c <__sinit>
 80080fc:	4b89      	ldr	r3, [pc, #548]	; (8008324 <_vfiprintf_r+0x240>)
 80080fe:	429d      	cmp	r5, r3
 8008100:	d11b      	bne.n	800813a <_vfiprintf_r+0x56>
 8008102:	6875      	ldr	r5, [r6, #4]
 8008104:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008106:	07d9      	lsls	r1, r3, #31
 8008108:	d405      	bmi.n	8008116 <_vfiprintf_r+0x32>
 800810a:	89ab      	ldrh	r3, [r5, #12]
 800810c:	059a      	lsls	r2, r3, #22
 800810e:	d402      	bmi.n	8008116 <_vfiprintf_r+0x32>
 8008110:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008112:	f000 fd59 	bl	8008bc8 <__retarget_lock_acquire_recursive>
 8008116:	89ab      	ldrh	r3, [r5, #12]
 8008118:	071b      	lsls	r3, r3, #28
 800811a:	d501      	bpl.n	8008120 <_vfiprintf_r+0x3c>
 800811c:	692b      	ldr	r3, [r5, #16]
 800811e:	b9eb      	cbnz	r3, 800815c <_vfiprintf_r+0x78>
 8008120:	4629      	mov	r1, r5
 8008122:	4630      	mov	r0, r6
 8008124:	f000 fb22 	bl	800876c <__swsetup_r>
 8008128:	b1c0      	cbz	r0, 800815c <_vfiprintf_r+0x78>
 800812a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800812c:	07dc      	lsls	r4, r3, #31
 800812e:	d50e      	bpl.n	800814e <_vfiprintf_r+0x6a>
 8008130:	f04f 30ff 	mov.w	r0, #4294967295
 8008134:	b01d      	add	sp, #116	; 0x74
 8008136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800813a:	4b7b      	ldr	r3, [pc, #492]	; (8008328 <_vfiprintf_r+0x244>)
 800813c:	429d      	cmp	r5, r3
 800813e:	d101      	bne.n	8008144 <_vfiprintf_r+0x60>
 8008140:	68b5      	ldr	r5, [r6, #8]
 8008142:	e7df      	b.n	8008104 <_vfiprintf_r+0x20>
 8008144:	4b79      	ldr	r3, [pc, #484]	; (800832c <_vfiprintf_r+0x248>)
 8008146:	429d      	cmp	r5, r3
 8008148:	bf08      	it	eq
 800814a:	68f5      	ldreq	r5, [r6, #12]
 800814c:	e7da      	b.n	8008104 <_vfiprintf_r+0x20>
 800814e:	89ab      	ldrh	r3, [r5, #12]
 8008150:	0598      	lsls	r0, r3, #22
 8008152:	d4ed      	bmi.n	8008130 <_vfiprintf_r+0x4c>
 8008154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008156:	f000 fd38 	bl	8008bca <__retarget_lock_release_recursive>
 800815a:	e7e9      	b.n	8008130 <_vfiprintf_r+0x4c>
 800815c:	2300      	movs	r3, #0
 800815e:	9309      	str	r3, [sp, #36]	; 0x24
 8008160:	2320      	movs	r3, #32
 8008162:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008166:	f8cd 800c 	str.w	r8, [sp, #12]
 800816a:	2330      	movs	r3, #48	; 0x30
 800816c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008330 <_vfiprintf_r+0x24c>
 8008170:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008174:	f04f 0901 	mov.w	r9, #1
 8008178:	4623      	mov	r3, r4
 800817a:	469a      	mov	sl, r3
 800817c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008180:	b10a      	cbz	r2, 8008186 <_vfiprintf_r+0xa2>
 8008182:	2a25      	cmp	r2, #37	; 0x25
 8008184:	d1f9      	bne.n	800817a <_vfiprintf_r+0x96>
 8008186:	ebba 0b04 	subs.w	fp, sl, r4
 800818a:	d00b      	beq.n	80081a4 <_vfiprintf_r+0xc0>
 800818c:	465b      	mov	r3, fp
 800818e:	4622      	mov	r2, r4
 8008190:	4629      	mov	r1, r5
 8008192:	4630      	mov	r0, r6
 8008194:	f7ff ff93 	bl	80080be <__sfputs_r>
 8008198:	3001      	adds	r0, #1
 800819a:	f000 80aa 	beq.w	80082f2 <_vfiprintf_r+0x20e>
 800819e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081a0:	445a      	add	r2, fp
 80081a2:	9209      	str	r2, [sp, #36]	; 0x24
 80081a4:	f89a 3000 	ldrb.w	r3, [sl]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f000 80a2 	beq.w	80082f2 <_vfiprintf_r+0x20e>
 80081ae:	2300      	movs	r3, #0
 80081b0:	f04f 32ff 	mov.w	r2, #4294967295
 80081b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081b8:	f10a 0a01 	add.w	sl, sl, #1
 80081bc:	9304      	str	r3, [sp, #16]
 80081be:	9307      	str	r3, [sp, #28]
 80081c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081c4:	931a      	str	r3, [sp, #104]	; 0x68
 80081c6:	4654      	mov	r4, sl
 80081c8:	2205      	movs	r2, #5
 80081ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ce:	4858      	ldr	r0, [pc, #352]	; (8008330 <_vfiprintf_r+0x24c>)
 80081d0:	f7f8 f806 	bl	80001e0 <memchr>
 80081d4:	9a04      	ldr	r2, [sp, #16]
 80081d6:	b9d8      	cbnz	r0, 8008210 <_vfiprintf_r+0x12c>
 80081d8:	06d1      	lsls	r1, r2, #27
 80081da:	bf44      	itt	mi
 80081dc:	2320      	movmi	r3, #32
 80081de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081e2:	0713      	lsls	r3, r2, #28
 80081e4:	bf44      	itt	mi
 80081e6:	232b      	movmi	r3, #43	; 0x2b
 80081e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081ec:	f89a 3000 	ldrb.w	r3, [sl]
 80081f0:	2b2a      	cmp	r3, #42	; 0x2a
 80081f2:	d015      	beq.n	8008220 <_vfiprintf_r+0x13c>
 80081f4:	9a07      	ldr	r2, [sp, #28]
 80081f6:	4654      	mov	r4, sl
 80081f8:	2000      	movs	r0, #0
 80081fa:	f04f 0c0a 	mov.w	ip, #10
 80081fe:	4621      	mov	r1, r4
 8008200:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008204:	3b30      	subs	r3, #48	; 0x30
 8008206:	2b09      	cmp	r3, #9
 8008208:	d94e      	bls.n	80082a8 <_vfiprintf_r+0x1c4>
 800820a:	b1b0      	cbz	r0, 800823a <_vfiprintf_r+0x156>
 800820c:	9207      	str	r2, [sp, #28]
 800820e:	e014      	b.n	800823a <_vfiprintf_r+0x156>
 8008210:	eba0 0308 	sub.w	r3, r0, r8
 8008214:	fa09 f303 	lsl.w	r3, r9, r3
 8008218:	4313      	orrs	r3, r2
 800821a:	9304      	str	r3, [sp, #16]
 800821c:	46a2      	mov	sl, r4
 800821e:	e7d2      	b.n	80081c6 <_vfiprintf_r+0xe2>
 8008220:	9b03      	ldr	r3, [sp, #12]
 8008222:	1d19      	adds	r1, r3, #4
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	9103      	str	r1, [sp, #12]
 8008228:	2b00      	cmp	r3, #0
 800822a:	bfbb      	ittet	lt
 800822c:	425b      	neglt	r3, r3
 800822e:	f042 0202 	orrlt.w	r2, r2, #2
 8008232:	9307      	strge	r3, [sp, #28]
 8008234:	9307      	strlt	r3, [sp, #28]
 8008236:	bfb8      	it	lt
 8008238:	9204      	strlt	r2, [sp, #16]
 800823a:	7823      	ldrb	r3, [r4, #0]
 800823c:	2b2e      	cmp	r3, #46	; 0x2e
 800823e:	d10c      	bne.n	800825a <_vfiprintf_r+0x176>
 8008240:	7863      	ldrb	r3, [r4, #1]
 8008242:	2b2a      	cmp	r3, #42	; 0x2a
 8008244:	d135      	bne.n	80082b2 <_vfiprintf_r+0x1ce>
 8008246:	9b03      	ldr	r3, [sp, #12]
 8008248:	1d1a      	adds	r2, r3, #4
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	9203      	str	r2, [sp, #12]
 800824e:	2b00      	cmp	r3, #0
 8008250:	bfb8      	it	lt
 8008252:	f04f 33ff 	movlt.w	r3, #4294967295
 8008256:	3402      	adds	r4, #2
 8008258:	9305      	str	r3, [sp, #20]
 800825a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008340 <_vfiprintf_r+0x25c>
 800825e:	7821      	ldrb	r1, [r4, #0]
 8008260:	2203      	movs	r2, #3
 8008262:	4650      	mov	r0, sl
 8008264:	f7f7 ffbc 	bl	80001e0 <memchr>
 8008268:	b140      	cbz	r0, 800827c <_vfiprintf_r+0x198>
 800826a:	2340      	movs	r3, #64	; 0x40
 800826c:	eba0 000a 	sub.w	r0, r0, sl
 8008270:	fa03 f000 	lsl.w	r0, r3, r0
 8008274:	9b04      	ldr	r3, [sp, #16]
 8008276:	4303      	orrs	r3, r0
 8008278:	3401      	adds	r4, #1
 800827a:	9304      	str	r3, [sp, #16]
 800827c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008280:	482c      	ldr	r0, [pc, #176]	; (8008334 <_vfiprintf_r+0x250>)
 8008282:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008286:	2206      	movs	r2, #6
 8008288:	f7f7 ffaa 	bl	80001e0 <memchr>
 800828c:	2800      	cmp	r0, #0
 800828e:	d03f      	beq.n	8008310 <_vfiprintf_r+0x22c>
 8008290:	4b29      	ldr	r3, [pc, #164]	; (8008338 <_vfiprintf_r+0x254>)
 8008292:	bb1b      	cbnz	r3, 80082dc <_vfiprintf_r+0x1f8>
 8008294:	9b03      	ldr	r3, [sp, #12]
 8008296:	3307      	adds	r3, #7
 8008298:	f023 0307 	bic.w	r3, r3, #7
 800829c:	3308      	adds	r3, #8
 800829e:	9303      	str	r3, [sp, #12]
 80082a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082a2:	443b      	add	r3, r7
 80082a4:	9309      	str	r3, [sp, #36]	; 0x24
 80082a6:	e767      	b.n	8008178 <_vfiprintf_r+0x94>
 80082a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80082ac:	460c      	mov	r4, r1
 80082ae:	2001      	movs	r0, #1
 80082b0:	e7a5      	b.n	80081fe <_vfiprintf_r+0x11a>
 80082b2:	2300      	movs	r3, #0
 80082b4:	3401      	adds	r4, #1
 80082b6:	9305      	str	r3, [sp, #20]
 80082b8:	4619      	mov	r1, r3
 80082ba:	f04f 0c0a 	mov.w	ip, #10
 80082be:	4620      	mov	r0, r4
 80082c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082c4:	3a30      	subs	r2, #48	; 0x30
 80082c6:	2a09      	cmp	r2, #9
 80082c8:	d903      	bls.n	80082d2 <_vfiprintf_r+0x1ee>
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d0c5      	beq.n	800825a <_vfiprintf_r+0x176>
 80082ce:	9105      	str	r1, [sp, #20]
 80082d0:	e7c3      	b.n	800825a <_vfiprintf_r+0x176>
 80082d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80082d6:	4604      	mov	r4, r0
 80082d8:	2301      	movs	r3, #1
 80082da:	e7f0      	b.n	80082be <_vfiprintf_r+0x1da>
 80082dc:	ab03      	add	r3, sp, #12
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	462a      	mov	r2, r5
 80082e2:	4b16      	ldr	r3, [pc, #88]	; (800833c <_vfiprintf_r+0x258>)
 80082e4:	a904      	add	r1, sp, #16
 80082e6:	4630      	mov	r0, r6
 80082e8:	f3af 8000 	nop.w
 80082ec:	4607      	mov	r7, r0
 80082ee:	1c78      	adds	r0, r7, #1
 80082f0:	d1d6      	bne.n	80082a0 <_vfiprintf_r+0x1bc>
 80082f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082f4:	07d9      	lsls	r1, r3, #31
 80082f6:	d405      	bmi.n	8008304 <_vfiprintf_r+0x220>
 80082f8:	89ab      	ldrh	r3, [r5, #12]
 80082fa:	059a      	lsls	r2, r3, #22
 80082fc:	d402      	bmi.n	8008304 <_vfiprintf_r+0x220>
 80082fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008300:	f000 fc63 	bl	8008bca <__retarget_lock_release_recursive>
 8008304:	89ab      	ldrh	r3, [r5, #12]
 8008306:	065b      	lsls	r3, r3, #25
 8008308:	f53f af12 	bmi.w	8008130 <_vfiprintf_r+0x4c>
 800830c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800830e:	e711      	b.n	8008134 <_vfiprintf_r+0x50>
 8008310:	ab03      	add	r3, sp, #12
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	462a      	mov	r2, r5
 8008316:	4b09      	ldr	r3, [pc, #36]	; (800833c <_vfiprintf_r+0x258>)
 8008318:	a904      	add	r1, sp, #16
 800831a:	4630      	mov	r0, r6
 800831c:	f000 f880 	bl	8008420 <_printf_i>
 8008320:	e7e4      	b.n	80082ec <_vfiprintf_r+0x208>
 8008322:	bf00      	nop
 8008324:	08009658 	.word	0x08009658
 8008328:	08009678 	.word	0x08009678
 800832c:	08009638 	.word	0x08009638
 8008330:	08009604 	.word	0x08009604
 8008334:	0800960e 	.word	0x0800960e
 8008338:	00000000 	.word	0x00000000
 800833c:	080080bf 	.word	0x080080bf
 8008340:	0800960a 	.word	0x0800960a

08008344 <_printf_common>:
 8008344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008348:	4616      	mov	r6, r2
 800834a:	4699      	mov	r9, r3
 800834c:	688a      	ldr	r2, [r1, #8]
 800834e:	690b      	ldr	r3, [r1, #16]
 8008350:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008354:	4293      	cmp	r3, r2
 8008356:	bfb8      	it	lt
 8008358:	4613      	movlt	r3, r2
 800835a:	6033      	str	r3, [r6, #0]
 800835c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008360:	4607      	mov	r7, r0
 8008362:	460c      	mov	r4, r1
 8008364:	b10a      	cbz	r2, 800836a <_printf_common+0x26>
 8008366:	3301      	adds	r3, #1
 8008368:	6033      	str	r3, [r6, #0]
 800836a:	6823      	ldr	r3, [r4, #0]
 800836c:	0699      	lsls	r1, r3, #26
 800836e:	bf42      	ittt	mi
 8008370:	6833      	ldrmi	r3, [r6, #0]
 8008372:	3302      	addmi	r3, #2
 8008374:	6033      	strmi	r3, [r6, #0]
 8008376:	6825      	ldr	r5, [r4, #0]
 8008378:	f015 0506 	ands.w	r5, r5, #6
 800837c:	d106      	bne.n	800838c <_printf_common+0x48>
 800837e:	f104 0a19 	add.w	sl, r4, #25
 8008382:	68e3      	ldr	r3, [r4, #12]
 8008384:	6832      	ldr	r2, [r6, #0]
 8008386:	1a9b      	subs	r3, r3, r2
 8008388:	42ab      	cmp	r3, r5
 800838a:	dc26      	bgt.n	80083da <_printf_common+0x96>
 800838c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008390:	1e13      	subs	r3, r2, #0
 8008392:	6822      	ldr	r2, [r4, #0]
 8008394:	bf18      	it	ne
 8008396:	2301      	movne	r3, #1
 8008398:	0692      	lsls	r2, r2, #26
 800839a:	d42b      	bmi.n	80083f4 <_printf_common+0xb0>
 800839c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083a0:	4649      	mov	r1, r9
 80083a2:	4638      	mov	r0, r7
 80083a4:	47c0      	blx	r8
 80083a6:	3001      	adds	r0, #1
 80083a8:	d01e      	beq.n	80083e8 <_printf_common+0xa4>
 80083aa:	6823      	ldr	r3, [r4, #0]
 80083ac:	68e5      	ldr	r5, [r4, #12]
 80083ae:	6832      	ldr	r2, [r6, #0]
 80083b0:	f003 0306 	and.w	r3, r3, #6
 80083b4:	2b04      	cmp	r3, #4
 80083b6:	bf08      	it	eq
 80083b8:	1aad      	subeq	r5, r5, r2
 80083ba:	68a3      	ldr	r3, [r4, #8]
 80083bc:	6922      	ldr	r2, [r4, #16]
 80083be:	bf0c      	ite	eq
 80083c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083c4:	2500      	movne	r5, #0
 80083c6:	4293      	cmp	r3, r2
 80083c8:	bfc4      	itt	gt
 80083ca:	1a9b      	subgt	r3, r3, r2
 80083cc:	18ed      	addgt	r5, r5, r3
 80083ce:	2600      	movs	r6, #0
 80083d0:	341a      	adds	r4, #26
 80083d2:	42b5      	cmp	r5, r6
 80083d4:	d11a      	bne.n	800840c <_printf_common+0xc8>
 80083d6:	2000      	movs	r0, #0
 80083d8:	e008      	b.n	80083ec <_printf_common+0xa8>
 80083da:	2301      	movs	r3, #1
 80083dc:	4652      	mov	r2, sl
 80083de:	4649      	mov	r1, r9
 80083e0:	4638      	mov	r0, r7
 80083e2:	47c0      	blx	r8
 80083e4:	3001      	adds	r0, #1
 80083e6:	d103      	bne.n	80083f0 <_printf_common+0xac>
 80083e8:	f04f 30ff 	mov.w	r0, #4294967295
 80083ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083f0:	3501      	adds	r5, #1
 80083f2:	e7c6      	b.n	8008382 <_printf_common+0x3e>
 80083f4:	18e1      	adds	r1, r4, r3
 80083f6:	1c5a      	adds	r2, r3, #1
 80083f8:	2030      	movs	r0, #48	; 0x30
 80083fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083fe:	4422      	add	r2, r4
 8008400:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008404:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008408:	3302      	adds	r3, #2
 800840a:	e7c7      	b.n	800839c <_printf_common+0x58>
 800840c:	2301      	movs	r3, #1
 800840e:	4622      	mov	r2, r4
 8008410:	4649      	mov	r1, r9
 8008412:	4638      	mov	r0, r7
 8008414:	47c0      	blx	r8
 8008416:	3001      	adds	r0, #1
 8008418:	d0e6      	beq.n	80083e8 <_printf_common+0xa4>
 800841a:	3601      	adds	r6, #1
 800841c:	e7d9      	b.n	80083d2 <_printf_common+0x8e>
	...

08008420 <_printf_i>:
 8008420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008424:	7e0f      	ldrb	r7, [r1, #24]
 8008426:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008428:	2f78      	cmp	r7, #120	; 0x78
 800842a:	4691      	mov	r9, r2
 800842c:	4680      	mov	r8, r0
 800842e:	460c      	mov	r4, r1
 8008430:	469a      	mov	sl, r3
 8008432:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008436:	d807      	bhi.n	8008448 <_printf_i+0x28>
 8008438:	2f62      	cmp	r7, #98	; 0x62
 800843a:	d80a      	bhi.n	8008452 <_printf_i+0x32>
 800843c:	2f00      	cmp	r7, #0
 800843e:	f000 80d8 	beq.w	80085f2 <_printf_i+0x1d2>
 8008442:	2f58      	cmp	r7, #88	; 0x58
 8008444:	f000 80a3 	beq.w	800858e <_printf_i+0x16e>
 8008448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800844c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008450:	e03a      	b.n	80084c8 <_printf_i+0xa8>
 8008452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008456:	2b15      	cmp	r3, #21
 8008458:	d8f6      	bhi.n	8008448 <_printf_i+0x28>
 800845a:	a101      	add	r1, pc, #4	; (adr r1, 8008460 <_printf_i+0x40>)
 800845c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008460:	080084b9 	.word	0x080084b9
 8008464:	080084cd 	.word	0x080084cd
 8008468:	08008449 	.word	0x08008449
 800846c:	08008449 	.word	0x08008449
 8008470:	08008449 	.word	0x08008449
 8008474:	08008449 	.word	0x08008449
 8008478:	080084cd 	.word	0x080084cd
 800847c:	08008449 	.word	0x08008449
 8008480:	08008449 	.word	0x08008449
 8008484:	08008449 	.word	0x08008449
 8008488:	08008449 	.word	0x08008449
 800848c:	080085d9 	.word	0x080085d9
 8008490:	080084fd 	.word	0x080084fd
 8008494:	080085bb 	.word	0x080085bb
 8008498:	08008449 	.word	0x08008449
 800849c:	08008449 	.word	0x08008449
 80084a0:	080085fb 	.word	0x080085fb
 80084a4:	08008449 	.word	0x08008449
 80084a8:	080084fd 	.word	0x080084fd
 80084ac:	08008449 	.word	0x08008449
 80084b0:	08008449 	.word	0x08008449
 80084b4:	080085c3 	.word	0x080085c3
 80084b8:	682b      	ldr	r3, [r5, #0]
 80084ba:	1d1a      	adds	r2, r3, #4
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	602a      	str	r2, [r5, #0]
 80084c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084c8:	2301      	movs	r3, #1
 80084ca:	e0a3      	b.n	8008614 <_printf_i+0x1f4>
 80084cc:	6820      	ldr	r0, [r4, #0]
 80084ce:	6829      	ldr	r1, [r5, #0]
 80084d0:	0606      	lsls	r6, r0, #24
 80084d2:	f101 0304 	add.w	r3, r1, #4
 80084d6:	d50a      	bpl.n	80084ee <_printf_i+0xce>
 80084d8:	680e      	ldr	r6, [r1, #0]
 80084da:	602b      	str	r3, [r5, #0]
 80084dc:	2e00      	cmp	r6, #0
 80084de:	da03      	bge.n	80084e8 <_printf_i+0xc8>
 80084e0:	232d      	movs	r3, #45	; 0x2d
 80084e2:	4276      	negs	r6, r6
 80084e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084e8:	485e      	ldr	r0, [pc, #376]	; (8008664 <_printf_i+0x244>)
 80084ea:	230a      	movs	r3, #10
 80084ec:	e019      	b.n	8008522 <_printf_i+0x102>
 80084ee:	680e      	ldr	r6, [r1, #0]
 80084f0:	602b      	str	r3, [r5, #0]
 80084f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80084f6:	bf18      	it	ne
 80084f8:	b236      	sxthne	r6, r6
 80084fa:	e7ef      	b.n	80084dc <_printf_i+0xbc>
 80084fc:	682b      	ldr	r3, [r5, #0]
 80084fe:	6820      	ldr	r0, [r4, #0]
 8008500:	1d19      	adds	r1, r3, #4
 8008502:	6029      	str	r1, [r5, #0]
 8008504:	0601      	lsls	r1, r0, #24
 8008506:	d501      	bpl.n	800850c <_printf_i+0xec>
 8008508:	681e      	ldr	r6, [r3, #0]
 800850a:	e002      	b.n	8008512 <_printf_i+0xf2>
 800850c:	0646      	lsls	r6, r0, #25
 800850e:	d5fb      	bpl.n	8008508 <_printf_i+0xe8>
 8008510:	881e      	ldrh	r6, [r3, #0]
 8008512:	4854      	ldr	r0, [pc, #336]	; (8008664 <_printf_i+0x244>)
 8008514:	2f6f      	cmp	r7, #111	; 0x6f
 8008516:	bf0c      	ite	eq
 8008518:	2308      	moveq	r3, #8
 800851a:	230a      	movne	r3, #10
 800851c:	2100      	movs	r1, #0
 800851e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008522:	6865      	ldr	r5, [r4, #4]
 8008524:	60a5      	str	r5, [r4, #8]
 8008526:	2d00      	cmp	r5, #0
 8008528:	bfa2      	ittt	ge
 800852a:	6821      	ldrge	r1, [r4, #0]
 800852c:	f021 0104 	bicge.w	r1, r1, #4
 8008530:	6021      	strge	r1, [r4, #0]
 8008532:	b90e      	cbnz	r6, 8008538 <_printf_i+0x118>
 8008534:	2d00      	cmp	r5, #0
 8008536:	d04d      	beq.n	80085d4 <_printf_i+0x1b4>
 8008538:	4615      	mov	r5, r2
 800853a:	fbb6 f1f3 	udiv	r1, r6, r3
 800853e:	fb03 6711 	mls	r7, r3, r1, r6
 8008542:	5dc7      	ldrb	r7, [r0, r7]
 8008544:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008548:	4637      	mov	r7, r6
 800854a:	42bb      	cmp	r3, r7
 800854c:	460e      	mov	r6, r1
 800854e:	d9f4      	bls.n	800853a <_printf_i+0x11a>
 8008550:	2b08      	cmp	r3, #8
 8008552:	d10b      	bne.n	800856c <_printf_i+0x14c>
 8008554:	6823      	ldr	r3, [r4, #0]
 8008556:	07de      	lsls	r6, r3, #31
 8008558:	d508      	bpl.n	800856c <_printf_i+0x14c>
 800855a:	6923      	ldr	r3, [r4, #16]
 800855c:	6861      	ldr	r1, [r4, #4]
 800855e:	4299      	cmp	r1, r3
 8008560:	bfde      	ittt	le
 8008562:	2330      	movle	r3, #48	; 0x30
 8008564:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008568:	f105 35ff 	addle.w	r5, r5, #4294967295
 800856c:	1b52      	subs	r2, r2, r5
 800856e:	6122      	str	r2, [r4, #16]
 8008570:	f8cd a000 	str.w	sl, [sp]
 8008574:	464b      	mov	r3, r9
 8008576:	aa03      	add	r2, sp, #12
 8008578:	4621      	mov	r1, r4
 800857a:	4640      	mov	r0, r8
 800857c:	f7ff fee2 	bl	8008344 <_printf_common>
 8008580:	3001      	adds	r0, #1
 8008582:	d14c      	bne.n	800861e <_printf_i+0x1fe>
 8008584:	f04f 30ff 	mov.w	r0, #4294967295
 8008588:	b004      	add	sp, #16
 800858a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800858e:	4835      	ldr	r0, [pc, #212]	; (8008664 <_printf_i+0x244>)
 8008590:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008594:	6829      	ldr	r1, [r5, #0]
 8008596:	6823      	ldr	r3, [r4, #0]
 8008598:	f851 6b04 	ldr.w	r6, [r1], #4
 800859c:	6029      	str	r1, [r5, #0]
 800859e:	061d      	lsls	r5, r3, #24
 80085a0:	d514      	bpl.n	80085cc <_printf_i+0x1ac>
 80085a2:	07df      	lsls	r7, r3, #31
 80085a4:	bf44      	itt	mi
 80085a6:	f043 0320 	orrmi.w	r3, r3, #32
 80085aa:	6023      	strmi	r3, [r4, #0]
 80085ac:	b91e      	cbnz	r6, 80085b6 <_printf_i+0x196>
 80085ae:	6823      	ldr	r3, [r4, #0]
 80085b0:	f023 0320 	bic.w	r3, r3, #32
 80085b4:	6023      	str	r3, [r4, #0]
 80085b6:	2310      	movs	r3, #16
 80085b8:	e7b0      	b.n	800851c <_printf_i+0xfc>
 80085ba:	6823      	ldr	r3, [r4, #0]
 80085bc:	f043 0320 	orr.w	r3, r3, #32
 80085c0:	6023      	str	r3, [r4, #0]
 80085c2:	2378      	movs	r3, #120	; 0x78
 80085c4:	4828      	ldr	r0, [pc, #160]	; (8008668 <_printf_i+0x248>)
 80085c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085ca:	e7e3      	b.n	8008594 <_printf_i+0x174>
 80085cc:	0659      	lsls	r1, r3, #25
 80085ce:	bf48      	it	mi
 80085d0:	b2b6      	uxthmi	r6, r6
 80085d2:	e7e6      	b.n	80085a2 <_printf_i+0x182>
 80085d4:	4615      	mov	r5, r2
 80085d6:	e7bb      	b.n	8008550 <_printf_i+0x130>
 80085d8:	682b      	ldr	r3, [r5, #0]
 80085da:	6826      	ldr	r6, [r4, #0]
 80085dc:	6961      	ldr	r1, [r4, #20]
 80085de:	1d18      	adds	r0, r3, #4
 80085e0:	6028      	str	r0, [r5, #0]
 80085e2:	0635      	lsls	r5, r6, #24
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	d501      	bpl.n	80085ec <_printf_i+0x1cc>
 80085e8:	6019      	str	r1, [r3, #0]
 80085ea:	e002      	b.n	80085f2 <_printf_i+0x1d2>
 80085ec:	0670      	lsls	r0, r6, #25
 80085ee:	d5fb      	bpl.n	80085e8 <_printf_i+0x1c8>
 80085f0:	8019      	strh	r1, [r3, #0]
 80085f2:	2300      	movs	r3, #0
 80085f4:	6123      	str	r3, [r4, #16]
 80085f6:	4615      	mov	r5, r2
 80085f8:	e7ba      	b.n	8008570 <_printf_i+0x150>
 80085fa:	682b      	ldr	r3, [r5, #0]
 80085fc:	1d1a      	adds	r2, r3, #4
 80085fe:	602a      	str	r2, [r5, #0]
 8008600:	681d      	ldr	r5, [r3, #0]
 8008602:	6862      	ldr	r2, [r4, #4]
 8008604:	2100      	movs	r1, #0
 8008606:	4628      	mov	r0, r5
 8008608:	f7f7 fdea 	bl	80001e0 <memchr>
 800860c:	b108      	cbz	r0, 8008612 <_printf_i+0x1f2>
 800860e:	1b40      	subs	r0, r0, r5
 8008610:	6060      	str	r0, [r4, #4]
 8008612:	6863      	ldr	r3, [r4, #4]
 8008614:	6123      	str	r3, [r4, #16]
 8008616:	2300      	movs	r3, #0
 8008618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800861c:	e7a8      	b.n	8008570 <_printf_i+0x150>
 800861e:	6923      	ldr	r3, [r4, #16]
 8008620:	462a      	mov	r2, r5
 8008622:	4649      	mov	r1, r9
 8008624:	4640      	mov	r0, r8
 8008626:	47d0      	blx	sl
 8008628:	3001      	adds	r0, #1
 800862a:	d0ab      	beq.n	8008584 <_printf_i+0x164>
 800862c:	6823      	ldr	r3, [r4, #0]
 800862e:	079b      	lsls	r3, r3, #30
 8008630:	d413      	bmi.n	800865a <_printf_i+0x23a>
 8008632:	68e0      	ldr	r0, [r4, #12]
 8008634:	9b03      	ldr	r3, [sp, #12]
 8008636:	4298      	cmp	r0, r3
 8008638:	bfb8      	it	lt
 800863a:	4618      	movlt	r0, r3
 800863c:	e7a4      	b.n	8008588 <_printf_i+0x168>
 800863e:	2301      	movs	r3, #1
 8008640:	4632      	mov	r2, r6
 8008642:	4649      	mov	r1, r9
 8008644:	4640      	mov	r0, r8
 8008646:	47d0      	blx	sl
 8008648:	3001      	adds	r0, #1
 800864a:	d09b      	beq.n	8008584 <_printf_i+0x164>
 800864c:	3501      	adds	r5, #1
 800864e:	68e3      	ldr	r3, [r4, #12]
 8008650:	9903      	ldr	r1, [sp, #12]
 8008652:	1a5b      	subs	r3, r3, r1
 8008654:	42ab      	cmp	r3, r5
 8008656:	dcf2      	bgt.n	800863e <_printf_i+0x21e>
 8008658:	e7eb      	b.n	8008632 <_printf_i+0x212>
 800865a:	2500      	movs	r5, #0
 800865c:	f104 0619 	add.w	r6, r4, #25
 8008660:	e7f5      	b.n	800864e <_printf_i+0x22e>
 8008662:	bf00      	nop
 8008664:	08009615 	.word	0x08009615
 8008668:	08009626 	.word	0x08009626
 800866c:	00000000 	.word	0x00000000

08008670 <nan>:
 8008670:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008678 <nan+0x8>
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	00000000 	.word	0x00000000
 800867c:	7ff80000 	.word	0x7ff80000

08008680 <_sbrk_r>:
 8008680:	b538      	push	{r3, r4, r5, lr}
 8008682:	4d06      	ldr	r5, [pc, #24]	; (800869c <_sbrk_r+0x1c>)
 8008684:	2300      	movs	r3, #0
 8008686:	4604      	mov	r4, r0
 8008688:	4608      	mov	r0, r1
 800868a:	602b      	str	r3, [r5, #0]
 800868c:	f7f9 fbb6 	bl	8001dfc <_sbrk>
 8008690:	1c43      	adds	r3, r0, #1
 8008692:	d102      	bne.n	800869a <_sbrk_r+0x1a>
 8008694:	682b      	ldr	r3, [r5, #0]
 8008696:	b103      	cbz	r3, 800869a <_sbrk_r+0x1a>
 8008698:	6023      	str	r3, [r4, #0]
 800869a:	bd38      	pop	{r3, r4, r5, pc}
 800869c:	20000678 	.word	0x20000678

080086a0 <nanf>:
 80086a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80086a8 <nanf+0x8>
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	7fc00000 	.word	0x7fc00000

080086ac <__swbuf_r>:
 80086ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ae:	460e      	mov	r6, r1
 80086b0:	4614      	mov	r4, r2
 80086b2:	4605      	mov	r5, r0
 80086b4:	b118      	cbz	r0, 80086be <__swbuf_r+0x12>
 80086b6:	6983      	ldr	r3, [r0, #24]
 80086b8:	b90b      	cbnz	r3, 80086be <__swbuf_r+0x12>
 80086ba:	f000 f9e7 	bl	8008a8c <__sinit>
 80086be:	4b21      	ldr	r3, [pc, #132]	; (8008744 <__swbuf_r+0x98>)
 80086c0:	429c      	cmp	r4, r3
 80086c2:	d12b      	bne.n	800871c <__swbuf_r+0x70>
 80086c4:	686c      	ldr	r4, [r5, #4]
 80086c6:	69a3      	ldr	r3, [r4, #24]
 80086c8:	60a3      	str	r3, [r4, #8]
 80086ca:	89a3      	ldrh	r3, [r4, #12]
 80086cc:	071a      	lsls	r2, r3, #28
 80086ce:	d52f      	bpl.n	8008730 <__swbuf_r+0x84>
 80086d0:	6923      	ldr	r3, [r4, #16]
 80086d2:	b36b      	cbz	r3, 8008730 <__swbuf_r+0x84>
 80086d4:	6923      	ldr	r3, [r4, #16]
 80086d6:	6820      	ldr	r0, [r4, #0]
 80086d8:	1ac0      	subs	r0, r0, r3
 80086da:	6963      	ldr	r3, [r4, #20]
 80086dc:	b2f6      	uxtb	r6, r6
 80086de:	4283      	cmp	r3, r0
 80086e0:	4637      	mov	r7, r6
 80086e2:	dc04      	bgt.n	80086ee <__swbuf_r+0x42>
 80086e4:	4621      	mov	r1, r4
 80086e6:	4628      	mov	r0, r5
 80086e8:	f000 f93c 	bl	8008964 <_fflush_r>
 80086ec:	bb30      	cbnz	r0, 800873c <__swbuf_r+0x90>
 80086ee:	68a3      	ldr	r3, [r4, #8]
 80086f0:	3b01      	subs	r3, #1
 80086f2:	60a3      	str	r3, [r4, #8]
 80086f4:	6823      	ldr	r3, [r4, #0]
 80086f6:	1c5a      	adds	r2, r3, #1
 80086f8:	6022      	str	r2, [r4, #0]
 80086fa:	701e      	strb	r6, [r3, #0]
 80086fc:	6963      	ldr	r3, [r4, #20]
 80086fe:	3001      	adds	r0, #1
 8008700:	4283      	cmp	r3, r0
 8008702:	d004      	beq.n	800870e <__swbuf_r+0x62>
 8008704:	89a3      	ldrh	r3, [r4, #12]
 8008706:	07db      	lsls	r3, r3, #31
 8008708:	d506      	bpl.n	8008718 <__swbuf_r+0x6c>
 800870a:	2e0a      	cmp	r6, #10
 800870c:	d104      	bne.n	8008718 <__swbuf_r+0x6c>
 800870e:	4621      	mov	r1, r4
 8008710:	4628      	mov	r0, r5
 8008712:	f000 f927 	bl	8008964 <_fflush_r>
 8008716:	b988      	cbnz	r0, 800873c <__swbuf_r+0x90>
 8008718:	4638      	mov	r0, r7
 800871a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800871c:	4b0a      	ldr	r3, [pc, #40]	; (8008748 <__swbuf_r+0x9c>)
 800871e:	429c      	cmp	r4, r3
 8008720:	d101      	bne.n	8008726 <__swbuf_r+0x7a>
 8008722:	68ac      	ldr	r4, [r5, #8]
 8008724:	e7cf      	b.n	80086c6 <__swbuf_r+0x1a>
 8008726:	4b09      	ldr	r3, [pc, #36]	; (800874c <__swbuf_r+0xa0>)
 8008728:	429c      	cmp	r4, r3
 800872a:	bf08      	it	eq
 800872c:	68ec      	ldreq	r4, [r5, #12]
 800872e:	e7ca      	b.n	80086c6 <__swbuf_r+0x1a>
 8008730:	4621      	mov	r1, r4
 8008732:	4628      	mov	r0, r5
 8008734:	f000 f81a 	bl	800876c <__swsetup_r>
 8008738:	2800      	cmp	r0, #0
 800873a:	d0cb      	beq.n	80086d4 <__swbuf_r+0x28>
 800873c:	f04f 37ff 	mov.w	r7, #4294967295
 8008740:	e7ea      	b.n	8008718 <__swbuf_r+0x6c>
 8008742:	bf00      	nop
 8008744:	08009658 	.word	0x08009658
 8008748:	08009678 	.word	0x08009678
 800874c:	08009638 	.word	0x08009638

08008750 <__ascii_wctomb>:
 8008750:	b149      	cbz	r1, 8008766 <__ascii_wctomb+0x16>
 8008752:	2aff      	cmp	r2, #255	; 0xff
 8008754:	bf85      	ittet	hi
 8008756:	238a      	movhi	r3, #138	; 0x8a
 8008758:	6003      	strhi	r3, [r0, #0]
 800875a:	700a      	strbls	r2, [r1, #0]
 800875c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008760:	bf98      	it	ls
 8008762:	2001      	movls	r0, #1
 8008764:	4770      	bx	lr
 8008766:	4608      	mov	r0, r1
 8008768:	4770      	bx	lr
	...

0800876c <__swsetup_r>:
 800876c:	4b32      	ldr	r3, [pc, #200]	; (8008838 <__swsetup_r+0xcc>)
 800876e:	b570      	push	{r4, r5, r6, lr}
 8008770:	681d      	ldr	r5, [r3, #0]
 8008772:	4606      	mov	r6, r0
 8008774:	460c      	mov	r4, r1
 8008776:	b125      	cbz	r5, 8008782 <__swsetup_r+0x16>
 8008778:	69ab      	ldr	r3, [r5, #24]
 800877a:	b913      	cbnz	r3, 8008782 <__swsetup_r+0x16>
 800877c:	4628      	mov	r0, r5
 800877e:	f000 f985 	bl	8008a8c <__sinit>
 8008782:	4b2e      	ldr	r3, [pc, #184]	; (800883c <__swsetup_r+0xd0>)
 8008784:	429c      	cmp	r4, r3
 8008786:	d10f      	bne.n	80087a8 <__swsetup_r+0x3c>
 8008788:	686c      	ldr	r4, [r5, #4]
 800878a:	89a3      	ldrh	r3, [r4, #12]
 800878c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008790:	0719      	lsls	r1, r3, #28
 8008792:	d42c      	bmi.n	80087ee <__swsetup_r+0x82>
 8008794:	06dd      	lsls	r5, r3, #27
 8008796:	d411      	bmi.n	80087bc <__swsetup_r+0x50>
 8008798:	2309      	movs	r3, #9
 800879a:	6033      	str	r3, [r6, #0]
 800879c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80087a0:	81a3      	strh	r3, [r4, #12]
 80087a2:	f04f 30ff 	mov.w	r0, #4294967295
 80087a6:	e03e      	b.n	8008826 <__swsetup_r+0xba>
 80087a8:	4b25      	ldr	r3, [pc, #148]	; (8008840 <__swsetup_r+0xd4>)
 80087aa:	429c      	cmp	r4, r3
 80087ac:	d101      	bne.n	80087b2 <__swsetup_r+0x46>
 80087ae:	68ac      	ldr	r4, [r5, #8]
 80087b0:	e7eb      	b.n	800878a <__swsetup_r+0x1e>
 80087b2:	4b24      	ldr	r3, [pc, #144]	; (8008844 <__swsetup_r+0xd8>)
 80087b4:	429c      	cmp	r4, r3
 80087b6:	bf08      	it	eq
 80087b8:	68ec      	ldreq	r4, [r5, #12]
 80087ba:	e7e6      	b.n	800878a <__swsetup_r+0x1e>
 80087bc:	0758      	lsls	r0, r3, #29
 80087be:	d512      	bpl.n	80087e6 <__swsetup_r+0x7a>
 80087c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087c2:	b141      	cbz	r1, 80087d6 <__swsetup_r+0x6a>
 80087c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087c8:	4299      	cmp	r1, r3
 80087ca:	d002      	beq.n	80087d2 <__swsetup_r+0x66>
 80087cc:	4630      	mov	r0, r6
 80087ce:	f7ff fa23 	bl	8007c18 <_free_r>
 80087d2:	2300      	movs	r3, #0
 80087d4:	6363      	str	r3, [r4, #52]	; 0x34
 80087d6:	89a3      	ldrh	r3, [r4, #12]
 80087d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087dc:	81a3      	strh	r3, [r4, #12]
 80087de:	2300      	movs	r3, #0
 80087e0:	6063      	str	r3, [r4, #4]
 80087e2:	6923      	ldr	r3, [r4, #16]
 80087e4:	6023      	str	r3, [r4, #0]
 80087e6:	89a3      	ldrh	r3, [r4, #12]
 80087e8:	f043 0308 	orr.w	r3, r3, #8
 80087ec:	81a3      	strh	r3, [r4, #12]
 80087ee:	6923      	ldr	r3, [r4, #16]
 80087f0:	b94b      	cbnz	r3, 8008806 <__swsetup_r+0x9a>
 80087f2:	89a3      	ldrh	r3, [r4, #12]
 80087f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80087f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087fc:	d003      	beq.n	8008806 <__swsetup_r+0x9a>
 80087fe:	4621      	mov	r1, r4
 8008800:	4630      	mov	r0, r6
 8008802:	f000 fa09 	bl	8008c18 <__smakebuf_r>
 8008806:	89a0      	ldrh	r0, [r4, #12]
 8008808:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800880c:	f010 0301 	ands.w	r3, r0, #1
 8008810:	d00a      	beq.n	8008828 <__swsetup_r+0xbc>
 8008812:	2300      	movs	r3, #0
 8008814:	60a3      	str	r3, [r4, #8]
 8008816:	6963      	ldr	r3, [r4, #20]
 8008818:	425b      	negs	r3, r3
 800881a:	61a3      	str	r3, [r4, #24]
 800881c:	6923      	ldr	r3, [r4, #16]
 800881e:	b943      	cbnz	r3, 8008832 <__swsetup_r+0xc6>
 8008820:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008824:	d1ba      	bne.n	800879c <__swsetup_r+0x30>
 8008826:	bd70      	pop	{r4, r5, r6, pc}
 8008828:	0781      	lsls	r1, r0, #30
 800882a:	bf58      	it	pl
 800882c:	6963      	ldrpl	r3, [r4, #20]
 800882e:	60a3      	str	r3, [r4, #8]
 8008830:	e7f4      	b.n	800881c <__swsetup_r+0xb0>
 8008832:	2000      	movs	r0, #0
 8008834:	e7f7      	b.n	8008826 <__swsetup_r+0xba>
 8008836:	bf00      	nop
 8008838:	20000084 	.word	0x20000084
 800883c:	08009658 	.word	0x08009658
 8008840:	08009678 	.word	0x08009678
 8008844:	08009638 	.word	0x08009638

08008848 <abort>:
 8008848:	b508      	push	{r3, lr}
 800884a:	2006      	movs	r0, #6
 800884c:	f000 faa2 	bl	8008d94 <raise>
 8008850:	2001      	movs	r0, #1
 8008852:	f7f9 fa5b 	bl	8001d0c <_exit>
	...

08008858 <__sflush_r>:
 8008858:	898a      	ldrh	r2, [r1, #12]
 800885a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800885e:	4605      	mov	r5, r0
 8008860:	0710      	lsls	r0, r2, #28
 8008862:	460c      	mov	r4, r1
 8008864:	d458      	bmi.n	8008918 <__sflush_r+0xc0>
 8008866:	684b      	ldr	r3, [r1, #4]
 8008868:	2b00      	cmp	r3, #0
 800886a:	dc05      	bgt.n	8008878 <__sflush_r+0x20>
 800886c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800886e:	2b00      	cmp	r3, #0
 8008870:	dc02      	bgt.n	8008878 <__sflush_r+0x20>
 8008872:	2000      	movs	r0, #0
 8008874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008878:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800887a:	2e00      	cmp	r6, #0
 800887c:	d0f9      	beq.n	8008872 <__sflush_r+0x1a>
 800887e:	2300      	movs	r3, #0
 8008880:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008884:	682f      	ldr	r7, [r5, #0]
 8008886:	602b      	str	r3, [r5, #0]
 8008888:	d032      	beq.n	80088f0 <__sflush_r+0x98>
 800888a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800888c:	89a3      	ldrh	r3, [r4, #12]
 800888e:	075a      	lsls	r2, r3, #29
 8008890:	d505      	bpl.n	800889e <__sflush_r+0x46>
 8008892:	6863      	ldr	r3, [r4, #4]
 8008894:	1ac0      	subs	r0, r0, r3
 8008896:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008898:	b10b      	cbz	r3, 800889e <__sflush_r+0x46>
 800889a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800889c:	1ac0      	subs	r0, r0, r3
 800889e:	2300      	movs	r3, #0
 80088a0:	4602      	mov	r2, r0
 80088a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088a4:	6a21      	ldr	r1, [r4, #32]
 80088a6:	4628      	mov	r0, r5
 80088a8:	47b0      	blx	r6
 80088aa:	1c43      	adds	r3, r0, #1
 80088ac:	89a3      	ldrh	r3, [r4, #12]
 80088ae:	d106      	bne.n	80088be <__sflush_r+0x66>
 80088b0:	6829      	ldr	r1, [r5, #0]
 80088b2:	291d      	cmp	r1, #29
 80088b4:	d82c      	bhi.n	8008910 <__sflush_r+0xb8>
 80088b6:	4a2a      	ldr	r2, [pc, #168]	; (8008960 <__sflush_r+0x108>)
 80088b8:	40ca      	lsrs	r2, r1
 80088ba:	07d6      	lsls	r6, r2, #31
 80088bc:	d528      	bpl.n	8008910 <__sflush_r+0xb8>
 80088be:	2200      	movs	r2, #0
 80088c0:	6062      	str	r2, [r4, #4]
 80088c2:	04d9      	lsls	r1, r3, #19
 80088c4:	6922      	ldr	r2, [r4, #16]
 80088c6:	6022      	str	r2, [r4, #0]
 80088c8:	d504      	bpl.n	80088d4 <__sflush_r+0x7c>
 80088ca:	1c42      	adds	r2, r0, #1
 80088cc:	d101      	bne.n	80088d2 <__sflush_r+0x7a>
 80088ce:	682b      	ldr	r3, [r5, #0]
 80088d0:	b903      	cbnz	r3, 80088d4 <__sflush_r+0x7c>
 80088d2:	6560      	str	r0, [r4, #84]	; 0x54
 80088d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088d6:	602f      	str	r7, [r5, #0]
 80088d8:	2900      	cmp	r1, #0
 80088da:	d0ca      	beq.n	8008872 <__sflush_r+0x1a>
 80088dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088e0:	4299      	cmp	r1, r3
 80088e2:	d002      	beq.n	80088ea <__sflush_r+0x92>
 80088e4:	4628      	mov	r0, r5
 80088e6:	f7ff f997 	bl	8007c18 <_free_r>
 80088ea:	2000      	movs	r0, #0
 80088ec:	6360      	str	r0, [r4, #52]	; 0x34
 80088ee:	e7c1      	b.n	8008874 <__sflush_r+0x1c>
 80088f0:	6a21      	ldr	r1, [r4, #32]
 80088f2:	2301      	movs	r3, #1
 80088f4:	4628      	mov	r0, r5
 80088f6:	47b0      	blx	r6
 80088f8:	1c41      	adds	r1, r0, #1
 80088fa:	d1c7      	bne.n	800888c <__sflush_r+0x34>
 80088fc:	682b      	ldr	r3, [r5, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d0c4      	beq.n	800888c <__sflush_r+0x34>
 8008902:	2b1d      	cmp	r3, #29
 8008904:	d001      	beq.n	800890a <__sflush_r+0xb2>
 8008906:	2b16      	cmp	r3, #22
 8008908:	d101      	bne.n	800890e <__sflush_r+0xb6>
 800890a:	602f      	str	r7, [r5, #0]
 800890c:	e7b1      	b.n	8008872 <__sflush_r+0x1a>
 800890e:	89a3      	ldrh	r3, [r4, #12]
 8008910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008914:	81a3      	strh	r3, [r4, #12]
 8008916:	e7ad      	b.n	8008874 <__sflush_r+0x1c>
 8008918:	690f      	ldr	r7, [r1, #16]
 800891a:	2f00      	cmp	r7, #0
 800891c:	d0a9      	beq.n	8008872 <__sflush_r+0x1a>
 800891e:	0793      	lsls	r3, r2, #30
 8008920:	680e      	ldr	r6, [r1, #0]
 8008922:	bf08      	it	eq
 8008924:	694b      	ldreq	r3, [r1, #20]
 8008926:	600f      	str	r7, [r1, #0]
 8008928:	bf18      	it	ne
 800892a:	2300      	movne	r3, #0
 800892c:	eba6 0807 	sub.w	r8, r6, r7
 8008930:	608b      	str	r3, [r1, #8]
 8008932:	f1b8 0f00 	cmp.w	r8, #0
 8008936:	dd9c      	ble.n	8008872 <__sflush_r+0x1a>
 8008938:	6a21      	ldr	r1, [r4, #32]
 800893a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800893c:	4643      	mov	r3, r8
 800893e:	463a      	mov	r2, r7
 8008940:	4628      	mov	r0, r5
 8008942:	47b0      	blx	r6
 8008944:	2800      	cmp	r0, #0
 8008946:	dc06      	bgt.n	8008956 <__sflush_r+0xfe>
 8008948:	89a3      	ldrh	r3, [r4, #12]
 800894a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800894e:	81a3      	strh	r3, [r4, #12]
 8008950:	f04f 30ff 	mov.w	r0, #4294967295
 8008954:	e78e      	b.n	8008874 <__sflush_r+0x1c>
 8008956:	4407      	add	r7, r0
 8008958:	eba8 0800 	sub.w	r8, r8, r0
 800895c:	e7e9      	b.n	8008932 <__sflush_r+0xda>
 800895e:	bf00      	nop
 8008960:	20400001 	.word	0x20400001

08008964 <_fflush_r>:
 8008964:	b538      	push	{r3, r4, r5, lr}
 8008966:	690b      	ldr	r3, [r1, #16]
 8008968:	4605      	mov	r5, r0
 800896a:	460c      	mov	r4, r1
 800896c:	b913      	cbnz	r3, 8008974 <_fflush_r+0x10>
 800896e:	2500      	movs	r5, #0
 8008970:	4628      	mov	r0, r5
 8008972:	bd38      	pop	{r3, r4, r5, pc}
 8008974:	b118      	cbz	r0, 800897e <_fflush_r+0x1a>
 8008976:	6983      	ldr	r3, [r0, #24]
 8008978:	b90b      	cbnz	r3, 800897e <_fflush_r+0x1a>
 800897a:	f000 f887 	bl	8008a8c <__sinit>
 800897e:	4b14      	ldr	r3, [pc, #80]	; (80089d0 <_fflush_r+0x6c>)
 8008980:	429c      	cmp	r4, r3
 8008982:	d11b      	bne.n	80089bc <_fflush_r+0x58>
 8008984:	686c      	ldr	r4, [r5, #4]
 8008986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d0ef      	beq.n	800896e <_fflush_r+0xa>
 800898e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008990:	07d0      	lsls	r0, r2, #31
 8008992:	d404      	bmi.n	800899e <_fflush_r+0x3a>
 8008994:	0599      	lsls	r1, r3, #22
 8008996:	d402      	bmi.n	800899e <_fflush_r+0x3a>
 8008998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800899a:	f000 f915 	bl	8008bc8 <__retarget_lock_acquire_recursive>
 800899e:	4628      	mov	r0, r5
 80089a0:	4621      	mov	r1, r4
 80089a2:	f7ff ff59 	bl	8008858 <__sflush_r>
 80089a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089a8:	07da      	lsls	r2, r3, #31
 80089aa:	4605      	mov	r5, r0
 80089ac:	d4e0      	bmi.n	8008970 <_fflush_r+0xc>
 80089ae:	89a3      	ldrh	r3, [r4, #12]
 80089b0:	059b      	lsls	r3, r3, #22
 80089b2:	d4dd      	bmi.n	8008970 <_fflush_r+0xc>
 80089b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089b6:	f000 f908 	bl	8008bca <__retarget_lock_release_recursive>
 80089ba:	e7d9      	b.n	8008970 <_fflush_r+0xc>
 80089bc:	4b05      	ldr	r3, [pc, #20]	; (80089d4 <_fflush_r+0x70>)
 80089be:	429c      	cmp	r4, r3
 80089c0:	d101      	bne.n	80089c6 <_fflush_r+0x62>
 80089c2:	68ac      	ldr	r4, [r5, #8]
 80089c4:	e7df      	b.n	8008986 <_fflush_r+0x22>
 80089c6:	4b04      	ldr	r3, [pc, #16]	; (80089d8 <_fflush_r+0x74>)
 80089c8:	429c      	cmp	r4, r3
 80089ca:	bf08      	it	eq
 80089cc:	68ec      	ldreq	r4, [r5, #12]
 80089ce:	e7da      	b.n	8008986 <_fflush_r+0x22>
 80089d0:	08009658 	.word	0x08009658
 80089d4:	08009678 	.word	0x08009678
 80089d8:	08009638 	.word	0x08009638

080089dc <std>:
 80089dc:	2300      	movs	r3, #0
 80089de:	b510      	push	{r4, lr}
 80089e0:	4604      	mov	r4, r0
 80089e2:	e9c0 3300 	strd	r3, r3, [r0]
 80089e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089ea:	6083      	str	r3, [r0, #8]
 80089ec:	8181      	strh	r1, [r0, #12]
 80089ee:	6643      	str	r3, [r0, #100]	; 0x64
 80089f0:	81c2      	strh	r2, [r0, #14]
 80089f2:	6183      	str	r3, [r0, #24]
 80089f4:	4619      	mov	r1, r3
 80089f6:	2208      	movs	r2, #8
 80089f8:	305c      	adds	r0, #92	; 0x5c
 80089fa:	f7fd f8c3 	bl	8005b84 <memset>
 80089fe:	4b05      	ldr	r3, [pc, #20]	; (8008a14 <std+0x38>)
 8008a00:	6263      	str	r3, [r4, #36]	; 0x24
 8008a02:	4b05      	ldr	r3, [pc, #20]	; (8008a18 <std+0x3c>)
 8008a04:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a06:	4b05      	ldr	r3, [pc, #20]	; (8008a1c <std+0x40>)
 8008a08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a0a:	4b05      	ldr	r3, [pc, #20]	; (8008a20 <std+0x44>)
 8008a0c:	6224      	str	r4, [r4, #32]
 8008a0e:	6323      	str	r3, [r4, #48]	; 0x30
 8008a10:	bd10      	pop	{r4, pc}
 8008a12:	bf00      	nop
 8008a14:	08008dcd 	.word	0x08008dcd
 8008a18:	08008def 	.word	0x08008def
 8008a1c:	08008e27 	.word	0x08008e27
 8008a20:	08008e4b 	.word	0x08008e4b

08008a24 <_cleanup_r>:
 8008a24:	4901      	ldr	r1, [pc, #4]	; (8008a2c <_cleanup_r+0x8>)
 8008a26:	f000 b8af 	b.w	8008b88 <_fwalk_reent>
 8008a2a:	bf00      	nop
 8008a2c:	08008965 	.word	0x08008965

08008a30 <__sfmoreglue>:
 8008a30:	b570      	push	{r4, r5, r6, lr}
 8008a32:	2268      	movs	r2, #104	; 0x68
 8008a34:	1e4d      	subs	r5, r1, #1
 8008a36:	4355      	muls	r5, r2
 8008a38:	460e      	mov	r6, r1
 8008a3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a3e:	f7ff f957 	bl	8007cf0 <_malloc_r>
 8008a42:	4604      	mov	r4, r0
 8008a44:	b140      	cbz	r0, 8008a58 <__sfmoreglue+0x28>
 8008a46:	2100      	movs	r1, #0
 8008a48:	e9c0 1600 	strd	r1, r6, [r0]
 8008a4c:	300c      	adds	r0, #12
 8008a4e:	60a0      	str	r0, [r4, #8]
 8008a50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a54:	f7fd f896 	bl	8005b84 <memset>
 8008a58:	4620      	mov	r0, r4
 8008a5a:	bd70      	pop	{r4, r5, r6, pc}

08008a5c <__sfp_lock_acquire>:
 8008a5c:	4801      	ldr	r0, [pc, #4]	; (8008a64 <__sfp_lock_acquire+0x8>)
 8008a5e:	f000 b8b3 	b.w	8008bc8 <__retarget_lock_acquire_recursive>
 8008a62:	bf00      	nop
 8008a64:	20000675 	.word	0x20000675

08008a68 <__sfp_lock_release>:
 8008a68:	4801      	ldr	r0, [pc, #4]	; (8008a70 <__sfp_lock_release+0x8>)
 8008a6a:	f000 b8ae 	b.w	8008bca <__retarget_lock_release_recursive>
 8008a6e:	bf00      	nop
 8008a70:	20000675 	.word	0x20000675

08008a74 <__sinit_lock_acquire>:
 8008a74:	4801      	ldr	r0, [pc, #4]	; (8008a7c <__sinit_lock_acquire+0x8>)
 8008a76:	f000 b8a7 	b.w	8008bc8 <__retarget_lock_acquire_recursive>
 8008a7a:	bf00      	nop
 8008a7c:	20000676 	.word	0x20000676

08008a80 <__sinit_lock_release>:
 8008a80:	4801      	ldr	r0, [pc, #4]	; (8008a88 <__sinit_lock_release+0x8>)
 8008a82:	f000 b8a2 	b.w	8008bca <__retarget_lock_release_recursive>
 8008a86:	bf00      	nop
 8008a88:	20000676 	.word	0x20000676

08008a8c <__sinit>:
 8008a8c:	b510      	push	{r4, lr}
 8008a8e:	4604      	mov	r4, r0
 8008a90:	f7ff fff0 	bl	8008a74 <__sinit_lock_acquire>
 8008a94:	69a3      	ldr	r3, [r4, #24]
 8008a96:	b11b      	cbz	r3, 8008aa0 <__sinit+0x14>
 8008a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a9c:	f7ff bff0 	b.w	8008a80 <__sinit_lock_release>
 8008aa0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008aa4:	6523      	str	r3, [r4, #80]	; 0x50
 8008aa6:	4b13      	ldr	r3, [pc, #76]	; (8008af4 <__sinit+0x68>)
 8008aa8:	4a13      	ldr	r2, [pc, #76]	; (8008af8 <__sinit+0x6c>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	62a2      	str	r2, [r4, #40]	; 0x28
 8008aae:	42a3      	cmp	r3, r4
 8008ab0:	bf04      	itt	eq
 8008ab2:	2301      	moveq	r3, #1
 8008ab4:	61a3      	streq	r3, [r4, #24]
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f000 f820 	bl	8008afc <__sfp>
 8008abc:	6060      	str	r0, [r4, #4]
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f000 f81c 	bl	8008afc <__sfp>
 8008ac4:	60a0      	str	r0, [r4, #8]
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f000 f818 	bl	8008afc <__sfp>
 8008acc:	2200      	movs	r2, #0
 8008ace:	60e0      	str	r0, [r4, #12]
 8008ad0:	2104      	movs	r1, #4
 8008ad2:	6860      	ldr	r0, [r4, #4]
 8008ad4:	f7ff ff82 	bl	80089dc <std>
 8008ad8:	68a0      	ldr	r0, [r4, #8]
 8008ada:	2201      	movs	r2, #1
 8008adc:	2109      	movs	r1, #9
 8008ade:	f7ff ff7d 	bl	80089dc <std>
 8008ae2:	68e0      	ldr	r0, [r4, #12]
 8008ae4:	2202      	movs	r2, #2
 8008ae6:	2112      	movs	r1, #18
 8008ae8:	f7ff ff78 	bl	80089dc <std>
 8008aec:	2301      	movs	r3, #1
 8008aee:	61a3      	str	r3, [r4, #24]
 8008af0:	e7d2      	b.n	8008a98 <__sinit+0xc>
 8008af2:	bf00      	nop
 8008af4:	08009210 	.word	0x08009210
 8008af8:	08008a25 	.word	0x08008a25

08008afc <__sfp>:
 8008afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008afe:	4607      	mov	r7, r0
 8008b00:	f7ff ffac 	bl	8008a5c <__sfp_lock_acquire>
 8008b04:	4b1e      	ldr	r3, [pc, #120]	; (8008b80 <__sfp+0x84>)
 8008b06:	681e      	ldr	r6, [r3, #0]
 8008b08:	69b3      	ldr	r3, [r6, #24]
 8008b0a:	b913      	cbnz	r3, 8008b12 <__sfp+0x16>
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	f7ff ffbd 	bl	8008a8c <__sinit>
 8008b12:	3648      	adds	r6, #72	; 0x48
 8008b14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	d503      	bpl.n	8008b24 <__sfp+0x28>
 8008b1c:	6833      	ldr	r3, [r6, #0]
 8008b1e:	b30b      	cbz	r3, 8008b64 <__sfp+0x68>
 8008b20:	6836      	ldr	r6, [r6, #0]
 8008b22:	e7f7      	b.n	8008b14 <__sfp+0x18>
 8008b24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b28:	b9d5      	cbnz	r5, 8008b60 <__sfp+0x64>
 8008b2a:	4b16      	ldr	r3, [pc, #88]	; (8008b84 <__sfp+0x88>)
 8008b2c:	60e3      	str	r3, [r4, #12]
 8008b2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b32:	6665      	str	r5, [r4, #100]	; 0x64
 8008b34:	f000 f847 	bl	8008bc6 <__retarget_lock_init_recursive>
 8008b38:	f7ff ff96 	bl	8008a68 <__sfp_lock_release>
 8008b3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008b40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008b44:	6025      	str	r5, [r4, #0]
 8008b46:	61a5      	str	r5, [r4, #24]
 8008b48:	2208      	movs	r2, #8
 8008b4a:	4629      	mov	r1, r5
 8008b4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b50:	f7fd f818 	bl	8005b84 <memset>
 8008b54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b60:	3468      	adds	r4, #104	; 0x68
 8008b62:	e7d9      	b.n	8008b18 <__sfp+0x1c>
 8008b64:	2104      	movs	r1, #4
 8008b66:	4638      	mov	r0, r7
 8008b68:	f7ff ff62 	bl	8008a30 <__sfmoreglue>
 8008b6c:	4604      	mov	r4, r0
 8008b6e:	6030      	str	r0, [r6, #0]
 8008b70:	2800      	cmp	r0, #0
 8008b72:	d1d5      	bne.n	8008b20 <__sfp+0x24>
 8008b74:	f7ff ff78 	bl	8008a68 <__sfp_lock_release>
 8008b78:	230c      	movs	r3, #12
 8008b7a:	603b      	str	r3, [r7, #0]
 8008b7c:	e7ee      	b.n	8008b5c <__sfp+0x60>
 8008b7e:	bf00      	nop
 8008b80:	08009210 	.word	0x08009210
 8008b84:	ffff0001 	.word	0xffff0001

08008b88 <_fwalk_reent>:
 8008b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b8c:	4606      	mov	r6, r0
 8008b8e:	4688      	mov	r8, r1
 8008b90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b94:	2700      	movs	r7, #0
 8008b96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b9a:	f1b9 0901 	subs.w	r9, r9, #1
 8008b9e:	d505      	bpl.n	8008bac <_fwalk_reent+0x24>
 8008ba0:	6824      	ldr	r4, [r4, #0]
 8008ba2:	2c00      	cmp	r4, #0
 8008ba4:	d1f7      	bne.n	8008b96 <_fwalk_reent+0xe>
 8008ba6:	4638      	mov	r0, r7
 8008ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bac:	89ab      	ldrh	r3, [r5, #12]
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d907      	bls.n	8008bc2 <_fwalk_reent+0x3a>
 8008bb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	d003      	beq.n	8008bc2 <_fwalk_reent+0x3a>
 8008bba:	4629      	mov	r1, r5
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	47c0      	blx	r8
 8008bc0:	4307      	orrs	r7, r0
 8008bc2:	3568      	adds	r5, #104	; 0x68
 8008bc4:	e7e9      	b.n	8008b9a <_fwalk_reent+0x12>

08008bc6 <__retarget_lock_init_recursive>:
 8008bc6:	4770      	bx	lr

08008bc8 <__retarget_lock_acquire_recursive>:
 8008bc8:	4770      	bx	lr

08008bca <__retarget_lock_release_recursive>:
 8008bca:	4770      	bx	lr

08008bcc <__swhatbuf_r>:
 8008bcc:	b570      	push	{r4, r5, r6, lr}
 8008bce:	460e      	mov	r6, r1
 8008bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bd4:	2900      	cmp	r1, #0
 8008bd6:	b096      	sub	sp, #88	; 0x58
 8008bd8:	4614      	mov	r4, r2
 8008bda:	461d      	mov	r5, r3
 8008bdc:	da08      	bge.n	8008bf0 <__swhatbuf_r+0x24>
 8008bde:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	602a      	str	r2, [r5, #0]
 8008be6:	061a      	lsls	r2, r3, #24
 8008be8:	d410      	bmi.n	8008c0c <__swhatbuf_r+0x40>
 8008bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bee:	e00e      	b.n	8008c0e <__swhatbuf_r+0x42>
 8008bf0:	466a      	mov	r2, sp
 8008bf2:	f000 f951 	bl	8008e98 <_fstat_r>
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	dbf1      	blt.n	8008bde <__swhatbuf_r+0x12>
 8008bfa:	9a01      	ldr	r2, [sp, #4]
 8008bfc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c04:	425a      	negs	r2, r3
 8008c06:	415a      	adcs	r2, r3
 8008c08:	602a      	str	r2, [r5, #0]
 8008c0a:	e7ee      	b.n	8008bea <__swhatbuf_r+0x1e>
 8008c0c:	2340      	movs	r3, #64	; 0x40
 8008c0e:	2000      	movs	r0, #0
 8008c10:	6023      	str	r3, [r4, #0]
 8008c12:	b016      	add	sp, #88	; 0x58
 8008c14:	bd70      	pop	{r4, r5, r6, pc}
	...

08008c18 <__smakebuf_r>:
 8008c18:	898b      	ldrh	r3, [r1, #12]
 8008c1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c1c:	079d      	lsls	r5, r3, #30
 8008c1e:	4606      	mov	r6, r0
 8008c20:	460c      	mov	r4, r1
 8008c22:	d507      	bpl.n	8008c34 <__smakebuf_r+0x1c>
 8008c24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c28:	6023      	str	r3, [r4, #0]
 8008c2a:	6123      	str	r3, [r4, #16]
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	6163      	str	r3, [r4, #20]
 8008c30:	b002      	add	sp, #8
 8008c32:	bd70      	pop	{r4, r5, r6, pc}
 8008c34:	ab01      	add	r3, sp, #4
 8008c36:	466a      	mov	r2, sp
 8008c38:	f7ff ffc8 	bl	8008bcc <__swhatbuf_r>
 8008c3c:	9900      	ldr	r1, [sp, #0]
 8008c3e:	4605      	mov	r5, r0
 8008c40:	4630      	mov	r0, r6
 8008c42:	f7ff f855 	bl	8007cf0 <_malloc_r>
 8008c46:	b948      	cbnz	r0, 8008c5c <__smakebuf_r+0x44>
 8008c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c4c:	059a      	lsls	r2, r3, #22
 8008c4e:	d4ef      	bmi.n	8008c30 <__smakebuf_r+0x18>
 8008c50:	f023 0303 	bic.w	r3, r3, #3
 8008c54:	f043 0302 	orr.w	r3, r3, #2
 8008c58:	81a3      	strh	r3, [r4, #12]
 8008c5a:	e7e3      	b.n	8008c24 <__smakebuf_r+0xc>
 8008c5c:	4b0d      	ldr	r3, [pc, #52]	; (8008c94 <__smakebuf_r+0x7c>)
 8008c5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c60:	89a3      	ldrh	r3, [r4, #12]
 8008c62:	6020      	str	r0, [r4, #0]
 8008c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c68:	81a3      	strh	r3, [r4, #12]
 8008c6a:	9b00      	ldr	r3, [sp, #0]
 8008c6c:	6163      	str	r3, [r4, #20]
 8008c6e:	9b01      	ldr	r3, [sp, #4]
 8008c70:	6120      	str	r0, [r4, #16]
 8008c72:	b15b      	cbz	r3, 8008c8c <__smakebuf_r+0x74>
 8008c74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c78:	4630      	mov	r0, r6
 8008c7a:	f000 f91f 	bl	8008ebc <_isatty_r>
 8008c7e:	b128      	cbz	r0, 8008c8c <__smakebuf_r+0x74>
 8008c80:	89a3      	ldrh	r3, [r4, #12]
 8008c82:	f023 0303 	bic.w	r3, r3, #3
 8008c86:	f043 0301 	orr.w	r3, r3, #1
 8008c8a:	81a3      	strh	r3, [r4, #12]
 8008c8c:	89a0      	ldrh	r0, [r4, #12]
 8008c8e:	4305      	orrs	r5, r0
 8008c90:	81a5      	strh	r5, [r4, #12]
 8008c92:	e7cd      	b.n	8008c30 <__smakebuf_r+0x18>
 8008c94:	08008a25 	.word	0x08008a25

08008c98 <memmove>:
 8008c98:	4288      	cmp	r0, r1
 8008c9a:	b510      	push	{r4, lr}
 8008c9c:	eb01 0402 	add.w	r4, r1, r2
 8008ca0:	d902      	bls.n	8008ca8 <memmove+0x10>
 8008ca2:	4284      	cmp	r4, r0
 8008ca4:	4623      	mov	r3, r4
 8008ca6:	d807      	bhi.n	8008cb8 <memmove+0x20>
 8008ca8:	1e43      	subs	r3, r0, #1
 8008caa:	42a1      	cmp	r1, r4
 8008cac:	d008      	beq.n	8008cc0 <memmove+0x28>
 8008cae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cb6:	e7f8      	b.n	8008caa <memmove+0x12>
 8008cb8:	4402      	add	r2, r0
 8008cba:	4601      	mov	r1, r0
 8008cbc:	428a      	cmp	r2, r1
 8008cbe:	d100      	bne.n	8008cc2 <memmove+0x2a>
 8008cc0:	bd10      	pop	{r4, pc}
 8008cc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008cca:	e7f7      	b.n	8008cbc <memmove+0x24>

08008ccc <__malloc_lock>:
 8008ccc:	4801      	ldr	r0, [pc, #4]	; (8008cd4 <__malloc_lock+0x8>)
 8008cce:	f7ff bf7b 	b.w	8008bc8 <__retarget_lock_acquire_recursive>
 8008cd2:	bf00      	nop
 8008cd4:	20000674 	.word	0x20000674

08008cd8 <__malloc_unlock>:
 8008cd8:	4801      	ldr	r0, [pc, #4]	; (8008ce0 <__malloc_unlock+0x8>)
 8008cda:	f7ff bf76 	b.w	8008bca <__retarget_lock_release_recursive>
 8008cde:	bf00      	nop
 8008ce0:	20000674 	.word	0x20000674

08008ce4 <_realloc_r>:
 8008ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce8:	4680      	mov	r8, r0
 8008cea:	4614      	mov	r4, r2
 8008cec:	460e      	mov	r6, r1
 8008cee:	b921      	cbnz	r1, 8008cfa <_realloc_r+0x16>
 8008cf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf4:	4611      	mov	r1, r2
 8008cf6:	f7fe bffb 	b.w	8007cf0 <_malloc_r>
 8008cfa:	b92a      	cbnz	r2, 8008d08 <_realloc_r+0x24>
 8008cfc:	f7fe ff8c 	bl	8007c18 <_free_r>
 8008d00:	4625      	mov	r5, r4
 8008d02:	4628      	mov	r0, r5
 8008d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d08:	f000 f8fa 	bl	8008f00 <_malloc_usable_size_r>
 8008d0c:	4284      	cmp	r4, r0
 8008d0e:	4607      	mov	r7, r0
 8008d10:	d802      	bhi.n	8008d18 <_realloc_r+0x34>
 8008d12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d16:	d812      	bhi.n	8008d3e <_realloc_r+0x5a>
 8008d18:	4621      	mov	r1, r4
 8008d1a:	4640      	mov	r0, r8
 8008d1c:	f7fe ffe8 	bl	8007cf0 <_malloc_r>
 8008d20:	4605      	mov	r5, r0
 8008d22:	2800      	cmp	r0, #0
 8008d24:	d0ed      	beq.n	8008d02 <_realloc_r+0x1e>
 8008d26:	42bc      	cmp	r4, r7
 8008d28:	4622      	mov	r2, r4
 8008d2a:	4631      	mov	r1, r6
 8008d2c:	bf28      	it	cs
 8008d2e:	463a      	movcs	r2, r7
 8008d30:	f7fc ff1a 	bl	8005b68 <memcpy>
 8008d34:	4631      	mov	r1, r6
 8008d36:	4640      	mov	r0, r8
 8008d38:	f7fe ff6e 	bl	8007c18 <_free_r>
 8008d3c:	e7e1      	b.n	8008d02 <_realloc_r+0x1e>
 8008d3e:	4635      	mov	r5, r6
 8008d40:	e7df      	b.n	8008d02 <_realloc_r+0x1e>

08008d42 <_raise_r>:
 8008d42:	291f      	cmp	r1, #31
 8008d44:	b538      	push	{r3, r4, r5, lr}
 8008d46:	4604      	mov	r4, r0
 8008d48:	460d      	mov	r5, r1
 8008d4a:	d904      	bls.n	8008d56 <_raise_r+0x14>
 8008d4c:	2316      	movs	r3, #22
 8008d4e:	6003      	str	r3, [r0, #0]
 8008d50:	f04f 30ff 	mov.w	r0, #4294967295
 8008d54:	bd38      	pop	{r3, r4, r5, pc}
 8008d56:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d58:	b112      	cbz	r2, 8008d60 <_raise_r+0x1e>
 8008d5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d5e:	b94b      	cbnz	r3, 8008d74 <_raise_r+0x32>
 8008d60:	4620      	mov	r0, r4
 8008d62:	f000 f831 	bl	8008dc8 <_getpid_r>
 8008d66:	462a      	mov	r2, r5
 8008d68:	4601      	mov	r1, r0
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d70:	f000 b818 	b.w	8008da4 <_kill_r>
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d00a      	beq.n	8008d8e <_raise_r+0x4c>
 8008d78:	1c59      	adds	r1, r3, #1
 8008d7a:	d103      	bne.n	8008d84 <_raise_r+0x42>
 8008d7c:	2316      	movs	r3, #22
 8008d7e:	6003      	str	r3, [r0, #0]
 8008d80:	2001      	movs	r0, #1
 8008d82:	e7e7      	b.n	8008d54 <_raise_r+0x12>
 8008d84:	2400      	movs	r4, #0
 8008d86:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d8a:	4628      	mov	r0, r5
 8008d8c:	4798      	blx	r3
 8008d8e:	2000      	movs	r0, #0
 8008d90:	e7e0      	b.n	8008d54 <_raise_r+0x12>
	...

08008d94 <raise>:
 8008d94:	4b02      	ldr	r3, [pc, #8]	; (8008da0 <raise+0xc>)
 8008d96:	4601      	mov	r1, r0
 8008d98:	6818      	ldr	r0, [r3, #0]
 8008d9a:	f7ff bfd2 	b.w	8008d42 <_raise_r>
 8008d9e:	bf00      	nop
 8008da0:	20000084 	.word	0x20000084

08008da4 <_kill_r>:
 8008da4:	b538      	push	{r3, r4, r5, lr}
 8008da6:	4d07      	ldr	r5, [pc, #28]	; (8008dc4 <_kill_r+0x20>)
 8008da8:	2300      	movs	r3, #0
 8008daa:	4604      	mov	r4, r0
 8008dac:	4608      	mov	r0, r1
 8008dae:	4611      	mov	r1, r2
 8008db0:	602b      	str	r3, [r5, #0]
 8008db2:	f7f8 ff9b 	bl	8001cec <_kill>
 8008db6:	1c43      	adds	r3, r0, #1
 8008db8:	d102      	bne.n	8008dc0 <_kill_r+0x1c>
 8008dba:	682b      	ldr	r3, [r5, #0]
 8008dbc:	b103      	cbz	r3, 8008dc0 <_kill_r+0x1c>
 8008dbe:	6023      	str	r3, [r4, #0]
 8008dc0:	bd38      	pop	{r3, r4, r5, pc}
 8008dc2:	bf00      	nop
 8008dc4:	20000678 	.word	0x20000678

08008dc8 <_getpid_r>:
 8008dc8:	f7f8 bf88 	b.w	8001cdc <_getpid>

08008dcc <__sread>:
 8008dcc:	b510      	push	{r4, lr}
 8008dce:	460c      	mov	r4, r1
 8008dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dd4:	f000 f89c 	bl	8008f10 <_read_r>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	bfab      	itete	ge
 8008ddc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008dde:	89a3      	ldrhlt	r3, [r4, #12]
 8008de0:	181b      	addge	r3, r3, r0
 8008de2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008de6:	bfac      	ite	ge
 8008de8:	6563      	strge	r3, [r4, #84]	; 0x54
 8008dea:	81a3      	strhlt	r3, [r4, #12]
 8008dec:	bd10      	pop	{r4, pc}

08008dee <__swrite>:
 8008dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008df2:	461f      	mov	r7, r3
 8008df4:	898b      	ldrh	r3, [r1, #12]
 8008df6:	05db      	lsls	r3, r3, #23
 8008df8:	4605      	mov	r5, r0
 8008dfa:	460c      	mov	r4, r1
 8008dfc:	4616      	mov	r6, r2
 8008dfe:	d505      	bpl.n	8008e0c <__swrite+0x1e>
 8008e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e04:	2302      	movs	r3, #2
 8008e06:	2200      	movs	r2, #0
 8008e08:	f000 f868 	bl	8008edc <_lseek_r>
 8008e0c:	89a3      	ldrh	r3, [r4, #12]
 8008e0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e16:	81a3      	strh	r3, [r4, #12]
 8008e18:	4632      	mov	r2, r6
 8008e1a:	463b      	mov	r3, r7
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e22:	f000 b817 	b.w	8008e54 <_write_r>

08008e26 <__sseek>:
 8008e26:	b510      	push	{r4, lr}
 8008e28:	460c      	mov	r4, r1
 8008e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e2e:	f000 f855 	bl	8008edc <_lseek_r>
 8008e32:	1c43      	adds	r3, r0, #1
 8008e34:	89a3      	ldrh	r3, [r4, #12]
 8008e36:	bf15      	itete	ne
 8008e38:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e42:	81a3      	strheq	r3, [r4, #12]
 8008e44:	bf18      	it	ne
 8008e46:	81a3      	strhne	r3, [r4, #12]
 8008e48:	bd10      	pop	{r4, pc}

08008e4a <__sclose>:
 8008e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e4e:	f000 b813 	b.w	8008e78 <_close_r>
	...

08008e54 <_write_r>:
 8008e54:	b538      	push	{r3, r4, r5, lr}
 8008e56:	4d07      	ldr	r5, [pc, #28]	; (8008e74 <_write_r+0x20>)
 8008e58:	4604      	mov	r4, r0
 8008e5a:	4608      	mov	r0, r1
 8008e5c:	4611      	mov	r1, r2
 8008e5e:	2200      	movs	r2, #0
 8008e60:	602a      	str	r2, [r5, #0]
 8008e62:	461a      	mov	r2, r3
 8008e64:	f7f8 ff79 	bl	8001d5a <_write>
 8008e68:	1c43      	adds	r3, r0, #1
 8008e6a:	d102      	bne.n	8008e72 <_write_r+0x1e>
 8008e6c:	682b      	ldr	r3, [r5, #0]
 8008e6e:	b103      	cbz	r3, 8008e72 <_write_r+0x1e>
 8008e70:	6023      	str	r3, [r4, #0]
 8008e72:	bd38      	pop	{r3, r4, r5, pc}
 8008e74:	20000678 	.word	0x20000678

08008e78 <_close_r>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	4d06      	ldr	r5, [pc, #24]	; (8008e94 <_close_r+0x1c>)
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	4604      	mov	r4, r0
 8008e80:	4608      	mov	r0, r1
 8008e82:	602b      	str	r3, [r5, #0]
 8008e84:	f7f8 ff85 	bl	8001d92 <_close>
 8008e88:	1c43      	adds	r3, r0, #1
 8008e8a:	d102      	bne.n	8008e92 <_close_r+0x1a>
 8008e8c:	682b      	ldr	r3, [r5, #0]
 8008e8e:	b103      	cbz	r3, 8008e92 <_close_r+0x1a>
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	bd38      	pop	{r3, r4, r5, pc}
 8008e94:	20000678 	.word	0x20000678

08008e98 <_fstat_r>:
 8008e98:	b538      	push	{r3, r4, r5, lr}
 8008e9a:	4d07      	ldr	r5, [pc, #28]	; (8008eb8 <_fstat_r+0x20>)
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	4604      	mov	r4, r0
 8008ea0:	4608      	mov	r0, r1
 8008ea2:	4611      	mov	r1, r2
 8008ea4:	602b      	str	r3, [r5, #0]
 8008ea6:	f7f8 ff80 	bl	8001daa <_fstat>
 8008eaa:	1c43      	adds	r3, r0, #1
 8008eac:	d102      	bne.n	8008eb4 <_fstat_r+0x1c>
 8008eae:	682b      	ldr	r3, [r5, #0]
 8008eb0:	b103      	cbz	r3, 8008eb4 <_fstat_r+0x1c>
 8008eb2:	6023      	str	r3, [r4, #0]
 8008eb4:	bd38      	pop	{r3, r4, r5, pc}
 8008eb6:	bf00      	nop
 8008eb8:	20000678 	.word	0x20000678

08008ebc <_isatty_r>:
 8008ebc:	b538      	push	{r3, r4, r5, lr}
 8008ebe:	4d06      	ldr	r5, [pc, #24]	; (8008ed8 <_isatty_r+0x1c>)
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	4604      	mov	r4, r0
 8008ec4:	4608      	mov	r0, r1
 8008ec6:	602b      	str	r3, [r5, #0]
 8008ec8:	f7f8 ff7f 	bl	8001dca <_isatty>
 8008ecc:	1c43      	adds	r3, r0, #1
 8008ece:	d102      	bne.n	8008ed6 <_isatty_r+0x1a>
 8008ed0:	682b      	ldr	r3, [r5, #0]
 8008ed2:	b103      	cbz	r3, 8008ed6 <_isatty_r+0x1a>
 8008ed4:	6023      	str	r3, [r4, #0]
 8008ed6:	bd38      	pop	{r3, r4, r5, pc}
 8008ed8:	20000678 	.word	0x20000678

08008edc <_lseek_r>:
 8008edc:	b538      	push	{r3, r4, r5, lr}
 8008ede:	4d07      	ldr	r5, [pc, #28]	; (8008efc <_lseek_r+0x20>)
 8008ee0:	4604      	mov	r4, r0
 8008ee2:	4608      	mov	r0, r1
 8008ee4:	4611      	mov	r1, r2
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	602a      	str	r2, [r5, #0]
 8008eea:	461a      	mov	r2, r3
 8008eec:	f7f8 ff78 	bl	8001de0 <_lseek>
 8008ef0:	1c43      	adds	r3, r0, #1
 8008ef2:	d102      	bne.n	8008efa <_lseek_r+0x1e>
 8008ef4:	682b      	ldr	r3, [r5, #0]
 8008ef6:	b103      	cbz	r3, 8008efa <_lseek_r+0x1e>
 8008ef8:	6023      	str	r3, [r4, #0]
 8008efa:	bd38      	pop	{r3, r4, r5, pc}
 8008efc:	20000678 	.word	0x20000678

08008f00 <_malloc_usable_size_r>:
 8008f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f04:	1f18      	subs	r0, r3, #4
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	bfbc      	itt	lt
 8008f0a:	580b      	ldrlt	r3, [r1, r0]
 8008f0c:	18c0      	addlt	r0, r0, r3
 8008f0e:	4770      	bx	lr

08008f10 <_read_r>:
 8008f10:	b538      	push	{r3, r4, r5, lr}
 8008f12:	4d07      	ldr	r5, [pc, #28]	; (8008f30 <_read_r+0x20>)
 8008f14:	4604      	mov	r4, r0
 8008f16:	4608      	mov	r0, r1
 8008f18:	4611      	mov	r1, r2
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	602a      	str	r2, [r5, #0]
 8008f1e:	461a      	mov	r2, r3
 8008f20:	f7f8 fefe 	bl	8001d20 <_read>
 8008f24:	1c43      	adds	r3, r0, #1
 8008f26:	d102      	bne.n	8008f2e <_read_r+0x1e>
 8008f28:	682b      	ldr	r3, [r5, #0]
 8008f2a:	b103      	cbz	r3, 8008f2e <_read_r+0x1e>
 8008f2c:	6023      	str	r3, [r4, #0]
 8008f2e:	bd38      	pop	{r3, r4, r5, pc}
 8008f30:	20000678 	.word	0x20000678

08008f34 <_init>:
 8008f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f36:	bf00      	nop
 8008f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f3a:	bc08      	pop	{r3}
 8008f3c:	469e      	mov	lr, r3
 8008f3e:	4770      	bx	lr

08008f40 <_fini>:
 8008f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f42:	bf00      	nop
 8008f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f46:	bc08      	pop	{r3}
 8008f48:	469e      	mov	lr, r3
 8008f4a:	4770      	bx	lr
