
Test_Swarm_004_L432KC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fe4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000768  08009178  08009178  00019178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098e0  080098e0  0002026c  2**0
                  CONTENTS
  4 .ARM          00000008  080098e0  080098e0  000198e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098e8  080098e8  0002026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098e8  080098e8  000198e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098ec  080098ec  000198ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  080098f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000530  2000026c  08009b5c  0002026c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000079c  08009b5c  0002079c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b85  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad0  00000000  00000000  00035e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  000388f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001218  00000000  00000000  00039c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e66  00000000  00000000  0003ae40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000153f1  00000000  00000000  0005dca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d38e8  00000000  00000000  00073097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014697f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006530  00000000  00000000  001469d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000026c 	.word	0x2000026c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800915c 	.word	0x0800915c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000270 	.word	0x20000270
 80001cc:	0800915c 	.word	0x0800915c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9aa 	b.w	8000fa4 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff33 	bl	8000adc <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fca9 	bl	80005f8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc2a 	bl	8000504 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fca0 	bl	80005f8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff fae2 	bl	8000288 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	4604      	mov	r4, r0
 8000cdc:	468e      	mov	lr, r1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d14d      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce2:	428a      	cmp	r2, r1
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	d969      	bls.n	8000dbc <__udivmoddi4+0xe8>
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	b152      	cbz	r2, 8000d04 <__udivmoddi4+0x30>
 8000cee:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf2:	f1c2 0120 	rsb	r1, r2, #32
 8000cf6:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfe:	ea41 0e03 	orr.w	lr, r1, r3
 8000d02:	4094      	lsls	r4, r2
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	0c21      	lsrs	r1, r4, #16
 8000d0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d0e:	fa1f f78c 	uxth.w	r7, ip
 8000d12:	fb08 e316 	mls	r3, r8, r6, lr
 8000d16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1a:	fb06 f107 	mul.w	r1, r6, r7
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 811f 	bcs.w	8000f6c <__udivmoddi4+0x298>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 811c 	bls.w	8000f6c <__udivmoddi4+0x298>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 f707 	mul.w	r7, r0, r7
 8000d4c:	42a7      	cmp	r7, r4
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x92>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d58:	f080 810a 	bcs.w	8000f70 <__udivmoddi4+0x29c>
 8000d5c:	42a7      	cmp	r7, r4
 8000d5e:	f240 8107 	bls.w	8000f70 <__udivmoddi4+0x29c>
 8000d62:	4464      	add	r4, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6a:	1be4      	subs	r4, r4, r7
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa4>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xc2>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80ef 	beq.w	8000f66 <__udivmoddi4+0x292>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x160>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd4>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80f9 	bhi.w	8000f9a <__udivmoddi4+0x2c6>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	469e      	mov	lr, r3
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa4>
 8000db6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xec>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 8092 	bne.w	8000eee <__udivmoddi4+0x21a>
 8000dca:	eba1 010c 	sub.w	r1, r1, ip
 8000dce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	2601      	movs	r6, #1
 8000dd8:	0c20      	lsrs	r0, r4, #16
 8000dda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dde:	fb07 1113 	mls	r1, r7, r3, r1
 8000de2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de6:	fb0e f003 	mul.w	r0, lr, r3
 8000dea:	4288      	cmp	r0, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x12c>
 8000dee:	eb1c 0101 	adds.w	r1, ip, r1
 8000df2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x12a>
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	f200 80cb 	bhi.w	8000f94 <__udivmoddi4+0x2c0>
 8000dfe:	4643      	mov	r3, r8
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1110 	mls	r1, r7, r0, r1
 8000e0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e10:	fb0e fe00 	mul.w	lr, lr, r0
 8000e14:	45a6      	cmp	lr, r4
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x156>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e20:	d202      	bcs.n	8000e28 <__udivmoddi4+0x154>
 8000e22:	45a6      	cmp	lr, r4
 8000e24:	f200 80bb 	bhi.w	8000f9e <__udivmoddi4+0x2ca>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e32:	e79c      	b.n	8000d6e <__udivmoddi4+0x9a>
 8000e34:	f1c6 0720 	rsb	r7, r6, #32
 8000e38:	40b3      	lsls	r3, r6
 8000e3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e42:	fa20 f407 	lsr.w	r4, r0, r7
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	431c      	orrs	r4, r3
 8000e4c:	40f9      	lsrs	r1, r7
 8000e4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e52:	fa00 f306 	lsl.w	r3, r0, r6
 8000e56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5a:	0c20      	lsrs	r0, r4, #16
 8000e5c:	fa1f fe8c 	uxth.w	lr, ip
 8000e60:	fb09 1118 	mls	r1, r9, r8, r1
 8000e64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e68:	fb08 f00e 	mul.w	r0, r8, lr
 8000e6c:	4288      	cmp	r0, r1
 8000e6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e72:	d90b      	bls.n	8000e8c <__udivmoddi4+0x1b8>
 8000e74:	eb1c 0101 	adds.w	r1, ip, r1
 8000e78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e7c:	f080 8088 	bcs.w	8000f90 <__udivmoddi4+0x2bc>
 8000e80:	4288      	cmp	r0, r1
 8000e82:	f240 8085 	bls.w	8000f90 <__udivmoddi4+0x2bc>
 8000e86:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	1a09      	subs	r1, r1, r0
 8000e8e:	b2a4      	uxth	r4, r4
 8000e90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e94:	fb09 1110 	mls	r1, r9, r0, r1
 8000e98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea0:	458e      	cmp	lr, r1
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x1e2>
 8000ea4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eac:	d26c      	bcs.n	8000f88 <__udivmoddi4+0x2b4>
 8000eae:	458e      	cmp	lr, r1
 8000eb0:	d96a      	bls.n	8000f88 <__udivmoddi4+0x2b4>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4461      	add	r1, ip
 8000eb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eba:	fba0 9402 	umull	r9, r4, r0, r2
 8000ebe:	eba1 010e 	sub.w	r1, r1, lr
 8000ec2:	42a1      	cmp	r1, r4
 8000ec4:	46c8      	mov	r8, r9
 8000ec6:	46a6      	mov	lr, r4
 8000ec8:	d356      	bcc.n	8000f78 <__udivmoddi4+0x2a4>
 8000eca:	d053      	beq.n	8000f74 <__udivmoddi4+0x2a0>
 8000ecc:	b15d      	cbz	r5, 8000ee6 <__udivmoddi4+0x212>
 8000ece:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ed6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eda:	fa22 f306 	lsr.w	r3, r2, r6
 8000ede:	40f1      	lsrs	r1, r6
 8000ee0:	431f      	orrs	r7, r3
 8000ee2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ee6:	2600      	movs	r6, #0
 8000ee8:	4631      	mov	r1, r6
 8000eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eee:	f1c2 0320 	rsb	r3, r2, #32
 8000ef2:	40d8      	lsrs	r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa21 f303 	lsr.w	r3, r1, r3
 8000efc:	4091      	lsls	r1, r2
 8000efe:	4301      	orrs	r1, r0
 8000f00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f04:	fa1f fe8c 	uxth.w	lr, ip
 8000f08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f10:	0c0b      	lsrs	r3, r1, #16
 8000f12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f16:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1a:	429e      	cmp	r6, r3
 8000f1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x260>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2a:	d22f      	bcs.n	8000f8c <__udivmoddi4+0x2b8>
 8000f2c:	429e      	cmp	r6, r3
 8000f2e:	d92d      	bls.n	8000f8c <__udivmoddi4+0x2b8>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1b9b      	subs	r3, r3, r6
 8000f36:	b289      	uxth	r1, r1
 8000f38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f44:	fb06 f30e 	mul.w	r3, r6, lr
 8000f48:	428b      	cmp	r3, r1
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x28a>
 8000f4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f54:	d216      	bcs.n	8000f84 <__udivmoddi4+0x2b0>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d914      	bls.n	8000f84 <__udivmoddi4+0x2b0>
 8000f5a:	3e02      	subs	r6, #2
 8000f5c:	4461      	add	r1, ip
 8000f5e:	1ac9      	subs	r1, r1, r3
 8000f60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f64:	e738      	b.n	8000dd8 <__udivmoddi4+0x104>
 8000f66:	462e      	mov	r6, r5
 8000f68:	4628      	mov	r0, r5
 8000f6a:	e705      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000f6c:	4606      	mov	r6, r0
 8000f6e:	e6e3      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f70:	4618      	mov	r0, r3
 8000f72:	e6f8      	b.n	8000d66 <__udivmoddi4+0x92>
 8000f74:	454b      	cmp	r3, r9
 8000f76:	d2a9      	bcs.n	8000ecc <__udivmoddi4+0x1f8>
 8000f78:	ebb9 0802 	subs.w	r8, r9, r2
 8000f7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f80:	3801      	subs	r0, #1
 8000f82:	e7a3      	b.n	8000ecc <__udivmoddi4+0x1f8>
 8000f84:	4646      	mov	r6, r8
 8000f86:	e7ea      	b.n	8000f5e <__udivmoddi4+0x28a>
 8000f88:	4620      	mov	r0, r4
 8000f8a:	e794      	b.n	8000eb6 <__udivmoddi4+0x1e2>
 8000f8c:	4640      	mov	r0, r8
 8000f8e:	e7d1      	b.n	8000f34 <__udivmoddi4+0x260>
 8000f90:	46d0      	mov	r8, sl
 8000f92:	e77b      	b.n	8000e8c <__udivmoddi4+0x1b8>
 8000f94:	3b02      	subs	r3, #2
 8000f96:	4461      	add	r1, ip
 8000f98:	e732      	b.n	8000e00 <__udivmoddi4+0x12c>
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	e709      	b.n	8000db2 <__udivmoddi4+0xde>
 8000f9e:	4464      	add	r4, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e742      	b.n	8000e2a <__udivmoddi4+0x156>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fac:	f001 f8ab 	bl	8002106 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb0:	f000 f850 	bl	8001054 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb4:	f000 f98e 	bl	80012d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fb8:	f000 f96e 	bl	8001298 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fbc:	f000 f93c 	bl	8001238 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000fc0:	f000 f8aa 	bl	8001118 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000fc4:	f000 f908 	bl	80011d8 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8000fc8:	f000 f8ce 	bl	8001168 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  send_string_2_dbg_uart ( "Hello! Test_Swarm_004_L432KC started\n" ) ;
 8000fcc:	481b      	ldr	r0, [pc, #108]	; (800103c <main+0x94>)
 8000fce:	f000 fd35 	bl	8001a3c <send_string_2_dbg_uart>
  send_string_2_dbg_uart ( "MCU WAIT 15s for Swarm boot\n" ) ;
 8000fd2:	481b      	ldr	r0, [pc, #108]	; (8001040 <main+0x98>)
 8000fd4:	f000 fd32 	bl	8001a3c <send_string_2_dbg_uart>
  HAL_Delay ( 15000 ) ;
 8000fd8:	f643 2098 	movw	r0, #15000	; 0x3a98
 8000fdc:	f001 f908 	bl	80021f0 <HAL_Delay>
  tim_init () ;
 8000fe0:	f000 fd6e 	bl	8001ac0 <tim_init>
  m138_init () ;
 8000fe4:	f000 fbe4 	bl	80017b0 <m138_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ( m138_init_status_reg != M138_INITIALISED )
 8000fe8:	4b16      	ldr	r3, [pc, #88]	; (8001044 <main+0x9c>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b7f      	cmp	r3, #127	; 0x7f
 8000fee:	d001      	beq.n	8000ff4 <main+0x4c>
		  m138_init () ;
 8000ff0:	f000 fbde 	bl	80017b0 <m138_init>
	  if ( m138_payload () == 7 )
 8000ff4:	f000 fb78 	bl	80016e8 <m138_payload>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b07      	cmp	r3, #7
 8000ffc:	d108      	bne.n	8001010 <main+0x68>
		  if ( m138_send_message () )
 8000ffe:	f000 fb43 	bl	8001688 <m138_send_message>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <main+0x68>
			  HAL_Delay ( 60000 ) ;
 8001008:	f64e 2060 	movw	r0, #60000	; 0xea60
 800100c:	f001 f8f0 	bl	80021f0 <HAL_Delay>
	  m138_sleep ( 3000 ) ;
 8001010:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001014:	f000 faf6 	bl	8001604 <m138_sleep>
	  set_swarm_uart ( 0 ) ;
 8001018:	2000      	movs	r0, #0
 800101a:	f000 fa47 	bl	80014ac <set_swarm_uart>
	  //bkpt = 1 ;
	  reset_m138_var () ;
 800101e:	f000 fa2d 	bl	800147c <reset_m138_var>
	  send_string_2_dbg_uart ( "MCU STOP for 3600 s\n" ) ;
 8001022:	4809      	ldr	r0, [pc, #36]	; (8001048 <main+0xa0>)
 8001024:	f000 fd0a 	bl	8001a3c <send_string_2_dbg_uart>

	  HAL_Delay ( 3600000 ) ;
 8001028:	4808      	ldr	r0, [pc, #32]	; (800104c <main+0xa4>)
 800102a:	f001 f8e1 	bl	80021f0 <HAL_Delay>

	  set_swarm_uart ( 1 ) ;
 800102e:	2001      	movs	r0, #1
 8001030:	f000 fa3c 	bl	80014ac <set_swarm_uart>
	  send_string_2_dbg_uart ( "MCU WAKE UP\n" ) ;
 8001034:	4806      	ldr	r0, [pc, #24]	; (8001050 <main+0xa8>)
 8001036:	f000 fd01 	bl	8001a3c <send_string_2_dbg_uart>
	  if ( m138_init_status_reg != M138_INITIALISED )
 800103a:	e7d5      	b.n	8000fe8 <main+0x40>
 800103c:	080092c8 	.word	0x080092c8
 8001040:	080092f0 	.word	0x080092f0
 8001044:	2000070a 	.word	0x2000070a
 8001048:	08009310 	.word	0x08009310
 800104c:	0036ee80 	.word	0x0036ee80
 8001050:	08009328 	.word	0x08009328

08001054 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b096      	sub	sp, #88	; 0x58
 8001058:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	2244      	movs	r2, #68	; 0x44
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f004 fea2 	bl	8005dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001068:	463b      	mov	r3, r7
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
 8001074:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001076:	f44f 7000 	mov.w	r0, #512	; 0x200
 800107a:	f001 fe05 	bl	8002c88 <HAL_PWREx_ControlVoltageScaling>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001084:	f000 fd98 	bl	8001bb8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001088:	f001 fde0 	bl	8002c4c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800108c:	4b21      	ldr	r3, [pc, #132]	; (8001114 <SystemClock_Config+0xc0>)
 800108e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001092:	4a20      	ldr	r2, [pc, #128]	; (8001114 <SystemClock_Config+0xc0>)
 8001094:	f023 0318 	bic.w	r3, r3, #24
 8001098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800109c:	2314      	movs	r3, #20
 800109e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010a0:	2301      	movs	r3, #1
 80010a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010a4:	2301      	movs	r3, #1
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010ac:	2360      	movs	r3, #96	; 0x60
 80010ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b0:	2302      	movs	r3, #2
 80010b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010b4:	2301      	movs	r3, #1
 80010b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010b8:	2301      	movs	r3, #1
 80010ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80010bc:	2310      	movs	r3, #16
 80010be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010c0:	2307      	movs	r3, #7
 80010c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010c4:	2302      	movs	r3, #2
 80010c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010c8:	2302      	movs	r3, #2
 80010ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4618      	mov	r0, r3
 80010d2:	f001 fe2f 	bl	8002d34 <HAL_RCC_OscConfig>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80010dc:	f000 fd6c 	bl	8001bb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e0:	230f      	movs	r3, #15
 80010e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e4:	2303      	movs	r3, #3
 80010e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010f4:	463b      	mov	r3, r7
 80010f6:	2101      	movs	r1, #1
 80010f8:	4618      	mov	r0, r3
 80010fa:	f002 fa2f 	bl	800355c <HAL_RCC_ClockConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001104:	f000 fd58 	bl	8001bb8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001108:	f002 fe42 	bl	8003d90 <HAL_RCCEx_EnableMSIPLLMode>
}
 800110c:	bf00      	nop
 800110e:	3758      	adds	r7, #88	; 0x58
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40021000 	.word	0x40021000

08001118 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800111c:	4b10      	ldr	r3, [pc, #64]	; (8001160 <MX_RTC_Init+0x48>)
 800111e:	4a11      	ldr	r2, [pc, #68]	; (8001164 <MX_RTC_Init+0x4c>)
 8001120:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_RTC_Init+0x48>)
 8001124:	2200      	movs	r2, #0
 8001126:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001128:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <MX_RTC_Init+0x48>)
 800112a:	227f      	movs	r2, #127	; 0x7f
 800112c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <MX_RTC_Init+0x48>)
 8001130:	22ff      	movs	r2, #255	; 0xff
 8001132:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001134:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <MX_RTC_Init+0x48>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <MX_RTC_Init+0x48>)
 800113c:	2200      	movs	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <MX_RTC_Init+0x48>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_RTC_Init+0x48>)
 8001148:	2200      	movs	r2, #0
 800114a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <MX_RTC_Init+0x48>)
 800114e:	f002 ff21 	bl	8003f94 <HAL_RTC_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001158:	f000 fd2e 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000288 	.word	0x20000288
 8001164:	40002800 	.word	0x40002800

08001168 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001178:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <MX_TIM6_Init+0x68>)
 800117a:	4a16      	ldr	r2, [pc, #88]	; (80011d4 <MX_TIM6_Init+0x6c>)
 800117c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32000-1;
 800117e:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <MX_TIM6_Init+0x68>)
 8001180:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8001184:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <MX_TIM6_Init+0x68>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000-1;
 800118c:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <MX_TIM6_Init+0x68>)
 800118e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001192:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <MX_TIM6_Init+0x68>)
 8001196:	2200      	movs	r2, #0
 8001198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800119a:	480d      	ldr	r0, [pc, #52]	; (80011d0 <MX_TIM6_Init+0x68>)
 800119c:	f003 f83c 	bl	8004218 <HAL_TIM_Base_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80011a6:	f000 fd07 	bl	8001bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	4619      	mov	r1, r3
 80011b6:	4806      	ldr	r0, [pc, #24]	; (80011d0 <MX_TIM6_Init+0x68>)
 80011b8:	f003 fab4 	bl	8004724 <HAL_TIMEx_MasterConfigSynchronization>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80011c2:	f000 fcf9 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200002ac 	.word	0x200002ac
 80011d4:	40001000 	.word	0x40001000

080011d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011dc:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_USART1_UART_Init+0x58>)
 80011de:	4a15      	ldr	r2, [pc, #84]	; (8001234 <MX_USART1_UART_Init+0x5c>)
 80011e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <MX_USART1_UART_Init+0x58>)
 80011e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_USART1_UART_Init+0x58>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_USART1_UART_Init+0x58>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_USART1_UART_Init+0x58>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_USART1_UART_Init+0x58>)
 80011fe:	220c      	movs	r2, #12
 8001200:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <MX_USART1_UART_Init+0x58>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_USART1_UART_Init+0x58>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <MX_USART1_UART_Init+0x58>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_USART1_UART_Init+0x58>)
 8001216:	2200      	movs	r2, #0
 8001218:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_USART1_UART_Init+0x58>)
 800121c:	f003 fb06 	bl	800482c <HAL_UART_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001226:	f000 fcc7 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200002f8 	.word	0x200002f8
 8001234:	40013800 	.word	0x40013800

08001238 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_USART2_UART_Init+0x58>)
 800123e:	4a15      	ldr	r2, [pc, #84]	; (8001294 <MX_USART2_UART_Init+0x5c>)
 8001240:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <MX_USART2_UART_Init+0x58>)
 8001244:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001248:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_USART2_UART_Init+0x58>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MX_USART2_UART_Init+0x58>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MX_USART2_UART_Init+0x58>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <MX_USART2_UART_Init+0x58>)
 800125e:	220c      	movs	r2, #12
 8001260:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <MX_USART2_UART_Init+0x58>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_USART2_UART_Init+0x58>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <MX_USART2_UART_Init+0x58>)
 8001270:	2200      	movs	r2, #0
 8001272:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_USART2_UART_Init+0x58>)
 8001276:	2200      	movs	r2, #0
 8001278:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_USART2_UART_Init+0x58>)
 800127c:	f003 fad6 	bl	800482c <HAL_UART_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001286:	f000 fc97 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	2000037c 	.word	0x2000037c
 8001294:	40004400 	.word	0x40004400

08001298 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <MX_DMA_Init+0x38>)
 80012a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a2:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <MX_DMA_Init+0x38>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6493      	str	r3, [r2, #72]	; 0x48
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <MX_DMA_Init+0x38>)
 80012ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	200f      	movs	r0, #15
 80012bc:	f001 f897 	bl	80023ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80012c0:	200f      	movs	r0, #15
 80012c2:	f001 f8b0 	bl	8002426 <HAL_NVIC_EnableIRQ>

}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000

080012d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <MX_GPIO_Init+0x8c>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <MX_GPIO_Init+0x8c>)
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f6:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <MX_GPIO_Init+0x8c>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	4b17      	ldr	r3, [pc, #92]	; (8001360 <MX_GPIO_Init+0x8c>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	4a16      	ldr	r2, [pc, #88]	; (8001360 <MX_GPIO_Init+0x8c>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <MX_GPIO_Init+0x8c>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_GPIO_Init+0x8c>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	4a10      	ldr	r2, [pc, #64]	; (8001360 <MX_GPIO_Init+0x8c>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_GPIO_Init+0x8c>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	2108      	movs	r1, #8
 8001336:	480b      	ldr	r0, [pc, #44]	; (8001364 <MX_GPIO_Init+0x90>)
 8001338:	f001 fc70 	bl	8002c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 800133c:	2308      	movs	r3, #8
 800133e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	4619      	mov	r1, r3
 8001352:	4804      	ldr	r0, [pc, #16]	; (8001364 <MX_GPIO_Init+0x90>)
 8001354:	f001 faf8 	bl	8002948 <HAL_GPIO_Init>

}
 8001358:	bf00      	nop
 800135a:	3720      	adds	r7, #32
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40021000 	.word	0x40021000
 8001364:	48000400 	.word	0x48000400

08001368 <store_m138_dev_id>:

/* USER CODE BEGIN 4 */
uint8_t store_m138_dev_id ( uint32_t* id , char* s )
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
	if ( ! strstr ( s , "DI=0x" ) )
 8001372:	4910      	ldr	r1, [pc, #64]	; (80013b4 <store_m138_dev_id+0x4c>)
 8001374:	6838      	ldr	r0, [r7, #0]
 8001376:	f004 fd55 	bl	8005e24 <strstr>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <store_m138_dev_id+0x1c>
		return 0 ;
 8001380:	2300      	movs	r3, #0
 8001382:	e013      	b.n	80013ac <store_m138_dev_id+0x44>
	s = strtok ( (char*) s , "=" ) ;
 8001384:	490c      	ldr	r1, [pc, #48]	; (80013b8 <store_m138_dev_id+0x50>)
 8001386:	6838      	ldr	r0, [r7, #0]
 8001388:	f005 fbe0 	bl	8006b4c <strtok>
 800138c:	6038      	str	r0, [r7, #0]
	s = strtok ( NULL , "," ) ;
 800138e:	490b      	ldr	r1, [pc, #44]	; (80013bc <store_m138_dev_id+0x54>)
 8001390:	2000      	movs	r0, #0
 8001392:	f005 fbdb 	bl	8006b4c <strtok>
 8001396:	6038      	str	r0, [r7, #0]
	*id = (uint32_t) strtol ( s , NULL , 16 ) ;
 8001398:	2210      	movs	r2, #16
 800139a:	2100      	movs	r1, #0
 800139c:	6838      	ldr	r0, [r7, #0]
 800139e:	f005 fcb3 	bl	8006d08 <strtol>
 80013a2:	4603      	mov	r3, r0
 80013a4:	461a      	mov	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	601a      	str	r2, [r3, #0]
	return 1 ;
 80013aa:	2301      	movs	r3, #1
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	08009338 	.word	0x08009338
 80013b8:	08009340 	.word	0x08009340
 80013bc:	08009344 	.word	0x08009344

080013c0 <store_m138_voltage>:
uint8_t store_m138_voltage ( float* d , char* s )
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
	if ( ! strstr ( s , "$PW " ) )
 80013ca:	4910      	ldr	r1, [pc, #64]	; (800140c <store_m138_voltage+0x4c>)
 80013cc:	6838      	ldr	r0, [r7, #0]
 80013ce:	f004 fd29 	bl	8005e24 <strstr>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <store_m138_voltage+0x1c>
		return 0 ;
 80013d8:	2300      	movs	r3, #0
 80013da:	e013      	b.n	8001404 <store_m138_voltage+0x44>
	s = strtok ( (char*) s , " " ) ;
 80013dc:	490c      	ldr	r1, [pc, #48]	; (8001410 <store_m138_voltage+0x50>)
 80013de:	6838      	ldr	r0, [r7, #0]
 80013e0:	f005 fbb4 	bl	8006b4c <strtok>
 80013e4:	6038      	str	r0, [r7, #0]
	s = strtok ( NULL , "," ) ;
 80013e6:	490b      	ldr	r1, [pc, #44]	; (8001414 <store_m138_voltage+0x54>)
 80013e8:	2000      	movs	r0, #0
 80013ea:	f005 fbaf 	bl	8006b4c <strtok>
 80013ee:	6038      	str	r0, [r7, #0]
	*d = (float) strtof ( s , NULL ) ;
 80013f0:	2100      	movs	r1, #0
 80013f2:	6838      	ldr	r0, [r7, #0]
 80013f4:	f005 fb4e 	bl	8006a94 <strtof>
 80013f8:	eef0 7a40 	vmov.f32	s15, s0
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	edc3 7a00 	vstr	s15, [r3]
	return 1 ;
 8001402:	2301      	movs	r3, #1
}
 8001404:	4618      	mov	r0, r3
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	08009230 	.word	0x08009230
 8001410:	08009348 	.word	0x08009348
 8001414:	08009344 	.word	0x08009344

08001418 <store_m138_fix>:
uint8_t store_m138_fix ( char* d , char* s )
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
	if ( ! strstr ( s , "$GN " ) )
 8001422:	4913      	ldr	r1, [pc, #76]	; (8001470 <store_m138_fix+0x58>)
 8001424:	6838      	ldr	r0, [r7, #0]
 8001426:	f004 fcfd 	bl	8005e24 <strstr>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <store_m138_fix+0x1c>
		return 0 ;
 8001430:	2300      	movs	r3, #0
 8001432:	e018      	b.n	8001466 <store_m138_fix+0x4e>
	s = strtok ( (char*) s , " " ) ;
 8001434:	490f      	ldr	r1, [pc, #60]	; (8001474 <store_m138_fix+0x5c>)
 8001436:	6838      	ldr	r0, [r7, #0]
 8001438:	f005 fb88 	bl	8006b4c <strtok>
 800143c:	6038      	str	r0, [r7, #0]
	s = strtok ( NULL , "*" ) ;
 800143e:	490e      	ldr	r1, [pc, #56]	; (8001478 <store_m138_fix+0x60>)
 8001440:	2000      	movs	r0, #0
 8001442:	f005 fb83 	bl	8006b4c <strtok>
 8001446:	6038      	str	r0, [r7, #0]
	size_t l =  strlen ( s ) ;
 8001448:	6838      	ldr	r0, [r7, #0]
 800144a:	f7fe fec1 	bl	80001d0 <strlen>
 800144e:	60f8      	str	r0, [r7, #12]
	memcpy ( d , s , l ) ;
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	6839      	ldr	r1, [r7, #0]
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f004 fc9b 	bl	8005d90 <memcpy>
	d[l] = '\0' ;
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4413      	add	r3, r2
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
	return 1 ;
 8001464:	2301      	movs	r3, #1
}
 8001466:	4618      	mov	r0, r3
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	08009298 	.word	0x08009298
 8001474:	08009348 	.word	0x08009348
 8001478:	0800934c 	.word	0x0800934c

0800147c <reset_m138_var>:
void reset_m138_var ()
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
	m138_voltage = 0 ;
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <reset_m138_var+0x24>)
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
	m138_fix[0] = '\0' ;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <reset_m138_var+0x28>)
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
	m138_payload_status_reg = 0 ;
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <reset_m138_var+0x2c>)
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	20000710 	.word	0x20000710
 80014a4:	20000714 	.word	0x20000714
 80014a8:	2000070b 	.word	0x2000070b

080014ac <set_swarm_uart>:

void set_swarm_uart ( uint8_t on )
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
	if ( on )
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d008      	beq.n	80014ce <set_swarm_uart+0x22>
		__HAL_UART_ENABLE ( SWARM_UART_HANDLER ) ;
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <set_swarm_uart+0x40>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <set_swarm_uart+0x40>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0201 	orr.w	r2, r2, #1
 80014ca:	601a      	str	r2, [r3, #0]
	else
		__HAL_UART_DISABLE ( SWARM_UART_HANDLER ) ;
}
 80014cc:	e007      	b.n	80014de <set_swarm_uart+0x32>
		__HAL_UART_DISABLE ( SWARM_UART_HANDLER ) ;
 80014ce:	4b07      	ldr	r3, [pc, #28]	; (80014ec <set_swarm_uart+0x40>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <set_swarm_uart+0x40>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 0201 	bic.w	r2, r2, #1
 80014dc:	601a      	str	r2, [r3, #0]
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	200002f8 	.word	0x200002f8

080014f0 <swarm_cc>:
uint8_t swarm_cc ( const char* at_command , const char* expected_answer )
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
	uint8_t try ;
	uint8_t cs = nmea_checksum ( at_command , strlen ( at_command ) ) ;
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7fe fe68 	bl	80001d0 <strlen>
 8001500:	4603      	mov	r3, r0
 8001502:	4619      	mov	r1, r3
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 faaf 	bl	8001a68 <nmea_checksum>
 800150a:	4603      	mov	r3, r0
 800150c:	73bb      	strb	r3, [r7, #14]
	int l ;

	l = sprintf ( swarm_uart_tx_buff , "%s*%02x\n" , at_command , cs ) ;
 800150e:	7bbb      	ldrb	r3, [r7, #14]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	4932      	ldr	r1, [pc, #200]	; (80015dc <swarm_cc+0xec>)
 8001514:	4832      	ldr	r0, [pc, #200]	; (80015e0 <swarm_cc+0xf0>)
 8001516:	f004 fc51 	bl	8005dbc <siprintf>
 800151a:	60b8      	str	r0, [r7, #8]
	swarm_uart_rx_buff[0] = '\0' ;
 800151c:	4b31      	ldr	r3, [pc, #196]	; (80015e4 <swarm_cc+0xf4>)
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
	//clean_swarm_uart_rx_buff () ;
	for ( try = 0 ; try < 5 ; try++ )
 8001522:	2300      	movs	r3, #0
 8001524:	73fb      	strb	r3, [r7, #15]
 8001526:	e048      	b.n	80015ba <swarm_cc+0xca>
	{
		tim_start () ;
 8001528:	f000 fad8 	bl	8001adc <tim_start>
		/*if ( bkpt )
			__NOP () ;*/
		if ( answer_from_swarm == 0 )
 800152c:	4b2e      	ldr	r3, [pc, #184]	; (80015e8 <swarm_cc+0xf8>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d10f      	bne.n	8001554 <swarm_cc+0x64>
			if ( receive_swarm_uart_dma () != HAL_OK )
 8001534:	f000 fafa 	bl	8001b2c <receive_swarm_uart_dma>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00a      	beq.n	8001554 <swarm_cc+0x64>
			{
				sprintf ( dbg_uart_tx_buff , "try no. %u != HAL_OK for %s\n" , try , at_command ) ;
 800153e:	7bfa      	ldrb	r2, [r7, #15]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	492a      	ldr	r1, [pc, #168]	; (80015ec <swarm_cc+0xfc>)
 8001544:	482a      	ldr	r0, [pc, #168]	; (80015f0 <swarm_cc+0x100>)
 8001546:	f004 fc39 	bl	8005dbc <siprintf>
				send_string_2_dbg_uart ( dbg_uart_tx_buff ) ;
 800154a:	4829      	ldr	r0, [pc, #164]	; (80015f0 <swarm_cc+0x100>)
 800154c:	f000 fa76 	bl	8001a3c <send_string_2_dbg_uart>
				clean_swarm_uart_rx_buff () ;
 8001550:	f000 fa46 	bl	80019e0 <clean_swarm_uart_rx_buff>
			}
		send_string_2_swarm_uart ( swarm_uart_tx_buff , l ) ;
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	4822      	ldr	r0, [pc, #136]	; (80015e0 <swarm_cc+0xf0>)
 8001558:	f000 fa5c 	bl	8001a14 <send_string_2_swarm_uart>
		while ( tim_on )
 800155c:	e026      	b.n	80015ac <swarm_cc+0xbc>
			if ( answer_from_swarm == 2 )
 800155e:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <swarm_cc+0xf8>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d122      	bne.n	80015ac <swarm_cc+0xbc>
			{
				if ( strncmp ( td_ok_answer , expected_answer , strlen ( expected_answer ) ) == 0 )
 8001566:	4b23      	ldr	r3, [pc, #140]	; (80015f4 <swarm_cc+0x104>)
 8001568:	681c      	ldr	r4, [r3, #0]
 800156a:	6838      	ldr	r0, [r7, #0]
 800156c:	f7fe fe30 	bl	80001d0 <strlen>
 8001570:	4603      	mov	r3, r0
 8001572:	461a      	mov	r2, r3
 8001574:	6839      	ldr	r1, [r7, #0]
 8001576:	4620      	mov	r0, r4
 8001578:	f004 fc40 	bl	8005dfc <strncmp>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d100      	bne.n	8001584 <swarm_cc+0x94>
					__NOP () ;
 8001582:	bf00      	nop
				answer_from_swarm = 0 ;
 8001584:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <swarm_cc+0xf8>)
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
				//sprintf ( dbg_uart_tx_buff , "try no. %u answer_from_swarm = 2 for %s\n" , try , at_command ) ;
				//send_string_2_dbg_uart ( dbg_uart_tx_buff ) ;
				if ( strncmp ( swarm_uart_rx_buff , expected_answer , strlen ( expected_answer ) ) == 0 )
 800158a:	6838      	ldr	r0, [r7, #0]
 800158c:	f7fe fe20 	bl	80001d0 <strlen>
 8001590:	4603      	mov	r3, r0
 8001592:	461a      	mov	r2, r3
 8001594:	6839      	ldr	r1, [r7, #0]
 8001596:	4813      	ldr	r0, [pc, #76]	; (80015e4 <swarm_cc+0xf4>)
 8001598:	f004 fc30 	bl	8005dfc <strncmp>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <swarm_cc+0xb6>
				{
					//sprintf ( dbg_uart_tx_buff , "try no. %u success for %s\n" , try , at_command ) ;
					//send_string_2_dbg_uart ( dbg_uart_tx_buff ) ;
					return 1 ;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e016      	b.n	80015d4 <swarm_cc+0xe4>
				}
				else
				{
					clean_swarm_uart_rx_buff () ;
 80015a6:	f000 fa1b 	bl	80019e0 <clean_swarm_uart_rx_buff>
					break ;
 80015aa:	e003      	b.n	80015b4 <swarm_cc+0xc4>
		while ( tim_on )
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <swarm_cc+0x108>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1d4      	bne.n	800155e <swarm_cc+0x6e>
	for ( try = 0 ; try < 5 ; try++ )
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	3301      	adds	r3, #1
 80015b8:	73fb      	strb	r3, [r7, #15]
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	2b04      	cmp	r3, #4
 80015be:	d9b3      	bls.n	8001528 <swarm_cc+0x38>
				}
			}
	}
	sprintf ( dbg_uart_tx_buff , "%s %s\n" , (char*) expected_answer , "not received." ) ;
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <swarm_cc+0x10c>)
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	490e      	ldr	r1, [pc, #56]	; (8001600 <swarm_cc+0x110>)
 80015c6:	480a      	ldr	r0, [pc, #40]	; (80015f0 <swarm_cc+0x100>)
 80015c8:	f004 fbf8 	bl	8005dbc <siprintf>
	send_string_2_dbg_uart ( dbg_uart_tx_buff ) ;
 80015cc:	4808      	ldr	r0, [pc, #32]	; (80015f0 <swarm_cc+0x100>)
 80015ce:	f000 fa35 	bl	8001a3c <send_string_2_dbg_uart>
	return 0 ;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd90      	pop	{r4, r7, pc}
 80015dc:	08009350 	.word	0x08009350
 80015e0:	200004ac 	.word	0x200004ac
 80015e4:	20000448 	.word	0x20000448
 80015e8:	20000709 	.word	0x20000709
 80015ec:	0800935c 	.word	0x0800935c
 80015f0:	20000640 	.word	0x20000640
 80015f4:	20000084 	.word	0x20000084
 80015f8:	20000708 	.word	0x20000708
 80015fc:	0800937c 	.word	0x0800937c
 8001600:	0800938c 	.word	0x0800938c

08001604 <m138_sleep>:

uint8_t m138_sleep ( unsigned int t )
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	sprintf ( (char*) sl_at_comm , "$SL S=%u" , t ) ;
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	490e      	ldr	r1, [pc, #56]	; (8001648 <m138_sleep+0x44>)
 8001610:	480e      	ldr	r0, [pc, #56]	; (800164c <m138_sleep+0x48>)
 8001612:	f004 fbd3 	bl	8005dbc <siprintf>
	//send_string_2_dbg_uart ( (char*) sl_at_comm ) ;
	if ( swarm_cc ( (const char*) sl_at_comm , sl_ok_answer ) )
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <m138_sleep+0x4c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4619      	mov	r1, r3
 800161c:	480b      	ldr	r0, [pc, #44]	; (800164c <m138_sleep+0x48>)
 800161e:	f7ff ff67 	bl	80014f0 <swarm_cc>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d009      	beq.n	800163c <m138_sleep+0x38>
	{
		sprintf ( dbg_uart_tx_buff , "Swarm went sleep for %u s\n" , t ) ;
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	490a      	ldr	r1, [pc, #40]	; (8001654 <m138_sleep+0x50>)
 800162c:	480a      	ldr	r0, [pc, #40]	; (8001658 <m138_sleep+0x54>)
 800162e:	f004 fbc5 	bl	8005dbc <siprintf>
		send_string_2_dbg_uart ( dbg_uart_tx_buff ) ;
 8001632:	4809      	ldr	r0, [pc, #36]	; (8001658 <m138_sleep+0x54>)
 8001634:	f000 fa02 	bl	8001a3c <send_string_2_dbg_uart>
		return 1 ;
 8001638:	2301      	movs	r3, #1
 800163a:	e000      	b.n	800163e <m138_sleep+0x3a>
	}
	return 0 ;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	08009394 	.word	0x08009394
 800164c:	20000748 	.word	0x20000748
 8001650:	20000088 	.word	0x20000088
 8001654:	080093a0 	.word	0x080093a0
 8001658:	20000640 	.word	0x20000640

0800165c <m138_del_all_unsent>:
uint8_t m138_del_all_unsent	()
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	if ( swarm_cc ( mt_del_all_unsent_at , mt_del_all_unsent_answer ) )
 8001660:	4b07      	ldr	r3, [pc, #28]	; (8001680 <m138_del_all_unsent+0x24>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <m138_del_all_unsent+0x28>)
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	4611      	mov	r1, r2
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff ff40 	bl	80014f0 <swarm_cc>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <m138_del_all_unsent+0x1e>
		return 1 ;
 8001676:	2301      	movs	r3, #1
 8001678:	e000      	b.n	800167c <m138_del_all_unsent+0x20>
	else
		return 0 ;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000040 	.word	0x20000040
 8001684:	20000080 	.word	0x20000080

08001688 <m138_send_message>:
uint8_t m138_send_message ()
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af02      	add	r7, sp, #8
	sprintf ( swarm_uart_tx_td_buff , "$TD HD=60,%c%u;%s%c" , quotation,  (unsigned int) m138_dev_id , m138_fix , quotation ) ;
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <m138_send_message+0x48>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	4619      	mov	r1, r3
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <m138_send_message+0x4c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <m138_send_message+0x48>)
 800169a:	7812      	ldrb	r2, [r2, #0]
 800169c:	9201      	str	r2, [sp, #4]
 800169e:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <m138_send_message+0x50>)
 80016a0:	9200      	str	r2, [sp, #0]
 80016a2:	460a      	mov	r2, r1
 80016a4:	490d      	ldr	r1, [pc, #52]	; (80016dc <m138_send_message+0x54>)
 80016a6:	480e      	ldr	r0, [pc, #56]	; (80016e0 <m138_send_message+0x58>)
 80016a8:	f004 fb88 	bl	8005dbc <siprintf>
	//send_string_2_dbg_uart ( swarm_uart_tx_td_buff ) ;
	if ( swarm_cc ( swarm_uart_tx_td_buff , td_ok_answer ) )
 80016ac:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <m138_send_message+0x5c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4619      	mov	r1, r3
 80016b2:	480b      	ldr	r0, [pc, #44]	; (80016e0 <m138_send_message+0x58>)
 80016b4:	f7ff ff1c 	bl	80014f0 <swarm_cc>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <m138_send_message+0x3e>
	{
		receive_swarm_uart_dma () ;
 80016be:	f000 fa35 	bl	8001b2c <receive_swarm_uart_dma>
		return 1 ;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <m138_send_message+0x40>
	}
	else
		return 0 ;
 80016c6:	2300      	movs	r3, #0
	//return 1 ;
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000000 	.word	0x20000000
 80016d4:	2000070c 	.word	0x2000070c
 80016d8:	20000714 	.word	0x20000714
 80016dc:	080093bc 	.word	0x080093bc
 80016e0:	20000570 	.word	0x20000570
 80016e4:	20000084 	.word	0x20000084

080016e8 <m138_payload>:

uint8_t m138_payload ()
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	if ( swarm_cc ( pw_mostrecent_at , pw_mostrecent_answer ) )
 80016ec:	4b25      	ldr	r3, [pc, #148]	; (8001784 <m138_payload+0x9c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a25      	ldr	r2, [pc, #148]	; (8001788 <m138_payload+0xa0>)
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	4611      	mov	r1, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fefa 	bl	80014f0 <swarm_cc>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00d      	beq.n	800171e <m138_payload+0x36>
		if ( store_m138_voltage ( &m138_voltage , swarm_uart_rx_buff ) )
 8001702:	4922      	ldr	r1, [pc, #136]	; (800178c <m138_payload+0xa4>)
 8001704:	4822      	ldr	r0, [pc, #136]	; (8001790 <m138_payload+0xa8>)
 8001706:	f7ff fe5b 	bl	80013c0 <store_m138_voltage>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d006      	beq.n	800171e <m138_payload+0x36>
			m138_payload_status_reg = m138_payload_status_reg | 1 ;
 8001710:	4b20      	ldr	r3, [pc, #128]	; (8001794 <m138_payload+0xac>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <m138_payload+0xac>)
 800171c:	701a      	strb	r2, [r3, #0]
	if ( swarm_cc ( gn_mostrecent_at , gn_mostrecent_answer ) )
 800171e:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <m138_payload+0xb0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a1e      	ldr	r2, [pc, #120]	; (800179c <m138_payload+0xb4>)
 8001724:	6812      	ldr	r2, [r2, #0]
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fee1 	bl	80014f0 <swarm_cc>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d00d      	beq.n	8001750 <m138_payload+0x68>
		if ( store_m138_fix ( m138_fix , swarm_uart_rx_buff ) )
 8001734:	4915      	ldr	r1, [pc, #84]	; (800178c <m138_payload+0xa4>)
 8001736:	481a      	ldr	r0, [pc, #104]	; (80017a0 <m138_payload+0xb8>)
 8001738:	f7ff fe6e 	bl	8001418 <store_m138_fix>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d006      	beq.n	8001750 <m138_payload+0x68>
			m138_payload_status_reg = m138_payload_status_reg | 2 ;
 8001742:	4b14      	ldr	r3, [pc, #80]	; (8001794 <m138_payload+0xac>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	f043 0302 	orr.w	r3, r3, #2
 800174a:	b2da      	uxtb	r2, r3
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <m138_payload+0xac>)
 800174e:	701a      	strb	r2, [r3, #0]
	if ( m138_del_all_unsent () )
 8001750:	f7ff ff84 	bl	800165c <m138_del_all_unsent>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d006      	beq.n	8001768 <m138_payload+0x80>
		m138_payload_status_reg = m138_payload_status_reg | 4 ;
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <m138_payload+0xac>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	f043 0304 	orr.w	r3, r3, #4
 8001762:	b2da      	uxtb	r2, r3
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <m138_payload+0xac>)
 8001766:	701a      	strb	r2, [r3, #0]

	sprintf ( dbg_uart_tx_buff , "%s%u\n" , "m138_payload_status_reg = " , m138_payload_status_reg ) ;
 8001768:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <m138_payload+0xac>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <m138_payload+0xbc>)
 800176e:	490e      	ldr	r1, [pc, #56]	; (80017a8 <m138_payload+0xc0>)
 8001770:	480e      	ldr	r0, [pc, #56]	; (80017ac <m138_payload+0xc4>)
 8001772:	f004 fb23 	bl	8005dbc <siprintf>
	send_string_2_dbg_uart ( dbg_uart_tx_buff ) ;
 8001776:	480d      	ldr	r0, [pc, #52]	; (80017ac <m138_payload+0xc4>)
 8001778:	f000 f960 	bl	8001a3c <send_string_2_dbg_uart>

	return m138_payload_status_reg ;
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <m138_payload+0xac>)
 800177e:	781b      	ldrb	r3, [r3, #0]
}
 8001780:	4618      	mov	r0, r3
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000018 	.word	0x20000018
 8001788:	20000058 	.word	0x20000058
 800178c:	20000448 	.word	0x20000448
 8001790:	20000710 	.word	0x20000710
 8001794:	2000070b 	.word	0x2000070b
 8001798:	2000003c 	.word	0x2000003c
 800179c:	2000007c 	.word	0x2000007c
 80017a0:	20000714 	.word	0x20000714
 80017a4:	080093d0 	.word	0x080093d0
 80017a8:	080093ec 	.word	0x080093ec
 80017ac:	20000640 	.word	0x20000640

080017b0 <m138_init>:
uint8_t m138_init ()
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	if ( swarm_cc ( cs_at , cs_answer ) )
 80017b4:	4b6a      	ldr	r3, [pc, #424]	; (8001960 <m138_init+0x1b0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a6a      	ldr	r2, [pc, #424]	; (8001964 <m138_init+0x1b4>)
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	4611      	mov	r1, r2
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fe96 	bl	80014f0 <swarm_cc>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00d      	beq.n	80017e6 <m138_init+0x36>
		if ( store_m138_dev_id ( &m138_dev_id , swarm_uart_rx_buff ) )
 80017ca:	4967      	ldr	r1, [pc, #412]	; (8001968 <m138_init+0x1b8>)
 80017cc:	4867      	ldr	r0, [pc, #412]	; (800196c <m138_init+0x1bc>)
 80017ce:	f7ff fdcb 	bl	8001368 <store_m138_dev_id>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d006      	beq.n	80017e6 <m138_init+0x36>
			m138_init_status_reg = m138_init_status_reg | 1 ;
 80017d8:	4b65      	ldr	r3, [pc, #404]	; (8001970 <m138_init+0x1c0>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4b63      	ldr	r3, [pc, #396]	; (8001970 <m138_init+0x1c0>)
 80017e4:	701a      	strb	r2, [r3, #0]
	if ( swarm_cc ( rt_0_at , rt_ok_answer ) )
 80017e6:	4b63      	ldr	r3, [pc, #396]	; (8001974 <m138_init+0x1c4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a63      	ldr	r2, [pc, #396]	; (8001978 <m138_init+0x1c8>)
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	4611      	mov	r1, r2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fe7d 	bl	80014f0 <swarm_cc>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d011      	beq.n	8001820 <m138_init+0x70>
		if ( swarm_cc ( rt_q_rate_at , rt_0_answer ) )
 80017fc:	4b5f      	ldr	r3, [pc, #380]	; (800197c <m138_init+0x1cc>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a5f      	ldr	r2, [pc, #380]	; (8001980 <m138_init+0x1d0>)
 8001802:	6812      	ldr	r2, [r2, #0]
 8001804:	4611      	mov	r1, r2
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fe72 	bl	80014f0 <swarm_cc>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d006      	beq.n	8001820 <m138_init+0x70>
			m138_init_status_reg = m138_init_status_reg | 2 ;
 8001812:	4b57      	ldr	r3, [pc, #348]	; (8001970 <m138_init+0x1c0>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	f043 0302 	orr.w	r3, r3, #2
 800181a:	b2da      	uxtb	r2, r3
 800181c:	4b54      	ldr	r3, [pc, #336]	; (8001970 <m138_init+0x1c0>)
 800181e:	701a      	strb	r2, [r3, #0]
	if ( swarm_cc ( pw_0_at , pw_ok_answer ) )
 8001820:	4b58      	ldr	r3, [pc, #352]	; (8001984 <m138_init+0x1d4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a58      	ldr	r2, [pc, #352]	; (8001988 <m138_init+0x1d8>)
 8001826:	6812      	ldr	r2, [r2, #0]
 8001828:	4611      	mov	r1, r2
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fe60 	bl	80014f0 <swarm_cc>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d011      	beq.n	800185a <m138_init+0xaa>
		if ( swarm_cc ( pw_q_rate_at , pw_0_answer ) )
 8001836:	4b55      	ldr	r3, [pc, #340]	; (800198c <m138_init+0x1dc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a55      	ldr	r2, [pc, #340]	; (8001990 <m138_init+0x1e0>)
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	4611      	mov	r1, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fe55 	bl	80014f0 <swarm_cc>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d006      	beq.n	800185a <m138_init+0xaa>
			m138_init_status_reg = m138_init_status_reg | 4 ;
 800184c:	4b48      	ldr	r3, [pc, #288]	; (8001970 <m138_init+0x1c0>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	f043 0304 	orr.w	r3, r3, #4
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4b46      	ldr	r3, [pc, #280]	; (8001970 <m138_init+0x1c0>)
 8001858:	701a      	strb	r2, [r3, #0]
	if ( swarm_cc ( dt_0_at , dt_ok_answer ) )
 800185a:	4b4e      	ldr	r3, [pc, #312]	; (8001994 <m138_init+0x1e4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a4e      	ldr	r2, [pc, #312]	; (8001998 <m138_init+0x1e8>)
 8001860:	6812      	ldr	r2, [r2, #0]
 8001862:	4611      	mov	r1, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fe43 	bl	80014f0 <swarm_cc>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d011      	beq.n	8001894 <m138_init+0xe4>
		if ( swarm_cc ( dt_q_rate_at , dt_0_answer ) )
 8001870:	4b4a      	ldr	r3, [pc, #296]	; (800199c <m138_init+0x1ec>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a4a      	ldr	r2, [pc, #296]	; (80019a0 <m138_init+0x1f0>)
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	4611      	mov	r1, r2
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fe38 	bl	80014f0 <swarm_cc>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d006      	beq.n	8001894 <m138_init+0xe4>
			m138_init_status_reg = m138_init_status_reg | 8 ;
 8001886:	4b3a      	ldr	r3, [pc, #232]	; (8001970 <m138_init+0x1c0>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	f043 0308 	orr.w	r3, r3, #8
 800188e:	b2da      	uxtb	r2, r3
 8001890:	4b37      	ldr	r3, [pc, #220]	; (8001970 <m138_init+0x1c0>)
 8001892:	701a      	strb	r2, [r3, #0]
	if ( swarm_cc ( gs_0_at , gs_ok_answer ) )
 8001894:	4b43      	ldr	r3, [pc, #268]	; (80019a4 <m138_init+0x1f4>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a43      	ldr	r2, [pc, #268]	; (80019a8 <m138_init+0x1f8>)
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	4611      	mov	r1, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fe26 	bl	80014f0 <swarm_cc>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d011      	beq.n	80018ce <m138_init+0x11e>
		if ( swarm_cc ( gs_q_rate_at , gs_0_answer ) )
 80018aa:	4b40      	ldr	r3, [pc, #256]	; (80019ac <m138_init+0x1fc>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a40      	ldr	r2, [pc, #256]	; (80019b0 <m138_init+0x200>)
 80018b0:	6812      	ldr	r2, [r2, #0]
 80018b2:	4611      	mov	r1, r2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fe1b 	bl	80014f0 <swarm_cc>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d006      	beq.n	80018ce <m138_init+0x11e>
			m138_init_status_reg = m138_init_status_reg | 16 ;
 80018c0:	4b2b      	ldr	r3, [pc, #172]	; (8001970 <m138_init+0x1c0>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	f043 0310 	orr.w	r3, r3, #16
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4b29      	ldr	r3, [pc, #164]	; (8001970 <m138_init+0x1c0>)
 80018cc:	701a      	strb	r2, [r3, #0]
	if ( swarm_cc ( gj_0_at , gj_ok_answer ) )
 80018ce:	4b39      	ldr	r3, [pc, #228]	; (80019b4 <m138_init+0x204>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a39      	ldr	r2, [pc, #228]	; (80019b8 <m138_init+0x208>)
 80018d4:	6812      	ldr	r2, [r2, #0]
 80018d6:	4611      	mov	r1, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fe09 	bl	80014f0 <swarm_cc>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d011      	beq.n	8001908 <m138_init+0x158>
		if ( swarm_cc ( gj_q_rate_at , gj_0_answer ) )
 80018e4:	4b35      	ldr	r3, [pc, #212]	; (80019bc <m138_init+0x20c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a35      	ldr	r2, [pc, #212]	; (80019c0 <m138_init+0x210>)
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	4611      	mov	r1, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fdfe 	bl	80014f0 <swarm_cc>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d006      	beq.n	8001908 <m138_init+0x158>
			m138_init_status_reg = m138_init_status_reg | 32 ;
 80018fa:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <m138_init+0x1c0>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	f043 0320 	orr.w	r3, r3, #32
 8001902:	b2da      	uxtb	r2, r3
 8001904:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <m138_init+0x1c0>)
 8001906:	701a      	strb	r2, [r3, #0]
	if ( swarm_cc ( gn_0_at , gn_ok_answer ) )
 8001908:	4b2e      	ldr	r3, [pc, #184]	; (80019c4 <m138_init+0x214>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a2e      	ldr	r2, [pc, #184]	; (80019c8 <m138_init+0x218>)
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	4611      	mov	r1, r2
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fdec 	bl	80014f0 <swarm_cc>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d011      	beq.n	8001942 <m138_init+0x192>
		if ( swarm_cc ( gn_q_rate_at , gn_0_answer ) )
 800191e:	4b2b      	ldr	r3, [pc, #172]	; (80019cc <m138_init+0x21c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a2b      	ldr	r2, [pc, #172]	; (80019d0 <m138_init+0x220>)
 8001924:	6812      	ldr	r2, [r2, #0]
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fde1 	bl	80014f0 <swarm_cc>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d006      	beq.n	8001942 <m138_init+0x192>
			m138_init_status_reg = m138_init_status_reg | 64 ;
 8001934:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <m138_init+0x1c0>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <m138_init+0x1c0>)
 8001940:	701a      	strb	r2, [r3, #0]

	sprintf ( dbg_uart_tx_buff , "%s%u\n" , "m138_init_status_reg = " , m138_init_status_reg ) ;
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <m138_init+0x1c0>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	4a23      	ldr	r2, [pc, #140]	; (80019d4 <m138_init+0x224>)
 8001948:	4923      	ldr	r1, [pc, #140]	; (80019d8 <m138_init+0x228>)
 800194a:	4824      	ldr	r0, [pc, #144]	; (80019dc <m138_init+0x22c>)
 800194c:	f004 fa36 	bl	8005dbc <siprintf>
	send_string_2_dbg_uart ( dbg_uart_tx_buff ) ;
 8001950:	4822      	ldr	r0, [pc, #136]	; (80019dc <m138_init+0x22c>)
 8001952:	f000 f873 	bl	8001a3c <send_string_2_dbg_uart>

	return m138_init_status_reg ;
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <m138_init+0x1c0>)
 8001958:	781b      	ldrb	r3, [r3, #0]
}
 800195a:	4618      	mov	r0, r3
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000004 	.word	0x20000004
 8001964:	20000044 	.word	0x20000044
 8001968:	20000448 	.word	0x20000448
 800196c:	2000070c 	.word	0x2000070c
 8001970:	2000070a 	.word	0x2000070a
 8001974:	20000008 	.word	0x20000008
 8001978:	20000048 	.word	0x20000048
 800197c:	2000000c 	.word	0x2000000c
 8001980:	2000004c 	.word	0x2000004c
 8001984:	20000010 	.word	0x20000010
 8001988:	20000050 	.word	0x20000050
 800198c:	20000014 	.word	0x20000014
 8001990:	20000054 	.word	0x20000054
 8001994:	2000001c 	.word	0x2000001c
 8001998:	2000005c 	.word	0x2000005c
 800199c:	20000020 	.word	0x20000020
 80019a0:	20000060 	.word	0x20000060
 80019a4:	20000024 	.word	0x20000024
 80019a8:	20000064 	.word	0x20000064
 80019ac:	20000028 	.word	0x20000028
 80019b0:	20000068 	.word	0x20000068
 80019b4:	2000002c 	.word	0x2000002c
 80019b8:	2000006c 	.word	0x2000006c
 80019bc:	20000030 	.word	0x20000030
 80019c0:	20000070 	.word	0x20000070
 80019c4:	20000034 	.word	0x20000034
 80019c8:	20000074 	.word	0x20000074
 80019cc:	20000038 	.word	0x20000038
 80019d0:	20000078 	.word	0x20000078
 80019d4:	080093f4 	.word	0x080093f4
 80019d8:	080093ec 	.word	0x080093ec
 80019dc:	20000640 	.word	0x20000640

080019e0 <clean_swarm_uart_rx_buff>:

void clean_swarm_uart_rx_buff ()
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
	uint8_t i ;
	for ( i = 0 ; i < SWARM_UART_RX_MAX_BUFF_SIZE ; i++ )
 80019e6:	2300      	movs	r3, #0
 80019e8:	71fb      	strb	r3, [r7, #7]
 80019ea:	e006      	b.n	80019fa <clean_swarm_uart_rx_buff+0x1a>
		swarm_uart_rx_buff[i] = '\0' ;
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	4a08      	ldr	r2, [pc, #32]	; (8001a10 <clean_swarm_uart_rx_buff+0x30>)
 80019f0:	2100      	movs	r1, #0
 80019f2:	54d1      	strb	r1, [r2, r3]
	for ( i = 0 ; i < SWARM_UART_RX_MAX_BUFF_SIZE ; i++ )
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	3301      	adds	r3, #1
 80019f8:	71fb      	strb	r3, [r7, #7]
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	2b63      	cmp	r3, #99	; 0x63
 80019fe:	d9f5      	bls.n	80019ec <clean_swarm_uart_rx_buff+0xc>
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20000448 	.word	0x20000448

08001a14 <send_string_2_swarm_uart>:
{
	HAL_GPIO_TogglePin ( GREEN_GPIO_Port , GREEN_Pin ) ;
}

HAL_StatusTypeDef send_string_2_swarm_uart ( char* s , int l )
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
	return HAL_UART_Transmit ( SWARM_UART_HANDLER , (uint8_t *) s , l , UART_TX_TIMEOUT ) ;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	2364      	movs	r3, #100	; 0x64
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	4804      	ldr	r0, [pc, #16]	; (8001a38 <send_string_2_swarm_uart+0x24>)
 8001a28:	f002 ff4e 	bl	80048c8 <HAL_UART_Transmit>
 8001a2c:	4603      	mov	r3, r0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200002f8 	.word	0x200002f8

08001a3c <send_string_2_dbg_uart>:
HAL_StatusTypeDef send_string_2_dbg_uart ( char* s )
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	return HAL_UART_Transmit ( DBG_UART_HANDLER , (uint8_t *) s , strlen ( s ) , UART_TX_TIMEOUT ) ;
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7fe fbc3 	bl	80001d0 <strlen>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	2364      	movs	r3, #100	; 0x64
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	4804      	ldr	r0, [pc, #16]	; (8001a64 <send_string_2_dbg_uart+0x28>)
 8001a54:	f002 ff38 	bl	80048c8 <HAL_UART_Transmit>
 8001a58:	4603      	mov	r3, r0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	2000037c 	.word	0x2000037c

08001a68 <nmea_checksum>:

uint8_t nmea_checksum ( const char *message , size_t len )
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
	size_t i = 0 ;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
	uint8_t cs ;
	if ( message [0] == '$' )
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b24      	cmp	r3, #36	; 0x24
 8001a7c:	d102      	bne.n	8001a84 <nmea_checksum+0x1c>
		i++ ;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	3301      	adds	r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
	for ( cs = 0 ; ( i < len ) && message [i] ; i++ )
 8001a84:	2300      	movs	r3, #0
 8001a86:	72fb      	strb	r3, [r7, #11]
 8001a88:	e009      	b.n	8001a9e <nmea_checksum+0x36>
		cs ^= ( (uint8_t) message [i] ) ;
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4413      	add	r3, r2
 8001a90:	781a      	ldrb	r2, [r3, #0]
 8001a92:	7afb      	ldrb	r3, [r7, #11]
 8001a94:	4053      	eors	r3, r2
 8001a96:	72fb      	strb	r3, [r7, #11]
	for ( cs = 0 ; ( i < len ) && message [i] ; i++ )
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d205      	bcs.n	8001ab2 <nmea_checksum+0x4a>
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4413      	add	r3, r2
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1eb      	bne.n	8001a8a <nmea_checksum+0x22>
	return cs;
 8001ab2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <tim_init>:

void tim_init ()
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( &TIM_HANDLER , TIM_IT_UPDATE ) ;
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <tim_init+0x18>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f06f 0201 	mvn.w	r2, #1
 8001acc:	611a      	str	r2, [r3, #16]
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	200002ac 	.word	0x200002ac

08001adc <tim_start>:
void tim_start ()
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT ( &TIM_HANDLER ) ;
 8001ae0:	4803      	ldr	r0, [pc, #12]	; (8001af0 <tim_start+0x14>)
 8001ae2:	f002 fbf1 	bl	80042c8 <HAL_TIM_Base_Start_IT>
	tim_on = 1 ;
 8001ae6:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <tim_start+0x18>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	701a      	strb	r2, [r3, #0]
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	200002ac 	.word	0x200002ac
 8001af4:	20000708 	.word	0x20000708

08001af8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM_INSTANCE )
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a06      	ldr	r2, [pc, #24]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d105      	bne.n	8001b16 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		HAL_TIM_Base_Stop_IT ( &TIM_HANDLER ) ;
 8001b0a:	4806      	ldr	r0, [pc, #24]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001b0c:	f002 fc30 	bl	8004370 <HAL_TIM_Base_Stop_IT>
		tim_on = 0 ;
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
	}
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40001000 	.word	0x40001000
 8001b24:	200002ac 	.word	0x200002ac
 8001b28:	20000708 	.word	0x20000708

08001b2c <receive_swarm_uart_dma>:

HAL_StatusTypeDef receive_swarm_uart_dma ()
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0

	//__HAL_UART_CLEAR_IDLEFLAG ( SWARM_UART_HANDLER ) ;

	//__HAL_UART_RESET_HANDLE_STATE (SWARM_UART_HANDLER) ;
*/
	HAL_StatusTypeDef r = HAL_UARTEx_ReceiveToIdle_DMA ( SWARM_UART_HANDLER , (uint8_t*) swarm_uart_rx_buff , SWARM_UART_RX_MAX_BUFF_SIZE ) ;
 8001b32:	2264      	movs	r2, #100	; 0x64
 8001b34:	490d      	ldr	r1, [pc, #52]	; (8001b6c <receive_swarm_uart_dma+0x40>)
 8001b36:	480e      	ldr	r0, [pc, #56]	; (8001b70 <receive_swarm_uart_dma+0x44>)
 8001b38:	f004 f8a5 	bl	8005c86 <HAL_UARTEx_ReceiveToIdle_DMA>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	71fb      	strb	r3, [r7, #7]
	if ( r == HAL_OK )
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10b      	bne.n	8001b5e <receive_swarm_uart_dma+0x32>
	{
		answer_from_swarm = 1 ;
 8001b46:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <receive_swarm_uart_dma+0x48>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	701a      	strb	r2, [r3, #0]
		__HAL_DMA_DISABLE_IT ( &hdma_usart1_rx, DMA_IT_HT ) ; //Disable Half Transfer interrupt.
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <receive_swarm_uart_dma+0x4c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <receive_swarm_uart_dma+0x4c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0204 	bic.w	r2, r2, #4
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	e000      	b.n	8001b60 <receive_swarm_uart_dma+0x34>
	}
	else
	{
		__NOP();
 8001b5e:	bf00      	nop
	}
	return r ;
 8001b60:	79fb      	ldrb	r3, [r7, #7]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000448 	.word	0x20000448
 8001b70:	200002f8 	.word	0x200002f8
 8001b74:	20000709 	.word	0x20000709
 8001b78:	20000400 	.word	0x20000400

08001b7c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback ( UART_HandleTypeDef *huart , uint16_t Size )
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	807b      	strh	r3, [r7, #2]
    if ( huart->Instance == SWARM_UART_INSTANCE )
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a07      	ldr	r2, [pc, #28]	; (8001bac <HAL_UARTEx_RxEventCallback+0x30>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d106      	bne.n	8001ba0 <HAL_UARTEx_RxEventCallback+0x24>
    {
    	answer_from_swarm = 2 ;
 8001b92:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <HAL_UARTEx_RxEventCallback+0x34>)
 8001b94:	2202      	movs	r2, #2
 8001b96:	701a      	strb	r2, [r3, #0]
    	swarm_uart_rx_buff[Size] = '\0' ;
 8001b98:	887b      	ldrh	r3, [r7, #2]
 8001b9a:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <HAL_UARTEx_RxEventCallback+0x38>)
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	54d1      	strb	r1, [r2, r3]
    }
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	40013800 	.word	0x40013800
 8001bb0:	20000709 	.word	0x20000709
 8001bb4:	20000448 	.word	0x20000448

08001bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bbc:	b672      	cpsid	i
}
 8001bbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <Error_Handler+0x8>
	...

08001bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bca:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <HAL_MspInit+0x44>)
 8001bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bce:	4a0e      	ldr	r2, [pc, #56]	; (8001c08 <HAL_MspInit+0x44>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6613      	str	r3, [r2, #96]	; 0x60
 8001bd6:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <HAL_MspInit+0x44>)
 8001bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <HAL_MspInit+0x44>)
 8001be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be6:	4a08      	ldr	r2, [pc, #32]	; (8001c08 <HAL_MspInit+0x44>)
 8001be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bec:	6593      	str	r3, [r2, #88]	; 0x58
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_MspInit+0x44>)
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	603b      	str	r3, [r7, #0]
 8001bf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000

08001c0c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b098      	sub	sp, #96	; 0x60
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c14:	f107 030c 	add.w	r3, r7, #12
 8001c18:	2254      	movs	r2, #84	; 0x54
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f004 f8c5 	bl	8005dac <memset>
  if(hrtc->Instance==RTC)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a13      	ldr	r2, [pc, #76]	; (8001c74 <HAL_RTC_MspInit+0x68>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d11f      	bne.n	8001c6c <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c30:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c36:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c38:	f107 030c 	add.w	r3, r7, #12
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f001 feb1 	bl	80039a4 <HAL_RCCEx_PeriphCLKConfig>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001c48:	f7ff ffb6 	bl	8001bb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <HAL_RTC_MspInit+0x6c>)
 8001c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c52:	4a09      	ldr	r2, [pc, #36]	; (8001c78 <HAL_RTC_MspInit+0x6c>)
 8001c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2100      	movs	r1, #0
 8001c60:	2003      	movs	r0, #3
 8001c62:	f000 fbc4 	bl	80023ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001c66:	2003      	movs	r0, #3
 8001c68:	f000 fbdd 	bl	8002426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001c6c:	bf00      	nop
 8001c6e:	3760      	adds	r7, #96	; 0x60
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40002800 	.word	0x40002800
 8001c78:	40021000 	.word	0x40021000

08001c7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0d      	ldr	r2, [pc, #52]	; (8001cc0 <HAL_TIM_Base_MspInit+0x44>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d113      	bne.n	8001cb6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c8e:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <HAL_TIM_Base_MspInit+0x48>)
 8001c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c92:	4a0c      	ldr	r2, [pc, #48]	; (8001cc4 <HAL_TIM_Base_MspInit+0x48>)
 8001c94:	f043 0310 	orr.w	r3, r3, #16
 8001c98:	6593      	str	r3, [r2, #88]	; 0x58
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <HAL_TIM_Base_MspInit+0x48>)
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2100      	movs	r1, #0
 8001caa:	2036      	movs	r0, #54	; 0x36
 8001cac:	f000 fb9f 	bl	80023ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cb0:	2036      	movs	r0, #54	; 0x36
 8001cb2:	f000 fbb8 	bl	8002426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40001000 	.word	0x40001000
 8001cc4:	40021000 	.word	0x40021000

08001cc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b0a0      	sub	sp, #128	; 0x80
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ce0:	f107 0318 	add.w	r3, r7, #24
 8001ce4:	2254      	movs	r2, #84	; 0x54
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f004 f85f 	bl	8005dac <memset>
  if(huart->Instance==USART1)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a56      	ldr	r2, [pc, #344]	; (8001e4c <HAL_UART_MspInit+0x184>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d169      	bne.n	8001dcc <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d00:	f107 0318 	add.w	r3, r7, #24
 8001d04:	4618      	mov	r0, r3
 8001d06:	f001 fe4d 	bl	80039a4 <HAL_RCCEx_PeriphCLKConfig>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d10:	f7ff ff52 	bl	8001bb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d14:	4b4e      	ldr	r3, [pc, #312]	; (8001e50 <HAL_UART_MspInit+0x188>)
 8001d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d18:	4a4d      	ldr	r2, [pc, #308]	; (8001e50 <HAL_UART_MspInit+0x188>)
 8001d1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d1e:	6613      	str	r3, [r2, #96]	; 0x60
 8001d20:	4b4b      	ldr	r3, [pc, #300]	; (8001e50 <HAL_UART_MspInit+0x188>)
 8001d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2c:	4b48      	ldr	r3, [pc, #288]	; (8001e50 <HAL_UART_MspInit+0x188>)
 8001d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d30:	4a47      	ldr	r2, [pc, #284]	; (8001e50 <HAL_UART_MspInit+0x188>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d38:	4b45      	ldr	r3, [pc, #276]	; (8001e50 <HAL_UART_MspInit+0x188>)
 8001d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d44:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d48:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d52:	2303      	movs	r3, #3
 8001d54:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d56:	2307      	movs	r3, #7
 8001d58:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d64:	f000 fdf0 	bl	8002948 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001d68:	4b3a      	ldr	r3, [pc, #232]	; (8001e54 <HAL_UART_MspInit+0x18c>)
 8001d6a:	4a3b      	ldr	r2, [pc, #236]	; (8001e58 <HAL_UART_MspInit+0x190>)
 8001d6c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001d6e:	4b39      	ldr	r3, [pc, #228]	; (8001e54 <HAL_UART_MspInit+0x18c>)
 8001d70:	2202      	movs	r2, #2
 8001d72:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d74:	4b37      	ldr	r3, [pc, #220]	; (8001e54 <HAL_UART_MspInit+0x18c>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d7a:	4b36      	ldr	r3, [pc, #216]	; (8001e54 <HAL_UART_MspInit+0x18c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d80:	4b34      	ldr	r3, [pc, #208]	; (8001e54 <HAL_UART_MspInit+0x18c>)
 8001d82:	2280      	movs	r2, #128	; 0x80
 8001d84:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d86:	4b33      	ldr	r3, [pc, #204]	; (8001e54 <HAL_UART_MspInit+0x18c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d8c:	4b31      	ldr	r3, [pc, #196]	; (8001e54 <HAL_UART_MspInit+0x18c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001d92:	4b30      	ldr	r3, [pc, #192]	; (8001e54 <HAL_UART_MspInit+0x18c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d98:	4b2e      	ldr	r3, [pc, #184]	; (8001e54 <HAL_UART_MspInit+0x18c>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d9e:	482d      	ldr	r0, [pc, #180]	; (8001e54 <HAL_UART_MspInit+0x18c>)
 8001da0:	f000 fb5c 	bl	800245c <HAL_DMA_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001daa:	f7ff ff05 	bl	8001bb8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a28      	ldr	r2, [pc, #160]	; (8001e54 <HAL_UART_MspInit+0x18c>)
 8001db2:	671a      	str	r2, [r3, #112]	; 0x70
 8001db4:	4a27      	ldr	r2, [pc, #156]	; (8001e54 <HAL_UART_MspInit+0x18c>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	2025      	movs	r0, #37	; 0x25
 8001dc0:	f000 fb15 	bl	80023ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dc4:	2025      	movs	r0, #37	; 0x25
 8001dc6:	f000 fb2e 	bl	8002426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001dca:	e03b      	b.n	8001e44 <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==USART2)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a22      	ldr	r2, [pc, #136]	; (8001e5c <HAL_UART_MspInit+0x194>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d136      	bne.n	8001e44 <HAL_UART_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dde:	f107 0318 	add.w	r3, r7, #24
 8001de2:	4618      	mov	r0, r3
 8001de4:	f001 fdde 	bl	80039a4 <HAL_RCCEx_PeriphCLKConfig>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8001dee:	f7ff fee3 	bl	8001bb8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001df2:	4b17      	ldr	r3, [pc, #92]	; (8001e50 <HAL_UART_MspInit+0x188>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df6:	4a16      	ldr	r2, [pc, #88]	; (8001e50 <HAL_UART_MspInit+0x188>)
 8001df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dfc:	6593      	str	r3, [r2, #88]	; 0x58
 8001dfe:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <HAL_UART_MspInit+0x188>)
 8001e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0a:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <HAL_UART_MspInit+0x188>)
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0e:	4a10      	ldr	r2, [pc, #64]	; (8001e50 <HAL_UART_MspInit+0x188>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e16:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <HAL_UART_MspInit+0x188>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e22:	230c      	movs	r3, #12
 8001e24:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e32:	2307      	movs	r3, #7
 8001e34:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e36:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e40:	f000 fd82 	bl	8002948 <HAL_GPIO_Init>
}
 8001e44:	bf00      	nop
 8001e46:	3780      	adds	r7, #128	; 0x80
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40013800 	.word	0x40013800
 8001e50:	40021000 	.word	0x40021000
 8001e54:	20000400 	.word	0x20000400
 8001e58:	40020058 	.word	0x40020058
 8001e5c:	40004400 	.word	0x40004400

08001e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <NMI_Handler+0x4>

08001e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6a:	e7fe      	b.n	8001e6a <HardFault_Handler+0x4>

08001e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <MemManage_Handler+0x4>

08001e72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e76:	e7fe      	b.n	8001e76 <BusFault_Handler+0x4>

08001e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <UsageFault_Handler+0x4>

08001e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eac:	f000 f980 	bl	80021b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001eb8:	4802      	ldr	r0, [pc, #8]	; (8001ec4 <RTC_WKUP_IRQHandler+0x10>)
 8001eba:	f002 f97d 	bl	80041b8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000288 	.word	0x20000288

08001ec8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001ecc:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <DMA1_Channel5_IRQHandler+0x10>)
 8001ece:	f000 fc5c 	bl	800278a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000400 	.word	0x20000400

08001edc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <USART1_IRQHandler+0x10>)
 8001ee2:	f002 fd85 	bl	80049f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	200002f8 	.word	0x200002f8

08001ef0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <TIM6_DAC_IRQHandler+0x10>)
 8001ef6:	f002 fa6a 	bl	80043ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	200002ac 	.word	0x200002ac

08001f04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
	return 1;
 8001f08:	2301      	movs	r3, #1
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <_kill>:

int _kill(int pid, int sig)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f1e:	f003 ff0d 	bl	8005d3c <__errno>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2216      	movs	r2, #22
 8001f26:	601a      	str	r2, [r3, #0]
	return -1;
 8001f28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <_exit>:

void _exit (int status)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ffe7 	bl	8001f14 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f46:	e7fe      	b.n	8001f46 <_exit+0x12>

08001f48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	e00a      	b.n	8001f70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f5a:	f3af 8000 	nop.w
 8001f5e:	4601      	mov	r1, r0
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	60ba      	str	r2, [r7, #8]
 8001f66:	b2ca      	uxtb	r2, r1
 8001f68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	dbf0      	blt.n	8001f5a <_read+0x12>
	}

return len;
 8001f78:	687b      	ldr	r3, [r7, #4]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b086      	sub	sp, #24
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	e009      	b.n	8001fa8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	60ba      	str	r2, [r7, #8]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	dbf1      	blt.n	8001f94 <_write+0x12>
	}
	return len;
 8001fb0:	687b      	ldr	r3, [r7, #4]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <_close>:

int _close(int file)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
	return -1;
 8001fc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fe2:	605a      	str	r2, [r3, #4]
	return 0;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <_isatty>:

int _isatty(int file)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
	return 1;
 8001ffa:	2301      	movs	r3, #1
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
	return 0;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800202c:	4a14      	ldr	r2, [pc, #80]	; (8002080 <_sbrk+0x5c>)
 800202e:	4b15      	ldr	r3, [pc, #84]	; (8002084 <_sbrk+0x60>)
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002038:	4b13      	ldr	r3, [pc, #76]	; (8002088 <_sbrk+0x64>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d102      	bne.n	8002046 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002040:	4b11      	ldr	r3, [pc, #68]	; (8002088 <_sbrk+0x64>)
 8002042:	4a12      	ldr	r2, [pc, #72]	; (800208c <_sbrk+0x68>)
 8002044:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002046:	4b10      	ldr	r3, [pc, #64]	; (8002088 <_sbrk+0x64>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	429a      	cmp	r2, r3
 8002052:	d207      	bcs.n	8002064 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002054:	f003 fe72 	bl	8005d3c <__errno>
 8002058:	4603      	mov	r3, r0
 800205a:	220c      	movs	r2, #12
 800205c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800205e:	f04f 33ff 	mov.w	r3, #4294967295
 8002062:	e009      	b.n	8002078 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002064:	4b08      	ldr	r3, [pc, #32]	; (8002088 <_sbrk+0x64>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800206a:	4b07      	ldr	r3, [pc, #28]	; (8002088 <_sbrk+0x64>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	4a05      	ldr	r2, [pc, #20]	; (8002088 <_sbrk+0x64>)
 8002074:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002076:	68fb      	ldr	r3, [r7, #12]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20010000 	.word	0x20010000
 8002084:	00000400 	.word	0x00000400
 8002088:	20000784 	.word	0x20000784
 800208c:	200007a0 	.word	0x200007a0

08002090 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <SystemInit+0x20>)
 8002096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209a:	4a05      	ldr	r2, [pc, #20]	; (80020b0 <SystemInit+0x20>)
 800209c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020b8:	f7ff ffea 	bl	8002090 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020bc:	480c      	ldr	r0, [pc, #48]	; (80020f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80020be:	490d      	ldr	r1, [pc, #52]	; (80020f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020c0:	4a0d      	ldr	r2, [pc, #52]	; (80020f8 <LoopForever+0xe>)
  movs r3, #0
 80020c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c4:	e002      	b.n	80020cc <LoopCopyDataInit>

080020c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ca:	3304      	adds	r3, #4

080020cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d0:	d3f9      	bcc.n	80020c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020d2:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80020d4:	4c0a      	ldr	r4, [pc, #40]	; (8002100 <LoopForever+0x16>)
  movs r3, #0
 80020d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020d8:	e001      	b.n	80020de <LoopFillZerobss>

080020da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020dc:	3204      	adds	r2, #4

080020de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e0:	d3fb      	bcc.n	80020da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020e2:	f003 fe31 	bl	8005d48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020e6:	f7fe ff5f 	bl	8000fa8 <main>

080020ea <LoopForever>:

LoopForever:
    b LoopForever
 80020ea:	e7fe      	b.n	80020ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020ec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80020f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f4:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 80020f8:	080098f0 	.word	0x080098f0
  ldr r2, =_sbss
 80020fc:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 8002100:	2000079c 	.word	0x2000079c

08002104 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002104:	e7fe      	b.n	8002104 <ADC1_IRQHandler>

08002106 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800210c:	2300      	movs	r3, #0
 800210e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002110:	2003      	movs	r0, #3
 8002112:	f000 f961 	bl	80023d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002116:	2000      	movs	r0, #0
 8002118:	f000 f80e 	bl	8002138 <HAL_InitTick>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	71fb      	strb	r3, [r7, #7]
 8002126:	e001      	b.n	800212c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002128:	f7ff fd4c 	bl	8001bc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800212c:	79fb      	ldrb	r3, [r7, #7]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002144:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <HAL_InitTick+0x6c>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d023      	beq.n	8002194 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800214c:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <HAL_InitTick+0x70>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <HAL_InitTick+0x6c>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	4619      	mov	r1, r3
 8002156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800215a:	fbb3 f3f1 	udiv	r3, r3, r1
 800215e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002162:	4618      	mov	r0, r3
 8002164:	f000 f96d 	bl	8002442 <HAL_SYSTICK_Config>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10f      	bne.n	800218e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b0f      	cmp	r3, #15
 8002172:	d809      	bhi.n	8002188 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002174:	2200      	movs	r2, #0
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	f04f 30ff 	mov.w	r0, #4294967295
 800217c:	f000 f937 	bl	80023ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002180:	4a0a      	ldr	r2, [pc, #40]	; (80021ac <HAL_InitTick+0x74>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	e007      	b.n	8002198 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
 800218c:	e004      	b.n	8002198 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	73fb      	strb	r3, [r7, #15]
 8002192:	e001      	b.n	8002198 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002198:	7bfb      	ldrb	r3, [r7, #15]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000094 	.word	0x20000094
 80021a8:	2000008c 	.word	0x2000008c
 80021ac:	20000090 	.word	0x20000090

080021b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_IncTick+0x20>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	461a      	mov	r2, r3
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HAL_IncTick+0x24>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4413      	add	r3, r2
 80021c0:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <HAL_IncTick+0x24>)
 80021c2:	6013      	str	r3, [r2, #0]
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	20000094 	.word	0x20000094
 80021d4:	20000788 	.word	0x20000788

080021d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return uwTick;
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <HAL_GetTick+0x14>)
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	20000788 	.word	0x20000788

080021f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021f8:	f7ff ffee 	bl	80021d8 <HAL_GetTick>
 80021fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002208:	d005      	beq.n	8002216 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800220a:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <HAL_Delay+0x44>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4413      	add	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002216:	bf00      	nop
 8002218:	f7ff ffde 	bl	80021d8 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	429a      	cmp	r2, r3
 8002226:	d8f7      	bhi.n	8002218 <HAL_Delay+0x28>
  {
  }
}
 8002228:	bf00      	nop
 800222a:	bf00      	nop
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000094 	.word	0x20000094

08002238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002254:	4013      	ands	r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002260:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226a:	4a04      	ldr	r2, [pc, #16]	; (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	60d3      	str	r3, [r2, #12]
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <__NVIC_GetPriorityGrouping+0x18>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	0a1b      	lsrs	r3, r3, #8
 800228a:	f003 0307 	and.w	r3, r3, #7
}
 800228e:	4618      	mov	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	db0b      	blt.n	80022c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	f003 021f 	and.w	r2, r3, #31
 80022b4:	4907      	ldr	r1, [pc, #28]	; (80022d4 <__NVIC_EnableIRQ+0x38>)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	2001      	movs	r0, #1
 80022be:	fa00 f202 	lsl.w	r2, r0, r2
 80022c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000e100 	.word	0xe000e100

080022d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	6039      	str	r1, [r7, #0]
 80022e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	db0a      	blt.n	8002302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	490c      	ldr	r1, [pc, #48]	; (8002324 <__NVIC_SetPriority+0x4c>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	0112      	lsls	r2, r2, #4
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	440b      	add	r3, r1
 80022fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002300:	e00a      	b.n	8002318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4908      	ldr	r1, [pc, #32]	; (8002328 <__NVIC_SetPriority+0x50>)
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	3b04      	subs	r3, #4
 8002310:	0112      	lsls	r2, r2, #4
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	440b      	add	r3, r1
 8002316:	761a      	strb	r2, [r3, #24]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000e100 	.word	0xe000e100
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800232c:	b480      	push	{r7}
 800232e:	b089      	sub	sp, #36	; 0x24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f1c3 0307 	rsb	r3, r3, #7
 8002346:	2b04      	cmp	r3, #4
 8002348:	bf28      	it	cs
 800234a:	2304      	movcs	r3, #4
 800234c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3304      	adds	r3, #4
 8002352:	2b06      	cmp	r3, #6
 8002354:	d902      	bls.n	800235c <NVIC_EncodePriority+0x30>
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3b03      	subs	r3, #3
 800235a:	e000      	b.n	800235e <NVIC_EncodePriority+0x32>
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002360:	f04f 32ff 	mov.w	r2, #4294967295
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43da      	mvns	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	401a      	ands	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002374:	f04f 31ff 	mov.w	r1, #4294967295
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	fa01 f303 	lsl.w	r3, r1, r3
 800237e:	43d9      	mvns	r1, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002384:	4313      	orrs	r3, r2
         );
}
 8002386:	4618      	mov	r0, r3
 8002388:	3724      	adds	r7, #36	; 0x24
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3b01      	subs	r3, #1
 80023a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023a4:	d301      	bcc.n	80023aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023a6:	2301      	movs	r3, #1
 80023a8:	e00f      	b.n	80023ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023aa:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <SysTick_Config+0x40>)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023b2:	210f      	movs	r1, #15
 80023b4:	f04f 30ff 	mov.w	r0, #4294967295
 80023b8:	f7ff ff8e 	bl	80022d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <SysTick_Config+0x40>)
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023c2:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <SysTick_Config+0x40>)
 80023c4:	2207      	movs	r2, #7
 80023c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	e000e010 	.word	0xe000e010

080023d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff ff29 	bl	8002238 <__NVIC_SetPriorityGrouping>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b086      	sub	sp, #24
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	4603      	mov	r3, r0
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002400:	f7ff ff3e 	bl	8002280 <__NVIC_GetPriorityGrouping>
 8002404:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	6978      	ldr	r0, [r7, #20]
 800240c:	f7ff ff8e 	bl	800232c <NVIC_EncodePriority>
 8002410:	4602      	mov	r2, r0
 8002412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff5d 	bl	80022d8 <__NVIC_SetPriority>
}
 800241e:	bf00      	nop
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	4603      	mov	r3, r0
 800242e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff ff31 	bl	800229c <__NVIC_EnableIRQ>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff ffa2 	bl	8002394 <SysTick_Config>
 8002450:	4603      	mov	r3, r0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e098      	b.n	80025a0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	4b4d      	ldr	r3, [pc, #308]	; (80025ac <HAL_DMA_Init+0x150>)
 8002476:	429a      	cmp	r2, r3
 8002478:	d80f      	bhi.n	800249a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	4b4b      	ldr	r3, [pc, #300]	; (80025b0 <HAL_DMA_Init+0x154>)
 8002482:	4413      	add	r3, r2
 8002484:	4a4b      	ldr	r2, [pc, #300]	; (80025b4 <HAL_DMA_Init+0x158>)
 8002486:	fba2 2303 	umull	r2, r3, r2, r3
 800248a:	091b      	lsrs	r3, r3, #4
 800248c:	009a      	lsls	r2, r3, #2
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a48      	ldr	r2, [pc, #288]	; (80025b8 <HAL_DMA_Init+0x15c>)
 8002496:	641a      	str	r2, [r3, #64]	; 0x40
 8002498:	e00e      	b.n	80024b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	4b46      	ldr	r3, [pc, #280]	; (80025bc <HAL_DMA_Init+0x160>)
 80024a2:	4413      	add	r3, r2
 80024a4:	4a43      	ldr	r2, [pc, #268]	; (80025b4 <HAL_DMA_Init+0x158>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	091b      	lsrs	r3, r3, #4
 80024ac:	009a      	lsls	r2, r3, #2
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a42      	ldr	r2, [pc, #264]	; (80025c0 <HAL_DMA_Init+0x164>)
 80024b6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2202      	movs	r2, #2
 80024bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80024ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80024dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002512:	d039      	beq.n	8002588 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	4a27      	ldr	r2, [pc, #156]	; (80025b8 <HAL_DMA_Init+0x15c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d11a      	bne.n	8002554 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800251e:	4b29      	ldr	r3, [pc, #164]	; (80025c4 <HAL_DMA_Init+0x168>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002526:	f003 031c 	and.w	r3, r3, #28
 800252a:	210f      	movs	r1, #15
 800252c:	fa01 f303 	lsl.w	r3, r1, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	4924      	ldr	r1, [pc, #144]	; (80025c4 <HAL_DMA_Init+0x168>)
 8002534:	4013      	ands	r3, r2
 8002536:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002538:	4b22      	ldr	r3, [pc, #136]	; (80025c4 <HAL_DMA_Init+0x168>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6859      	ldr	r1, [r3, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002544:	f003 031c 	and.w	r3, r3, #28
 8002548:	fa01 f303 	lsl.w	r3, r1, r3
 800254c:	491d      	ldr	r1, [pc, #116]	; (80025c4 <HAL_DMA_Init+0x168>)
 800254e:	4313      	orrs	r3, r2
 8002550:	600b      	str	r3, [r1, #0]
 8002552:	e019      	b.n	8002588 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002554:	4b1c      	ldr	r3, [pc, #112]	; (80025c8 <HAL_DMA_Init+0x16c>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255c:	f003 031c 	and.w	r3, r3, #28
 8002560:	210f      	movs	r1, #15
 8002562:	fa01 f303 	lsl.w	r3, r1, r3
 8002566:	43db      	mvns	r3, r3
 8002568:	4917      	ldr	r1, [pc, #92]	; (80025c8 <HAL_DMA_Init+0x16c>)
 800256a:	4013      	ands	r3, r2
 800256c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800256e:	4b16      	ldr	r3, [pc, #88]	; (80025c8 <HAL_DMA_Init+0x16c>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6859      	ldr	r1, [r3, #4]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	f003 031c 	and.w	r3, r3, #28
 800257e:	fa01 f303 	lsl.w	r3, r1, r3
 8002582:	4911      	ldr	r1, [pc, #68]	; (80025c8 <HAL_DMA_Init+0x16c>)
 8002584:	4313      	orrs	r3, r2
 8002586:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	40020407 	.word	0x40020407
 80025b0:	bffdfff8 	.word	0xbffdfff8
 80025b4:	cccccccd 	.word	0xcccccccd
 80025b8:	40020000 	.word	0x40020000
 80025bc:	bffdfbf8 	.word	0xbffdfbf8
 80025c0:	40020400 	.word	0x40020400
 80025c4:	400200a8 	.word	0x400200a8
 80025c8:	400204a8 	.word	0x400204a8

080025cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
 80025d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_DMA_Start_IT+0x20>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e04b      	b.n	8002684 <HAL_DMA_Start_IT+0xb8>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d13a      	bne.n	8002676 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2202      	movs	r2, #2
 8002604:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0201 	bic.w	r2, r2, #1
 800261c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	68b9      	ldr	r1, [r7, #8]
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 f95f 	bl	80028e8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	2b00      	cmp	r3, #0
 8002630:	d008      	beq.n	8002644 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f042 020e 	orr.w	r2, r2, #14
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	e00f      	b.n	8002664 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0204 	bic.w	r2, r2, #4
 8002652:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 020a 	orr.w	r2, r2, #10
 8002662:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0201 	orr.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	e005      	b.n	8002682 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800267e:	2302      	movs	r3, #2
 8002680:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002682:	7dfb      	ldrb	r3, [r7, #23]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002694:	2300      	movs	r3, #0
 8002696:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d008      	beq.n	80026b6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2204      	movs	r2, #4
 80026a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e022      	b.n	80026fc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 020e 	bic.w	r2, r2, #14
 80026c4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0201 	bic.w	r2, r2, #1
 80026d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	f003 021c 	and.w	r2, r3, #28
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	2101      	movs	r1, #1
 80026e4:	fa01 f202 	lsl.w	r2, r1, r2
 80026e8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d005      	beq.n	800272c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2204      	movs	r2, #4
 8002724:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	73fb      	strb	r3, [r7, #15]
 800272a:	e029      	b.n	8002780 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 020e 	bic.w	r2, r2, #14
 800273a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0201 	bic.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002750:	f003 021c 	and.w	r2, r3, #28
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	2101      	movs	r1, #1
 800275a:	fa01 f202 	lsl.w	r2, r1, r2
 800275e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	4798      	blx	r3
    }
  }
  return status;
 8002780:	7bfb      	ldrb	r3, [r7, #15]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	f003 031c 	and.w	r3, r3, #28
 80027aa:	2204      	movs	r2, #4
 80027ac:	409a      	lsls	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4013      	ands	r3, r2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d026      	beq.n	8002804 <HAL_DMA_IRQHandler+0x7a>
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d021      	beq.n	8002804 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0320 	and.w	r3, r3, #32
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d107      	bne.n	80027de <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0204 	bic.w	r2, r2, #4
 80027dc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e2:	f003 021c 	and.w	r2, r3, #28
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	2104      	movs	r1, #4
 80027ec:	fa01 f202 	lsl.w	r2, r1, r2
 80027f0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d071      	beq.n	80028de <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002802:	e06c      	b.n	80028de <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002808:	f003 031c 	and.w	r3, r3, #28
 800280c:	2202      	movs	r2, #2
 800280e:	409a      	lsls	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4013      	ands	r3, r2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d02e      	beq.n	8002876 <HAL_DMA_IRQHandler+0xec>
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d029      	beq.n	8002876 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0320 	and.w	r3, r3, #32
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10b      	bne.n	8002848 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 020a 	bic.w	r2, r2, #10
 800283e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284c:	f003 021c 	and.w	r2, r3, #28
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	2102      	movs	r1, #2
 8002856:	fa01 f202 	lsl.w	r2, r1, r2
 800285a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002868:	2b00      	cmp	r3, #0
 800286a:	d038      	beq.n	80028de <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002874:	e033      	b.n	80028de <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	f003 031c 	and.w	r3, r3, #28
 800287e:	2208      	movs	r2, #8
 8002880:	409a      	lsls	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4013      	ands	r3, r2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d02a      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x156>
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d025      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 020e 	bic.w	r2, r2, #14
 80028a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a8:	f003 021c 	and.w	r2, r3, #28
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	2101      	movs	r1, #1
 80028b2:	fa01 f202 	lsl.w	r2, r1, r2
 80028b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d004      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80028de:	bf00      	nop
 80028e0:	bf00      	nop
}
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	f003 021c 	and.w	r2, r3, #28
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	2101      	movs	r1, #1
 8002904:	fa01 f202 	lsl.w	r2, r1, r2
 8002908:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b10      	cmp	r3, #16
 8002918:	d108      	bne.n	800292c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800292a:	e007      	b.n	800293c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	60da      	str	r2, [r3, #12]
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002948:	b480      	push	{r7}
 800294a:	b087      	sub	sp, #28
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002956:	e148      	b.n	8002bea <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	2101      	movs	r1, #1
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	fa01 f303 	lsl.w	r3, r1, r3
 8002964:	4013      	ands	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 813a 	beq.w	8002be4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	2b01      	cmp	r3, #1
 800297a:	d005      	beq.n	8002988 <HAL_GPIO_Init+0x40>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d130      	bne.n	80029ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	2203      	movs	r2, #3
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4013      	ands	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029be:	2201      	movs	r2, #1
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43db      	mvns	r3, r3
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4013      	ands	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	091b      	lsrs	r3, r3, #4
 80029d4:	f003 0201 	and.w	r2, r3, #1
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d017      	beq.n	8002a26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	2203      	movs	r2, #3
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d123      	bne.n	8002a7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	08da      	lsrs	r2, r3, #3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3208      	adds	r2, #8
 8002a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	220f      	movs	r2, #15
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	4013      	ands	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	691a      	ldr	r2, [r3, #16]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	08da      	lsrs	r2, r3, #3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3208      	adds	r2, #8
 8002a74:	6939      	ldr	r1, [r7, #16]
 8002a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	2203      	movs	r2, #3
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 0203 	and.w	r2, r3, #3
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 8094 	beq.w	8002be4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002abc:	4b52      	ldr	r3, [pc, #328]	; (8002c08 <HAL_GPIO_Init+0x2c0>)
 8002abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac0:	4a51      	ldr	r2, [pc, #324]	; (8002c08 <HAL_GPIO_Init+0x2c0>)
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	6613      	str	r3, [r2, #96]	; 0x60
 8002ac8:	4b4f      	ldr	r3, [pc, #316]	; (8002c08 <HAL_GPIO_Init+0x2c0>)
 8002aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	60bb      	str	r3, [r7, #8]
 8002ad2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ad4:	4a4d      	ldr	r2, [pc, #308]	; (8002c0c <HAL_GPIO_Init+0x2c4>)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	089b      	lsrs	r3, r3, #2
 8002ada:	3302      	adds	r3, #2
 8002adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	220f      	movs	r2, #15
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4013      	ands	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002afe:	d00d      	beq.n	8002b1c <HAL_GPIO_Init+0x1d4>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a43      	ldr	r2, [pc, #268]	; (8002c10 <HAL_GPIO_Init+0x2c8>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d007      	beq.n	8002b18 <HAL_GPIO_Init+0x1d0>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a42      	ldr	r2, [pc, #264]	; (8002c14 <HAL_GPIO_Init+0x2cc>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d101      	bne.n	8002b14 <HAL_GPIO_Init+0x1cc>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e004      	b.n	8002b1e <HAL_GPIO_Init+0x1d6>
 8002b14:	2307      	movs	r3, #7
 8002b16:	e002      	b.n	8002b1e <HAL_GPIO_Init+0x1d6>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <HAL_GPIO_Init+0x1d6>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	f002 0203 	and.w	r2, r2, #3
 8002b24:	0092      	lsls	r2, r2, #2
 8002b26:	4093      	lsls	r3, r2
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b2e:	4937      	ldr	r1, [pc, #220]	; (8002c0c <HAL_GPIO_Init+0x2c4>)
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	089b      	lsrs	r3, r3, #2
 8002b34:	3302      	adds	r3, #2
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b3c:	4b36      	ldr	r3, [pc, #216]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	43db      	mvns	r3, r3
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b60:	4a2d      	ldr	r2, [pc, #180]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b66:	4b2c      	ldr	r3, [pc, #176]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	4013      	ands	r3, r2
 8002b74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b8a:	4a23      	ldr	r2, [pc, #140]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b90:	4b21      	ldr	r3, [pc, #132]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bb4:	4a18      	ldr	r2, [pc, #96]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002bba:	4b17      	ldr	r3, [pc, #92]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bde:	4a0e      	ldr	r2, [pc, #56]	; (8002c18 <HAL_GPIO_Init+0x2d0>)
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	3301      	adds	r3, #1
 8002be8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f47f aeaf 	bne.w	8002958 <HAL_GPIO_Init+0x10>
  }
}
 8002bfa:	bf00      	nop
 8002bfc:	bf00      	nop
 8002bfe:	371c      	adds	r7, #28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	40010000 	.word	0x40010000
 8002c10:	48000400 	.word	0x48000400
 8002c14:	48000800 	.word	0x48000800
 8002c18:	40010400 	.word	0x40010400

08002c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	807b      	strh	r3, [r7, #2]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c2c:	787b      	ldrb	r3, [r7, #1]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c32:	887a      	ldrh	r2, [r7, #2]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c38:	e002      	b.n	8002c40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c3a:	887a      	ldrh	r2, [r7, #2]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c50:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a04      	ldr	r2, [pc, #16]	; (8002c68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c5a:	6013      	str	r3, [r2, #0]
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40007000 	.word	0x40007000

08002c6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c70:	4b04      	ldr	r3, [pc, #16]	; (8002c84 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40007000 	.word	0x40007000

08002c88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c96:	d130      	bne.n	8002cfa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c98:	4b23      	ldr	r3, [pc, #140]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ca4:	d038      	beq.n	8002d18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ca6:	4b20      	ldr	r3, [pc, #128]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cae:	4a1e      	ldr	r2, [pc, #120]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cb4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cb6:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2232      	movs	r2, #50	; 0x32
 8002cbc:	fb02 f303 	mul.w	r3, r2, r3
 8002cc0:	4a1b      	ldr	r2, [pc, #108]	; (8002d30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	0c9b      	lsrs	r3, r3, #18
 8002cc8:	3301      	adds	r3, #1
 8002cca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ccc:	e002      	b.n	8002cd4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cd4:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce0:	d102      	bne.n	8002ce8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1f2      	bne.n	8002cce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ce8:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf4:	d110      	bne.n	8002d18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e00f      	b.n	8002d1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cfa:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d06:	d007      	beq.n	8002d18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d08:	4b07      	ldr	r3, [pc, #28]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d10:	4a05      	ldr	r2, [pc, #20]	; (8002d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40007000 	.word	0x40007000
 8002d2c:	2000008c 	.word	0x2000008c
 8002d30:	431bde83 	.word	0x431bde83

08002d34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d102      	bne.n	8002d48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	f000 bc02 	b.w	800354c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d48:	4b96      	ldr	r3, [pc, #600]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 030c 	and.w	r3, r3, #12
 8002d50:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d52:	4b94      	ldr	r3, [pc, #592]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 80e4 	beq.w	8002f32 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d007      	beq.n	8002d80 <HAL_RCC_OscConfig+0x4c>
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	2b0c      	cmp	r3, #12
 8002d74:	f040 808b 	bne.w	8002e8e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	f040 8087 	bne.w	8002e8e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d80:	4b88      	ldr	r3, [pc, #544]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <HAL_RCC_OscConfig+0x64>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e3d9      	b.n	800354c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1a      	ldr	r2, [r3, #32]
 8002d9c:	4b81      	ldr	r3, [pc, #516]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0308 	and.w	r3, r3, #8
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d004      	beq.n	8002db2 <HAL_RCC_OscConfig+0x7e>
 8002da8:	4b7e      	ldr	r3, [pc, #504]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002db0:	e005      	b.n	8002dbe <HAL_RCC_OscConfig+0x8a>
 8002db2:	4b7c      	ldr	r3, [pc, #496]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002db8:	091b      	lsrs	r3, r3, #4
 8002dba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d223      	bcs.n	8002e0a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 fd8c 	bl	80038e4 <RCC_SetFlashLatencyFromMSIRange>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e3ba      	b.n	800354c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dd6:	4b73      	ldr	r3, [pc, #460]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a72      	ldr	r2, [pc, #456]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002ddc:	f043 0308 	orr.w	r3, r3, #8
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	4b70      	ldr	r3, [pc, #448]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	496d      	ldr	r1, [pc, #436]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002df4:	4b6b      	ldr	r3, [pc, #428]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	021b      	lsls	r3, r3, #8
 8002e02:	4968      	ldr	r1, [pc, #416]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]
 8002e08:	e025      	b.n	8002e56 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e0a:	4b66      	ldr	r3, [pc, #408]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a65      	ldr	r2, [pc, #404]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002e10:	f043 0308 	orr.w	r3, r3, #8
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	4b63      	ldr	r3, [pc, #396]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	4960      	ldr	r1, [pc, #384]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e28:	4b5e      	ldr	r3, [pc, #376]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	021b      	lsls	r3, r3, #8
 8002e36:	495b      	ldr	r1, [pc, #364]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d109      	bne.n	8002e56 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fd4c 	bl	80038e4 <RCC_SetFlashLatencyFromMSIRange>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e37a      	b.n	800354c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e56:	f000 fc81 	bl	800375c <HAL_RCC_GetSysClockFreq>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	4b51      	ldr	r3, [pc, #324]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	091b      	lsrs	r3, r3, #4
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	4950      	ldr	r1, [pc, #320]	; (8002fa8 <HAL_RCC_OscConfig+0x274>)
 8002e68:	5ccb      	ldrb	r3, [r1, r3]
 8002e6a:	f003 031f 	and.w	r3, r3, #31
 8002e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e72:	4a4e      	ldr	r2, [pc, #312]	; (8002fac <HAL_RCC_OscConfig+0x278>)
 8002e74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e76:	4b4e      	ldr	r3, [pc, #312]	; (8002fb0 <HAL_RCC_OscConfig+0x27c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff f95c 	bl	8002138 <HAL_InitTick>
 8002e80:	4603      	mov	r3, r0
 8002e82:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d052      	beq.n	8002f30 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	e35e      	b.n	800354c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d032      	beq.n	8002efc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e96:	4b43      	ldr	r3, [pc, #268]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a42      	ldr	r2, [pc, #264]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ea2:	f7ff f999 	bl	80021d8 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002eaa:	f7ff f995 	bl	80021d8 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e347      	b.n	800354c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ebc:	4b39      	ldr	r3, [pc, #228]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0f0      	beq.n	8002eaa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ec8:	4b36      	ldr	r3, [pc, #216]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a35      	ldr	r2, [pc, #212]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002ece:	f043 0308 	orr.w	r3, r3, #8
 8002ed2:	6013      	str	r3, [r2, #0]
 8002ed4:	4b33      	ldr	r3, [pc, #204]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	4930      	ldr	r1, [pc, #192]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ee6:	4b2f      	ldr	r3, [pc, #188]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	021b      	lsls	r3, r3, #8
 8002ef4:	492b      	ldr	r1, [pc, #172]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	604b      	str	r3, [r1, #4]
 8002efa:	e01a      	b.n	8002f32 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002efc:	4b29      	ldr	r3, [pc, #164]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a28      	ldr	r2, [pc, #160]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002f02:	f023 0301 	bic.w	r3, r3, #1
 8002f06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f08:	f7ff f966 	bl	80021d8 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f10:	f7ff f962 	bl	80021d8 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e314      	b.n	800354c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f22:	4b20      	ldr	r3, [pc, #128]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0x1dc>
 8002f2e:	e000      	b.n	8002f32 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d073      	beq.n	8003026 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d005      	beq.n	8002f50 <HAL_RCC_OscConfig+0x21c>
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	2b0c      	cmp	r3, #12
 8002f48:	d10e      	bne.n	8002f68 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d10b      	bne.n	8002f68 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f50:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d063      	beq.n	8003024 <HAL_RCC_OscConfig+0x2f0>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d15f      	bne.n	8003024 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e2f1      	b.n	800354c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f70:	d106      	bne.n	8002f80 <HAL_RCC_OscConfig+0x24c>
 8002f72:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a0b      	ldr	r2, [pc, #44]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	e025      	b.n	8002fcc <HAL_RCC_OscConfig+0x298>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f88:	d114      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x280>
 8002f8a:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a05      	ldr	r2, [pc, #20]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	4b03      	ldr	r3, [pc, #12]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a02      	ldr	r2, [pc, #8]	; (8002fa4 <HAL_RCC_OscConfig+0x270>)
 8002f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	e013      	b.n	8002fcc <HAL_RCC_OscConfig+0x298>
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	0800940c 	.word	0x0800940c
 8002fac:	2000008c 	.word	0x2000008c
 8002fb0:	20000090 	.word	0x20000090
 8002fb4:	4ba0      	ldr	r3, [pc, #640]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a9f      	ldr	r2, [pc, #636]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 8002fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	4b9d      	ldr	r3, [pc, #628]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a9c      	ldr	r2, [pc, #624]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 8002fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d013      	beq.n	8002ffc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd4:	f7ff f900 	bl	80021d8 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fdc:	f7ff f8fc 	bl	80021d8 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b64      	cmp	r3, #100	; 0x64
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e2ae      	b.n	800354c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fee:	4b92      	ldr	r3, [pc, #584]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0f0      	beq.n	8002fdc <HAL_RCC_OscConfig+0x2a8>
 8002ffa:	e014      	b.n	8003026 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffc:	f7ff f8ec 	bl	80021d8 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003004:	f7ff f8e8 	bl	80021d8 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b64      	cmp	r3, #100	; 0x64
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e29a      	b.n	800354c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003016:	4b88      	ldr	r3, [pc, #544]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_OscConfig+0x2d0>
 8003022:	e000      	b.n	8003026 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d060      	beq.n	80030f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	2b04      	cmp	r3, #4
 8003036:	d005      	beq.n	8003044 <HAL_RCC_OscConfig+0x310>
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	2b0c      	cmp	r3, #12
 800303c:	d119      	bne.n	8003072 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d116      	bne.n	8003072 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003044:	4b7c      	ldr	r3, [pc, #496]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_RCC_OscConfig+0x328>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e277      	b.n	800354c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305c:	4b76      	ldr	r3, [pc, #472]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	061b      	lsls	r3, r3, #24
 800306a:	4973      	ldr	r1, [pc, #460]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 800306c:	4313      	orrs	r3, r2
 800306e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003070:	e040      	b.n	80030f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d023      	beq.n	80030c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800307a:	4b6f      	ldr	r3, [pc, #444]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a6e      	ldr	r2, [pc, #440]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 8003080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003086:	f7ff f8a7 	bl	80021d8 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800308e:	f7ff f8a3 	bl	80021d8 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e255      	b.n	800354c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030a0:	4b65      	ldr	r3, [pc, #404]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0f0      	beq.n	800308e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ac:	4b62      	ldr	r3, [pc, #392]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	061b      	lsls	r3, r3, #24
 80030ba:	495f      	ldr	r1, [pc, #380]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	604b      	str	r3, [r1, #4]
 80030c0:	e018      	b.n	80030f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c2:	4b5d      	ldr	r3, [pc, #372]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a5c      	ldr	r2, [pc, #368]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 80030c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ce:	f7ff f883 	bl	80021d8 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d6:	f7ff f87f 	bl	80021d8 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e231      	b.n	800354c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030e8:	4b53      	ldr	r3, [pc, #332]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1f0      	bne.n	80030d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d03c      	beq.n	800317a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d01c      	beq.n	8003142 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003108:	4b4b      	ldr	r3, [pc, #300]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 800310a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800310e:	4a4a      	ldr	r2, [pc, #296]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003118:	f7ff f85e 	bl	80021d8 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003120:	f7ff f85a 	bl	80021d8 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e20c      	b.n	800354c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003132:	4b41      	ldr	r3, [pc, #260]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 8003134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0ef      	beq.n	8003120 <HAL_RCC_OscConfig+0x3ec>
 8003140:	e01b      	b.n	800317a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003142:	4b3d      	ldr	r3, [pc, #244]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 8003144:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003148:	4a3b      	ldr	r2, [pc, #236]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 800314a:	f023 0301 	bic.w	r3, r3, #1
 800314e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003152:	f7ff f841 	bl	80021d8 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800315a:	f7ff f83d 	bl	80021d8 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e1ef      	b.n	800354c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800316c:	4b32      	ldr	r3, [pc, #200]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 800316e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1ef      	bne.n	800315a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 80a6 	beq.w	80032d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003188:	2300      	movs	r3, #0
 800318a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800318c:	4b2a      	ldr	r3, [pc, #168]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 800318e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10d      	bne.n	80031b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003198:	4b27      	ldr	r3, [pc, #156]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 800319a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319c:	4a26      	ldr	r2, [pc, #152]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 800319e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a2:	6593      	str	r3, [r2, #88]	; 0x58
 80031a4:	4b24      	ldr	r3, [pc, #144]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 80031a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031b0:	2301      	movs	r3, #1
 80031b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b4:	4b21      	ldr	r3, [pc, #132]	; (800323c <HAL_RCC_OscConfig+0x508>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d118      	bne.n	80031f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031c0:	4b1e      	ldr	r3, [pc, #120]	; (800323c <HAL_RCC_OscConfig+0x508>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a1d      	ldr	r2, [pc, #116]	; (800323c <HAL_RCC_OscConfig+0x508>)
 80031c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031cc:	f7ff f804 	bl	80021d8 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d4:	f7ff f800 	bl	80021d8 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e1b2      	b.n	800354c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031e6:	4b15      	ldr	r3, [pc, #84]	; (800323c <HAL_RCC_OscConfig+0x508>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0f0      	beq.n	80031d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d108      	bne.n	800320c <HAL_RCC_OscConfig+0x4d8>
 80031fa:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 80031fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003200:	4a0d      	ldr	r2, [pc, #52]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 8003202:	f043 0301 	orr.w	r3, r3, #1
 8003206:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800320a:	e029      	b.n	8003260 <HAL_RCC_OscConfig+0x52c>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	2b05      	cmp	r3, #5
 8003212:	d115      	bne.n	8003240 <HAL_RCC_OscConfig+0x50c>
 8003214:	4b08      	ldr	r3, [pc, #32]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 8003216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321a:	4a07      	ldr	r2, [pc, #28]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 800321c:	f043 0304 	orr.w	r3, r3, #4
 8003220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003224:	4b04      	ldr	r3, [pc, #16]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 8003226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322a:	4a03      	ldr	r2, [pc, #12]	; (8003238 <HAL_RCC_OscConfig+0x504>)
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003234:	e014      	b.n	8003260 <HAL_RCC_OscConfig+0x52c>
 8003236:	bf00      	nop
 8003238:	40021000 	.word	0x40021000
 800323c:	40007000 	.word	0x40007000
 8003240:	4b9a      	ldr	r3, [pc, #616]	; (80034ac <HAL_RCC_OscConfig+0x778>)
 8003242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003246:	4a99      	ldr	r2, [pc, #612]	; (80034ac <HAL_RCC_OscConfig+0x778>)
 8003248:	f023 0301 	bic.w	r3, r3, #1
 800324c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003250:	4b96      	ldr	r3, [pc, #600]	; (80034ac <HAL_RCC_OscConfig+0x778>)
 8003252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003256:	4a95      	ldr	r2, [pc, #596]	; (80034ac <HAL_RCC_OscConfig+0x778>)
 8003258:	f023 0304 	bic.w	r3, r3, #4
 800325c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d016      	beq.n	8003296 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003268:	f7fe ffb6 	bl	80021d8 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800326e:	e00a      	b.n	8003286 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003270:	f7fe ffb2 	bl	80021d8 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f241 3288 	movw	r2, #5000	; 0x1388
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e162      	b.n	800354c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003286:	4b89      	ldr	r3, [pc, #548]	; (80034ac <HAL_RCC_OscConfig+0x778>)
 8003288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0ed      	beq.n	8003270 <HAL_RCC_OscConfig+0x53c>
 8003294:	e015      	b.n	80032c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003296:	f7fe ff9f 	bl	80021d8 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800329c:	e00a      	b.n	80032b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800329e:	f7fe ff9b 	bl	80021d8 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e14b      	b.n	800354c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032b4:	4b7d      	ldr	r3, [pc, #500]	; (80034ac <HAL_RCC_OscConfig+0x778>)
 80032b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1ed      	bne.n	800329e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032c2:	7ffb      	ldrb	r3, [r7, #31]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d105      	bne.n	80032d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c8:	4b78      	ldr	r3, [pc, #480]	; (80034ac <HAL_RCC_OscConfig+0x778>)
 80032ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032cc:	4a77      	ldr	r2, [pc, #476]	; (80034ac <HAL_RCC_OscConfig+0x778>)
 80032ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0320 	and.w	r3, r3, #32
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d03c      	beq.n	800335a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d01c      	beq.n	8003322 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032e8:	4b70      	ldr	r3, [pc, #448]	; (80034ac <HAL_RCC_OscConfig+0x778>)
 80032ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032ee:	4a6f      	ldr	r2, [pc, #444]	; (80034ac <HAL_RCC_OscConfig+0x778>)
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f8:	f7fe ff6e 	bl	80021d8 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003300:	f7fe ff6a 	bl	80021d8 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e11c      	b.n	800354c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003312:	4b66      	ldr	r3, [pc, #408]	; (80034ac <HAL_RCC_OscConfig+0x778>)
 8003314:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0ef      	beq.n	8003300 <HAL_RCC_OscConfig+0x5cc>
 8003320:	e01b      	b.n	800335a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003322:	4b62      	ldr	r3, [pc, #392]	; (80034ac <HAL_RCC_OscConfig+0x778>)
 8003324:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003328:	4a60      	ldr	r2, [pc, #384]	; (80034ac <HAL_RCC_OscConfig+0x778>)
 800332a:	f023 0301 	bic.w	r3, r3, #1
 800332e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003332:	f7fe ff51 	bl	80021d8 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800333a:	f7fe ff4d 	bl	80021d8 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e0ff      	b.n	800354c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800334c:	4b57      	ldr	r3, [pc, #348]	; (80034ac <HAL_RCC_OscConfig+0x778>)
 800334e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1ef      	bne.n	800333a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 80f3 	beq.w	800354a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003368:	2b02      	cmp	r3, #2
 800336a:	f040 80c9 	bne.w	8003500 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800336e:	4b4f      	ldr	r3, [pc, #316]	; (80034ac <HAL_RCC_OscConfig+0x778>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f003 0203 	and.w	r2, r3, #3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	429a      	cmp	r2, r3
 8003380:	d12c      	bne.n	80033dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	3b01      	subs	r3, #1
 800338e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003390:	429a      	cmp	r2, r3
 8003392:	d123      	bne.n	80033dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d11b      	bne.n	80033dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d113      	bne.n	80033dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033be:	085b      	lsrs	r3, r3, #1
 80033c0:	3b01      	subs	r3, #1
 80033c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d109      	bne.n	80033dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	085b      	lsrs	r3, r3, #1
 80033d4:	3b01      	subs	r3, #1
 80033d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033d8:	429a      	cmp	r2, r3
 80033da:	d06b      	beq.n	80034b4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	2b0c      	cmp	r3, #12
 80033e0:	d062      	beq.n	80034a8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033e2:	4b32      	ldr	r3, [pc, #200]	; (80034ac <HAL_RCC_OscConfig+0x778>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e0ac      	b.n	800354c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033f2:	4b2e      	ldr	r3, [pc, #184]	; (80034ac <HAL_RCC_OscConfig+0x778>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a2d      	ldr	r2, [pc, #180]	; (80034ac <HAL_RCC_OscConfig+0x778>)
 80033f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033fe:	f7fe feeb 	bl	80021d8 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003406:	f7fe fee7 	bl	80021d8 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e099      	b.n	800354c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003418:	4b24      	ldr	r3, [pc, #144]	; (80034ac <HAL_RCC_OscConfig+0x778>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1f0      	bne.n	8003406 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003424:	4b21      	ldr	r3, [pc, #132]	; (80034ac <HAL_RCC_OscConfig+0x778>)
 8003426:	68da      	ldr	r2, [r3, #12]
 8003428:	4b21      	ldr	r3, [pc, #132]	; (80034b0 <HAL_RCC_OscConfig+0x77c>)
 800342a:	4013      	ands	r3, r2
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003434:	3a01      	subs	r2, #1
 8003436:	0112      	lsls	r2, r2, #4
 8003438:	4311      	orrs	r1, r2
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800343e:	0212      	lsls	r2, r2, #8
 8003440:	4311      	orrs	r1, r2
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003446:	0852      	lsrs	r2, r2, #1
 8003448:	3a01      	subs	r2, #1
 800344a:	0552      	lsls	r2, r2, #21
 800344c:	4311      	orrs	r1, r2
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003452:	0852      	lsrs	r2, r2, #1
 8003454:	3a01      	subs	r2, #1
 8003456:	0652      	lsls	r2, r2, #25
 8003458:	4311      	orrs	r1, r2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800345e:	06d2      	lsls	r2, r2, #27
 8003460:	430a      	orrs	r2, r1
 8003462:	4912      	ldr	r1, [pc, #72]	; (80034ac <HAL_RCC_OscConfig+0x778>)
 8003464:	4313      	orrs	r3, r2
 8003466:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003468:	4b10      	ldr	r3, [pc, #64]	; (80034ac <HAL_RCC_OscConfig+0x778>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a0f      	ldr	r2, [pc, #60]	; (80034ac <HAL_RCC_OscConfig+0x778>)
 800346e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003472:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003474:	4b0d      	ldr	r3, [pc, #52]	; (80034ac <HAL_RCC_OscConfig+0x778>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	4a0c      	ldr	r2, [pc, #48]	; (80034ac <HAL_RCC_OscConfig+0x778>)
 800347a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800347e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003480:	f7fe feaa 	bl	80021d8 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003488:	f7fe fea6 	bl	80021d8 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e058      	b.n	800354c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800349a:	4b04      	ldr	r3, [pc, #16]	; (80034ac <HAL_RCC_OscConfig+0x778>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034a6:	e050      	b.n	800354a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e04f      	b.n	800354c <HAL_RCC_OscConfig+0x818>
 80034ac:	40021000 	.word	0x40021000
 80034b0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034b4:	4b27      	ldr	r3, [pc, #156]	; (8003554 <HAL_RCC_OscConfig+0x820>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d144      	bne.n	800354a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034c0:	4b24      	ldr	r3, [pc, #144]	; (8003554 <HAL_RCC_OscConfig+0x820>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a23      	ldr	r2, [pc, #140]	; (8003554 <HAL_RCC_OscConfig+0x820>)
 80034c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034cc:	4b21      	ldr	r3, [pc, #132]	; (8003554 <HAL_RCC_OscConfig+0x820>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	4a20      	ldr	r2, [pc, #128]	; (8003554 <HAL_RCC_OscConfig+0x820>)
 80034d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034d8:	f7fe fe7e 	bl	80021d8 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e0:	f7fe fe7a 	bl	80021d8 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e02c      	b.n	800354c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034f2:	4b18      	ldr	r3, [pc, #96]	; (8003554 <HAL_RCC_OscConfig+0x820>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f0      	beq.n	80034e0 <HAL_RCC_OscConfig+0x7ac>
 80034fe:	e024      	b.n	800354a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2b0c      	cmp	r3, #12
 8003504:	d01f      	beq.n	8003546 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003506:	4b13      	ldr	r3, [pc, #76]	; (8003554 <HAL_RCC_OscConfig+0x820>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a12      	ldr	r2, [pc, #72]	; (8003554 <HAL_RCC_OscConfig+0x820>)
 800350c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003512:	f7fe fe61 	bl	80021d8 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351a:	f7fe fe5d 	bl	80021d8 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e00f      	b.n	800354c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800352c:	4b09      	ldr	r3, [pc, #36]	; (8003554 <HAL_RCC_OscConfig+0x820>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f0      	bne.n	800351a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003538:	4b06      	ldr	r3, [pc, #24]	; (8003554 <HAL_RCC_OscConfig+0x820>)
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	4905      	ldr	r1, [pc, #20]	; (8003554 <HAL_RCC_OscConfig+0x820>)
 800353e:	4b06      	ldr	r3, [pc, #24]	; (8003558 <HAL_RCC_OscConfig+0x824>)
 8003540:	4013      	ands	r3, r2
 8003542:	60cb      	str	r3, [r1, #12]
 8003544:	e001      	b.n	800354a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e000      	b.n	800354c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3720      	adds	r7, #32
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40021000 	.word	0x40021000
 8003558:	feeefffc 	.word	0xfeeefffc

0800355c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e0e7      	b.n	8003740 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003570:	4b75      	ldr	r3, [pc, #468]	; (8003748 <HAL_RCC_ClockConfig+0x1ec>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d910      	bls.n	80035a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357e:	4b72      	ldr	r3, [pc, #456]	; (8003748 <HAL_RCC_ClockConfig+0x1ec>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 0207 	bic.w	r2, r3, #7
 8003586:	4970      	ldr	r1, [pc, #448]	; (8003748 <HAL_RCC_ClockConfig+0x1ec>)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	4313      	orrs	r3, r2
 800358c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800358e:	4b6e      	ldr	r3, [pc, #440]	; (8003748 <HAL_RCC_ClockConfig+0x1ec>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	429a      	cmp	r2, r3
 800359a:	d001      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0cf      	b.n	8003740 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d010      	beq.n	80035ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	4b66      	ldr	r3, [pc, #408]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d908      	bls.n	80035ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035bc:	4b63      	ldr	r3, [pc, #396]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	4960      	ldr	r1, [pc, #384]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d04c      	beq.n	8003674 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b03      	cmp	r3, #3
 80035e0:	d107      	bne.n	80035f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035e2:	4b5a      	ldr	r3, [pc, #360]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d121      	bne.n	8003632 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e0a6      	b.n	8003740 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d107      	bne.n	800360a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035fa:	4b54      	ldr	r3, [pc, #336]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d115      	bne.n	8003632 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e09a      	b.n	8003740 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d107      	bne.n	8003622 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003612:	4b4e      	ldr	r3, [pc, #312]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d109      	bne.n	8003632 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e08e      	b.n	8003740 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003622:	4b4a      	ldr	r3, [pc, #296]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e086      	b.n	8003740 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003632:	4b46      	ldr	r3, [pc, #280]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f023 0203 	bic.w	r2, r3, #3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	4943      	ldr	r1, [pc, #268]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 8003640:	4313      	orrs	r3, r2
 8003642:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003644:	f7fe fdc8 	bl	80021d8 <HAL_GetTick>
 8003648:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364a:	e00a      	b.n	8003662 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800364c:	f7fe fdc4 	bl	80021d8 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	f241 3288 	movw	r2, #5000	; 0x1388
 800365a:	4293      	cmp	r3, r2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e06e      	b.n	8003740 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003662:	4b3a      	ldr	r3, [pc, #232]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 020c 	and.w	r2, r3, #12
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	429a      	cmp	r2, r3
 8003672:	d1eb      	bne.n	800364c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d010      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	4b31      	ldr	r3, [pc, #196]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800368c:	429a      	cmp	r2, r3
 800368e:	d208      	bcs.n	80036a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003690:	4b2e      	ldr	r3, [pc, #184]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	492b      	ldr	r1, [pc, #172]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036a2:	4b29      	ldr	r3, [pc, #164]	; (8003748 <HAL_RCC_ClockConfig+0x1ec>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d210      	bcs.n	80036d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b0:	4b25      	ldr	r3, [pc, #148]	; (8003748 <HAL_RCC_ClockConfig+0x1ec>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f023 0207 	bic.w	r2, r3, #7
 80036b8:	4923      	ldr	r1, [pc, #140]	; (8003748 <HAL_RCC_ClockConfig+0x1ec>)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	4313      	orrs	r3, r2
 80036be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c0:	4b21      	ldr	r3, [pc, #132]	; (8003748 <HAL_RCC_ClockConfig+0x1ec>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d001      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e036      	b.n	8003740 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d008      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036de:	4b1b      	ldr	r3, [pc, #108]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	4918      	ldr	r1, [pc, #96]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0308 	and.w	r3, r3, #8
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d009      	beq.n	8003710 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036fc:	4b13      	ldr	r3, [pc, #76]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	4910      	ldr	r1, [pc, #64]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 800370c:	4313      	orrs	r3, r2
 800370e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003710:	f000 f824 	bl	800375c <HAL_RCC_GetSysClockFreq>
 8003714:	4602      	mov	r2, r0
 8003716:	4b0d      	ldr	r3, [pc, #52]	; (800374c <HAL_RCC_ClockConfig+0x1f0>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	f003 030f 	and.w	r3, r3, #15
 8003720:	490b      	ldr	r1, [pc, #44]	; (8003750 <HAL_RCC_ClockConfig+0x1f4>)
 8003722:	5ccb      	ldrb	r3, [r1, r3]
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	fa22 f303 	lsr.w	r3, r2, r3
 800372c:	4a09      	ldr	r2, [pc, #36]	; (8003754 <HAL_RCC_ClockConfig+0x1f8>)
 800372e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003730:	4b09      	ldr	r3, [pc, #36]	; (8003758 <HAL_RCC_ClockConfig+0x1fc>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f7fe fcff 	bl	8002138 <HAL_InitTick>
 800373a:	4603      	mov	r3, r0
 800373c:	72fb      	strb	r3, [r7, #11]

  return status;
 800373e:	7afb      	ldrb	r3, [r7, #11]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40022000 	.word	0x40022000
 800374c:	40021000 	.word	0x40021000
 8003750:	0800940c 	.word	0x0800940c
 8003754:	2000008c 	.word	0x2000008c
 8003758:	20000090 	.word	0x20000090

0800375c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800375c:	b480      	push	{r7}
 800375e:	b089      	sub	sp, #36	; 0x24
 8003760:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
 8003766:	2300      	movs	r3, #0
 8003768:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800376a:	4b3e      	ldr	r3, [pc, #248]	; (8003864 <HAL_RCC_GetSysClockFreq+0x108>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003774:	4b3b      	ldr	r3, [pc, #236]	; (8003864 <HAL_RCC_GetSysClockFreq+0x108>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f003 0303 	and.w	r3, r3, #3
 800377c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <HAL_RCC_GetSysClockFreq+0x34>
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	2b0c      	cmp	r3, #12
 8003788:	d121      	bne.n	80037ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d11e      	bne.n	80037ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003790:	4b34      	ldr	r3, [pc, #208]	; (8003864 <HAL_RCC_GetSysClockFreq+0x108>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b00      	cmp	r3, #0
 800379a:	d107      	bne.n	80037ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800379c:	4b31      	ldr	r3, [pc, #196]	; (8003864 <HAL_RCC_GetSysClockFreq+0x108>)
 800379e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037a2:	0a1b      	lsrs	r3, r3, #8
 80037a4:	f003 030f 	and.w	r3, r3, #15
 80037a8:	61fb      	str	r3, [r7, #28]
 80037aa:	e005      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037ac:	4b2d      	ldr	r3, [pc, #180]	; (8003864 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	091b      	lsrs	r3, r3, #4
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037b8:	4a2b      	ldr	r2, [pc, #172]	; (8003868 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10d      	bne.n	80037e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037cc:	e00a      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d102      	bne.n	80037da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037d4:	4b25      	ldr	r3, [pc, #148]	; (800386c <HAL_RCC_GetSysClockFreq+0x110>)
 80037d6:	61bb      	str	r3, [r7, #24]
 80037d8:	e004      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d101      	bne.n	80037e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037e0:	4b23      	ldr	r3, [pc, #140]	; (8003870 <HAL_RCC_GetSysClockFreq+0x114>)
 80037e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	2b0c      	cmp	r3, #12
 80037e8:	d134      	bne.n	8003854 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037ea:	4b1e      	ldr	r3, [pc, #120]	; (8003864 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d003      	beq.n	8003802 <HAL_RCC_GetSysClockFreq+0xa6>
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d003      	beq.n	8003808 <HAL_RCC_GetSysClockFreq+0xac>
 8003800:	e005      	b.n	800380e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003802:	4b1a      	ldr	r3, [pc, #104]	; (800386c <HAL_RCC_GetSysClockFreq+0x110>)
 8003804:	617b      	str	r3, [r7, #20]
      break;
 8003806:	e005      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003808:	4b19      	ldr	r3, [pc, #100]	; (8003870 <HAL_RCC_GetSysClockFreq+0x114>)
 800380a:	617b      	str	r3, [r7, #20]
      break;
 800380c:	e002      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	617b      	str	r3, [r7, #20]
      break;
 8003812:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003814:	4b13      	ldr	r3, [pc, #76]	; (8003864 <HAL_RCC_GetSysClockFreq+0x108>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	091b      	lsrs	r3, r3, #4
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	3301      	adds	r3, #1
 8003820:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003822:	4b10      	ldr	r3, [pc, #64]	; (8003864 <HAL_RCC_GetSysClockFreq+0x108>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	0a1b      	lsrs	r3, r3, #8
 8003828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	fb03 f202 	mul.w	r2, r3, r2
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	fbb2 f3f3 	udiv	r3, r2, r3
 8003838:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800383a:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <HAL_RCC_GetSysClockFreq+0x108>)
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	0e5b      	lsrs	r3, r3, #25
 8003840:	f003 0303 	and.w	r3, r3, #3
 8003844:	3301      	adds	r3, #1
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003852:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003854:	69bb      	ldr	r3, [r7, #24]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3724      	adds	r7, #36	; 0x24
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	40021000 	.word	0x40021000
 8003868:	08009424 	.word	0x08009424
 800386c:	00f42400 	.word	0x00f42400
 8003870:	007a1200 	.word	0x007a1200

08003874 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003878:	4b03      	ldr	r3, [pc, #12]	; (8003888 <HAL_RCC_GetHCLKFreq+0x14>)
 800387a:	681b      	ldr	r3, [r3, #0]
}
 800387c:	4618      	mov	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	2000008c 	.word	0x2000008c

0800388c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003890:	f7ff fff0 	bl	8003874 <HAL_RCC_GetHCLKFreq>
 8003894:	4602      	mov	r2, r0
 8003896:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	0a1b      	lsrs	r3, r3, #8
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	4904      	ldr	r1, [pc, #16]	; (80038b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038a2:	5ccb      	ldrb	r3, [r1, r3]
 80038a4:	f003 031f 	and.w	r3, r3, #31
 80038a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40021000 	.word	0x40021000
 80038b4:	0800941c 	.word	0x0800941c

080038b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038bc:	f7ff ffda 	bl	8003874 <HAL_RCC_GetHCLKFreq>
 80038c0:	4602      	mov	r2, r0
 80038c2:	4b06      	ldr	r3, [pc, #24]	; (80038dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	0adb      	lsrs	r3, r3, #11
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	4904      	ldr	r1, [pc, #16]	; (80038e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038ce:	5ccb      	ldrb	r3, [r1, r3]
 80038d0:	f003 031f 	and.w	r3, r3, #31
 80038d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d8:	4618      	mov	r0, r3
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40021000 	.word	0x40021000
 80038e0:	0800941c 	.word	0x0800941c

080038e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038ec:	2300      	movs	r3, #0
 80038ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038f0:	4b2a      	ldr	r3, [pc, #168]	; (800399c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038fc:	f7ff f9b6 	bl	8002c6c <HAL_PWREx_GetVoltageRange>
 8003900:	6178      	str	r0, [r7, #20]
 8003902:	e014      	b.n	800392e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003904:	4b25      	ldr	r3, [pc, #148]	; (800399c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003908:	4a24      	ldr	r2, [pc, #144]	; (800399c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800390a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390e:	6593      	str	r3, [r2, #88]	; 0x58
 8003910:	4b22      	ldr	r3, [pc, #136]	; (800399c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800391c:	f7ff f9a6 	bl	8002c6c <HAL_PWREx_GetVoltageRange>
 8003920:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003922:	4b1e      	ldr	r3, [pc, #120]	; (800399c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003926:	4a1d      	ldr	r2, [pc, #116]	; (800399c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800392c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003934:	d10b      	bne.n	800394e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b80      	cmp	r3, #128	; 0x80
 800393a:	d919      	bls.n	8003970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2ba0      	cmp	r3, #160	; 0xa0
 8003940:	d902      	bls.n	8003948 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003942:	2302      	movs	r3, #2
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	e013      	b.n	8003970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003948:	2301      	movs	r3, #1
 800394a:	613b      	str	r3, [r7, #16]
 800394c:	e010      	b.n	8003970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b80      	cmp	r3, #128	; 0x80
 8003952:	d902      	bls.n	800395a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003954:	2303      	movs	r3, #3
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	e00a      	b.n	8003970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b80      	cmp	r3, #128	; 0x80
 800395e:	d102      	bne.n	8003966 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003960:	2302      	movs	r3, #2
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	e004      	b.n	8003970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b70      	cmp	r3, #112	; 0x70
 800396a:	d101      	bne.n	8003970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800396c:	2301      	movs	r3, #1
 800396e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003970:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f023 0207 	bic.w	r2, r3, #7
 8003978:	4909      	ldr	r1, [pc, #36]	; (80039a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	4313      	orrs	r3, r2
 800397e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003980:	4b07      	ldr	r3, [pc, #28]	; (80039a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	429a      	cmp	r2, r3
 800398c:	d001      	beq.n	8003992 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e000      	b.n	8003994 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40021000 	.word	0x40021000
 80039a0:	40022000 	.word	0x40022000

080039a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039ac:	2300      	movs	r3, #0
 80039ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039b0:	2300      	movs	r3, #0
 80039b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d031      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039c8:	d01a      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80039ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039ce:	d814      	bhi.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d009      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039d8:	d10f      	bne.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80039da:	4b5d      	ldr	r3, [pc, #372]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	4a5c      	ldr	r2, [pc, #368]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039e6:	e00c      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3304      	adds	r3, #4
 80039ec:	2100      	movs	r1, #0
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 f9de 	bl	8003db0 <RCCEx_PLLSAI1_Config>
 80039f4:	4603      	mov	r3, r0
 80039f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039f8:	e003      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	74fb      	strb	r3, [r7, #19]
      break;
 80039fe:	e000      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003a00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a02:	7cfb      	ldrb	r3, [r7, #19]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10b      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a08:	4b51      	ldr	r3, [pc, #324]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a16:	494e      	ldr	r1, [pc, #312]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a1e:	e001      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a20:	7cfb      	ldrb	r3, [r7, #19]
 8003a22:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 809e 	beq.w	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a32:	2300      	movs	r3, #0
 8003a34:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a36:	4b46      	ldr	r3, [pc, #280]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003a46:	2300      	movs	r3, #0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00d      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a4c:	4b40      	ldr	r3, [pc, #256]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a50:	4a3f      	ldr	r2, [pc, #252]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a56:	6593      	str	r3, [r2, #88]	; 0x58
 8003a58:	4b3d      	ldr	r3, [pc, #244]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a60:	60bb      	str	r3, [r7, #8]
 8003a62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a64:	2301      	movs	r3, #1
 8003a66:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a68:	4b3a      	ldr	r3, [pc, #232]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a39      	ldr	r2, [pc, #228]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a74:	f7fe fbb0 	bl	80021d8 <HAL_GetTick>
 8003a78:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a7a:	e009      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a7c:	f7fe fbac 	bl	80021d8 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d902      	bls.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	74fb      	strb	r3, [r7, #19]
        break;
 8003a8e:	e005      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a90:	4b30      	ldr	r3, [pc, #192]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0ef      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003a9c:	7cfb      	ldrb	r3, [r7, #19]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d15a      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003aa2:	4b2b      	ldr	r3, [pc, #172]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d01e      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d019      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003abe:	4b24      	ldr	r3, [pc, #144]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003aca:	4b21      	ldr	r3, [pc, #132]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad0:	4a1f      	ldr	r2, [pc, #124]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ada:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae0:	4a1b      	ldr	r2, [pc, #108]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ae6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003aea:	4a19      	ldr	r2, [pc, #100]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d016      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afc:	f7fe fb6c 	bl	80021d8 <HAL_GetTick>
 8003b00:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b02:	e00b      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b04:	f7fe fb68 	bl	80021d8 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d902      	bls.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	74fb      	strb	r3, [r7, #19]
            break;
 8003b1a:	e006      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b1c:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0ec      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003b2a:	7cfb      	ldrb	r3, [r7, #19]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10b      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b30:	4b07      	ldr	r3, [pc, #28]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b3e:	4904      	ldr	r1, [pc, #16]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b46:	e009      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b48:	7cfb      	ldrb	r3, [r7, #19]
 8003b4a:	74bb      	strb	r3, [r7, #18]
 8003b4c:	e006      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003b4e:	bf00      	nop
 8003b50:	40021000 	.word	0x40021000
 8003b54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b58:	7cfb      	ldrb	r3, [r7, #19]
 8003b5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b5c:	7c7b      	ldrb	r3, [r7, #17]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d105      	bne.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b62:	4b8a      	ldr	r3, [pc, #552]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b66:	4a89      	ldr	r2, [pc, #548]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00a      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b7a:	4b84      	ldr	r3, [pc, #528]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b80:	f023 0203 	bic.w	r2, r3, #3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	4980      	ldr	r1, [pc, #512]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00a      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b9c:	4b7b      	ldr	r3, [pc, #492]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba2:	f023 020c 	bic.w	r2, r3, #12
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	4978      	ldr	r1, [pc, #480]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0320 	and.w	r3, r3, #32
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00a      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bbe:	4b73      	ldr	r3, [pc, #460]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bcc:	496f      	ldr	r1, [pc, #444]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00a      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003be0:	4b6a      	ldr	r3, [pc, #424]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bee:	4967      	ldr	r1, [pc, #412]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c02:	4b62      	ldr	r3, [pc, #392]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	495e      	ldr	r1, [pc, #376]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00a      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c24:	4b59      	ldr	r3, [pc, #356]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	4956      	ldr	r1, [pc, #344]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c46:	4b51      	ldr	r3, [pc, #324]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c54:	494d      	ldr	r1, [pc, #308]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d028      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c68:	4b48      	ldr	r3, [pc, #288]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	4945      	ldr	r1, [pc, #276]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c86:	d106      	bne.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c88:	4b40      	ldr	r3, [pc, #256]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	4a3f      	ldr	r2, [pc, #252]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c92:	60d3      	str	r3, [r2, #12]
 8003c94:	e011      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c9e:	d10c      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 f882 	bl	8003db0 <RCCEx_PLLSAI1_Config>
 8003cac:	4603      	mov	r3, r0
 8003cae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003cb0:	7cfb      	ldrb	r3, [r7, #19]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003cb6:	7cfb      	ldrb	r3, [r7, #19]
 8003cb8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d028      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cc6:	4b31      	ldr	r3, [pc, #196]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ccc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd4:	492d      	ldr	r1, [pc, #180]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ce4:	d106      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ce6:	4b29      	ldr	r3, [pc, #164]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	4a28      	ldr	r2, [pc, #160]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cf0:	60d3      	str	r3, [r2, #12]
 8003cf2:	e011      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cfc:	d10c      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3304      	adds	r3, #4
 8003d02:	2101      	movs	r1, #1
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 f853 	bl	8003db0 <RCCEx_PLLSAI1_Config>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d0e:	7cfb      	ldrb	r3, [r7, #19]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003d14:	7cfb      	ldrb	r3, [r7, #19]
 8003d16:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d01c      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d24:	4b19      	ldr	r3, [pc, #100]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d32:	4916      	ldr	r1, [pc, #88]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d42:	d10c      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3304      	adds	r3, #4
 8003d48:	2102      	movs	r1, #2
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 f830 	bl	8003db0 <RCCEx_PLLSAI1_Config>
 8003d50:	4603      	mov	r3, r0
 8003d52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d54:	7cfb      	ldrb	r3, [r7, #19]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003d5a:	7cfb      	ldrb	r3, [r7, #19]
 8003d5c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d6a:	4b08      	ldr	r3, [pc, #32]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d70:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d78:	4904      	ldr	r1, [pc, #16]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d80:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40021000 	.word	0x40021000

08003d90 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003d94:	4b05      	ldr	r3, [pc, #20]	; (8003dac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a04      	ldr	r2, [pc, #16]	; (8003dac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003d9a:	f043 0304 	orr.w	r3, r3, #4
 8003d9e:	6013      	str	r3, [r2, #0]
}
 8003da0:	bf00      	nop
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40021000 	.word	0x40021000

08003db0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dbe:	4b74      	ldr	r3, [pc, #464]	; (8003f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d018      	beq.n	8003dfc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003dca:	4b71      	ldr	r3, [pc, #452]	; (8003f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f003 0203 	and.w	r2, r3, #3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d10d      	bne.n	8003df6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
       ||
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d009      	beq.n	8003df6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003de2:	4b6b      	ldr	r3, [pc, #428]	; (8003f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	091b      	lsrs	r3, r3, #4
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
       ||
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d047      	beq.n	8003e86 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	73fb      	strb	r3, [r7, #15]
 8003dfa:	e044      	b.n	8003e86 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b03      	cmp	r3, #3
 8003e02:	d018      	beq.n	8003e36 <RCCEx_PLLSAI1_Config+0x86>
 8003e04:	2b03      	cmp	r3, #3
 8003e06:	d825      	bhi.n	8003e54 <RCCEx_PLLSAI1_Config+0xa4>
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d002      	beq.n	8003e12 <RCCEx_PLLSAI1_Config+0x62>
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d009      	beq.n	8003e24 <RCCEx_PLLSAI1_Config+0x74>
 8003e10:	e020      	b.n	8003e54 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e12:	4b5f      	ldr	r3, [pc, #380]	; (8003f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d11d      	bne.n	8003e5a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e22:	e01a      	b.n	8003e5a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e24:	4b5a      	ldr	r3, [pc, #360]	; (8003f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d116      	bne.n	8003e5e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e34:	e013      	b.n	8003e5e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e36:	4b56      	ldr	r3, [pc, #344]	; (8003f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10f      	bne.n	8003e62 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e42:	4b53      	ldr	r3, [pc, #332]	; (8003f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d109      	bne.n	8003e62 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e52:	e006      	b.n	8003e62 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	73fb      	strb	r3, [r7, #15]
      break;
 8003e58:	e004      	b.n	8003e64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e5a:	bf00      	nop
 8003e5c:	e002      	b.n	8003e64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e5e:	bf00      	nop
 8003e60:	e000      	b.n	8003e64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e62:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10d      	bne.n	8003e86 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e6a:	4b49      	ldr	r3, [pc, #292]	; (8003f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6819      	ldr	r1, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	011b      	lsls	r3, r3, #4
 8003e7e:	430b      	orrs	r3, r1
 8003e80:	4943      	ldr	r1, [pc, #268]	; (8003f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d17c      	bne.n	8003f86 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e8c:	4b40      	ldr	r3, [pc, #256]	; (8003f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a3f      	ldr	r2, [pc, #252]	; (8003f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e98:	f7fe f99e 	bl	80021d8 <HAL_GetTick>
 8003e9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e9e:	e009      	b.n	8003eb4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ea0:	f7fe f99a 	bl	80021d8 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d902      	bls.n	8003eb4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	73fb      	strb	r3, [r7, #15]
        break;
 8003eb2:	e005      	b.n	8003ec0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003eb4:	4b36      	ldr	r3, [pc, #216]	; (8003f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1ef      	bne.n	8003ea0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d15f      	bne.n	8003f86 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d110      	bne.n	8003eee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ecc:	4b30      	ldr	r3, [pc, #192]	; (8003f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003ed4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6892      	ldr	r2, [r2, #8]
 8003edc:	0211      	lsls	r1, r2, #8
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	68d2      	ldr	r2, [r2, #12]
 8003ee2:	06d2      	lsls	r2, r2, #27
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	492a      	ldr	r1, [pc, #168]	; (8003f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	610b      	str	r3, [r1, #16]
 8003eec:	e027      	b.n	8003f3e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d112      	bne.n	8003f1a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ef4:	4b26      	ldr	r3, [pc, #152]	; (8003f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003efc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6892      	ldr	r2, [r2, #8]
 8003f04:	0211      	lsls	r1, r2, #8
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6912      	ldr	r2, [r2, #16]
 8003f0a:	0852      	lsrs	r2, r2, #1
 8003f0c:	3a01      	subs	r2, #1
 8003f0e:	0552      	lsls	r2, r2, #21
 8003f10:	430a      	orrs	r2, r1
 8003f12:	491f      	ldr	r1, [pc, #124]	; (8003f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	610b      	str	r3, [r1, #16]
 8003f18:	e011      	b.n	8003f3e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f1a:	4b1d      	ldr	r3, [pc, #116]	; (8003f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f22:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6892      	ldr	r2, [r2, #8]
 8003f2a:	0211      	lsls	r1, r2, #8
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6952      	ldr	r2, [r2, #20]
 8003f30:	0852      	lsrs	r2, r2, #1
 8003f32:	3a01      	subs	r2, #1
 8003f34:	0652      	lsls	r2, r2, #25
 8003f36:	430a      	orrs	r2, r1
 8003f38:	4915      	ldr	r1, [pc, #84]	; (8003f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f3e:	4b14      	ldr	r3, [pc, #80]	; (8003f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a13      	ldr	r2, [pc, #76]	; (8003f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f48:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4a:	f7fe f945 	bl	80021d8 <HAL_GetTick>
 8003f4e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f50:	e009      	b.n	8003f66 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f52:	f7fe f941 	bl	80021d8 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d902      	bls.n	8003f66 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	73fb      	strb	r3, [r7, #15]
          break;
 8003f64:	e005      	b.n	8003f72 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f66:	4b0a      	ldr	r3, [pc, #40]	; (8003f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0ef      	beq.n	8003f52 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003f72:	7bfb      	ldrb	r3, [r7, #15]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d106      	bne.n	8003f86 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f78:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f7a:	691a      	ldr	r2, [r3, #16]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	4903      	ldr	r1, [pc, #12]	; (8003f90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40021000 	.word	0x40021000

08003f94 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d06c      	beq.n	8004080 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fd fe26 	bl	8001c0c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	22ca      	movs	r2, #202	; 0xca
 8003fce:	625a      	str	r2, [r3, #36]	; 0x24
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2253      	movs	r2, #83	; 0x53
 8003fd6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f87c 	bl	80040d6 <RTC_EnterInitMode>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d14b      	bne.n	8004080 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6812      	ldr	r2, [r2, #0]
 8003ff2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ffa:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6899      	ldr	r1, [r3, #8]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	431a      	orrs	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	68d2      	ldr	r2, [r2, #12]
 8004022:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6919      	ldr	r1, [r3, #16]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	041a      	lsls	r2, r3, #16
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f87f 	bl	800413c <RTC_ExitInitMode>
 800403e:	4603      	mov	r3, r0
 8004040:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004042:	7bfb      	ldrb	r3, [r7, #15]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d11b      	bne.n	8004080 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0203 	bic.w	r2, r2, #3
 8004056:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69da      	ldr	r2, [r3, #28]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	22ff      	movs	r2, #255	; 0xff
 8004076:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004080:	7bfb      	ldrb	r3, [r7, #15]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b084      	sub	sp, #16
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040a0:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80040a2:	f7fe f899 	bl	80021d8 <HAL_GetTick>
 80040a6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80040a8:	e009      	b.n	80040be <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80040aa:	f7fe f895 	bl	80021d8 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040b8:	d901      	bls.n	80040be <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e007      	b.n	80040ce <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f003 0320 	and.w	r3, r3, #32
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0ee      	beq.n	80040aa <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b084      	sub	sp, #16
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d120      	bne.n	8004132 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f04f 32ff 	mov.w	r2, #4294967295
 80040f8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80040fa:	f7fe f86d 	bl	80021d8 <HAL_GetTick>
 80040fe:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004100:	e00d      	b.n	800411e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004102:	f7fe f869 	bl	80021d8 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004110:	d905      	bls.n	800411e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2203      	movs	r2, #3
 800411a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004128:	2b00      	cmp	r3, #0
 800412a:	d102      	bne.n	8004132 <RTC_EnterInitMode+0x5c>
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	2b03      	cmp	r3, #3
 8004130:	d1e7      	bne.n	8004102 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004132:	7bfb      	ldrb	r3, [r7, #15]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004144:	2300      	movs	r3, #0
 8004146:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004148:	4b1a      	ldr	r3, [pc, #104]	; (80041b4 <RTC_ExitInitMode+0x78>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	4a19      	ldr	r2, [pc, #100]	; (80041b4 <RTC_ExitInitMode+0x78>)
 800414e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004152:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004154:	4b17      	ldr	r3, [pc, #92]	; (80041b4 <RTC_ExitInitMode+0x78>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 0320 	and.w	r3, r3, #32
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10c      	bne.n	800417a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7ff ff92 	bl	800408a <HAL_RTC_WaitForSynchro>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d01e      	beq.n	80041aa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2203      	movs	r2, #3
 8004170:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	73fb      	strb	r3, [r7, #15]
 8004178:	e017      	b.n	80041aa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800417a:	4b0e      	ldr	r3, [pc, #56]	; (80041b4 <RTC_ExitInitMode+0x78>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	4a0d      	ldr	r2, [pc, #52]	; (80041b4 <RTC_ExitInitMode+0x78>)
 8004180:	f023 0320 	bic.w	r3, r3, #32
 8004184:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7ff ff7f 	bl	800408a <HAL_RTC_WaitForSynchro>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d005      	beq.n	800419e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2203      	movs	r2, #3
 8004196:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800419e:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <RTC_ExitInitMode+0x78>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	4a04      	ldr	r2, [pc, #16]	; (80041b4 <RTC_ExitInitMode+0x78>)
 80041a4:	f043 0320 	orr.w	r3, r3, #32
 80041a8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	40002800 	.word	0x40002800

080041b8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80041c0:	4b0f      	ldr	r3, [pc, #60]	; (8004200 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80041c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80041c6:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00b      	beq.n	80041ee <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80041e6:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f80b 	bl	8004204 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80041f6:	bf00      	nop
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	40010400 	.word	0x40010400

08004204 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e049      	b.n	80042be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d106      	bne.n	8004244 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fd fd1c 	bl	8001c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3304      	adds	r3, #4
 8004254:	4619      	mov	r1, r3
 8004256:	4610      	mov	r0, r2
 8004258:	f000 fa00 	bl	800465c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d001      	beq.n	80042e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e03b      	b.n	8004358 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a19      	ldr	r2, [pc, #100]	; (8004364 <HAL_TIM_Base_Start_IT+0x9c>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d009      	beq.n	8004316 <HAL_TIM_Base_Start_IT+0x4e>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800430a:	d004      	beq.n	8004316 <HAL_TIM_Base_Start_IT+0x4e>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a15      	ldr	r2, [pc, #84]	; (8004368 <HAL_TIM_Base_Start_IT+0xa0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d115      	bne.n	8004342 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	4b13      	ldr	r3, [pc, #76]	; (800436c <HAL_TIM_Base_Start_IT+0xa4>)
 800431e:	4013      	ands	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2b06      	cmp	r3, #6
 8004326:	d015      	beq.n	8004354 <HAL_TIM_Base_Start_IT+0x8c>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800432e:	d011      	beq.n	8004354 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0201 	orr.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004340:	e008      	b.n	8004354 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f042 0201 	orr.w	r2, r2, #1
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	e000      	b.n	8004356 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004354:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	40012c00 	.word	0x40012c00
 8004368:	40014000 	.word	0x40014000
 800436c:	00010007 	.word	0x00010007

08004370 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0201 	bic.w	r2, r2, #1
 8004386:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6a1a      	ldr	r2, [r3, #32]
 800438e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004392:	4013      	ands	r3, r2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10f      	bne.n	80043b8 <HAL_TIM_Base_Stop_IT+0x48>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6a1a      	ldr	r2, [r3, #32]
 800439e:	f240 4344 	movw	r3, #1092	; 0x444
 80043a2:	4013      	ands	r3, r2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d107      	bne.n	80043b8 <HAL_TIM_Base_Stop_IT+0x48>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0201 	bic.w	r2, r2, #1
 80043b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b082      	sub	sp, #8
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d122      	bne.n	800442a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d11b      	bne.n	800442a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f06f 0202 	mvn.w	r2, #2
 80043fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	f003 0303 	and.w	r3, r3, #3
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f905 	bl	8004620 <HAL_TIM_IC_CaptureCallback>
 8004416:	e005      	b.n	8004424 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 f8f7 	bl	800460c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f908 	bl	8004634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b04      	cmp	r3, #4
 8004436:	d122      	bne.n	800447e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	2b04      	cmp	r3, #4
 8004444:	d11b      	bne.n	800447e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f06f 0204 	mvn.w	r2, #4
 800444e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f8db 	bl	8004620 <HAL_TIM_IC_CaptureCallback>
 800446a:	e005      	b.n	8004478 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f8cd 	bl	800460c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f8de 	bl	8004634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b08      	cmp	r3, #8
 800448a:	d122      	bne.n	80044d2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	f003 0308 	and.w	r3, r3, #8
 8004496:	2b08      	cmp	r3, #8
 8004498:	d11b      	bne.n	80044d2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f06f 0208 	mvn.w	r2, #8
 80044a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2204      	movs	r2, #4
 80044a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	f003 0303 	and.w	r3, r3, #3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f8b1 	bl	8004620 <HAL_TIM_IC_CaptureCallback>
 80044be:	e005      	b.n	80044cc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f8a3 	bl	800460c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f8b4 	bl	8004634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	f003 0310 	and.w	r3, r3, #16
 80044dc:	2b10      	cmp	r3, #16
 80044de:	d122      	bne.n	8004526 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f003 0310 	and.w	r3, r3, #16
 80044ea:	2b10      	cmp	r3, #16
 80044ec:	d11b      	bne.n	8004526 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f06f 0210 	mvn.w	r2, #16
 80044f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2208      	movs	r2, #8
 80044fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f887 	bl	8004620 <HAL_TIM_IC_CaptureCallback>
 8004512:	e005      	b.n	8004520 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f879 	bl	800460c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f88a 	bl	8004634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b01      	cmp	r3, #1
 8004532:	d10e      	bne.n	8004552 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b01      	cmp	r3, #1
 8004540:	d107      	bne.n	8004552 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f06f 0201 	mvn.w	r2, #1
 800454a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7fd fad3 	bl	8001af8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455c:	2b80      	cmp	r3, #128	; 0x80
 800455e:	d10e      	bne.n	800457e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800456a:	2b80      	cmp	r3, #128	; 0x80
 800456c:	d107      	bne.n	800457e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f943 	bl	8004804 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800458c:	d10e      	bne.n	80045ac <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004598:	2b80      	cmp	r3, #128	; 0x80
 800459a:	d107      	bne.n	80045ac <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80045a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f936 	bl	8004818 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b6:	2b40      	cmp	r3, #64	; 0x40
 80045b8:	d10e      	bne.n	80045d8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c4:	2b40      	cmp	r3, #64	; 0x40
 80045c6:	d107      	bne.n	80045d8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f838 	bl	8004648 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	f003 0320 	and.w	r3, r3, #32
 80045e2:	2b20      	cmp	r3, #32
 80045e4:	d10e      	bne.n	8004604 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f003 0320 	and.w	r3, r3, #32
 80045f0:	2b20      	cmp	r3, #32
 80045f2:	d107      	bne.n	8004604 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f06f 0220 	mvn.w	r2, #32
 80045fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f8f6 	bl	80047f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004604:	bf00      	nop
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a2a      	ldr	r2, [pc, #168]	; (8004718 <TIM_Base_SetConfig+0xbc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d003      	beq.n	800467c <TIM_Base_SetConfig+0x20>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800467a:	d108      	bne.n	800468e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a21      	ldr	r2, [pc, #132]	; (8004718 <TIM_Base_SetConfig+0xbc>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d00b      	beq.n	80046ae <TIM_Base_SetConfig+0x52>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469c:	d007      	beq.n	80046ae <TIM_Base_SetConfig+0x52>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a1e      	ldr	r2, [pc, #120]	; (800471c <TIM_Base_SetConfig+0xc0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d003      	beq.n	80046ae <TIM_Base_SetConfig+0x52>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a1d      	ldr	r2, [pc, #116]	; (8004720 <TIM_Base_SetConfig+0xc4>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d108      	bne.n	80046c0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	4313      	orrs	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a0c      	ldr	r2, [pc, #48]	; (8004718 <TIM_Base_SetConfig+0xbc>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d007      	beq.n	80046fc <TIM_Base_SetConfig+0xa0>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a0b      	ldr	r2, [pc, #44]	; (800471c <TIM_Base_SetConfig+0xc0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d003      	beq.n	80046fc <TIM_Base_SetConfig+0xa0>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a0a      	ldr	r2, [pc, #40]	; (8004720 <TIM_Base_SetConfig+0xc4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d103      	bne.n	8004704 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	615a      	str	r2, [r3, #20]
}
 800470a:	bf00      	nop
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40012c00 	.word	0x40012c00
 800471c:	40014000 	.word	0x40014000
 8004720:	40014400 	.word	0x40014400

08004724 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004738:	2302      	movs	r3, #2
 800473a:	e04f      	b.n	80047dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a21      	ldr	r2, [pc, #132]	; (80047e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d108      	bne.n	8004778 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800476c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4313      	orrs	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	4313      	orrs	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a14      	ldr	r2, [pc, #80]	; (80047e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d009      	beq.n	80047b0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a4:	d004      	beq.n	80047b0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a10      	ldr	r2, [pc, #64]	; (80047ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d10c      	bne.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	40012c00 	.word	0x40012c00
 80047ec:	40014000 	.word	0x40014000

080047f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e040      	b.n	80048c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004842:	2b00      	cmp	r3, #0
 8004844:	d106      	bne.n	8004854 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7fd fa3a 	bl	8001cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2224      	movs	r2, #36	; 0x24
 8004858:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 0201 	bic.w	r2, r2, #1
 8004868:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fbca 	bl	8005004 <UART_SetConfig>
 8004870:	4603      	mov	r3, r0
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e022      	b.n	80048c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fdea 	bl	800545c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004896:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0201 	orr.w	r2, r2, #1
 80048b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 fe71 	bl	80055a0 <UART_CheckIdleState>
 80048be:	4603      	mov	r3, r0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08a      	sub	sp, #40	; 0x28
 80048cc:	af02      	add	r7, sp, #8
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	603b      	str	r3, [r7, #0]
 80048d4:	4613      	mov	r3, r2
 80048d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048dc:	2b20      	cmp	r3, #32
 80048de:	f040 8082 	bne.w	80049e6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <HAL_UART_Transmit+0x26>
 80048e8:	88fb      	ldrh	r3, [r7, #6]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e07a      	b.n	80049e8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_UART_Transmit+0x38>
 80048fc:	2302      	movs	r3, #2
 80048fe:	e073      	b.n	80049e8 <HAL_UART_Transmit+0x120>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2221      	movs	r2, #33	; 0x21
 8004914:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004916:	f7fd fc5f 	bl	80021d8 <HAL_GetTick>
 800491a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	88fa      	ldrh	r2, [r7, #6]
 8004920:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	88fa      	ldrh	r2, [r7, #6]
 8004928:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004934:	d108      	bne.n	8004948 <HAL_UART_Transmit+0x80>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d104      	bne.n	8004948 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800493e:	2300      	movs	r3, #0
 8004940:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	61bb      	str	r3, [r7, #24]
 8004946:	e003      	b.n	8004950 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800494c:	2300      	movs	r3, #0
 800494e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004958:	e02d      	b.n	80049b6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2200      	movs	r2, #0
 8004962:	2180      	movs	r1, #128	; 0x80
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 fe64 	bl	8005632 <UART_WaitOnFlagUntilTimeout>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e039      	b.n	80049e8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10b      	bne.n	8004992 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	881a      	ldrh	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004986:	b292      	uxth	r2, r2
 8004988:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	3302      	adds	r3, #2
 800498e:	61bb      	str	r3, [r7, #24]
 8004990:	e008      	b.n	80049a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	781a      	ldrb	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	b292      	uxth	r2, r2
 800499c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	3301      	adds	r3, #1
 80049a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049bc:	b29b      	uxth	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1cb      	bne.n	800495a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2200      	movs	r2, #0
 80049ca:	2140      	movs	r1, #64	; 0x40
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 fe30 	bl	8005632 <UART_WaitOnFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e005      	b.n	80049e8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2220      	movs	r2, #32
 80049e0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80049e2:	2300      	movs	r3, #0
 80049e4:	e000      	b.n	80049e8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80049e6:	2302      	movs	r3, #2
  }
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3720      	adds	r7, #32
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b0ba      	sub	sp, #232	; 0xe8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004a1a:	f640 030f 	movw	r3, #2063	; 0x80f
 8004a1e:	4013      	ands	r3, r2
 8004a20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004a24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d115      	bne.n	8004a58 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a30:	f003 0320 	and.w	r3, r3, #32
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00f      	beq.n	8004a58 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a3c:	f003 0320 	and.w	r3, r3, #32
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d009      	beq.n	8004a58 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 82a6 	beq.w	8004f9a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	4798      	blx	r3
      }
      return;
 8004a56:	e2a0      	b.n	8004f9a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004a58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 8117 	beq.w	8004c90 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d106      	bne.n	8004a7c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004a6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004a72:	4b85      	ldr	r3, [pc, #532]	; (8004c88 <HAL_UART_IRQHandler+0x298>)
 8004a74:	4013      	ands	r3, r2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 810a 	beq.w	8004c90 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d011      	beq.n	8004aac <HAL_UART_IRQHandler+0xbc>
 8004a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00b      	beq.n	8004aac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aa2:	f043 0201 	orr.w	r2, r3, #1
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d011      	beq.n	8004adc <HAL_UART_IRQHandler+0xec>
 8004ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00b      	beq.n	8004adc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ad2:	f043 0204 	orr.w	r2, r3, #4
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d011      	beq.n	8004b0c <HAL_UART_IRQHandler+0x11c>
 8004ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00b      	beq.n	8004b0c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2204      	movs	r2, #4
 8004afa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b02:	f043 0202 	orr.w	r2, r3, #2
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b10:	f003 0308 	and.w	r3, r3, #8
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d017      	beq.n	8004b48 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b1c:	f003 0320 	and.w	r3, r3, #32
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d105      	bne.n	8004b30 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004b24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b28:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00b      	beq.n	8004b48 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2208      	movs	r2, #8
 8004b36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b3e:	f043 0208 	orr.w	r2, r3, #8
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d012      	beq.n	8004b7a <HAL_UART_IRQHandler+0x18a>
 8004b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00c      	beq.n	8004b7a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b70:	f043 0220 	orr.w	r2, r3, #32
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 820c 	beq.w	8004f9e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00d      	beq.n	8004bae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d007      	beq.n	8004bae <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc2:	2b40      	cmp	r3, #64	; 0x40
 8004bc4:	d005      	beq.n	8004bd2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d04f      	beq.n	8004c72 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 febe 	bl	8005954 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be2:	2b40      	cmp	r3, #64	; 0x40
 8004be4:	d141      	bne.n	8004c6a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3308      	adds	r3, #8
 8004bec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bf4:	e853 3f00 	ldrex	r3, [r3]
 8004bf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3308      	adds	r3, #8
 8004c0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c22:	e841 2300 	strex	r3, r2, [r1]
 8004c26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1d9      	bne.n	8004be6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d013      	beq.n	8004c62 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3e:	4a13      	ldr	r2, [pc, #76]	; (8004c8c <HAL_UART_IRQHandler+0x29c>)
 8004c40:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fd fd5e 	bl	8002708 <HAL_DMA_Abort_IT>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d017      	beq.n	8004c82 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c60:	e00f      	b.n	8004c82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f9c4 	bl	8004ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c68:	e00b      	b.n	8004c82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f9c0 	bl	8004ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c70:	e007      	b.n	8004c82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f9bc 	bl	8004ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004c80:	e18d      	b.n	8004f9e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c82:	bf00      	nop
    return;
 8004c84:	e18b      	b.n	8004f9e <HAL_UART_IRQHandler+0x5ae>
 8004c86:	bf00      	nop
 8004c88:	04000120 	.word	0x04000120
 8004c8c:	08005bf3 	.word	0x08005bf3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	f040 8146 	bne.w	8004f26 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c9e:	f003 0310 	and.w	r3, r3, #16
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 813f 	beq.w	8004f26 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cac:	f003 0310 	and.w	r3, r3, #16
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 8138 	beq.w	8004f26 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2210      	movs	r2, #16
 8004cbc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc8:	2b40      	cmp	r3, #64	; 0x40
 8004cca:	f040 80b4 	bne.w	8004e36 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004cda:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 815f 	beq.w	8004fa2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004cea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	f080 8157 	bcs.w	8004fa2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cfa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0320 	and.w	r3, r3, #32
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f040 8085 	bne.w	8004e1a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d1c:	e853 3f00 	ldrex	r3, [r3]
 8004d20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	461a      	mov	r2, r3
 8004d36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d3e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d4a:	e841 2300 	strex	r3, r2, [r1]
 8004d4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1da      	bne.n	8004d10 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	3308      	adds	r3, #8
 8004d60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d64:	e853 3f00 	ldrex	r3, [r3]
 8004d68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d6c:	f023 0301 	bic.w	r3, r3, #1
 8004d70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	3308      	adds	r3, #8
 8004d7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d8a:	e841 2300 	strex	r3, r2, [r1]
 8004d8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1e1      	bne.n	8004d5a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3308      	adds	r3, #8
 8004d9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004da0:	e853 3f00 	ldrex	r3, [r3]
 8004da4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	3308      	adds	r3, #8
 8004db6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004dba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004dbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004dc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004dc2:	e841 2300 	strex	r3, r2, [r1]
 8004dc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004dc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1e3      	bne.n	8004d96 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004de2:	e853 3f00 	ldrex	r3, [r3]
 8004de6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dea:	f023 0310 	bic.w	r3, r3, #16
 8004dee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	461a      	mov	r2, r3
 8004df8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dfc:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dfe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e04:	e841 2300 	strex	r3, r2, [r1]
 8004e08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1e4      	bne.n	8004dda <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7fd fc39 	bl	800268c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7fc fea4 	bl	8001b7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e34:	e0b5      	b.n	8004fa2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f000 80a7 	beq.w	8004fa6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004e58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 80a2 	beq.w	8004fa6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6a:	e853 3f00 	ldrex	r3, [r3]
 8004e6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e84:	647b      	str	r3, [r7, #68]	; 0x44
 8004e86:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e8c:	e841 2300 	strex	r3, r2, [r1]
 8004e90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1e4      	bne.n	8004e62 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	e853 3f00 	ldrex	r3, [r3]
 8004ea6:	623b      	str	r3, [r7, #32]
   return(result);
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	f023 0301 	bic.w	r3, r3, #1
 8004eae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	3308      	adds	r3, #8
 8004eb8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ebc:	633a      	str	r2, [r7, #48]	; 0x30
 8004ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ec2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ec4:	e841 2300 	strex	r3, r2, [r1]
 8004ec8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1e3      	bne.n	8004e98 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	e853 3f00 	ldrex	r3, [r3]
 8004eee:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0310 	bic.w	r3, r3, #16
 8004ef6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	461a      	mov	r2, r3
 8004f00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f04:	61fb      	str	r3, [r7, #28]
 8004f06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f08:	69b9      	ldr	r1, [r7, #24]
 8004f0a:	69fa      	ldr	r2, [r7, #28]
 8004f0c:	e841 2300 	strex	r3, r2, [r1]
 8004f10:	617b      	str	r3, [r7, #20]
   return(result);
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1e4      	bne.n	8004ee2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7fc fe2c 	bl	8001b7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f24:	e03f      	b.n	8004fa6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00e      	beq.n	8004f50 <HAL_UART_IRQHandler+0x560>
 8004f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d008      	beq.n	8004f50 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 fe92 	bl	8005c72 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f4e:	e02d      	b.n	8004fac <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00e      	beq.n	8004f7a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d008      	beq.n	8004f7a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d01c      	beq.n	8004faa <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	4798      	blx	r3
    }
    return;
 8004f78:	e017      	b.n	8004faa <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d012      	beq.n	8004fac <HAL_UART_IRQHandler+0x5bc>
 8004f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00c      	beq.n	8004fac <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fe43 	bl	8005c1e <UART_EndTransmit_IT>
    return;
 8004f98:	e008      	b.n	8004fac <HAL_UART_IRQHandler+0x5bc>
      return;
 8004f9a:	bf00      	nop
 8004f9c:	e006      	b.n	8004fac <HAL_UART_IRQHandler+0x5bc>
    return;
 8004f9e:	bf00      	nop
 8004fa0:	e004      	b.n	8004fac <HAL_UART_IRQHandler+0x5bc>
      return;
 8004fa2:	bf00      	nop
 8004fa4:	e002      	b.n	8004fac <HAL_UART_IRQHandler+0x5bc>
      return;
 8004fa6:	bf00      	nop
 8004fa8:	e000      	b.n	8004fac <HAL_UART_IRQHandler+0x5bc>
    return;
 8004faa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004fac:	37e8      	adds	r7, #232	; 0xe8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop

08004fb4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005008:	b08a      	sub	sp, #40	; 0x28
 800500a:	af00      	add	r7, sp, #0
 800500c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800500e:	2300      	movs	r3, #0
 8005010:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	431a      	orrs	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	431a      	orrs	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	69db      	ldr	r3, [r3, #28]
 8005028:	4313      	orrs	r3, r2
 800502a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	4bb4      	ldr	r3, [pc, #720]	; (8005304 <UART_SetConfig+0x300>)
 8005034:	4013      	ands	r3, r2
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	6812      	ldr	r2, [r2, #0]
 800503a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800503c:	430b      	orrs	r3, r1
 800503e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4aa9      	ldr	r2, [pc, #676]	; (8005308 <UART_SetConfig+0x304>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d004      	beq.n	8005070 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800506c:	4313      	orrs	r3, r2
 800506e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005080:	430a      	orrs	r2, r1
 8005082:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4aa0      	ldr	r2, [pc, #640]	; (800530c <UART_SetConfig+0x308>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d126      	bne.n	80050dc <UART_SetConfig+0xd8>
 800508e:	4ba0      	ldr	r3, [pc, #640]	; (8005310 <UART_SetConfig+0x30c>)
 8005090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005094:	f003 0303 	and.w	r3, r3, #3
 8005098:	2b03      	cmp	r3, #3
 800509a:	d81b      	bhi.n	80050d4 <UART_SetConfig+0xd0>
 800509c:	a201      	add	r2, pc, #4	; (adr r2, 80050a4 <UART_SetConfig+0xa0>)
 800509e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a2:	bf00      	nop
 80050a4:	080050b5 	.word	0x080050b5
 80050a8:	080050c5 	.word	0x080050c5
 80050ac:	080050bd 	.word	0x080050bd
 80050b0:	080050cd 	.word	0x080050cd
 80050b4:	2301      	movs	r3, #1
 80050b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ba:	e080      	b.n	80051be <UART_SetConfig+0x1ba>
 80050bc:	2302      	movs	r3, #2
 80050be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050c2:	e07c      	b.n	80051be <UART_SetConfig+0x1ba>
 80050c4:	2304      	movs	r3, #4
 80050c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ca:	e078      	b.n	80051be <UART_SetConfig+0x1ba>
 80050cc:	2308      	movs	r3, #8
 80050ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050d2:	e074      	b.n	80051be <UART_SetConfig+0x1ba>
 80050d4:	2310      	movs	r3, #16
 80050d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050da:	e070      	b.n	80051be <UART_SetConfig+0x1ba>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a8c      	ldr	r2, [pc, #560]	; (8005314 <UART_SetConfig+0x310>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d138      	bne.n	8005158 <UART_SetConfig+0x154>
 80050e6:	4b8a      	ldr	r3, [pc, #552]	; (8005310 <UART_SetConfig+0x30c>)
 80050e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ec:	f003 030c 	and.w	r3, r3, #12
 80050f0:	2b0c      	cmp	r3, #12
 80050f2:	d82d      	bhi.n	8005150 <UART_SetConfig+0x14c>
 80050f4:	a201      	add	r2, pc, #4	; (adr r2, 80050fc <UART_SetConfig+0xf8>)
 80050f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fa:	bf00      	nop
 80050fc:	08005131 	.word	0x08005131
 8005100:	08005151 	.word	0x08005151
 8005104:	08005151 	.word	0x08005151
 8005108:	08005151 	.word	0x08005151
 800510c:	08005141 	.word	0x08005141
 8005110:	08005151 	.word	0x08005151
 8005114:	08005151 	.word	0x08005151
 8005118:	08005151 	.word	0x08005151
 800511c:	08005139 	.word	0x08005139
 8005120:	08005151 	.word	0x08005151
 8005124:	08005151 	.word	0x08005151
 8005128:	08005151 	.word	0x08005151
 800512c:	08005149 	.word	0x08005149
 8005130:	2300      	movs	r3, #0
 8005132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005136:	e042      	b.n	80051be <UART_SetConfig+0x1ba>
 8005138:	2302      	movs	r3, #2
 800513a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800513e:	e03e      	b.n	80051be <UART_SetConfig+0x1ba>
 8005140:	2304      	movs	r3, #4
 8005142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005146:	e03a      	b.n	80051be <UART_SetConfig+0x1ba>
 8005148:	2308      	movs	r3, #8
 800514a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800514e:	e036      	b.n	80051be <UART_SetConfig+0x1ba>
 8005150:	2310      	movs	r3, #16
 8005152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005156:	e032      	b.n	80051be <UART_SetConfig+0x1ba>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a6a      	ldr	r2, [pc, #424]	; (8005308 <UART_SetConfig+0x304>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d12a      	bne.n	80051b8 <UART_SetConfig+0x1b4>
 8005162:	4b6b      	ldr	r3, [pc, #428]	; (8005310 <UART_SetConfig+0x30c>)
 8005164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005168:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800516c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005170:	d01a      	beq.n	80051a8 <UART_SetConfig+0x1a4>
 8005172:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005176:	d81b      	bhi.n	80051b0 <UART_SetConfig+0x1ac>
 8005178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800517c:	d00c      	beq.n	8005198 <UART_SetConfig+0x194>
 800517e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005182:	d815      	bhi.n	80051b0 <UART_SetConfig+0x1ac>
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <UART_SetConfig+0x18c>
 8005188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800518c:	d008      	beq.n	80051a0 <UART_SetConfig+0x19c>
 800518e:	e00f      	b.n	80051b0 <UART_SetConfig+0x1ac>
 8005190:	2300      	movs	r3, #0
 8005192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005196:	e012      	b.n	80051be <UART_SetConfig+0x1ba>
 8005198:	2302      	movs	r3, #2
 800519a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800519e:	e00e      	b.n	80051be <UART_SetConfig+0x1ba>
 80051a0:	2304      	movs	r3, #4
 80051a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051a6:	e00a      	b.n	80051be <UART_SetConfig+0x1ba>
 80051a8:	2308      	movs	r3, #8
 80051aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ae:	e006      	b.n	80051be <UART_SetConfig+0x1ba>
 80051b0:	2310      	movs	r3, #16
 80051b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051b6:	e002      	b.n	80051be <UART_SetConfig+0x1ba>
 80051b8:	2310      	movs	r3, #16
 80051ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a51      	ldr	r2, [pc, #324]	; (8005308 <UART_SetConfig+0x304>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d17a      	bne.n	80052be <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	d824      	bhi.n	800521a <UART_SetConfig+0x216>
 80051d0:	a201      	add	r2, pc, #4	; (adr r2, 80051d8 <UART_SetConfig+0x1d4>)
 80051d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d6:	bf00      	nop
 80051d8:	080051fd 	.word	0x080051fd
 80051dc:	0800521b 	.word	0x0800521b
 80051e0:	08005205 	.word	0x08005205
 80051e4:	0800521b 	.word	0x0800521b
 80051e8:	0800520b 	.word	0x0800520b
 80051ec:	0800521b 	.word	0x0800521b
 80051f0:	0800521b 	.word	0x0800521b
 80051f4:	0800521b 	.word	0x0800521b
 80051f8:	08005213 	.word	0x08005213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051fc:	f7fe fb46 	bl	800388c <HAL_RCC_GetPCLK1Freq>
 8005200:	61f8      	str	r0, [r7, #28]
        break;
 8005202:	e010      	b.n	8005226 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005204:	4b44      	ldr	r3, [pc, #272]	; (8005318 <UART_SetConfig+0x314>)
 8005206:	61fb      	str	r3, [r7, #28]
        break;
 8005208:	e00d      	b.n	8005226 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800520a:	f7fe faa7 	bl	800375c <HAL_RCC_GetSysClockFreq>
 800520e:	61f8      	str	r0, [r7, #28]
        break;
 8005210:	e009      	b.n	8005226 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005216:	61fb      	str	r3, [r7, #28]
        break;
 8005218:	e005      	b.n	8005226 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800521a:	2300      	movs	r3, #0
 800521c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005224:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 8107 	beq.w	800543c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	4613      	mov	r3, r2
 8005234:	005b      	lsls	r3, r3, #1
 8005236:	4413      	add	r3, r2
 8005238:	69fa      	ldr	r2, [r7, #28]
 800523a:	429a      	cmp	r2, r3
 800523c:	d305      	bcc.n	800524a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005244:	69fa      	ldr	r2, [r7, #28]
 8005246:	429a      	cmp	r2, r3
 8005248:	d903      	bls.n	8005252 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005250:	e0f4      	b.n	800543c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	2200      	movs	r2, #0
 8005256:	461c      	mov	r4, r3
 8005258:	4615      	mov	r5, r2
 800525a:	f04f 0200 	mov.w	r2, #0
 800525e:	f04f 0300 	mov.w	r3, #0
 8005262:	022b      	lsls	r3, r5, #8
 8005264:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005268:	0222      	lsls	r2, r4, #8
 800526a:	68f9      	ldr	r1, [r7, #12]
 800526c:	6849      	ldr	r1, [r1, #4]
 800526e:	0849      	lsrs	r1, r1, #1
 8005270:	2000      	movs	r0, #0
 8005272:	4688      	mov	r8, r1
 8005274:	4681      	mov	r9, r0
 8005276:	eb12 0a08 	adds.w	sl, r2, r8
 800527a:	eb43 0b09 	adc.w	fp, r3, r9
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	603b      	str	r3, [r7, #0]
 8005286:	607a      	str	r2, [r7, #4]
 8005288:	e9d7 2300 	ldrd	r2, r3, [r7]
 800528c:	4650      	mov	r0, sl
 800528e:	4659      	mov	r1, fp
 8005290:	f7fb fcd2 	bl	8000c38 <__aeabi_uldivmod>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4613      	mov	r3, r2
 800529a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052a2:	d308      	bcc.n	80052b6 <UART_SetConfig+0x2b2>
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052aa:	d204      	bcs.n	80052b6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	60da      	str	r2, [r3, #12]
 80052b4:	e0c2      	b.n	800543c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80052bc:	e0be      	b.n	800543c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052c6:	d16a      	bne.n	800539e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80052c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d834      	bhi.n	800533a <UART_SetConfig+0x336>
 80052d0:	a201      	add	r2, pc, #4	; (adr r2, 80052d8 <UART_SetConfig+0x2d4>)
 80052d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d6:	bf00      	nop
 80052d8:	080052fd 	.word	0x080052fd
 80052dc:	0800531d 	.word	0x0800531d
 80052e0:	08005325 	.word	0x08005325
 80052e4:	0800533b 	.word	0x0800533b
 80052e8:	0800532b 	.word	0x0800532b
 80052ec:	0800533b 	.word	0x0800533b
 80052f0:	0800533b 	.word	0x0800533b
 80052f4:	0800533b 	.word	0x0800533b
 80052f8:	08005333 	.word	0x08005333
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052fc:	f7fe fac6 	bl	800388c <HAL_RCC_GetPCLK1Freq>
 8005300:	61f8      	str	r0, [r7, #28]
        break;
 8005302:	e020      	b.n	8005346 <UART_SetConfig+0x342>
 8005304:	efff69f3 	.word	0xefff69f3
 8005308:	40008000 	.word	0x40008000
 800530c:	40013800 	.word	0x40013800
 8005310:	40021000 	.word	0x40021000
 8005314:	40004400 	.word	0x40004400
 8005318:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800531c:	f7fe facc 	bl	80038b8 <HAL_RCC_GetPCLK2Freq>
 8005320:	61f8      	str	r0, [r7, #28]
        break;
 8005322:	e010      	b.n	8005346 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005324:	4b4c      	ldr	r3, [pc, #304]	; (8005458 <UART_SetConfig+0x454>)
 8005326:	61fb      	str	r3, [r7, #28]
        break;
 8005328:	e00d      	b.n	8005346 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800532a:	f7fe fa17 	bl	800375c <HAL_RCC_GetSysClockFreq>
 800532e:	61f8      	str	r0, [r7, #28]
        break;
 8005330:	e009      	b.n	8005346 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005336:	61fb      	str	r3, [r7, #28]
        break;
 8005338:	e005      	b.n	8005346 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800533a:	2300      	movs	r3, #0
 800533c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005344:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d077      	beq.n	800543c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	005a      	lsls	r2, r3, #1
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	085b      	lsrs	r3, r3, #1
 8005356:	441a      	add	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005360:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	2b0f      	cmp	r3, #15
 8005366:	d916      	bls.n	8005396 <UART_SetConfig+0x392>
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800536e:	d212      	bcs.n	8005396 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	b29b      	uxth	r3, r3
 8005374:	f023 030f 	bic.w	r3, r3, #15
 8005378:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	085b      	lsrs	r3, r3, #1
 800537e:	b29b      	uxth	r3, r3
 8005380:	f003 0307 	and.w	r3, r3, #7
 8005384:	b29a      	uxth	r2, r3
 8005386:	8afb      	ldrh	r3, [r7, #22]
 8005388:	4313      	orrs	r3, r2
 800538a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	8afa      	ldrh	r2, [r7, #22]
 8005392:	60da      	str	r2, [r3, #12]
 8005394:	e052      	b.n	800543c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800539c:	e04e      	b.n	800543c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800539e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d827      	bhi.n	80053f6 <UART_SetConfig+0x3f2>
 80053a6:	a201      	add	r2, pc, #4	; (adr r2, 80053ac <UART_SetConfig+0x3a8>)
 80053a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ac:	080053d1 	.word	0x080053d1
 80053b0:	080053d9 	.word	0x080053d9
 80053b4:	080053e1 	.word	0x080053e1
 80053b8:	080053f7 	.word	0x080053f7
 80053bc:	080053e7 	.word	0x080053e7
 80053c0:	080053f7 	.word	0x080053f7
 80053c4:	080053f7 	.word	0x080053f7
 80053c8:	080053f7 	.word	0x080053f7
 80053cc:	080053ef 	.word	0x080053ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053d0:	f7fe fa5c 	bl	800388c <HAL_RCC_GetPCLK1Freq>
 80053d4:	61f8      	str	r0, [r7, #28]
        break;
 80053d6:	e014      	b.n	8005402 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053d8:	f7fe fa6e 	bl	80038b8 <HAL_RCC_GetPCLK2Freq>
 80053dc:	61f8      	str	r0, [r7, #28]
        break;
 80053de:	e010      	b.n	8005402 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053e0:	4b1d      	ldr	r3, [pc, #116]	; (8005458 <UART_SetConfig+0x454>)
 80053e2:	61fb      	str	r3, [r7, #28]
        break;
 80053e4:	e00d      	b.n	8005402 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053e6:	f7fe f9b9 	bl	800375c <HAL_RCC_GetSysClockFreq>
 80053ea:	61f8      	str	r0, [r7, #28]
        break;
 80053ec:	e009      	b.n	8005402 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053f2:	61fb      	str	r3, [r7, #28]
        break;
 80053f4:	e005      	b.n	8005402 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005400:	bf00      	nop
    }

    if (pclk != 0U)
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d019      	beq.n	800543c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	085a      	lsrs	r2, r3, #1
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	441a      	add	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	fbb2 f3f3 	udiv	r3, r2, r3
 800541a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	2b0f      	cmp	r3, #15
 8005420:	d909      	bls.n	8005436 <UART_SetConfig+0x432>
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005428:	d205      	bcs.n	8005436 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	b29a      	uxth	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	60da      	str	r2, [r3, #12]
 8005434:	e002      	b.n	800543c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005448:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800544c:	4618      	mov	r0, r3
 800544e:	3728      	adds	r7, #40	; 0x28
 8005450:	46bd      	mov	sp, r7
 8005452:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005456:	bf00      	nop
 8005458:	00f42400 	.word	0x00f42400

0800545c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00a      	beq.n	8005486 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00a      	beq.n	80054a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	f003 0304 	and.w	r3, r3, #4
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00a      	beq.n	80054ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	430a      	orrs	r2, r1
 80054c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	f003 0308 	and.w	r3, r3, #8
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00a      	beq.n	80054ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	430a      	orrs	r2, r1
 80054ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	f003 0310 	and.w	r3, r3, #16
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00a      	beq.n	800550e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	430a      	orrs	r2, r1
 800550c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	f003 0320 	and.w	r3, r3, #32
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00a      	beq.n	8005530 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	430a      	orrs	r2, r1
 800552e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005538:	2b00      	cmp	r3, #0
 800553a:	d01a      	beq.n	8005572 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800555a:	d10a      	bne.n	8005572 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00a      	beq.n	8005594 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	430a      	orrs	r2, r1
 8005592:	605a      	str	r2, [r3, #4]
  }
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af02      	add	r7, sp, #8
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055b0:	f7fc fe12 	bl	80021d8 <HAL_GetTick>
 80055b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0308 	and.w	r3, r3, #8
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d10e      	bne.n	80055e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f82d 	bl	8005632 <UART_WaitOnFlagUntilTimeout>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e023      	b.n	800562a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b04      	cmp	r3, #4
 80055ee:	d10e      	bne.n	800560e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f817 	bl	8005632 <UART_WaitOnFlagUntilTimeout>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e00d      	b.n	800562a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2220      	movs	r2, #32
 8005612:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2220      	movs	r2, #32
 8005618:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b09c      	sub	sp, #112	; 0x70
 8005636:	af00      	add	r7, sp, #0
 8005638:	60f8      	str	r0, [r7, #12]
 800563a:	60b9      	str	r1, [r7, #8]
 800563c:	603b      	str	r3, [r7, #0]
 800563e:	4613      	mov	r3, r2
 8005640:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005642:	e0a5      	b.n	8005790 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005644:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564a:	f000 80a1 	beq.w	8005790 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800564e:	f7fc fdc3 	bl	80021d8 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800565a:	429a      	cmp	r2, r3
 800565c:	d302      	bcc.n	8005664 <UART_WaitOnFlagUntilTimeout+0x32>
 800565e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005660:	2b00      	cmp	r3, #0
 8005662:	d13e      	bne.n	80056e2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800566c:	e853 3f00 	ldrex	r3, [r3]
 8005670:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005674:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005678:	667b      	str	r3, [r7, #100]	; 0x64
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	461a      	mov	r2, r3
 8005680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005682:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005684:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005686:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005688:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800568a:	e841 2300 	strex	r3, r2, [r1]
 800568e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1e6      	bne.n	8005664 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3308      	adds	r3, #8
 800569c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a8:	f023 0301 	bic.w	r3, r3, #1
 80056ac:	663b      	str	r3, [r7, #96]	; 0x60
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3308      	adds	r3, #8
 80056b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80056b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056be:	e841 2300 	strex	r3, r2, [r1]
 80056c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80056c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1e5      	bne.n	8005696 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2220      	movs	r2, #32
 80056ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2220      	movs	r2, #32
 80056d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e067      	b.n	80057b2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d04f      	beq.n	8005790 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056fe:	d147      	bne.n	8005790 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005708:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005712:	e853 3f00 	ldrex	r3, [r3]
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800571e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	461a      	mov	r2, r3
 8005726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005728:	637b      	str	r3, [r7, #52]	; 0x34
 800572a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800572e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005730:	e841 2300 	strex	r3, r2, [r1]
 8005734:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1e6      	bne.n	800570a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3308      	adds	r3, #8
 8005742:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	e853 3f00 	ldrex	r3, [r3]
 800574a:	613b      	str	r3, [r7, #16]
   return(result);
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	f023 0301 	bic.w	r3, r3, #1
 8005752:	66bb      	str	r3, [r7, #104]	; 0x68
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3308      	adds	r3, #8
 800575a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800575c:	623a      	str	r2, [r7, #32]
 800575e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005760:	69f9      	ldr	r1, [r7, #28]
 8005762:	6a3a      	ldr	r2, [r7, #32]
 8005764:	e841 2300 	strex	r3, r2, [r1]
 8005768:	61bb      	str	r3, [r7, #24]
   return(result);
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1e5      	bne.n	800573c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2220      	movs	r2, #32
 8005774:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2220      	movs	r2, #32
 800577a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2220      	movs	r2, #32
 8005780:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e010      	b.n	80057b2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	69da      	ldr	r2, [r3, #28]
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	4013      	ands	r3, r2
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	429a      	cmp	r2, r3
 800579e:	bf0c      	ite	eq
 80057a0:	2301      	moveq	r3, #1
 80057a2:	2300      	movne	r3, #0
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	461a      	mov	r2, r3
 80057a8:	79fb      	ldrb	r3, [r7, #7]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	f43f af4a 	beq.w	8005644 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3770      	adds	r7, #112	; 0x70
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
	...

080057bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b096      	sub	sp, #88	; 0x58
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	4613      	mov	r3, r2
 80057c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	88fa      	ldrh	r2, [r7, #6]
 80057d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2222      	movs	r2, #34	; 0x22
 80057e4:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d02b      	beq.n	8005846 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f2:	4a42      	ldr	r2, [pc, #264]	; (80058fc <UART_Start_Receive_DMA+0x140>)
 80057f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fa:	4a41      	ldr	r2, [pc, #260]	; (8005900 <UART_Start_Receive_DMA+0x144>)
 80057fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005802:	4a40      	ldr	r2, [pc, #256]	; (8005904 <UART_Start_Receive_DMA+0x148>)
 8005804:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580a:	2200      	movs	r2, #0
 800580c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3324      	adds	r3, #36	; 0x24
 8005818:	4619      	mov	r1, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581e:	461a      	mov	r2, r3
 8005820:	88fb      	ldrh	r3, [r7, #6]
 8005822:	f7fc fed3 	bl	80025cc <HAL_DMA_Start_IT>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00c      	beq.n	8005846 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2210      	movs	r2, #16
 8005830:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2220      	movs	r2, #32
 8005840:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e055      	b.n	80058f2 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d018      	beq.n	8005888 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800585e:	e853 3f00 	ldrex	r3, [r3]
 8005862:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800586a:	657b      	str	r3, [r7, #84]	; 0x54
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	461a      	mov	r2, r3
 8005872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005874:	64bb      	str	r3, [r7, #72]	; 0x48
 8005876:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005878:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800587a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800587c:	e841 2300 	strex	r3, r2, [r1]
 8005880:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1e6      	bne.n	8005856 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	3308      	adds	r3, #8
 800588e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005892:	e853 3f00 	ldrex	r3, [r3]
 8005896:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	f043 0301 	orr.w	r3, r3, #1
 800589e:	653b      	str	r3, [r7, #80]	; 0x50
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	3308      	adds	r3, #8
 80058a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80058a8:	637a      	str	r2, [r7, #52]	; 0x34
 80058aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058b0:	e841 2300 	strex	r3, r2, [r1]
 80058b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1e5      	bne.n	8005888 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	3308      	adds	r3, #8
 80058c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	e853 3f00 	ldrex	r3, [r3]
 80058ca:	613b      	str	r3, [r7, #16]
   return(result);
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3308      	adds	r3, #8
 80058da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058dc:	623a      	str	r2, [r7, #32]
 80058de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e0:	69f9      	ldr	r1, [r7, #28]
 80058e2:	6a3a      	ldr	r2, [r7, #32]
 80058e4:	e841 2300 	strex	r3, r2, [r1]
 80058e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1e5      	bne.n	80058bc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3758      	adds	r7, #88	; 0x58
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	08005a1b 	.word	0x08005a1b
 8005900:	08005b3f 	.word	0x08005b3f
 8005904:	08005b77 	.word	0x08005b77

08005908 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005908:	b480      	push	{r7}
 800590a:	b089      	sub	sp, #36	; 0x24
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	e853 3f00 	ldrex	r3, [r3]
 800591c:	60bb      	str	r3, [r7, #8]
   return(result);
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005924:	61fb      	str	r3, [r7, #28]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	461a      	mov	r2, r3
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	61bb      	str	r3, [r7, #24]
 8005930:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005932:	6979      	ldr	r1, [r7, #20]
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	e841 2300 	strex	r3, r2, [r1]
 800593a:	613b      	str	r3, [r7, #16]
   return(result);
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1e6      	bne.n	8005910 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2220      	movs	r2, #32
 8005946:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005948:	bf00      	nop
 800594a:	3724      	adds	r7, #36	; 0x24
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005954:	b480      	push	{r7}
 8005956:	b095      	sub	sp, #84	; 0x54
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005964:	e853 3f00 	ldrex	r3, [r3]
 8005968:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800596a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005970:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	461a      	mov	r2, r3
 8005978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800597a:	643b      	str	r3, [r7, #64]	; 0x40
 800597c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005980:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005982:	e841 2300 	strex	r3, r2, [r1]
 8005986:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1e6      	bne.n	800595c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	3308      	adds	r3, #8
 8005994:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	e853 3f00 	ldrex	r3, [r3]
 800599c:	61fb      	str	r3, [r7, #28]
   return(result);
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	f023 0301 	bic.w	r3, r3, #1
 80059a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	3308      	adds	r3, #8
 80059ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059b6:	e841 2300 	strex	r3, r2, [r1]
 80059ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1e5      	bne.n	800598e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d118      	bne.n	80059fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	e853 3f00 	ldrex	r3, [r3]
 80059d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f023 0310 	bic.w	r3, r3, #16
 80059de:	647b      	str	r3, [r7, #68]	; 0x44
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	461a      	mov	r2, r3
 80059e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059e8:	61bb      	str	r3, [r7, #24]
 80059ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ec:	6979      	ldr	r1, [r7, #20]
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	e841 2300 	strex	r3, r2, [r1]
 80059f4:	613b      	str	r3, [r7, #16]
   return(result);
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e6      	bne.n	80059ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2220      	movs	r2, #32
 8005a00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005a0e:	bf00      	nop
 8005a10:	3754      	adds	r7, #84	; 0x54
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b09c      	sub	sp, #112	; 0x70
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a26:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0320 	and.w	r3, r3, #32
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d170      	bne.n	8005b18 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8005a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a46:	e853 3f00 	ldrex	r3, [r3]
 8005a4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a52:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	461a      	mov	r2, r3
 8005a5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a5e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a64:	e841 2300 	strex	r3, r2, [r1]
 8005a68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1e6      	bne.n	8005a3e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3308      	adds	r3, #8
 8005a76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7a:	e853 3f00 	ldrex	r3, [r3]
 8005a7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a82:	f023 0301 	bic.w	r3, r3, #1
 8005a86:	667b      	str	r3, [r7, #100]	; 0x64
 8005a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3308      	adds	r3, #8
 8005a8e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005a90:	647a      	str	r2, [r7, #68]	; 0x44
 8005a92:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a98:	e841 2300 	strex	r3, r2, [r1]
 8005a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1e5      	bne.n	8005a70 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	e853 3f00 	ldrex	r3, [r3]
 8005ab2:	623b      	str	r3, [r7, #32]
   return(result);
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aba:	663b      	str	r3, [r7, #96]	; 0x60
 8005abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3308      	adds	r3, #8
 8005ac2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ac4:	633a      	str	r2, [r7, #48]	; 0x30
 8005ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005aca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005acc:	e841 2300 	strex	r3, r2, [r1]
 8005ad0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1e5      	bne.n	8005aa4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ada:	2220      	movs	r2, #32
 8005adc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d118      	bne.n	8005b18 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	e853 3f00 	ldrex	r3, [r3]
 8005af2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f023 0310 	bic.w	r3, r3, #16
 8005afa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	461a      	mov	r2, r3
 8005b02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b04:	61fb      	str	r3, [r7, #28]
 8005b06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b08:	69b9      	ldr	r1, [r7, #24]
 8005b0a:	69fa      	ldr	r2, [r7, #28]
 8005b0c:	e841 2300 	strex	r3, r2, [r1]
 8005b10:	617b      	str	r3, [r7, #20]
   return(result);
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1e6      	bne.n	8005ae6 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d107      	bne.n	8005b30 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b22:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b26:	4619      	mov	r1, r3
 8005b28:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005b2a:	f7fc f827 	bl	8001b7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b2e:	e002      	b.n	8005b36 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8005b30:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005b32:	f7ff fa49 	bl	8004fc8 <HAL_UART_RxCpltCallback>
}
 8005b36:	bf00      	nop
 8005b38:	3770      	adds	r7, #112	; 0x70
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b084      	sub	sp, #16
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d109      	bne.n	8005b68 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b5a:	085b      	lsrs	r3, r3, #1
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	4619      	mov	r1, r3
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f7fc f80b 	bl	8001b7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b66:	e002      	b.n	8005b6e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f7ff fa37 	bl	8004fdc <HAL_UART_RxHalfCpltCallback>
}
 8005b6e:	bf00      	nop
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b086      	sub	sp, #24
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b82:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b88:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9a:	2b80      	cmp	r3, #128	; 0x80
 8005b9c:	d109      	bne.n	8005bb2 <UART_DMAError+0x3c>
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	2b21      	cmp	r3, #33	; 0x21
 8005ba2:	d106      	bne.n	8005bb2 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005bac:	6978      	ldr	r0, [r7, #20]
 8005bae:	f7ff feab 	bl	8005908 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bbc:	2b40      	cmp	r3, #64	; 0x40
 8005bbe:	d109      	bne.n	8005bd4 <UART_DMAError+0x5e>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2b22      	cmp	r3, #34	; 0x22
 8005bc4:	d106      	bne.n	8005bd4 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005bce:	6978      	ldr	r0, [r7, #20]
 8005bd0:	f7ff fec0 	bl	8005954 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bda:	f043 0210 	orr.w	r2, r3, #16
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005be4:	6978      	ldr	r0, [r7, #20]
 8005be6:	f7ff fa03 	bl	8004ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bea:	bf00      	nop
 8005bec:	3718      	adds	r7, #24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b084      	sub	sp, #16
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f7ff f9ed 	bl	8004ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c16:	bf00      	nop
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b088      	sub	sp, #32
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	e853 3f00 	ldrex	r3, [r3]
 8005c32:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c3a:	61fb      	str	r3, [r7, #28]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	461a      	mov	r2, r3
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	61bb      	str	r3, [r7, #24]
 8005c46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	6979      	ldr	r1, [r7, #20]
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	e841 2300 	strex	r3, r2, [r1]
 8005c50:	613b      	str	r3, [r7, #16]
   return(result);
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e6      	bne.n	8005c26 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff f9a5 	bl	8004fb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c6a:	bf00      	nop
 8005c6c:	3720      	adds	r7, #32
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c7a:	bf00      	nop
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr

08005c86 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b08c      	sub	sp, #48	; 0x30
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	60f8      	str	r0, [r7, #12]
 8005c8e:	60b9      	str	r1, [r7, #8]
 8005c90:	4613      	mov	r3, r2
 8005c92:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	d14a      	bne.n	8005d32 <HAL_UARTEx_ReceiveToIdle_DMA+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 8005ca2:	88fb      	ldrh	r3, [r7, #6]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e043      	b.n	8005d34 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
    }

    __HAL_LOCK(huart);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d101      	bne.n	8005cba <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	e03c      	b.n	8005d34 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005cc8:	88fb      	ldrh	r3, [r7, #6]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	68b9      	ldr	r1, [r7, #8]
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f7ff fd74 	bl	80057bc <UART_Start_Receive_DMA>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005cda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d124      	bne.n	8005d2c <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d11d      	bne.n	8005d26 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2210      	movs	r2, #16
 8005cf0:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	e853 3f00 	ldrex	r3, [r3]
 8005cfe:	617b      	str	r3, [r7, #20]
   return(result);
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f043 0310 	orr.w	r3, r3, #16
 8005d06:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d10:	627b      	str	r3, [r7, #36]	; 0x24
 8005d12:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d14:	6a39      	ldr	r1, [r7, #32]
 8005d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d18:	e841 2300 	strex	r3, r2, [r1]
 8005d1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1e6      	bne.n	8005cf2 <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 8005d24:	e002      	b.n	8005d2c <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005d2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d30:	e000      	b.n	8005d34 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  }
  else
  {
    return HAL_BUSY;
 8005d32:	2302      	movs	r3, #2
  }
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3730      	adds	r7, #48	; 0x30
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <__errno>:
 8005d3c:	4b01      	ldr	r3, [pc, #4]	; (8005d44 <__errno+0x8>)
 8005d3e:	6818      	ldr	r0, [r3, #0]
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	20000098 	.word	0x20000098

08005d48 <__libc_init_array>:
 8005d48:	b570      	push	{r4, r5, r6, lr}
 8005d4a:	4d0d      	ldr	r5, [pc, #52]	; (8005d80 <__libc_init_array+0x38>)
 8005d4c:	4c0d      	ldr	r4, [pc, #52]	; (8005d84 <__libc_init_array+0x3c>)
 8005d4e:	1b64      	subs	r4, r4, r5
 8005d50:	10a4      	asrs	r4, r4, #2
 8005d52:	2600      	movs	r6, #0
 8005d54:	42a6      	cmp	r6, r4
 8005d56:	d109      	bne.n	8005d6c <__libc_init_array+0x24>
 8005d58:	4d0b      	ldr	r5, [pc, #44]	; (8005d88 <__libc_init_array+0x40>)
 8005d5a:	4c0c      	ldr	r4, [pc, #48]	; (8005d8c <__libc_init_array+0x44>)
 8005d5c:	f003 f9fe 	bl	800915c <_init>
 8005d60:	1b64      	subs	r4, r4, r5
 8005d62:	10a4      	asrs	r4, r4, #2
 8005d64:	2600      	movs	r6, #0
 8005d66:	42a6      	cmp	r6, r4
 8005d68:	d105      	bne.n	8005d76 <__libc_init_array+0x2e>
 8005d6a:	bd70      	pop	{r4, r5, r6, pc}
 8005d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d70:	4798      	blx	r3
 8005d72:	3601      	adds	r6, #1
 8005d74:	e7ee      	b.n	8005d54 <__libc_init_array+0xc>
 8005d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d7a:	4798      	blx	r3
 8005d7c:	3601      	adds	r6, #1
 8005d7e:	e7f2      	b.n	8005d66 <__libc_init_array+0x1e>
 8005d80:	080098e8 	.word	0x080098e8
 8005d84:	080098e8 	.word	0x080098e8
 8005d88:	080098e8 	.word	0x080098e8
 8005d8c:	080098ec 	.word	0x080098ec

08005d90 <memcpy>:
 8005d90:	440a      	add	r2, r1
 8005d92:	4291      	cmp	r1, r2
 8005d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d98:	d100      	bne.n	8005d9c <memcpy+0xc>
 8005d9a:	4770      	bx	lr
 8005d9c:	b510      	push	{r4, lr}
 8005d9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005da2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005da6:	4291      	cmp	r1, r2
 8005da8:	d1f9      	bne.n	8005d9e <memcpy+0xe>
 8005daa:	bd10      	pop	{r4, pc}

08005dac <memset>:
 8005dac:	4402      	add	r2, r0
 8005dae:	4603      	mov	r3, r0
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d100      	bne.n	8005db6 <memset+0xa>
 8005db4:	4770      	bx	lr
 8005db6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dba:	e7f9      	b.n	8005db0 <memset+0x4>

08005dbc <siprintf>:
 8005dbc:	b40e      	push	{r1, r2, r3}
 8005dbe:	b500      	push	{lr}
 8005dc0:	b09c      	sub	sp, #112	; 0x70
 8005dc2:	ab1d      	add	r3, sp, #116	; 0x74
 8005dc4:	9002      	str	r0, [sp, #8]
 8005dc6:	9006      	str	r0, [sp, #24]
 8005dc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005dcc:	4809      	ldr	r0, [pc, #36]	; (8005df4 <siprintf+0x38>)
 8005dce:	9107      	str	r1, [sp, #28]
 8005dd0:	9104      	str	r1, [sp, #16]
 8005dd2:	4909      	ldr	r1, [pc, #36]	; (8005df8 <siprintf+0x3c>)
 8005dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dd8:	9105      	str	r1, [sp, #20]
 8005dda:	6800      	ldr	r0, [r0, #0]
 8005ddc:	9301      	str	r3, [sp, #4]
 8005dde:	a902      	add	r1, sp, #8
 8005de0:	f002 f96a 	bl	80080b8 <_svfiprintf_r>
 8005de4:	9b02      	ldr	r3, [sp, #8]
 8005de6:	2200      	movs	r2, #0
 8005de8:	701a      	strb	r2, [r3, #0]
 8005dea:	b01c      	add	sp, #112	; 0x70
 8005dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8005df0:	b003      	add	sp, #12
 8005df2:	4770      	bx	lr
 8005df4:	20000098 	.word	0x20000098
 8005df8:	ffff0208 	.word	0xffff0208

08005dfc <strncmp>:
 8005dfc:	b510      	push	{r4, lr}
 8005dfe:	b17a      	cbz	r2, 8005e20 <strncmp+0x24>
 8005e00:	4603      	mov	r3, r0
 8005e02:	3901      	subs	r1, #1
 8005e04:	1884      	adds	r4, r0, r2
 8005e06:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005e0a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005e0e:	4290      	cmp	r0, r2
 8005e10:	d101      	bne.n	8005e16 <strncmp+0x1a>
 8005e12:	42a3      	cmp	r3, r4
 8005e14:	d101      	bne.n	8005e1a <strncmp+0x1e>
 8005e16:	1a80      	subs	r0, r0, r2
 8005e18:	bd10      	pop	{r4, pc}
 8005e1a:	2800      	cmp	r0, #0
 8005e1c:	d1f3      	bne.n	8005e06 <strncmp+0xa>
 8005e1e:	e7fa      	b.n	8005e16 <strncmp+0x1a>
 8005e20:	4610      	mov	r0, r2
 8005e22:	e7f9      	b.n	8005e18 <strncmp+0x1c>

08005e24 <strstr>:
 8005e24:	780a      	ldrb	r2, [r1, #0]
 8005e26:	b570      	push	{r4, r5, r6, lr}
 8005e28:	b96a      	cbnz	r2, 8005e46 <strstr+0x22>
 8005e2a:	bd70      	pop	{r4, r5, r6, pc}
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d109      	bne.n	8005e44 <strstr+0x20>
 8005e30:	460c      	mov	r4, r1
 8005e32:	4605      	mov	r5, r0
 8005e34:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d0f6      	beq.n	8005e2a <strstr+0x6>
 8005e3c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005e40:	429e      	cmp	r6, r3
 8005e42:	d0f7      	beq.n	8005e34 <strstr+0x10>
 8005e44:	3001      	adds	r0, #1
 8005e46:	7803      	ldrb	r3, [r0, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1ef      	bne.n	8005e2c <strstr+0x8>
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	e7ec      	b.n	8005e2a <strstr+0x6>

08005e50 <sulp>:
 8005e50:	b570      	push	{r4, r5, r6, lr}
 8005e52:	4604      	mov	r4, r0
 8005e54:	460d      	mov	r5, r1
 8005e56:	ec45 4b10 	vmov	d0, r4, r5
 8005e5a:	4616      	mov	r6, r2
 8005e5c:	f001 fe8a 	bl	8007b74 <__ulp>
 8005e60:	ec51 0b10 	vmov	r0, r1, d0
 8005e64:	b17e      	cbz	r6, 8005e86 <sulp+0x36>
 8005e66:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005e6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	dd09      	ble.n	8005e86 <sulp+0x36>
 8005e72:	051b      	lsls	r3, r3, #20
 8005e74:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005e78:	2400      	movs	r4, #0
 8005e7a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005e7e:	4622      	mov	r2, r4
 8005e80:	462b      	mov	r3, r5
 8005e82:	f7fa fbb9 	bl	80005f8 <__aeabi_dmul>
 8005e86:	bd70      	pop	{r4, r5, r6, pc}

08005e88 <_strtod_l>:
 8005e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e8c:	ed2d 8b02 	vpush	{d8}
 8005e90:	b09d      	sub	sp, #116	; 0x74
 8005e92:	461f      	mov	r7, r3
 8005e94:	2300      	movs	r3, #0
 8005e96:	9318      	str	r3, [sp, #96]	; 0x60
 8005e98:	4ba2      	ldr	r3, [pc, #648]	; (8006124 <_strtod_l+0x29c>)
 8005e9a:	9213      	str	r2, [sp, #76]	; 0x4c
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	9305      	str	r3, [sp, #20]
 8005ea0:	4604      	mov	r4, r0
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	4688      	mov	r8, r1
 8005ea6:	f7fa f993 	bl	80001d0 <strlen>
 8005eaa:	f04f 0a00 	mov.w	sl, #0
 8005eae:	4605      	mov	r5, r0
 8005eb0:	f04f 0b00 	mov.w	fp, #0
 8005eb4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005eb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005eba:	781a      	ldrb	r2, [r3, #0]
 8005ebc:	2a2b      	cmp	r2, #43	; 0x2b
 8005ebe:	d04e      	beq.n	8005f5e <_strtod_l+0xd6>
 8005ec0:	d83b      	bhi.n	8005f3a <_strtod_l+0xb2>
 8005ec2:	2a0d      	cmp	r2, #13
 8005ec4:	d834      	bhi.n	8005f30 <_strtod_l+0xa8>
 8005ec6:	2a08      	cmp	r2, #8
 8005ec8:	d834      	bhi.n	8005f34 <_strtod_l+0xac>
 8005eca:	2a00      	cmp	r2, #0
 8005ecc:	d03e      	beq.n	8005f4c <_strtod_l+0xc4>
 8005ece:	2300      	movs	r3, #0
 8005ed0:	930a      	str	r3, [sp, #40]	; 0x28
 8005ed2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005ed4:	7833      	ldrb	r3, [r6, #0]
 8005ed6:	2b30      	cmp	r3, #48	; 0x30
 8005ed8:	f040 80b0 	bne.w	800603c <_strtod_l+0x1b4>
 8005edc:	7873      	ldrb	r3, [r6, #1]
 8005ede:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005ee2:	2b58      	cmp	r3, #88	; 0x58
 8005ee4:	d168      	bne.n	8005fb8 <_strtod_l+0x130>
 8005ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ee8:	9301      	str	r3, [sp, #4]
 8005eea:	ab18      	add	r3, sp, #96	; 0x60
 8005eec:	9702      	str	r7, [sp, #8]
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	4a8d      	ldr	r2, [pc, #564]	; (8006128 <_strtod_l+0x2a0>)
 8005ef2:	ab19      	add	r3, sp, #100	; 0x64
 8005ef4:	a917      	add	r1, sp, #92	; 0x5c
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	f000 ffa8 	bl	8006e4c <__gethex>
 8005efc:	f010 0707 	ands.w	r7, r0, #7
 8005f00:	4605      	mov	r5, r0
 8005f02:	d005      	beq.n	8005f10 <_strtod_l+0x88>
 8005f04:	2f06      	cmp	r7, #6
 8005f06:	d12c      	bne.n	8005f62 <_strtod_l+0xda>
 8005f08:	3601      	adds	r6, #1
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	9617      	str	r6, [sp, #92]	; 0x5c
 8005f0e:	930a      	str	r3, [sp, #40]	; 0x28
 8005f10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f040 8590 	bne.w	8006a38 <_strtod_l+0xbb0>
 8005f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f1a:	b1eb      	cbz	r3, 8005f58 <_strtod_l+0xd0>
 8005f1c:	4652      	mov	r2, sl
 8005f1e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005f22:	ec43 2b10 	vmov	d0, r2, r3
 8005f26:	b01d      	add	sp, #116	; 0x74
 8005f28:	ecbd 8b02 	vpop	{d8}
 8005f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f30:	2a20      	cmp	r2, #32
 8005f32:	d1cc      	bne.n	8005ece <_strtod_l+0x46>
 8005f34:	3301      	adds	r3, #1
 8005f36:	9317      	str	r3, [sp, #92]	; 0x5c
 8005f38:	e7be      	b.n	8005eb8 <_strtod_l+0x30>
 8005f3a:	2a2d      	cmp	r2, #45	; 0x2d
 8005f3c:	d1c7      	bne.n	8005ece <_strtod_l+0x46>
 8005f3e:	2201      	movs	r2, #1
 8005f40:	920a      	str	r2, [sp, #40]	; 0x28
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	9217      	str	r2, [sp, #92]	; 0x5c
 8005f46:	785b      	ldrb	r3, [r3, #1]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1c2      	bne.n	8005ed2 <_strtod_l+0x4a>
 8005f4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f4e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f040 856e 	bne.w	8006a34 <_strtod_l+0xbac>
 8005f58:	4652      	mov	r2, sl
 8005f5a:	465b      	mov	r3, fp
 8005f5c:	e7e1      	b.n	8005f22 <_strtod_l+0x9a>
 8005f5e:	2200      	movs	r2, #0
 8005f60:	e7ee      	b.n	8005f40 <_strtod_l+0xb8>
 8005f62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005f64:	b13a      	cbz	r2, 8005f76 <_strtod_l+0xee>
 8005f66:	2135      	movs	r1, #53	; 0x35
 8005f68:	a81a      	add	r0, sp, #104	; 0x68
 8005f6a:	f001 ff0e 	bl	8007d8a <__copybits>
 8005f6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005f70:	4620      	mov	r0, r4
 8005f72:	f001 facd 	bl	8007510 <_Bfree>
 8005f76:	3f01      	subs	r7, #1
 8005f78:	2f04      	cmp	r7, #4
 8005f7a:	d806      	bhi.n	8005f8a <_strtod_l+0x102>
 8005f7c:	e8df f007 	tbb	[pc, r7]
 8005f80:	1714030a 	.word	0x1714030a
 8005f84:	0a          	.byte	0x0a
 8005f85:	00          	.byte	0x00
 8005f86:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005f8a:	0728      	lsls	r0, r5, #28
 8005f8c:	d5c0      	bpl.n	8005f10 <_strtod_l+0x88>
 8005f8e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005f92:	e7bd      	b.n	8005f10 <_strtod_l+0x88>
 8005f94:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005f98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005f9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005f9e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005fa2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005fa6:	e7f0      	b.n	8005f8a <_strtod_l+0x102>
 8005fa8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800612c <_strtod_l+0x2a4>
 8005fac:	e7ed      	b.n	8005f8a <_strtod_l+0x102>
 8005fae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005fb2:	f04f 3aff 	mov.w	sl, #4294967295
 8005fb6:	e7e8      	b.n	8005f8a <_strtod_l+0x102>
 8005fb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005fba:	1c5a      	adds	r2, r3, #1
 8005fbc:	9217      	str	r2, [sp, #92]	; 0x5c
 8005fbe:	785b      	ldrb	r3, [r3, #1]
 8005fc0:	2b30      	cmp	r3, #48	; 0x30
 8005fc2:	d0f9      	beq.n	8005fb8 <_strtod_l+0x130>
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d0a3      	beq.n	8005f10 <_strtod_l+0x88>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	f04f 0900 	mov.w	r9, #0
 8005fce:	9304      	str	r3, [sp, #16]
 8005fd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005fd2:	9308      	str	r3, [sp, #32]
 8005fd4:	f8cd 901c 	str.w	r9, [sp, #28]
 8005fd8:	464f      	mov	r7, r9
 8005fda:	220a      	movs	r2, #10
 8005fdc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005fde:	7806      	ldrb	r6, [r0, #0]
 8005fe0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005fe4:	b2d9      	uxtb	r1, r3
 8005fe6:	2909      	cmp	r1, #9
 8005fe8:	d92a      	bls.n	8006040 <_strtod_l+0x1b8>
 8005fea:	9905      	ldr	r1, [sp, #20]
 8005fec:	462a      	mov	r2, r5
 8005fee:	f7ff ff05 	bl	8005dfc <strncmp>
 8005ff2:	b398      	cbz	r0, 800605c <_strtod_l+0x1d4>
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	4632      	mov	r2, r6
 8005ff8:	463d      	mov	r5, r7
 8005ffa:	9005      	str	r0, [sp, #20]
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2a65      	cmp	r2, #101	; 0x65
 8006000:	d001      	beq.n	8006006 <_strtod_l+0x17e>
 8006002:	2a45      	cmp	r2, #69	; 0x45
 8006004:	d118      	bne.n	8006038 <_strtod_l+0x1b0>
 8006006:	b91d      	cbnz	r5, 8006010 <_strtod_l+0x188>
 8006008:	9a04      	ldr	r2, [sp, #16]
 800600a:	4302      	orrs	r2, r0
 800600c:	d09e      	beq.n	8005f4c <_strtod_l+0xc4>
 800600e:	2500      	movs	r5, #0
 8006010:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006014:	f108 0201 	add.w	r2, r8, #1
 8006018:	9217      	str	r2, [sp, #92]	; 0x5c
 800601a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800601e:	2a2b      	cmp	r2, #43	; 0x2b
 8006020:	d075      	beq.n	800610e <_strtod_l+0x286>
 8006022:	2a2d      	cmp	r2, #45	; 0x2d
 8006024:	d07b      	beq.n	800611e <_strtod_l+0x296>
 8006026:	f04f 0c00 	mov.w	ip, #0
 800602a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800602e:	2909      	cmp	r1, #9
 8006030:	f240 8082 	bls.w	8006138 <_strtod_l+0x2b0>
 8006034:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006038:	2600      	movs	r6, #0
 800603a:	e09d      	b.n	8006178 <_strtod_l+0x2f0>
 800603c:	2300      	movs	r3, #0
 800603e:	e7c4      	b.n	8005fca <_strtod_l+0x142>
 8006040:	2f08      	cmp	r7, #8
 8006042:	bfd8      	it	le
 8006044:	9907      	ldrle	r1, [sp, #28]
 8006046:	f100 0001 	add.w	r0, r0, #1
 800604a:	bfda      	itte	le
 800604c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006050:	9307      	strle	r3, [sp, #28]
 8006052:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006056:	3701      	adds	r7, #1
 8006058:	9017      	str	r0, [sp, #92]	; 0x5c
 800605a:	e7bf      	b.n	8005fdc <_strtod_l+0x154>
 800605c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800605e:	195a      	adds	r2, r3, r5
 8006060:	9217      	str	r2, [sp, #92]	; 0x5c
 8006062:	5d5a      	ldrb	r2, [r3, r5]
 8006064:	2f00      	cmp	r7, #0
 8006066:	d037      	beq.n	80060d8 <_strtod_l+0x250>
 8006068:	9005      	str	r0, [sp, #20]
 800606a:	463d      	mov	r5, r7
 800606c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006070:	2b09      	cmp	r3, #9
 8006072:	d912      	bls.n	800609a <_strtod_l+0x212>
 8006074:	2301      	movs	r3, #1
 8006076:	e7c2      	b.n	8005ffe <_strtod_l+0x176>
 8006078:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	9217      	str	r2, [sp, #92]	; 0x5c
 800607e:	785a      	ldrb	r2, [r3, #1]
 8006080:	3001      	adds	r0, #1
 8006082:	2a30      	cmp	r2, #48	; 0x30
 8006084:	d0f8      	beq.n	8006078 <_strtod_l+0x1f0>
 8006086:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800608a:	2b08      	cmp	r3, #8
 800608c:	f200 84d9 	bhi.w	8006a42 <_strtod_l+0xbba>
 8006090:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006092:	9005      	str	r0, [sp, #20]
 8006094:	2000      	movs	r0, #0
 8006096:	9308      	str	r3, [sp, #32]
 8006098:	4605      	mov	r5, r0
 800609a:	3a30      	subs	r2, #48	; 0x30
 800609c:	f100 0301 	add.w	r3, r0, #1
 80060a0:	d014      	beq.n	80060cc <_strtod_l+0x244>
 80060a2:	9905      	ldr	r1, [sp, #20]
 80060a4:	4419      	add	r1, r3
 80060a6:	9105      	str	r1, [sp, #20]
 80060a8:	462b      	mov	r3, r5
 80060aa:	eb00 0e05 	add.w	lr, r0, r5
 80060ae:	210a      	movs	r1, #10
 80060b0:	4573      	cmp	r3, lr
 80060b2:	d113      	bne.n	80060dc <_strtod_l+0x254>
 80060b4:	182b      	adds	r3, r5, r0
 80060b6:	2b08      	cmp	r3, #8
 80060b8:	f105 0501 	add.w	r5, r5, #1
 80060bc:	4405      	add	r5, r0
 80060be:	dc1c      	bgt.n	80060fa <_strtod_l+0x272>
 80060c0:	9907      	ldr	r1, [sp, #28]
 80060c2:	230a      	movs	r3, #10
 80060c4:	fb03 2301 	mla	r3, r3, r1, r2
 80060c8:	9307      	str	r3, [sp, #28]
 80060ca:	2300      	movs	r3, #0
 80060cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80060ce:	1c51      	adds	r1, r2, #1
 80060d0:	9117      	str	r1, [sp, #92]	; 0x5c
 80060d2:	7852      	ldrb	r2, [r2, #1]
 80060d4:	4618      	mov	r0, r3
 80060d6:	e7c9      	b.n	800606c <_strtod_l+0x1e4>
 80060d8:	4638      	mov	r0, r7
 80060da:	e7d2      	b.n	8006082 <_strtod_l+0x1fa>
 80060dc:	2b08      	cmp	r3, #8
 80060de:	dc04      	bgt.n	80060ea <_strtod_l+0x262>
 80060e0:	9e07      	ldr	r6, [sp, #28]
 80060e2:	434e      	muls	r6, r1
 80060e4:	9607      	str	r6, [sp, #28]
 80060e6:	3301      	adds	r3, #1
 80060e8:	e7e2      	b.n	80060b0 <_strtod_l+0x228>
 80060ea:	f103 0c01 	add.w	ip, r3, #1
 80060ee:	f1bc 0f10 	cmp.w	ip, #16
 80060f2:	bfd8      	it	le
 80060f4:	fb01 f909 	mulle.w	r9, r1, r9
 80060f8:	e7f5      	b.n	80060e6 <_strtod_l+0x25e>
 80060fa:	2d10      	cmp	r5, #16
 80060fc:	bfdc      	itt	le
 80060fe:	230a      	movle	r3, #10
 8006100:	fb03 2909 	mlale	r9, r3, r9, r2
 8006104:	e7e1      	b.n	80060ca <_strtod_l+0x242>
 8006106:	2300      	movs	r3, #0
 8006108:	9305      	str	r3, [sp, #20]
 800610a:	2301      	movs	r3, #1
 800610c:	e77c      	b.n	8006008 <_strtod_l+0x180>
 800610e:	f04f 0c00 	mov.w	ip, #0
 8006112:	f108 0202 	add.w	r2, r8, #2
 8006116:	9217      	str	r2, [sp, #92]	; 0x5c
 8006118:	f898 2002 	ldrb.w	r2, [r8, #2]
 800611c:	e785      	b.n	800602a <_strtod_l+0x1a2>
 800611e:	f04f 0c01 	mov.w	ip, #1
 8006122:	e7f6      	b.n	8006112 <_strtod_l+0x28a>
 8006124:	080096e0 	.word	0x080096e0
 8006128:	08009464 	.word	0x08009464
 800612c:	7ff00000 	.word	0x7ff00000
 8006130:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006132:	1c51      	adds	r1, r2, #1
 8006134:	9117      	str	r1, [sp, #92]	; 0x5c
 8006136:	7852      	ldrb	r2, [r2, #1]
 8006138:	2a30      	cmp	r2, #48	; 0x30
 800613a:	d0f9      	beq.n	8006130 <_strtod_l+0x2a8>
 800613c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006140:	2908      	cmp	r1, #8
 8006142:	f63f af79 	bhi.w	8006038 <_strtod_l+0x1b0>
 8006146:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800614a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800614c:	9206      	str	r2, [sp, #24]
 800614e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006150:	1c51      	adds	r1, r2, #1
 8006152:	9117      	str	r1, [sp, #92]	; 0x5c
 8006154:	7852      	ldrb	r2, [r2, #1]
 8006156:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800615a:	2e09      	cmp	r6, #9
 800615c:	d937      	bls.n	80061ce <_strtod_l+0x346>
 800615e:	9e06      	ldr	r6, [sp, #24]
 8006160:	1b89      	subs	r1, r1, r6
 8006162:	2908      	cmp	r1, #8
 8006164:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006168:	dc02      	bgt.n	8006170 <_strtod_l+0x2e8>
 800616a:	4576      	cmp	r6, lr
 800616c:	bfa8      	it	ge
 800616e:	4676      	movge	r6, lr
 8006170:	f1bc 0f00 	cmp.w	ip, #0
 8006174:	d000      	beq.n	8006178 <_strtod_l+0x2f0>
 8006176:	4276      	negs	r6, r6
 8006178:	2d00      	cmp	r5, #0
 800617a:	d14d      	bne.n	8006218 <_strtod_l+0x390>
 800617c:	9904      	ldr	r1, [sp, #16]
 800617e:	4301      	orrs	r1, r0
 8006180:	f47f aec6 	bne.w	8005f10 <_strtod_l+0x88>
 8006184:	2b00      	cmp	r3, #0
 8006186:	f47f aee1 	bne.w	8005f4c <_strtod_l+0xc4>
 800618a:	2a69      	cmp	r2, #105	; 0x69
 800618c:	d027      	beq.n	80061de <_strtod_l+0x356>
 800618e:	dc24      	bgt.n	80061da <_strtod_l+0x352>
 8006190:	2a49      	cmp	r2, #73	; 0x49
 8006192:	d024      	beq.n	80061de <_strtod_l+0x356>
 8006194:	2a4e      	cmp	r2, #78	; 0x4e
 8006196:	f47f aed9 	bne.w	8005f4c <_strtod_l+0xc4>
 800619a:	499f      	ldr	r1, [pc, #636]	; (8006418 <_strtod_l+0x590>)
 800619c:	a817      	add	r0, sp, #92	; 0x5c
 800619e:	f001 f8ad 	bl	80072fc <__match>
 80061a2:	2800      	cmp	r0, #0
 80061a4:	f43f aed2 	beq.w	8005f4c <_strtod_l+0xc4>
 80061a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2b28      	cmp	r3, #40	; 0x28
 80061ae:	d12d      	bne.n	800620c <_strtod_l+0x384>
 80061b0:	499a      	ldr	r1, [pc, #616]	; (800641c <_strtod_l+0x594>)
 80061b2:	aa1a      	add	r2, sp, #104	; 0x68
 80061b4:	a817      	add	r0, sp, #92	; 0x5c
 80061b6:	f001 f8b5 	bl	8007324 <__hexnan>
 80061ba:	2805      	cmp	r0, #5
 80061bc:	d126      	bne.n	800620c <_strtod_l+0x384>
 80061be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80061c0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80061c4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80061c8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80061cc:	e6a0      	b.n	8005f10 <_strtod_l+0x88>
 80061ce:	210a      	movs	r1, #10
 80061d0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80061d4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80061d8:	e7b9      	b.n	800614e <_strtod_l+0x2c6>
 80061da:	2a6e      	cmp	r2, #110	; 0x6e
 80061dc:	e7db      	b.n	8006196 <_strtod_l+0x30e>
 80061de:	4990      	ldr	r1, [pc, #576]	; (8006420 <_strtod_l+0x598>)
 80061e0:	a817      	add	r0, sp, #92	; 0x5c
 80061e2:	f001 f88b 	bl	80072fc <__match>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	f43f aeb0 	beq.w	8005f4c <_strtod_l+0xc4>
 80061ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80061ee:	498d      	ldr	r1, [pc, #564]	; (8006424 <_strtod_l+0x59c>)
 80061f0:	3b01      	subs	r3, #1
 80061f2:	a817      	add	r0, sp, #92	; 0x5c
 80061f4:	9317      	str	r3, [sp, #92]	; 0x5c
 80061f6:	f001 f881 	bl	80072fc <__match>
 80061fa:	b910      	cbnz	r0, 8006202 <_strtod_l+0x37a>
 80061fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80061fe:	3301      	adds	r3, #1
 8006200:	9317      	str	r3, [sp, #92]	; 0x5c
 8006202:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006434 <_strtod_l+0x5ac>
 8006206:	f04f 0a00 	mov.w	sl, #0
 800620a:	e681      	b.n	8005f10 <_strtod_l+0x88>
 800620c:	4886      	ldr	r0, [pc, #536]	; (8006428 <_strtod_l+0x5a0>)
 800620e:	f002 fb43 	bl	8008898 <nan>
 8006212:	ec5b ab10 	vmov	sl, fp, d0
 8006216:	e67b      	b.n	8005f10 <_strtod_l+0x88>
 8006218:	9b05      	ldr	r3, [sp, #20]
 800621a:	9807      	ldr	r0, [sp, #28]
 800621c:	1af3      	subs	r3, r6, r3
 800621e:	2f00      	cmp	r7, #0
 8006220:	bf08      	it	eq
 8006222:	462f      	moveq	r7, r5
 8006224:	2d10      	cmp	r5, #16
 8006226:	9306      	str	r3, [sp, #24]
 8006228:	46a8      	mov	r8, r5
 800622a:	bfa8      	it	ge
 800622c:	f04f 0810 	movge.w	r8, #16
 8006230:	f7fa f968 	bl	8000504 <__aeabi_ui2d>
 8006234:	2d09      	cmp	r5, #9
 8006236:	4682      	mov	sl, r0
 8006238:	468b      	mov	fp, r1
 800623a:	dd13      	ble.n	8006264 <_strtod_l+0x3dc>
 800623c:	4b7b      	ldr	r3, [pc, #492]	; (800642c <_strtod_l+0x5a4>)
 800623e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006242:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006246:	f7fa f9d7 	bl	80005f8 <__aeabi_dmul>
 800624a:	4682      	mov	sl, r0
 800624c:	4648      	mov	r0, r9
 800624e:	468b      	mov	fp, r1
 8006250:	f7fa f958 	bl	8000504 <__aeabi_ui2d>
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	4650      	mov	r0, sl
 800625a:	4659      	mov	r1, fp
 800625c:	f7fa f816 	bl	800028c <__adddf3>
 8006260:	4682      	mov	sl, r0
 8006262:	468b      	mov	fp, r1
 8006264:	2d0f      	cmp	r5, #15
 8006266:	dc38      	bgt.n	80062da <_strtod_l+0x452>
 8006268:	9b06      	ldr	r3, [sp, #24]
 800626a:	2b00      	cmp	r3, #0
 800626c:	f43f ae50 	beq.w	8005f10 <_strtod_l+0x88>
 8006270:	dd24      	ble.n	80062bc <_strtod_l+0x434>
 8006272:	2b16      	cmp	r3, #22
 8006274:	dc0b      	bgt.n	800628e <_strtod_l+0x406>
 8006276:	496d      	ldr	r1, [pc, #436]	; (800642c <_strtod_l+0x5a4>)
 8006278:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800627c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006280:	4652      	mov	r2, sl
 8006282:	465b      	mov	r3, fp
 8006284:	f7fa f9b8 	bl	80005f8 <__aeabi_dmul>
 8006288:	4682      	mov	sl, r0
 800628a:	468b      	mov	fp, r1
 800628c:	e640      	b.n	8005f10 <_strtod_l+0x88>
 800628e:	9a06      	ldr	r2, [sp, #24]
 8006290:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006294:	4293      	cmp	r3, r2
 8006296:	db20      	blt.n	80062da <_strtod_l+0x452>
 8006298:	4c64      	ldr	r4, [pc, #400]	; (800642c <_strtod_l+0x5a4>)
 800629a:	f1c5 050f 	rsb	r5, r5, #15
 800629e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80062a2:	4652      	mov	r2, sl
 80062a4:	465b      	mov	r3, fp
 80062a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062aa:	f7fa f9a5 	bl	80005f8 <__aeabi_dmul>
 80062ae:	9b06      	ldr	r3, [sp, #24]
 80062b0:	1b5d      	subs	r5, r3, r5
 80062b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80062b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80062ba:	e7e3      	b.n	8006284 <_strtod_l+0x3fc>
 80062bc:	9b06      	ldr	r3, [sp, #24]
 80062be:	3316      	adds	r3, #22
 80062c0:	db0b      	blt.n	80062da <_strtod_l+0x452>
 80062c2:	9b05      	ldr	r3, [sp, #20]
 80062c4:	1b9e      	subs	r6, r3, r6
 80062c6:	4b59      	ldr	r3, [pc, #356]	; (800642c <_strtod_l+0x5a4>)
 80062c8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80062cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80062d0:	4650      	mov	r0, sl
 80062d2:	4659      	mov	r1, fp
 80062d4:	f7fa faba 	bl	800084c <__aeabi_ddiv>
 80062d8:	e7d6      	b.n	8006288 <_strtod_l+0x400>
 80062da:	9b06      	ldr	r3, [sp, #24]
 80062dc:	eba5 0808 	sub.w	r8, r5, r8
 80062e0:	4498      	add	r8, r3
 80062e2:	f1b8 0f00 	cmp.w	r8, #0
 80062e6:	dd74      	ble.n	80063d2 <_strtod_l+0x54a>
 80062e8:	f018 030f 	ands.w	r3, r8, #15
 80062ec:	d00a      	beq.n	8006304 <_strtod_l+0x47c>
 80062ee:	494f      	ldr	r1, [pc, #316]	; (800642c <_strtod_l+0x5a4>)
 80062f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80062f4:	4652      	mov	r2, sl
 80062f6:	465b      	mov	r3, fp
 80062f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062fc:	f7fa f97c 	bl	80005f8 <__aeabi_dmul>
 8006300:	4682      	mov	sl, r0
 8006302:	468b      	mov	fp, r1
 8006304:	f038 080f 	bics.w	r8, r8, #15
 8006308:	d04f      	beq.n	80063aa <_strtod_l+0x522>
 800630a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800630e:	dd22      	ble.n	8006356 <_strtod_l+0x4ce>
 8006310:	2500      	movs	r5, #0
 8006312:	462e      	mov	r6, r5
 8006314:	9507      	str	r5, [sp, #28]
 8006316:	9505      	str	r5, [sp, #20]
 8006318:	2322      	movs	r3, #34	; 0x22
 800631a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006434 <_strtod_l+0x5ac>
 800631e:	6023      	str	r3, [r4, #0]
 8006320:	f04f 0a00 	mov.w	sl, #0
 8006324:	9b07      	ldr	r3, [sp, #28]
 8006326:	2b00      	cmp	r3, #0
 8006328:	f43f adf2 	beq.w	8005f10 <_strtod_l+0x88>
 800632c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800632e:	4620      	mov	r0, r4
 8006330:	f001 f8ee 	bl	8007510 <_Bfree>
 8006334:	9905      	ldr	r1, [sp, #20]
 8006336:	4620      	mov	r0, r4
 8006338:	f001 f8ea 	bl	8007510 <_Bfree>
 800633c:	4631      	mov	r1, r6
 800633e:	4620      	mov	r0, r4
 8006340:	f001 f8e6 	bl	8007510 <_Bfree>
 8006344:	9907      	ldr	r1, [sp, #28]
 8006346:	4620      	mov	r0, r4
 8006348:	f001 f8e2 	bl	8007510 <_Bfree>
 800634c:	4629      	mov	r1, r5
 800634e:	4620      	mov	r0, r4
 8006350:	f001 f8de 	bl	8007510 <_Bfree>
 8006354:	e5dc      	b.n	8005f10 <_strtod_l+0x88>
 8006356:	4b36      	ldr	r3, [pc, #216]	; (8006430 <_strtod_l+0x5a8>)
 8006358:	9304      	str	r3, [sp, #16]
 800635a:	2300      	movs	r3, #0
 800635c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006360:	4650      	mov	r0, sl
 8006362:	4659      	mov	r1, fp
 8006364:	4699      	mov	r9, r3
 8006366:	f1b8 0f01 	cmp.w	r8, #1
 800636a:	dc21      	bgt.n	80063b0 <_strtod_l+0x528>
 800636c:	b10b      	cbz	r3, 8006372 <_strtod_l+0x4ea>
 800636e:	4682      	mov	sl, r0
 8006370:	468b      	mov	fp, r1
 8006372:	4b2f      	ldr	r3, [pc, #188]	; (8006430 <_strtod_l+0x5a8>)
 8006374:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006378:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800637c:	4652      	mov	r2, sl
 800637e:	465b      	mov	r3, fp
 8006380:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006384:	f7fa f938 	bl	80005f8 <__aeabi_dmul>
 8006388:	4b2a      	ldr	r3, [pc, #168]	; (8006434 <_strtod_l+0x5ac>)
 800638a:	460a      	mov	r2, r1
 800638c:	400b      	ands	r3, r1
 800638e:	492a      	ldr	r1, [pc, #168]	; (8006438 <_strtod_l+0x5b0>)
 8006390:	428b      	cmp	r3, r1
 8006392:	4682      	mov	sl, r0
 8006394:	d8bc      	bhi.n	8006310 <_strtod_l+0x488>
 8006396:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800639a:	428b      	cmp	r3, r1
 800639c:	bf86      	itte	hi
 800639e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800643c <_strtod_l+0x5b4>
 80063a2:	f04f 3aff 	movhi.w	sl, #4294967295
 80063a6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80063aa:	2300      	movs	r3, #0
 80063ac:	9304      	str	r3, [sp, #16]
 80063ae:	e084      	b.n	80064ba <_strtod_l+0x632>
 80063b0:	f018 0f01 	tst.w	r8, #1
 80063b4:	d005      	beq.n	80063c2 <_strtod_l+0x53a>
 80063b6:	9b04      	ldr	r3, [sp, #16]
 80063b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063bc:	f7fa f91c 	bl	80005f8 <__aeabi_dmul>
 80063c0:	2301      	movs	r3, #1
 80063c2:	9a04      	ldr	r2, [sp, #16]
 80063c4:	3208      	adds	r2, #8
 80063c6:	f109 0901 	add.w	r9, r9, #1
 80063ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80063ce:	9204      	str	r2, [sp, #16]
 80063d0:	e7c9      	b.n	8006366 <_strtod_l+0x4de>
 80063d2:	d0ea      	beq.n	80063aa <_strtod_l+0x522>
 80063d4:	f1c8 0800 	rsb	r8, r8, #0
 80063d8:	f018 020f 	ands.w	r2, r8, #15
 80063dc:	d00a      	beq.n	80063f4 <_strtod_l+0x56c>
 80063de:	4b13      	ldr	r3, [pc, #76]	; (800642c <_strtod_l+0x5a4>)
 80063e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063e4:	4650      	mov	r0, sl
 80063e6:	4659      	mov	r1, fp
 80063e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ec:	f7fa fa2e 	bl	800084c <__aeabi_ddiv>
 80063f0:	4682      	mov	sl, r0
 80063f2:	468b      	mov	fp, r1
 80063f4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80063f8:	d0d7      	beq.n	80063aa <_strtod_l+0x522>
 80063fa:	f1b8 0f1f 	cmp.w	r8, #31
 80063fe:	dd1f      	ble.n	8006440 <_strtod_l+0x5b8>
 8006400:	2500      	movs	r5, #0
 8006402:	462e      	mov	r6, r5
 8006404:	9507      	str	r5, [sp, #28]
 8006406:	9505      	str	r5, [sp, #20]
 8006408:	2322      	movs	r3, #34	; 0x22
 800640a:	f04f 0a00 	mov.w	sl, #0
 800640e:	f04f 0b00 	mov.w	fp, #0
 8006412:	6023      	str	r3, [r4, #0]
 8006414:	e786      	b.n	8006324 <_strtod_l+0x49c>
 8006416:	bf00      	nop
 8006418:	08009461 	.word	0x08009461
 800641c:	08009478 	.word	0x08009478
 8006420:	08009458 	.word	0x08009458
 8006424:	0800945b 	.word	0x0800945b
 8006428:	08009567 	.word	0x08009567
 800642c:	08009778 	.word	0x08009778
 8006430:	08009750 	.word	0x08009750
 8006434:	7ff00000 	.word	0x7ff00000
 8006438:	7ca00000 	.word	0x7ca00000
 800643c:	7fefffff 	.word	0x7fefffff
 8006440:	f018 0310 	ands.w	r3, r8, #16
 8006444:	bf18      	it	ne
 8006446:	236a      	movne	r3, #106	; 0x6a
 8006448:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80067f8 <_strtod_l+0x970>
 800644c:	9304      	str	r3, [sp, #16]
 800644e:	4650      	mov	r0, sl
 8006450:	4659      	mov	r1, fp
 8006452:	2300      	movs	r3, #0
 8006454:	f018 0f01 	tst.w	r8, #1
 8006458:	d004      	beq.n	8006464 <_strtod_l+0x5dc>
 800645a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800645e:	f7fa f8cb 	bl	80005f8 <__aeabi_dmul>
 8006462:	2301      	movs	r3, #1
 8006464:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006468:	f109 0908 	add.w	r9, r9, #8
 800646c:	d1f2      	bne.n	8006454 <_strtod_l+0x5cc>
 800646e:	b10b      	cbz	r3, 8006474 <_strtod_l+0x5ec>
 8006470:	4682      	mov	sl, r0
 8006472:	468b      	mov	fp, r1
 8006474:	9b04      	ldr	r3, [sp, #16]
 8006476:	b1c3      	cbz	r3, 80064aa <_strtod_l+0x622>
 8006478:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800647c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006480:	2b00      	cmp	r3, #0
 8006482:	4659      	mov	r1, fp
 8006484:	dd11      	ble.n	80064aa <_strtod_l+0x622>
 8006486:	2b1f      	cmp	r3, #31
 8006488:	f340 8124 	ble.w	80066d4 <_strtod_l+0x84c>
 800648c:	2b34      	cmp	r3, #52	; 0x34
 800648e:	bfde      	ittt	le
 8006490:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006494:	f04f 33ff 	movle.w	r3, #4294967295
 8006498:	fa03 f202 	lslle.w	r2, r3, r2
 800649c:	f04f 0a00 	mov.w	sl, #0
 80064a0:	bfcc      	ite	gt
 80064a2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80064a6:	ea02 0b01 	andle.w	fp, r2, r1
 80064aa:	2200      	movs	r2, #0
 80064ac:	2300      	movs	r3, #0
 80064ae:	4650      	mov	r0, sl
 80064b0:	4659      	mov	r1, fp
 80064b2:	f7fa fb09 	bl	8000ac8 <__aeabi_dcmpeq>
 80064b6:	2800      	cmp	r0, #0
 80064b8:	d1a2      	bne.n	8006400 <_strtod_l+0x578>
 80064ba:	9b07      	ldr	r3, [sp, #28]
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	9908      	ldr	r1, [sp, #32]
 80064c0:	462b      	mov	r3, r5
 80064c2:	463a      	mov	r2, r7
 80064c4:	4620      	mov	r0, r4
 80064c6:	f001 f88b 	bl	80075e0 <__s2b>
 80064ca:	9007      	str	r0, [sp, #28]
 80064cc:	2800      	cmp	r0, #0
 80064ce:	f43f af1f 	beq.w	8006310 <_strtod_l+0x488>
 80064d2:	9b05      	ldr	r3, [sp, #20]
 80064d4:	1b9e      	subs	r6, r3, r6
 80064d6:	9b06      	ldr	r3, [sp, #24]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	bfb4      	ite	lt
 80064dc:	4633      	movlt	r3, r6
 80064de:	2300      	movge	r3, #0
 80064e0:	930c      	str	r3, [sp, #48]	; 0x30
 80064e2:	9b06      	ldr	r3, [sp, #24]
 80064e4:	2500      	movs	r5, #0
 80064e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80064ea:	9312      	str	r3, [sp, #72]	; 0x48
 80064ec:	462e      	mov	r6, r5
 80064ee:	9b07      	ldr	r3, [sp, #28]
 80064f0:	4620      	mov	r0, r4
 80064f2:	6859      	ldr	r1, [r3, #4]
 80064f4:	f000 ffcc 	bl	8007490 <_Balloc>
 80064f8:	9005      	str	r0, [sp, #20]
 80064fa:	2800      	cmp	r0, #0
 80064fc:	f43f af0c 	beq.w	8006318 <_strtod_l+0x490>
 8006500:	9b07      	ldr	r3, [sp, #28]
 8006502:	691a      	ldr	r2, [r3, #16]
 8006504:	3202      	adds	r2, #2
 8006506:	f103 010c 	add.w	r1, r3, #12
 800650a:	0092      	lsls	r2, r2, #2
 800650c:	300c      	adds	r0, #12
 800650e:	f7ff fc3f 	bl	8005d90 <memcpy>
 8006512:	ec4b ab10 	vmov	d0, sl, fp
 8006516:	aa1a      	add	r2, sp, #104	; 0x68
 8006518:	a919      	add	r1, sp, #100	; 0x64
 800651a:	4620      	mov	r0, r4
 800651c:	f001 fba6 	bl	8007c6c <__d2b>
 8006520:	ec4b ab18 	vmov	d8, sl, fp
 8006524:	9018      	str	r0, [sp, #96]	; 0x60
 8006526:	2800      	cmp	r0, #0
 8006528:	f43f aef6 	beq.w	8006318 <_strtod_l+0x490>
 800652c:	2101      	movs	r1, #1
 800652e:	4620      	mov	r0, r4
 8006530:	f001 f8f0 	bl	8007714 <__i2b>
 8006534:	4606      	mov	r6, r0
 8006536:	2800      	cmp	r0, #0
 8006538:	f43f aeee 	beq.w	8006318 <_strtod_l+0x490>
 800653c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800653e:	9904      	ldr	r1, [sp, #16]
 8006540:	2b00      	cmp	r3, #0
 8006542:	bfab      	itete	ge
 8006544:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006546:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006548:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800654a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800654e:	bfac      	ite	ge
 8006550:	eb03 0902 	addge.w	r9, r3, r2
 8006554:	1ad7      	sublt	r7, r2, r3
 8006556:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006558:	eba3 0801 	sub.w	r8, r3, r1
 800655c:	4490      	add	r8, r2
 800655e:	4ba1      	ldr	r3, [pc, #644]	; (80067e4 <_strtod_l+0x95c>)
 8006560:	f108 38ff 	add.w	r8, r8, #4294967295
 8006564:	4598      	cmp	r8, r3
 8006566:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800656a:	f280 80c7 	bge.w	80066fc <_strtod_l+0x874>
 800656e:	eba3 0308 	sub.w	r3, r3, r8
 8006572:	2b1f      	cmp	r3, #31
 8006574:	eba2 0203 	sub.w	r2, r2, r3
 8006578:	f04f 0101 	mov.w	r1, #1
 800657c:	f300 80b1 	bgt.w	80066e2 <_strtod_l+0x85a>
 8006580:	fa01 f303 	lsl.w	r3, r1, r3
 8006584:	930d      	str	r3, [sp, #52]	; 0x34
 8006586:	2300      	movs	r3, #0
 8006588:	9308      	str	r3, [sp, #32]
 800658a:	eb09 0802 	add.w	r8, r9, r2
 800658e:	9b04      	ldr	r3, [sp, #16]
 8006590:	45c1      	cmp	r9, r8
 8006592:	4417      	add	r7, r2
 8006594:	441f      	add	r7, r3
 8006596:	464b      	mov	r3, r9
 8006598:	bfa8      	it	ge
 800659a:	4643      	movge	r3, r8
 800659c:	42bb      	cmp	r3, r7
 800659e:	bfa8      	it	ge
 80065a0:	463b      	movge	r3, r7
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	bfc2      	ittt	gt
 80065a6:	eba8 0803 	subgt.w	r8, r8, r3
 80065aa:	1aff      	subgt	r7, r7, r3
 80065ac:	eba9 0903 	subgt.w	r9, r9, r3
 80065b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	dd17      	ble.n	80065e6 <_strtod_l+0x75e>
 80065b6:	4631      	mov	r1, r6
 80065b8:	461a      	mov	r2, r3
 80065ba:	4620      	mov	r0, r4
 80065bc:	f001 f96a 	bl	8007894 <__pow5mult>
 80065c0:	4606      	mov	r6, r0
 80065c2:	2800      	cmp	r0, #0
 80065c4:	f43f aea8 	beq.w	8006318 <_strtod_l+0x490>
 80065c8:	4601      	mov	r1, r0
 80065ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80065cc:	4620      	mov	r0, r4
 80065ce:	f001 f8b7 	bl	8007740 <__multiply>
 80065d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80065d4:	2800      	cmp	r0, #0
 80065d6:	f43f ae9f 	beq.w	8006318 <_strtod_l+0x490>
 80065da:	9918      	ldr	r1, [sp, #96]	; 0x60
 80065dc:	4620      	mov	r0, r4
 80065de:	f000 ff97 	bl	8007510 <_Bfree>
 80065e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065e4:	9318      	str	r3, [sp, #96]	; 0x60
 80065e6:	f1b8 0f00 	cmp.w	r8, #0
 80065ea:	f300 808c 	bgt.w	8006706 <_strtod_l+0x87e>
 80065ee:	9b06      	ldr	r3, [sp, #24]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	dd08      	ble.n	8006606 <_strtod_l+0x77e>
 80065f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80065f6:	9905      	ldr	r1, [sp, #20]
 80065f8:	4620      	mov	r0, r4
 80065fa:	f001 f94b 	bl	8007894 <__pow5mult>
 80065fe:	9005      	str	r0, [sp, #20]
 8006600:	2800      	cmp	r0, #0
 8006602:	f43f ae89 	beq.w	8006318 <_strtod_l+0x490>
 8006606:	2f00      	cmp	r7, #0
 8006608:	dd08      	ble.n	800661c <_strtod_l+0x794>
 800660a:	9905      	ldr	r1, [sp, #20]
 800660c:	463a      	mov	r2, r7
 800660e:	4620      	mov	r0, r4
 8006610:	f001 f99a 	bl	8007948 <__lshift>
 8006614:	9005      	str	r0, [sp, #20]
 8006616:	2800      	cmp	r0, #0
 8006618:	f43f ae7e 	beq.w	8006318 <_strtod_l+0x490>
 800661c:	f1b9 0f00 	cmp.w	r9, #0
 8006620:	dd08      	ble.n	8006634 <_strtod_l+0x7ac>
 8006622:	4631      	mov	r1, r6
 8006624:	464a      	mov	r2, r9
 8006626:	4620      	mov	r0, r4
 8006628:	f001 f98e 	bl	8007948 <__lshift>
 800662c:	4606      	mov	r6, r0
 800662e:	2800      	cmp	r0, #0
 8006630:	f43f ae72 	beq.w	8006318 <_strtod_l+0x490>
 8006634:	9a05      	ldr	r2, [sp, #20]
 8006636:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006638:	4620      	mov	r0, r4
 800663a:	f001 fa11 	bl	8007a60 <__mdiff>
 800663e:	4605      	mov	r5, r0
 8006640:	2800      	cmp	r0, #0
 8006642:	f43f ae69 	beq.w	8006318 <_strtod_l+0x490>
 8006646:	68c3      	ldr	r3, [r0, #12]
 8006648:	930b      	str	r3, [sp, #44]	; 0x2c
 800664a:	2300      	movs	r3, #0
 800664c:	60c3      	str	r3, [r0, #12]
 800664e:	4631      	mov	r1, r6
 8006650:	f001 f9ea 	bl	8007a28 <__mcmp>
 8006654:	2800      	cmp	r0, #0
 8006656:	da60      	bge.n	800671a <_strtod_l+0x892>
 8006658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800665a:	ea53 030a 	orrs.w	r3, r3, sl
 800665e:	f040 8082 	bne.w	8006766 <_strtod_l+0x8de>
 8006662:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006666:	2b00      	cmp	r3, #0
 8006668:	d17d      	bne.n	8006766 <_strtod_l+0x8de>
 800666a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800666e:	0d1b      	lsrs	r3, r3, #20
 8006670:	051b      	lsls	r3, r3, #20
 8006672:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006676:	d976      	bls.n	8006766 <_strtod_l+0x8de>
 8006678:	696b      	ldr	r3, [r5, #20]
 800667a:	b913      	cbnz	r3, 8006682 <_strtod_l+0x7fa>
 800667c:	692b      	ldr	r3, [r5, #16]
 800667e:	2b01      	cmp	r3, #1
 8006680:	dd71      	ble.n	8006766 <_strtod_l+0x8de>
 8006682:	4629      	mov	r1, r5
 8006684:	2201      	movs	r2, #1
 8006686:	4620      	mov	r0, r4
 8006688:	f001 f95e 	bl	8007948 <__lshift>
 800668c:	4631      	mov	r1, r6
 800668e:	4605      	mov	r5, r0
 8006690:	f001 f9ca 	bl	8007a28 <__mcmp>
 8006694:	2800      	cmp	r0, #0
 8006696:	dd66      	ble.n	8006766 <_strtod_l+0x8de>
 8006698:	9904      	ldr	r1, [sp, #16]
 800669a:	4a53      	ldr	r2, [pc, #332]	; (80067e8 <_strtod_l+0x960>)
 800669c:	465b      	mov	r3, fp
 800669e:	2900      	cmp	r1, #0
 80066a0:	f000 8081 	beq.w	80067a6 <_strtod_l+0x91e>
 80066a4:	ea02 010b 	and.w	r1, r2, fp
 80066a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80066ac:	dc7b      	bgt.n	80067a6 <_strtod_l+0x91e>
 80066ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80066b2:	f77f aea9 	ble.w	8006408 <_strtod_l+0x580>
 80066b6:	4b4d      	ldr	r3, [pc, #308]	; (80067ec <_strtod_l+0x964>)
 80066b8:	4650      	mov	r0, sl
 80066ba:	4659      	mov	r1, fp
 80066bc:	2200      	movs	r2, #0
 80066be:	f7f9 ff9b 	bl	80005f8 <__aeabi_dmul>
 80066c2:	460b      	mov	r3, r1
 80066c4:	4303      	orrs	r3, r0
 80066c6:	bf08      	it	eq
 80066c8:	2322      	moveq	r3, #34	; 0x22
 80066ca:	4682      	mov	sl, r0
 80066cc:	468b      	mov	fp, r1
 80066ce:	bf08      	it	eq
 80066d0:	6023      	streq	r3, [r4, #0]
 80066d2:	e62b      	b.n	800632c <_strtod_l+0x4a4>
 80066d4:	f04f 32ff 	mov.w	r2, #4294967295
 80066d8:	fa02 f303 	lsl.w	r3, r2, r3
 80066dc:	ea03 0a0a 	and.w	sl, r3, sl
 80066e0:	e6e3      	b.n	80064aa <_strtod_l+0x622>
 80066e2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80066e6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80066ea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80066ee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80066f2:	fa01 f308 	lsl.w	r3, r1, r8
 80066f6:	9308      	str	r3, [sp, #32]
 80066f8:	910d      	str	r1, [sp, #52]	; 0x34
 80066fa:	e746      	b.n	800658a <_strtod_l+0x702>
 80066fc:	2300      	movs	r3, #0
 80066fe:	9308      	str	r3, [sp, #32]
 8006700:	2301      	movs	r3, #1
 8006702:	930d      	str	r3, [sp, #52]	; 0x34
 8006704:	e741      	b.n	800658a <_strtod_l+0x702>
 8006706:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006708:	4642      	mov	r2, r8
 800670a:	4620      	mov	r0, r4
 800670c:	f001 f91c 	bl	8007948 <__lshift>
 8006710:	9018      	str	r0, [sp, #96]	; 0x60
 8006712:	2800      	cmp	r0, #0
 8006714:	f47f af6b 	bne.w	80065ee <_strtod_l+0x766>
 8006718:	e5fe      	b.n	8006318 <_strtod_l+0x490>
 800671a:	465f      	mov	r7, fp
 800671c:	d16e      	bne.n	80067fc <_strtod_l+0x974>
 800671e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006720:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006724:	b342      	cbz	r2, 8006778 <_strtod_l+0x8f0>
 8006726:	4a32      	ldr	r2, [pc, #200]	; (80067f0 <_strtod_l+0x968>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d128      	bne.n	800677e <_strtod_l+0x8f6>
 800672c:	9b04      	ldr	r3, [sp, #16]
 800672e:	4651      	mov	r1, sl
 8006730:	b1eb      	cbz	r3, 800676e <_strtod_l+0x8e6>
 8006732:	4b2d      	ldr	r3, [pc, #180]	; (80067e8 <_strtod_l+0x960>)
 8006734:	403b      	ands	r3, r7
 8006736:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800673a:	f04f 32ff 	mov.w	r2, #4294967295
 800673e:	d819      	bhi.n	8006774 <_strtod_l+0x8ec>
 8006740:	0d1b      	lsrs	r3, r3, #20
 8006742:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006746:	fa02 f303 	lsl.w	r3, r2, r3
 800674a:	4299      	cmp	r1, r3
 800674c:	d117      	bne.n	800677e <_strtod_l+0x8f6>
 800674e:	4b29      	ldr	r3, [pc, #164]	; (80067f4 <_strtod_l+0x96c>)
 8006750:	429f      	cmp	r7, r3
 8006752:	d102      	bne.n	800675a <_strtod_l+0x8d2>
 8006754:	3101      	adds	r1, #1
 8006756:	f43f addf 	beq.w	8006318 <_strtod_l+0x490>
 800675a:	4b23      	ldr	r3, [pc, #140]	; (80067e8 <_strtod_l+0x960>)
 800675c:	403b      	ands	r3, r7
 800675e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006762:	f04f 0a00 	mov.w	sl, #0
 8006766:	9b04      	ldr	r3, [sp, #16]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1a4      	bne.n	80066b6 <_strtod_l+0x82e>
 800676c:	e5de      	b.n	800632c <_strtod_l+0x4a4>
 800676e:	f04f 33ff 	mov.w	r3, #4294967295
 8006772:	e7ea      	b.n	800674a <_strtod_l+0x8c2>
 8006774:	4613      	mov	r3, r2
 8006776:	e7e8      	b.n	800674a <_strtod_l+0x8c2>
 8006778:	ea53 030a 	orrs.w	r3, r3, sl
 800677c:	d08c      	beq.n	8006698 <_strtod_l+0x810>
 800677e:	9b08      	ldr	r3, [sp, #32]
 8006780:	b1db      	cbz	r3, 80067ba <_strtod_l+0x932>
 8006782:	423b      	tst	r3, r7
 8006784:	d0ef      	beq.n	8006766 <_strtod_l+0x8de>
 8006786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006788:	9a04      	ldr	r2, [sp, #16]
 800678a:	4650      	mov	r0, sl
 800678c:	4659      	mov	r1, fp
 800678e:	b1c3      	cbz	r3, 80067c2 <_strtod_l+0x93a>
 8006790:	f7ff fb5e 	bl	8005e50 <sulp>
 8006794:	4602      	mov	r2, r0
 8006796:	460b      	mov	r3, r1
 8006798:	ec51 0b18 	vmov	r0, r1, d8
 800679c:	f7f9 fd76 	bl	800028c <__adddf3>
 80067a0:	4682      	mov	sl, r0
 80067a2:	468b      	mov	fp, r1
 80067a4:	e7df      	b.n	8006766 <_strtod_l+0x8de>
 80067a6:	4013      	ands	r3, r2
 80067a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80067ac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80067b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80067b4:	f04f 3aff 	mov.w	sl, #4294967295
 80067b8:	e7d5      	b.n	8006766 <_strtod_l+0x8de>
 80067ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067bc:	ea13 0f0a 	tst.w	r3, sl
 80067c0:	e7e0      	b.n	8006784 <_strtod_l+0x8fc>
 80067c2:	f7ff fb45 	bl	8005e50 <sulp>
 80067c6:	4602      	mov	r2, r0
 80067c8:	460b      	mov	r3, r1
 80067ca:	ec51 0b18 	vmov	r0, r1, d8
 80067ce:	f7f9 fd5b 	bl	8000288 <__aeabi_dsub>
 80067d2:	2200      	movs	r2, #0
 80067d4:	2300      	movs	r3, #0
 80067d6:	4682      	mov	sl, r0
 80067d8:	468b      	mov	fp, r1
 80067da:	f7fa f975 	bl	8000ac8 <__aeabi_dcmpeq>
 80067de:	2800      	cmp	r0, #0
 80067e0:	d0c1      	beq.n	8006766 <_strtod_l+0x8de>
 80067e2:	e611      	b.n	8006408 <_strtod_l+0x580>
 80067e4:	fffffc02 	.word	0xfffffc02
 80067e8:	7ff00000 	.word	0x7ff00000
 80067ec:	39500000 	.word	0x39500000
 80067f0:	000fffff 	.word	0x000fffff
 80067f4:	7fefffff 	.word	0x7fefffff
 80067f8:	08009490 	.word	0x08009490
 80067fc:	4631      	mov	r1, r6
 80067fe:	4628      	mov	r0, r5
 8006800:	f001 fa90 	bl	8007d24 <__ratio>
 8006804:	ec59 8b10 	vmov	r8, r9, d0
 8006808:	ee10 0a10 	vmov	r0, s0
 800680c:	2200      	movs	r2, #0
 800680e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006812:	4649      	mov	r1, r9
 8006814:	f7fa f96c 	bl	8000af0 <__aeabi_dcmple>
 8006818:	2800      	cmp	r0, #0
 800681a:	d07a      	beq.n	8006912 <_strtod_l+0xa8a>
 800681c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800681e:	2b00      	cmp	r3, #0
 8006820:	d04a      	beq.n	80068b8 <_strtod_l+0xa30>
 8006822:	4b95      	ldr	r3, [pc, #596]	; (8006a78 <_strtod_l+0xbf0>)
 8006824:	2200      	movs	r2, #0
 8006826:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800682a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006a78 <_strtod_l+0xbf0>
 800682e:	f04f 0800 	mov.w	r8, #0
 8006832:	4b92      	ldr	r3, [pc, #584]	; (8006a7c <_strtod_l+0xbf4>)
 8006834:	403b      	ands	r3, r7
 8006836:	930d      	str	r3, [sp, #52]	; 0x34
 8006838:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800683a:	4b91      	ldr	r3, [pc, #580]	; (8006a80 <_strtod_l+0xbf8>)
 800683c:	429a      	cmp	r2, r3
 800683e:	f040 80b0 	bne.w	80069a2 <_strtod_l+0xb1a>
 8006842:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006846:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800684a:	ec4b ab10 	vmov	d0, sl, fp
 800684e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006852:	f001 f98f 	bl	8007b74 <__ulp>
 8006856:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800685a:	ec53 2b10 	vmov	r2, r3, d0
 800685e:	f7f9 fecb 	bl	80005f8 <__aeabi_dmul>
 8006862:	4652      	mov	r2, sl
 8006864:	465b      	mov	r3, fp
 8006866:	f7f9 fd11 	bl	800028c <__adddf3>
 800686a:	460b      	mov	r3, r1
 800686c:	4983      	ldr	r1, [pc, #524]	; (8006a7c <_strtod_l+0xbf4>)
 800686e:	4a85      	ldr	r2, [pc, #532]	; (8006a84 <_strtod_l+0xbfc>)
 8006870:	4019      	ands	r1, r3
 8006872:	4291      	cmp	r1, r2
 8006874:	4682      	mov	sl, r0
 8006876:	d960      	bls.n	800693a <_strtod_l+0xab2>
 8006878:	ee18 3a90 	vmov	r3, s17
 800687c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006880:	4293      	cmp	r3, r2
 8006882:	d104      	bne.n	800688e <_strtod_l+0xa06>
 8006884:	ee18 3a10 	vmov	r3, s16
 8006888:	3301      	adds	r3, #1
 800688a:	f43f ad45 	beq.w	8006318 <_strtod_l+0x490>
 800688e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006a90 <_strtod_l+0xc08>
 8006892:	f04f 3aff 	mov.w	sl, #4294967295
 8006896:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006898:	4620      	mov	r0, r4
 800689a:	f000 fe39 	bl	8007510 <_Bfree>
 800689e:	9905      	ldr	r1, [sp, #20]
 80068a0:	4620      	mov	r0, r4
 80068a2:	f000 fe35 	bl	8007510 <_Bfree>
 80068a6:	4631      	mov	r1, r6
 80068a8:	4620      	mov	r0, r4
 80068aa:	f000 fe31 	bl	8007510 <_Bfree>
 80068ae:	4629      	mov	r1, r5
 80068b0:	4620      	mov	r0, r4
 80068b2:	f000 fe2d 	bl	8007510 <_Bfree>
 80068b6:	e61a      	b.n	80064ee <_strtod_l+0x666>
 80068b8:	f1ba 0f00 	cmp.w	sl, #0
 80068bc:	d11b      	bne.n	80068f6 <_strtod_l+0xa6e>
 80068be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80068c2:	b9f3      	cbnz	r3, 8006902 <_strtod_l+0xa7a>
 80068c4:	4b6c      	ldr	r3, [pc, #432]	; (8006a78 <_strtod_l+0xbf0>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	4640      	mov	r0, r8
 80068ca:	4649      	mov	r1, r9
 80068cc:	f7fa f906 	bl	8000adc <__aeabi_dcmplt>
 80068d0:	b9d0      	cbnz	r0, 8006908 <_strtod_l+0xa80>
 80068d2:	4640      	mov	r0, r8
 80068d4:	4649      	mov	r1, r9
 80068d6:	4b6c      	ldr	r3, [pc, #432]	; (8006a88 <_strtod_l+0xc00>)
 80068d8:	2200      	movs	r2, #0
 80068da:	f7f9 fe8d 	bl	80005f8 <__aeabi_dmul>
 80068de:	4680      	mov	r8, r0
 80068e0:	4689      	mov	r9, r1
 80068e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80068e6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80068ea:	9315      	str	r3, [sp, #84]	; 0x54
 80068ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80068f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80068f4:	e79d      	b.n	8006832 <_strtod_l+0x9aa>
 80068f6:	f1ba 0f01 	cmp.w	sl, #1
 80068fa:	d102      	bne.n	8006902 <_strtod_l+0xa7a>
 80068fc:	2f00      	cmp	r7, #0
 80068fe:	f43f ad83 	beq.w	8006408 <_strtod_l+0x580>
 8006902:	4b62      	ldr	r3, [pc, #392]	; (8006a8c <_strtod_l+0xc04>)
 8006904:	2200      	movs	r2, #0
 8006906:	e78e      	b.n	8006826 <_strtod_l+0x99e>
 8006908:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006a88 <_strtod_l+0xc00>
 800690c:	f04f 0800 	mov.w	r8, #0
 8006910:	e7e7      	b.n	80068e2 <_strtod_l+0xa5a>
 8006912:	4b5d      	ldr	r3, [pc, #372]	; (8006a88 <_strtod_l+0xc00>)
 8006914:	4640      	mov	r0, r8
 8006916:	4649      	mov	r1, r9
 8006918:	2200      	movs	r2, #0
 800691a:	f7f9 fe6d 	bl	80005f8 <__aeabi_dmul>
 800691e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006920:	4680      	mov	r8, r0
 8006922:	4689      	mov	r9, r1
 8006924:	b933      	cbnz	r3, 8006934 <_strtod_l+0xaac>
 8006926:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800692a:	900e      	str	r0, [sp, #56]	; 0x38
 800692c:	930f      	str	r3, [sp, #60]	; 0x3c
 800692e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006932:	e7dd      	b.n	80068f0 <_strtod_l+0xa68>
 8006934:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006938:	e7f9      	b.n	800692e <_strtod_l+0xaa6>
 800693a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800693e:	9b04      	ldr	r3, [sp, #16]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1a8      	bne.n	8006896 <_strtod_l+0xa0e>
 8006944:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006948:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800694a:	0d1b      	lsrs	r3, r3, #20
 800694c:	051b      	lsls	r3, r3, #20
 800694e:	429a      	cmp	r2, r3
 8006950:	d1a1      	bne.n	8006896 <_strtod_l+0xa0e>
 8006952:	4640      	mov	r0, r8
 8006954:	4649      	mov	r1, r9
 8006956:	f7fa f987 	bl	8000c68 <__aeabi_d2lz>
 800695a:	f7f9 fe1f 	bl	800059c <__aeabi_l2d>
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	4640      	mov	r0, r8
 8006964:	4649      	mov	r1, r9
 8006966:	f7f9 fc8f 	bl	8000288 <__aeabi_dsub>
 800696a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800696c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006970:	ea43 030a 	orr.w	r3, r3, sl
 8006974:	4313      	orrs	r3, r2
 8006976:	4680      	mov	r8, r0
 8006978:	4689      	mov	r9, r1
 800697a:	d055      	beq.n	8006a28 <_strtod_l+0xba0>
 800697c:	a336      	add	r3, pc, #216	; (adr r3, 8006a58 <_strtod_l+0xbd0>)
 800697e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006982:	f7fa f8ab 	bl	8000adc <__aeabi_dcmplt>
 8006986:	2800      	cmp	r0, #0
 8006988:	f47f acd0 	bne.w	800632c <_strtod_l+0x4a4>
 800698c:	a334      	add	r3, pc, #208	; (adr r3, 8006a60 <_strtod_l+0xbd8>)
 800698e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006992:	4640      	mov	r0, r8
 8006994:	4649      	mov	r1, r9
 8006996:	f7fa f8bf 	bl	8000b18 <__aeabi_dcmpgt>
 800699a:	2800      	cmp	r0, #0
 800699c:	f43f af7b 	beq.w	8006896 <_strtod_l+0xa0e>
 80069a0:	e4c4      	b.n	800632c <_strtod_l+0x4a4>
 80069a2:	9b04      	ldr	r3, [sp, #16]
 80069a4:	b333      	cbz	r3, 80069f4 <_strtod_l+0xb6c>
 80069a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80069ac:	d822      	bhi.n	80069f4 <_strtod_l+0xb6c>
 80069ae:	a32e      	add	r3, pc, #184	; (adr r3, 8006a68 <_strtod_l+0xbe0>)
 80069b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b4:	4640      	mov	r0, r8
 80069b6:	4649      	mov	r1, r9
 80069b8:	f7fa f89a 	bl	8000af0 <__aeabi_dcmple>
 80069bc:	b1a0      	cbz	r0, 80069e8 <_strtod_l+0xb60>
 80069be:	4649      	mov	r1, r9
 80069c0:	4640      	mov	r0, r8
 80069c2:	f7fa f8c9 	bl	8000b58 <__aeabi_d2uiz>
 80069c6:	2801      	cmp	r0, #1
 80069c8:	bf38      	it	cc
 80069ca:	2001      	movcc	r0, #1
 80069cc:	f7f9 fd9a 	bl	8000504 <__aeabi_ui2d>
 80069d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069d2:	4680      	mov	r8, r0
 80069d4:	4689      	mov	r9, r1
 80069d6:	bb23      	cbnz	r3, 8006a22 <_strtod_l+0xb9a>
 80069d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069dc:	9010      	str	r0, [sp, #64]	; 0x40
 80069de:	9311      	str	r3, [sp, #68]	; 0x44
 80069e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80069e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80069e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069ec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80069f0:	1a9b      	subs	r3, r3, r2
 80069f2:	9309      	str	r3, [sp, #36]	; 0x24
 80069f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80069f8:	eeb0 0a48 	vmov.f32	s0, s16
 80069fc:	eef0 0a68 	vmov.f32	s1, s17
 8006a00:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006a04:	f001 f8b6 	bl	8007b74 <__ulp>
 8006a08:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006a0c:	ec53 2b10 	vmov	r2, r3, d0
 8006a10:	f7f9 fdf2 	bl	80005f8 <__aeabi_dmul>
 8006a14:	ec53 2b18 	vmov	r2, r3, d8
 8006a18:	f7f9 fc38 	bl	800028c <__adddf3>
 8006a1c:	4682      	mov	sl, r0
 8006a1e:	468b      	mov	fp, r1
 8006a20:	e78d      	b.n	800693e <_strtod_l+0xab6>
 8006a22:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006a26:	e7db      	b.n	80069e0 <_strtod_l+0xb58>
 8006a28:	a311      	add	r3, pc, #68	; (adr r3, 8006a70 <_strtod_l+0xbe8>)
 8006a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2e:	f7fa f855 	bl	8000adc <__aeabi_dcmplt>
 8006a32:	e7b2      	b.n	800699a <_strtod_l+0xb12>
 8006a34:	2300      	movs	r3, #0
 8006a36:	930a      	str	r3, [sp, #40]	; 0x28
 8006a38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006a3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a3c:	6013      	str	r3, [r2, #0]
 8006a3e:	f7ff ba6b 	b.w	8005f18 <_strtod_l+0x90>
 8006a42:	2a65      	cmp	r2, #101	; 0x65
 8006a44:	f43f ab5f 	beq.w	8006106 <_strtod_l+0x27e>
 8006a48:	2a45      	cmp	r2, #69	; 0x45
 8006a4a:	f43f ab5c 	beq.w	8006106 <_strtod_l+0x27e>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	f7ff bb94 	b.w	800617c <_strtod_l+0x2f4>
 8006a54:	f3af 8000 	nop.w
 8006a58:	94a03595 	.word	0x94a03595
 8006a5c:	3fdfffff 	.word	0x3fdfffff
 8006a60:	35afe535 	.word	0x35afe535
 8006a64:	3fe00000 	.word	0x3fe00000
 8006a68:	ffc00000 	.word	0xffc00000
 8006a6c:	41dfffff 	.word	0x41dfffff
 8006a70:	94a03595 	.word	0x94a03595
 8006a74:	3fcfffff 	.word	0x3fcfffff
 8006a78:	3ff00000 	.word	0x3ff00000
 8006a7c:	7ff00000 	.word	0x7ff00000
 8006a80:	7fe00000 	.word	0x7fe00000
 8006a84:	7c9fffff 	.word	0x7c9fffff
 8006a88:	3fe00000 	.word	0x3fe00000
 8006a8c:	bff00000 	.word	0xbff00000
 8006a90:	7fefffff 	.word	0x7fefffff

08006a94 <strtof>:
 8006a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a98:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8006b48 <strtof+0xb4>
 8006a9c:	4b26      	ldr	r3, [pc, #152]	; (8006b38 <strtof+0xa4>)
 8006a9e:	460a      	mov	r2, r1
 8006aa0:	ed2d 8b02 	vpush	{d8}
 8006aa4:	4601      	mov	r1, r0
 8006aa6:	f8d8 0000 	ldr.w	r0, [r8]
 8006aaa:	f7ff f9ed 	bl	8005e88 <_strtod_l>
 8006aae:	ec55 4b10 	vmov	r4, r5, d0
 8006ab2:	ee10 2a10 	vmov	r2, s0
 8006ab6:	ee10 0a10 	vmov	r0, s0
 8006aba:	462b      	mov	r3, r5
 8006abc:	4629      	mov	r1, r5
 8006abe:	f7fa f835 	bl	8000b2c <__aeabi_dcmpun>
 8006ac2:	b190      	cbz	r0, 8006aea <strtof+0x56>
 8006ac4:	2d00      	cmp	r5, #0
 8006ac6:	481d      	ldr	r0, [pc, #116]	; (8006b3c <strtof+0xa8>)
 8006ac8:	da09      	bge.n	8006ade <strtof+0x4a>
 8006aca:	f001 fefd 	bl	80088c8 <nanf>
 8006ace:	eeb1 8a40 	vneg.f32	s16, s0
 8006ad2:	eeb0 0a48 	vmov.f32	s0, s16
 8006ad6:	ecbd 8b02 	vpop	{d8}
 8006ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ade:	ecbd 8b02 	vpop	{d8}
 8006ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae6:	f001 beef 	b.w	80088c8 <nanf>
 8006aea:	4620      	mov	r0, r4
 8006aec:	4629      	mov	r1, r5
 8006aee:	f7fa f853 	bl	8000b98 <__aeabi_d2f>
 8006af2:	ee08 0a10 	vmov	s16, r0
 8006af6:	eddf 7a12 	vldr	s15, [pc, #72]	; 8006b40 <strtof+0xac>
 8006afa:	eeb0 7ac8 	vabs.f32	s14, s16
 8006afe:	eeb4 7a67 	vcmp.f32	s14, s15
 8006b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b06:	dde4      	ble.n	8006ad2 <strtof+0x3e>
 8006b08:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8006b0c:	4b0d      	ldr	r3, [pc, #52]	; (8006b44 <strtof+0xb0>)
 8006b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b12:	4620      	mov	r0, r4
 8006b14:	4639      	mov	r1, r7
 8006b16:	f7fa f809 	bl	8000b2c <__aeabi_dcmpun>
 8006b1a:	b940      	cbnz	r0, 8006b2e <strtof+0x9a>
 8006b1c:	4b09      	ldr	r3, [pc, #36]	; (8006b44 <strtof+0xb0>)
 8006b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b22:	4620      	mov	r0, r4
 8006b24:	4639      	mov	r1, r7
 8006b26:	f7f9 ffe3 	bl	8000af0 <__aeabi_dcmple>
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	d0d1      	beq.n	8006ad2 <strtof+0x3e>
 8006b2e:	f8d8 3000 	ldr.w	r3, [r8]
 8006b32:	2222      	movs	r2, #34	; 0x22
 8006b34:	601a      	str	r2, [r3, #0]
 8006b36:	e7cc      	b.n	8006ad2 <strtof+0x3e>
 8006b38:	20000100 	.word	0x20000100
 8006b3c:	08009567 	.word	0x08009567
 8006b40:	7f7fffff 	.word	0x7f7fffff
 8006b44:	7fefffff 	.word	0x7fefffff
 8006b48:	20000098 	.word	0x20000098

08006b4c <strtok>:
 8006b4c:	4b16      	ldr	r3, [pc, #88]	; (8006ba8 <strtok+0x5c>)
 8006b4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b50:	681e      	ldr	r6, [r3, #0]
 8006b52:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8006b54:	4605      	mov	r5, r0
 8006b56:	b9fc      	cbnz	r4, 8006b98 <strtok+0x4c>
 8006b58:	2050      	movs	r0, #80	; 0x50
 8006b5a:	9101      	str	r1, [sp, #4]
 8006b5c:	f000 fc7e 	bl	800745c <malloc>
 8006b60:	9901      	ldr	r1, [sp, #4]
 8006b62:	65b0      	str	r0, [r6, #88]	; 0x58
 8006b64:	4602      	mov	r2, r0
 8006b66:	b920      	cbnz	r0, 8006b72 <strtok+0x26>
 8006b68:	4b10      	ldr	r3, [pc, #64]	; (8006bac <strtok+0x60>)
 8006b6a:	4811      	ldr	r0, [pc, #68]	; (8006bb0 <strtok+0x64>)
 8006b6c:	2157      	movs	r1, #87	; 0x57
 8006b6e:	f000 f8d5 	bl	8006d1c <__assert_func>
 8006b72:	e9c0 4400 	strd	r4, r4, [r0]
 8006b76:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006b7a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006b7e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006b82:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006b86:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006b8a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006b8e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006b92:	6184      	str	r4, [r0, #24]
 8006b94:	7704      	strb	r4, [r0, #28]
 8006b96:	6244      	str	r4, [r0, #36]	; 0x24
 8006b98:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	b002      	add	sp, #8
 8006ba0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006ba4:	f000 b806 	b.w	8006bb4 <__strtok_r>
 8006ba8:	20000098 	.word	0x20000098
 8006bac:	080094b8 	.word	0x080094b8
 8006bb0:	080094cf 	.word	0x080094cf

08006bb4 <__strtok_r>:
 8006bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bb6:	b908      	cbnz	r0, 8006bbc <__strtok_r+0x8>
 8006bb8:	6810      	ldr	r0, [r2, #0]
 8006bba:	b188      	cbz	r0, 8006be0 <__strtok_r+0x2c>
 8006bbc:	4604      	mov	r4, r0
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006bc4:	460f      	mov	r7, r1
 8006bc6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006bca:	b91e      	cbnz	r6, 8006bd4 <__strtok_r+0x20>
 8006bcc:	b965      	cbnz	r5, 8006be8 <__strtok_r+0x34>
 8006bce:	6015      	str	r5, [r2, #0]
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	e005      	b.n	8006be0 <__strtok_r+0x2c>
 8006bd4:	42b5      	cmp	r5, r6
 8006bd6:	d1f6      	bne.n	8006bc6 <__strtok_r+0x12>
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1f0      	bne.n	8006bbe <__strtok_r+0xa>
 8006bdc:	6014      	str	r4, [r2, #0]
 8006bde:	7003      	strb	r3, [r0, #0]
 8006be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006be2:	461c      	mov	r4, r3
 8006be4:	e00c      	b.n	8006c00 <__strtok_r+0x4c>
 8006be6:	b915      	cbnz	r5, 8006bee <__strtok_r+0x3a>
 8006be8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006bec:	460e      	mov	r6, r1
 8006bee:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006bf2:	42ab      	cmp	r3, r5
 8006bf4:	d1f7      	bne.n	8006be6 <__strtok_r+0x32>
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d0f3      	beq.n	8006be2 <__strtok_r+0x2e>
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006c00:	6014      	str	r4, [r2, #0]
 8006c02:	e7ed      	b.n	8006be0 <__strtok_r+0x2c>

08006c04 <_strtol_l.constprop.0>:
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c0a:	d001      	beq.n	8006c10 <_strtol_l.constprop.0+0xc>
 8006c0c:	2b24      	cmp	r3, #36	; 0x24
 8006c0e:	d906      	bls.n	8006c1e <_strtol_l.constprop.0+0x1a>
 8006c10:	f7ff f894 	bl	8005d3c <__errno>
 8006c14:	2316      	movs	r3, #22
 8006c16:	6003      	str	r3, [r0, #0]
 8006c18:	2000      	movs	r0, #0
 8006c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c1e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006d04 <_strtol_l.constprop.0+0x100>
 8006c22:	460d      	mov	r5, r1
 8006c24:	462e      	mov	r6, r5
 8006c26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c2a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006c2e:	f017 0708 	ands.w	r7, r7, #8
 8006c32:	d1f7      	bne.n	8006c24 <_strtol_l.constprop.0+0x20>
 8006c34:	2c2d      	cmp	r4, #45	; 0x2d
 8006c36:	d132      	bne.n	8006c9e <_strtol_l.constprop.0+0x9a>
 8006c38:	782c      	ldrb	r4, [r5, #0]
 8006c3a:	2701      	movs	r7, #1
 8006c3c:	1cb5      	adds	r5, r6, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d05b      	beq.n	8006cfa <_strtol_l.constprop.0+0xf6>
 8006c42:	2b10      	cmp	r3, #16
 8006c44:	d109      	bne.n	8006c5a <_strtol_l.constprop.0+0x56>
 8006c46:	2c30      	cmp	r4, #48	; 0x30
 8006c48:	d107      	bne.n	8006c5a <_strtol_l.constprop.0+0x56>
 8006c4a:	782c      	ldrb	r4, [r5, #0]
 8006c4c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006c50:	2c58      	cmp	r4, #88	; 0x58
 8006c52:	d14d      	bne.n	8006cf0 <_strtol_l.constprop.0+0xec>
 8006c54:	786c      	ldrb	r4, [r5, #1]
 8006c56:	2310      	movs	r3, #16
 8006c58:	3502      	adds	r5, #2
 8006c5a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006c5e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006c62:	f04f 0c00 	mov.w	ip, #0
 8006c66:	fbb8 f9f3 	udiv	r9, r8, r3
 8006c6a:	4666      	mov	r6, ip
 8006c6c:	fb03 8a19 	mls	sl, r3, r9, r8
 8006c70:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006c74:	f1be 0f09 	cmp.w	lr, #9
 8006c78:	d816      	bhi.n	8006ca8 <_strtol_l.constprop.0+0xa4>
 8006c7a:	4674      	mov	r4, lr
 8006c7c:	42a3      	cmp	r3, r4
 8006c7e:	dd24      	ble.n	8006cca <_strtol_l.constprop.0+0xc6>
 8006c80:	f1bc 0f00 	cmp.w	ip, #0
 8006c84:	db1e      	blt.n	8006cc4 <_strtol_l.constprop.0+0xc0>
 8006c86:	45b1      	cmp	r9, r6
 8006c88:	d31c      	bcc.n	8006cc4 <_strtol_l.constprop.0+0xc0>
 8006c8a:	d101      	bne.n	8006c90 <_strtol_l.constprop.0+0x8c>
 8006c8c:	45a2      	cmp	sl, r4
 8006c8e:	db19      	blt.n	8006cc4 <_strtol_l.constprop.0+0xc0>
 8006c90:	fb06 4603 	mla	r6, r6, r3, r4
 8006c94:	f04f 0c01 	mov.w	ip, #1
 8006c98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c9c:	e7e8      	b.n	8006c70 <_strtol_l.constprop.0+0x6c>
 8006c9e:	2c2b      	cmp	r4, #43	; 0x2b
 8006ca0:	bf04      	itt	eq
 8006ca2:	782c      	ldrbeq	r4, [r5, #0]
 8006ca4:	1cb5      	addeq	r5, r6, #2
 8006ca6:	e7ca      	b.n	8006c3e <_strtol_l.constprop.0+0x3a>
 8006ca8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006cac:	f1be 0f19 	cmp.w	lr, #25
 8006cb0:	d801      	bhi.n	8006cb6 <_strtol_l.constprop.0+0xb2>
 8006cb2:	3c37      	subs	r4, #55	; 0x37
 8006cb4:	e7e2      	b.n	8006c7c <_strtol_l.constprop.0+0x78>
 8006cb6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006cba:	f1be 0f19 	cmp.w	lr, #25
 8006cbe:	d804      	bhi.n	8006cca <_strtol_l.constprop.0+0xc6>
 8006cc0:	3c57      	subs	r4, #87	; 0x57
 8006cc2:	e7db      	b.n	8006c7c <_strtol_l.constprop.0+0x78>
 8006cc4:	f04f 3cff 	mov.w	ip, #4294967295
 8006cc8:	e7e6      	b.n	8006c98 <_strtol_l.constprop.0+0x94>
 8006cca:	f1bc 0f00 	cmp.w	ip, #0
 8006cce:	da05      	bge.n	8006cdc <_strtol_l.constprop.0+0xd8>
 8006cd0:	2322      	movs	r3, #34	; 0x22
 8006cd2:	6003      	str	r3, [r0, #0]
 8006cd4:	4646      	mov	r6, r8
 8006cd6:	b942      	cbnz	r2, 8006cea <_strtol_l.constprop.0+0xe6>
 8006cd8:	4630      	mov	r0, r6
 8006cda:	e79e      	b.n	8006c1a <_strtol_l.constprop.0+0x16>
 8006cdc:	b107      	cbz	r7, 8006ce0 <_strtol_l.constprop.0+0xdc>
 8006cde:	4276      	negs	r6, r6
 8006ce0:	2a00      	cmp	r2, #0
 8006ce2:	d0f9      	beq.n	8006cd8 <_strtol_l.constprop.0+0xd4>
 8006ce4:	f1bc 0f00 	cmp.w	ip, #0
 8006ce8:	d000      	beq.n	8006cec <_strtol_l.constprop.0+0xe8>
 8006cea:	1e69      	subs	r1, r5, #1
 8006cec:	6011      	str	r1, [r2, #0]
 8006cee:	e7f3      	b.n	8006cd8 <_strtol_l.constprop.0+0xd4>
 8006cf0:	2430      	movs	r4, #48	; 0x30
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1b1      	bne.n	8006c5a <_strtol_l.constprop.0+0x56>
 8006cf6:	2308      	movs	r3, #8
 8006cf8:	e7af      	b.n	8006c5a <_strtol_l.constprop.0+0x56>
 8006cfa:	2c30      	cmp	r4, #48	; 0x30
 8006cfc:	d0a5      	beq.n	8006c4a <_strtol_l.constprop.0+0x46>
 8006cfe:	230a      	movs	r3, #10
 8006d00:	e7ab      	b.n	8006c5a <_strtol_l.constprop.0+0x56>
 8006d02:	bf00      	nop
 8006d04:	08009569 	.word	0x08009569

08006d08 <strtol>:
 8006d08:	4613      	mov	r3, r2
 8006d0a:	460a      	mov	r2, r1
 8006d0c:	4601      	mov	r1, r0
 8006d0e:	4802      	ldr	r0, [pc, #8]	; (8006d18 <strtol+0x10>)
 8006d10:	6800      	ldr	r0, [r0, #0]
 8006d12:	f7ff bf77 	b.w	8006c04 <_strtol_l.constprop.0>
 8006d16:	bf00      	nop
 8006d18:	20000098 	.word	0x20000098

08006d1c <__assert_func>:
 8006d1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d1e:	4614      	mov	r4, r2
 8006d20:	461a      	mov	r2, r3
 8006d22:	4b09      	ldr	r3, [pc, #36]	; (8006d48 <__assert_func+0x2c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4605      	mov	r5, r0
 8006d28:	68d8      	ldr	r0, [r3, #12]
 8006d2a:	b14c      	cbz	r4, 8006d40 <__assert_func+0x24>
 8006d2c:	4b07      	ldr	r3, [pc, #28]	; (8006d4c <__assert_func+0x30>)
 8006d2e:	9100      	str	r1, [sp, #0]
 8006d30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d34:	4906      	ldr	r1, [pc, #24]	; (8006d50 <__assert_func+0x34>)
 8006d36:	462b      	mov	r3, r5
 8006d38:	f000 f80e 	bl	8006d58 <fiprintf>
 8006d3c:	f001 fe98 	bl	8008a70 <abort>
 8006d40:	4b04      	ldr	r3, [pc, #16]	; (8006d54 <__assert_func+0x38>)
 8006d42:	461c      	mov	r4, r3
 8006d44:	e7f3      	b.n	8006d2e <__assert_func+0x12>
 8006d46:	bf00      	nop
 8006d48:	20000098 	.word	0x20000098
 8006d4c:	0800952c 	.word	0x0800952c
 8006d50:	08009539 	.word	0x08009539
 8006d54:	08009567 	.word	0x08009567

08006d58 <fiprintf>:
 8006d58:	b40e      	push	{r1, r2, r3}
 8006d5a:	b503      	push	{r0, r1, lr}
 8006d5c:	4601      	mov	r1, r0
 8006d5e:	ab03      	add	r3, sp, #12
 8006d60:	4805      	ldr	r0, [pc, #20]	; (8006d78 <fiprintf+0x20>)
 8006d62:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d66:	6800      	ldr	r0, [r0, #0]
 8006d68:	9301      	str	r3, [sp, #4]
 8006d6a:	f001 facf 	bl	800830c <_vfiprintf_r>
 8006d6e:	b002      	add	sp, #8
 8006d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d74:	b003      	add	sp, #12
 8006d76:	4770      	bx	lr
 8006d78:	20000098 	.word	0x20000098

08006d7c <rshift>:
 8006d7c:	6903      	ldr	r3, [r0, #16]
 8006d7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006d82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d86:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006d8a:	f100 0414 	add.w	r4, r0, #20
 8006d8e:	dd45      	ble.n	8006e1c <rshift+0xa0>
 8006d90:	f011 011f 	ands.w	r1, r1, #31
 8006d94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006d98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006d9c:	d10c      	bne.n	8006db8 <rshift+0x3c>
 8006d9e:	f100 0710 	add.w	r7, r0, #16
 8006da2:	4629      	mov	r1, r5
 8006da4:	42b1      	cmp	r1, r6
 8006da6:	d334      	bcc.n	8006e12 <rshift+0x96>
 8006da8:	1a9b      	subs	r3, r3, r2
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	1eea      	subs	r2, r5, #3
 8006dae:	4296      	cmp	r6, r2
 8006db0:	bf38      	it	cc
 8006db2:	2300      	movcc	r3, #0
 8006db4:	4423      	add	r3, r4
 8006db6:	e015      	b.n	8006de4 <rshift+0x68>
 8006db8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006dbc:	f1c1 0820 	rsb	r8, r1, #32
 8006dc0:	40cf      	lsrs	r7, r1
 8006dc2:	f105 0e04 	add.w	lr, r5, #4
 8006dc6:	46a1      	mov	r9, r4
 8006dc8:	4576      	cmp	r6, lr
 8006dca:	46f4      	mov	ip, lr
 8006dcc:	d815      	bhi.n	8006dfa <rshift+0x7e>
 8006dce:	1a9a      	subs	r2, r3, r2
 8006dd0:	0092      	lsls	r2, r2, #2
 8006dd2:	3a04      	subs	r2, #4
 8006dd4:	3501      	adds	r5, #1
 8006dd6:	42ae      	cmp	r6, r5
 8006dd8:	bf38      	it	cc
 8006dda:	2200      	movcc	r2, #0
 8006ddc:	18a3      	adds	r3, r4, r2
 8006dde:	50a7      	str	r7, [r4, r2]
 8006de0:	b107      	cbz	r7, 8006de4 <rshift+0x68>
 8006de2:	3304      	adds	r3, #4
 8006de4:	1b1a      	subs	r2, r3, r4
 8006de6:	42a3      	cmp	r3, r4
 8006de8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006dec:	bf08      	it	eq
 8006dee:	2300      	moveq	r3, #0
 8006df0:	6102      	str	r2, [r0, #16]
 8006df2:	bf08      	it	eq
 8006df4:	6143      	streq	r3, [r0, #20]
 8006df6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006dfa:	f8dc c000 	ldr.w	ip, [ip]
 8006dfe:	fa0c fc08 	lsl.w	ip, ip, r8
 8006e02:	ea4c 0707 	orr.w	r7, ip, r7
 8006e06:	f849 7b04 	str.w	r7, [r9], #4
 8006e0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006e0e:	40cf      	lsrs	r7, r1
 8006e10:	e7da      	b.n	8006dc8 <rshift+0x4c>
 8006e12:	f851 cb04 	ldr.w	ip, [r1], #4
 8006e16:	f847 cf04 	str.w	ip, [r7, #4]!
 8006e1a:	e7c3      	b.n	8006da4 <rshift+0x28>
 8006e1c:	4623      	mov	r3, r4
 8006e1e:	e7e1      	b.n	8006de4 <rshift+0x68>

08006e20 <__hexdig_fun>:
 8006e20:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006e24:	2b09      	cmp	r3, #9
 8006e26:	d802      	bhi.n	8006e2e <__hexdig_fun+0xe>
 8006e28:	3820      	subs	r0, #32
 8006e2a:	b2c0      	uxtb	r0, r0
 8006e2c:	4770      	bx	lr
 8006e2e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006e32:	2b05      	cmp	r3, #5
 8006e34:	d801      	bhi.n	8006e3a <__hexdig_fun+0x1a>
 8006e36:	3847      	subs	r0, #71	; 0x47
 8006e38:	e7f7      	b.n	8006e2a <__hexdig_fun+0xa>
 8006e3a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006e3e:	2b05      	cmp	r3, #5
 8006e40:	d801      	bhi.n	8006e46 <__hexdig_fun+0x26>
 8006e42:	3827      	subs	r0, #39	; 0x27
 8006e44:	e7f1      	b.n	8006e2a <__hexdig_fun+0xa>
 8006e46:	2000      	movs	r0, #0
 8006e48:	4770      	bx	lr
	...

08006e4c <__gethex>:
 8006e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e50:	ed2d 8b02 	vpush	{d8}
 8006e54:	b089      	sub	sp, #36	; 0x24
 8006e56:	ee08 0a10 	vmov	s16, r0
 8006e5a:	9304      	str	r3, [sp, #16]
 8006e5c:	4bb4      	ldr	r3, [pc, #720]	; (8007130 <__gethex+0x2e4>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	9301      	str	r3, [sp, #4]
 8006e62:	4618      	mov	r0, r3
 8006e64:	468b      	mov	fp, r1
 8006e66:	4690      	mov	r8, r2
 8006e68:	f7f9 f9b2 	bl	80001d0 <strlen>
 8006e6c:	9b01      	ldr	r3, [sp, #4]
 8006e6e:	f8db 2000 	ldr.w	r2, [fp]
 8006e72:	4403      	add	r3, r0
 8006e74:	4682      	mov	sl, r0
 8006e76:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006e7a:	9305      	str	r3, [sp, #20]
 8006e7c:	1c93      	adds	r3, r2, #2
 8006e7e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006e82:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006e86:	32fe      	adds	r2, #254	; 0xfe
 8006e88:	18d1      	adds	r1, r2, r3
 8006e8a:	461f      	mov	r7, r3
 8006e8c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006e90:	9100      	str	r1, [sp, #0]
 8006e92:	2830      	cmp	r0, #48	; 0x30
 8006e94:	d0f8      	beq.n	8006e88 <__gethex+0x3c>
 8006e96:	f7ff ffc3 	bl	8006e20 <__hexdig_fun>
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	d13a      	bne.n	8006f16 <__gethex+0xca>
 8006ea0:	9901      	ldr	r1, [sp, #4]
 8006ea2:	4652      	mov	r2, sl
 8006ea4:	4638      	mov	r0, r7
 8006ea6:	f7fe ffa9 	bl	8005dfc <strncmp>
 8006eaa:	4605      	mov	r5, r0
 8006eac:	2800      	cmp	r0, #0
 8006eae:	d168      	bne.n	8006f82 <__gethex+0x136>
 8006eb0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006eb4:	eb07 060a 	add.w	r6, r7, sl
 8006eb8:	f7ff ffb2 	bl	8006e20 <__hexdig_fun>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	d062      	beq.n	8006f86 <__gethex+0x13a>
 8006ec0:	4633      	mov	r3, r6
 8006ec2:	7818      	ldrb	r0, [r3, #0]
 8006ec4:	2830      	cmp	r0, #48	; 0x30
 8006ec6:	461f      	mov	r7, r3
 8006ec8:	f103 0301 	add.w	r3, r3, #1
 8006ecc:	d0f9      	beq.n	8006ec2 <__gethex+0x76>
 8006ece:	f7ff ffa7 	bl	8006e20 <__hexdig_fun>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	fab0 f480 	clz	r4, r0
 8006ed8:	0964      	lsrs	r4, r4, #5
 8006eda:	4635      	mov	r5, r6
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	463a      	mov	r2, r7
 8006ee0:	4616      	mov	r6, r2
 8006ee2:	3201      	adds	r2, #1
 8006ee4:	7830      	ldrb	r0, [r6, #0]
 8006ee6:	f7ff ff9b 	bl	8006e20 <__hexdig_fun>
 8006eea:	2800      	cmp	r0, #0
 8006eec:	d1f8      	bne.n	8006ee0 <__gethex+0x94>
 8006eee:	9901      	ldr	r1, [sp, #4]
 8006ef0:	4652      	mov	r2, sl
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	f7fe ff82 	bl	8005dfc <strncmp>
 8006ef8:	b980      	cbnz	r0, 8006f1c <__gethex+0xd0>
 8006efa:	b94d      	cbnz	r5, 8006f10 <__gethex+0xc4>
 8006efc:	eb06 050a 	add.w	r5, r6, sl
 8006f00:	462a      	mov	r2, r5
 8006f02:	4616      	mov	r6, r2
 8006f04:	3201      	adds	r2, #1
 8006f06:	7830      	ldrb	r0, [r6, #0]
 8006f08:	f7ff ff8a 	bl	8006e20 <__hexdig_fun>
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	d1f8      	bne.n	8006f02 <__gethex+0xb6>
 8006f10:	1bad      	subs	r5, r5, r6
 8006f12:	00ad      	lsls	r5, r5, #2
 8006f14:	e004      	b.n	8006f20 <__gethex+0xd4>
 8006f16:	2400      	movs	r4, #0
 8006f18:	4625      	mov	r5, r4
 8006f1a:	e7e0      	b.n	8006ede <__gethex+0x92>
 8006f1c:	2d00      	cmp	r5, #0
 8006f1e:	d1f7      	bne.n	8006f10 <__gethex+0xc4>
 8006f20:	7833      	ldrb	r3, [r6, #0]
 8006f22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006f26:	2b50      	cmp	r3, #80	; 0x50
 8006f28:	d13b      	bne.n	8006fa2 <__gethex+0x156>
 8006f2a:	7873      	ldrb	r3, [r6, #1]
 8006f2c:	2b2b      	cmp	r3, #43	; 0x2b
 8006f2e:	d02c      	beq.n	8006f8a <__gethex+0x13e>
 8006f30:	2b2d      	cmp	r3, #45	; 0x2d
 8006f32:	d02e      	beq.n	8006f92 <__gethex+0x146>
 8006f34:	1c71      	adds	r1, r6, #1
 8006f36:	f04f 0900 	mov.w	r9, #0
 8006f3a:	7808      	ldrb	r0, [r1, #0]
 8006f3c:	f7ff ff70 	bl	8006e20 <__hexdig_fun>
 8006f40:	1e43      	subs	r3, r0, #1
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	2b18      	cmp	r3, #24
 8006f46:	d82c      	bhi.n	8006fa2 <__gethex+0x156>
 8006f48:	f1a0 0210 	sub.w	r2, r0, #16
 8006f4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006f50:	f7ff ff66 	bl	8006e20 <__hexdig_fun>
 8006f54:	1e43      	subs	r3, r0, #1
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	2b18      	cmp	r3, #24
 8006f5a:	d91d      	bls.n	8006f98 <__gethex+0x14c>
 8006f5c:	f1b9 0f00 	cmp.w	r9, #0
 8006f60:	d000      	beq.n	8006f64 <__gethex+0x118>
 8006f62:	4252      	negs	r2, r2
 8006f64:	4415      	add	r5, r2
 8006f66:	f8cb 1000 	str.w	r1, [fp]
 8006f6a:	b1e4      	cbz	r4, 8006fa6 <__gethex+0x15a>
 8006f6c:	9b00      	ldr	r3, [sp, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	bf14      	ite	ne
 8006f72:	2700      	movne	r7, #0
 8006f74:	2706      	moveq	r7, #6
 8006f76:	4638      	mov	r0, r7
 8006f78:	b009      	add	sp, #36	; 0x24
 8006f7a:	ecbd 8b02 	vpop	{d8}
 8006f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f82:	463e      	mov	r6, r7
 8006f84:	4625      	mov	r5, r4
 8006f86:	2401      	movs	r4, #1
 8006f88:	e7ca      	b.n	8006f20 <__gethex+0xd4>
 8006f8a:	f04f 0900 	mov.w	r9, #0
 8006f8e:	1cb1      	adds	r1, r6, #2
 8006f90:	e7d3      	b.n	8006f3a <__gethex+0xee>
 8006f92:	f04f 0901 	mov.w	r9, #1
 8006f96:	e7fa      	b.n	8006f8e <__gethex+0x142>
 8006f98:	230a      	movs	r3, #10
 8006f9a:	fb03 0202 	mla	r2, r3, r2, r0
 8006f9e:	3a10      	subs	r2, #16
 8006fa0:	e7d4      	b.n	8006f4c <__gethex+0x100>
 8006fa2:	4631      	mov	r1, r6
 8006fa4:	e7df      	b.n	8006f66 <__gethex+0x11a>
 8006fa6:	1bf3      	subs	r3, r6, r7
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	4621      	mov	r1, r4
 8006fac:	2b07      	cmp	r3, #7
 8006fae:	dc0b      	bgt.n	8006fc8 <__gethex+0x17c>
 8006fb0:	ee18 0a10 	vmov	r0, s16
 8006fb4:	f000 fa6c 	bl	8007490 <_Balloc>
 8006fb8:	4604      	mov	r4, r0
 8006fba:	b940      	cbnz	r0, 8006fce <__gethex+0x182>
 8006fbc:	4b5d      	ldr	r3, [pc, #372]	; (8007134 <__gethex+0x2e8>)
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	21de      	movs	r1, #222	; 0xde
 8006fc2:	485d      	ldr	r0, [pc, #372]	; (8007138 <__gethex+0x2ec>)
 8006fc4:	f7ff feaa 	bl	8006d1c <__assert_func>
 8006fc8:	3101      	adds	r1, #1
 8006fca:	105b      	asrs	r3, r3, #1
 8006fcc:	e7ee      	b.n	8006fac <__gethex+0x160>
 8006fce:	f100 0914 	add.w	r9, r0, #20
 8006fd2:	f04f 0b00 	mov.w	fp, #0
 8006fd6:	f1ca 0301 	rsb	r3, sl, #1
 8006fda:	f8cd 9008 	str.w	r9, [sp, #8]
 8006fde:	f8cd b000 	str.w	fp, [sp]
 8006fe2:	9306      	str	r3, [sp, #24]
 8006fe4:	42b7      	cmp	r7, r6
 8006fe6:	d340      	bcc.n	800706a <__gethex+0x21e>
 8006fe8:	9802      	ldr	r0, [sp, #8]
 8006fea:	9b00      	ldr	r3, [sp, #0]
 8006fec:	f840 3b04 	str.w	r3, [r0], #4
 8006ff0:	eba0 0009 	sub.w	r0, r0, r9
 8006ff4:	1080      	asrs	r0, r0, #2
 8006ff6:	0146      	lsls	r6, r0, #5
 8006ff8:	6120      	str	r0, [r4, #16]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 fb3a 	bl	8007674 <__hi0bits>
 8007000:	1a30      	subs	r0, r6, r0
 8007002:	f8d8 6000 	ldr.w	r6, [r8]
 8007006:	42b0      	cmp	r0, r6
 8007008:	dd63      	ble.n	80070d2 <__gethex+0x286>
 800700a:	1b87      	subs	r7, r0, r6
 800700c:	4639      	mov	r1, r7
 800700e:	4620      	mov	r0, r4
 8007010:	f000 fede 	bl	8007dd0 <__any_on>
 8007014:	4682      	mov	sl, r0
 8007016:	b1a8      	cbz	r0, 8007044 <__gethex+0x1f8>
 8007018:	1e7b      	subs	r3, r7, #1
 800701a:	1159      	asrs	r1, r3, #5
 800701c:	f003 021f 	and.w	r2, r3, #31
 8007020:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007024:	f04f 0a01 	mov.w	sl, #1
 8007028:	fa0a f202 	lsl.w	r2, sl, r2
 800702c:	420a      	tst	r2, r1
 800702e:	d009      	beq.n	8007044 <__gethex+0x1f8>
 8007030:	4553      	cmp	r3, sl
 8007032:	dd05      	ble.n	8007040 <__gethex+0x1f4>
 8007034:	1eb9      	subs	r1, r7, #2
 8007036:	4620      	mov	r0, r4
 8007038:	f000 feca 	bl	8007dd0 <__any_on>
 800703c:	2800      	cmp	r0, #0
 800703e:	d145      	bne.n	80070cc <__gethex+0x280>
 8007040:	f04f 0a02 	mov.w	sl, #2
 8007044:	4639      	mov	r1, r7
 8007046:	4620      	mov	r0, r4
 8007048:	f7ff fe98 	bl	8006d7c <rshift>
 800704c:	443d      	add	r5, r7
 800704e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007052:	42ab      	cmp	r3, r5
 8007054:	da4c      	bge.n	80070f0 <__gethex+0x2a4>
 8007056:	ee18 0a10 	vmov	r0, s16
 800705a:	4621      	mov	r1, r4
 800705c:	f000 fa58 	bl	8007510 <_Bfree>
 8007060:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007062:	2300      	movs	r3, #0
 8007064:	6013      	str	r3, [r2, #0]
 8007066:	27a3      	movs	r7, #163	; 0xa3
 8007068:	e785      	b.n	8006f76 <__gethex+0x12a>
 800706a:	1e73      	subs	r3, r6, #1
 800706c:	9a05      	ldr	r2, [sp, #20]
 800706e:	9303      	str	r3, [sp, #12]
 8007070:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007074:	4293      	cmp	r3, r2
 8007076:	d019      	beq.n	80070ac <__gethex+0x260>
 8007078:	f1bb 0f20 	cmp.w	fp, #32
 800707c:	d107      	bne.n	800708e <__gethex+0x242>
 800707e:	9b02      	ldr	r3, [sp, #8]
 8007080:	9a00      	ldr	r2, [sp, #0]
 8007082:	f843 2b04 	str.w	r2, [r3], #4
 8007086:	9302      	str	r3, [sp, #8]
 8007088:	2300      	movs	r3, #0
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	469b      	mov	fp, r3
 800708e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007092:	f7ff fec5 	bl	8006e20 <__hexdig_fun>
 8007096:	9b00      	ldr	r3, [sp, #0]
 8007098:	f000 000f 	and.w	r0, r0, #15
 800709c:	fa00 f00b 	lsl.w	r0, r0, fp
 80070a0:	4303      	orrs	r3, r0
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	f10b 0b04 	add.w	fp, fp, #4
 80070a8:	9b03      	ldr	r3, [sp, #12]
 80070aa:	e00d      	b.n	80070c8 <__gethex+0x27c>
 80070ac:	9b03      	ldr	r3, [sp, #12]
 80070ae:	9a06      	ldr	r2, [sp, #24]
 80070b0:	4413      	add	r3, r2
 80070b2:	42bb      	cmp	r3, r7
 80070b4:	d3e0      	bcc.n	8007078 <__gethex+0x22c>
 80070b6:	4618      	mov	r0, r3
 80070b8:	9901      	ldr	r1, [sp, #4]
 80070ba:	9307      	str	r3, [sp, #28]
 80070bc:	4652      	mov	r2, sl
 80070be:	f7fe fe9d 	bl	8005dfc <strncmp>
 80070c2:	9b07      	ldr	r3, [sp, #28]
 80070c4:	2800      	cmp	r0, #0
 80070c6:	d1d7      	bne.n	8007078 <__gethex+0x22c>
 80070c8:	461e      	mov	r6, r3
 80070ca:	e78b      	b.n	8006fe4 <__gethex+0x198>
 80070cc:	f04f 0a03 	mov.w	sl, #3
 80070d0:	e7b8      	b.n	8007044 <__gethex+0x1f8>
 80070d2:	da0a      	bge.n	80070ea <__gethex+0x29e>
 80070d4:	1a37      	subs	r7, r6, r0
 80070d6:	4621      	mov	r1, r4
 80070d8:	ee18 0a10 	vmov	r0, s16
 80070dc:	463a      	mov	r2, r7
 80070de:	f000 fc33 	bl	8007948 <__lshift>
 80070e2:	1bed      	subs	r5, r5, r7
 80070e4:	4604      	mov	r4, r0
 80070e6:	f100 0914 	add.w	r9, r0, #20
 80070ea:	f04f 0a00 	mov.w	sl, #0
 80070ee:	e7ae      	b.n	800704e <__gethex+0x202>
 80070f0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80070f4:	42a8      	cmp	r0, r5
 80070f6:	dd72      	ble.n	80071de <__gethex+0x392>
 80070f8:	1b45      	subs	r5, r0, r5
 80070fa:	42ae      	cmp	r6, r5
 80070fc:	dc36      	bgt.n	800716c <__gethex+0x320>
 80070fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007102:	2b02      	cmp	r3, #2
 8007104:	d02a      	beq.n	800715c <__gethex+0x310>
 8007106:	2b03      	cmp	r3, #3
 8007108:	d02c      	beq.n	8007164 <__gethex+0x318>
 800710a:	2b01      	cmp	r3, #1
 800710c:	d11c      	bne.n	8007148 <__gethex+0x2fc>
 800710e:	42ae      	cmp	r6, r5
 8007110:	d11a      	bne.n	8007148 <__gethex+0x2fc>
 8007112:	2e01      	cmp	r6, #1
 8007114:	d112      	bne.n	800713c <__gethex+0x2f0>
 8007116:	9a04      	ldr	r2, [sp, #16]
 8007118:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800711c:	6013      	str	r3, [r2, #0]
 800711e:	2301      	movs	r3, #1
 8007120:	6123      	str	r3, [r4, #16]
 8007122:	f8c9 3000 	str.w	r3, [r9]
 8007126:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007128:	2762      	movs	r7, #98	; 0x62
 800712a:	601c      	str	r4, [r3, #0]
 800712c:	e723      	b.n	8006f76 <__gethex+0x12a>
 800712e:	bf00      	nop
 8007130:	080096e0 	.word	0x080096e0
 8007134:	08009669 	.word	0x08009669
 8007138:	0800967a 	.word	0x0800967a
 800713c:	1e71      	subs	r1, r6, #1
 800713e:	4620      	mov	r0, r4
 8007140:	f000 fe46 	bl	8007dd0 <__any_on>
 8007144:	2800      	cmp	r0, #0
 8007146:	d1e6      	bne.n	8007116 <__gethex+0x2ca>
 8007148:	ee18 0a10 	vmov	r0, s16
 800714c:	4621      	mov	r1, r4
 800714e:	f000 f9df 	bl	8007510 <_Bfree>
 8007152:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007154:	2300      	movs	r3, #0
 8007156:	6013      	str	r3, [r2, #0]
 8007158:	2750      	movs	r7, #80	; 0x50
 800715a:	e70c      	b.n	8006f76 <__gethex+0x12a>
 800715c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1f2      	bne.n	8007148 <__gethex+0x2fc>
 8007162:	e7d8      	b.n	8007116 <__gethex+0x2ca>
 8007164:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1d5      	bne.n	8007116 <__gethex+0x2ca>
 800716a:	e7ed      	b.n	8007148 <__gethex+0x2fc>
 800716c:	1e6f      	subs	r7, r5, #1
 800716e:	f1ba 0f00 	cmp.w	sl, #0
 8007172:	d131      	bne.n	80071d8 <__gethex+0x38c>
 8007174:	b127      	cbz	r7, 8007180 <__gethex+0x334>
 8007176:	4639      	mov	r1, r7
 8007178:	4620      	mov	r0, r4
 800717a:	f000 fe29 	bl	8007dd0 <__any_on>
 800717e:	4682      	mov	sl, r0
 8007180:	117b      	asrs	r3, r7, #5
 8007182:	2101      	movs	r1, #1
 8007184:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007188:	f007 071f 	and.w	r7, r7, #31
 800718c:	fa01 f707 	lsl.w	r7, r1, r7
 8007190:	421f      	tst	r7, r3
 8007192:	4629      	mov	r1, r5
 8007194:	4620      	mov	r0, r4
 8007196:	bf18      	it	ne
 8007198:	f04a 0a02 	orrne.w	sl, sl, #2
 800719c:	1b76      	subs	r6, r6, r5
 800719e:	f7ff fded 	bl	8006d7c <rshift>
 80071a2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80071a6:	2702      	movs	r7, #2
 80071a8:	f1ba 0f00 	cmp.w	sl, #0
 80071ac:	d048      	beq.n	8007240 <__gethex+0x3f4>
 80071ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d015      	beq.n	80071e2 <__gethex+0x396>
 80071b6:	2b03      	cmp	r3, #3
 80071b8:	d017      	beq.n	80071ea <__gethex+0x39e>
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d109      	bne.n	80071d2 <__gethex+0x386>
 80071be:	f01a 0f02 	tst.w	sl, #2
 80071c2:	d006      	beq.n	80071d2 <__gethex+0x386>
 80071c4:	f8d9 0000 	ldr.w	r0, [r9]
 80071c8:	ea4a 0a00 	orr.w	sl, sl, r0
 80071cc:	f01a 0f01 	tst.w	sl, #1
 80071d0:	d10e      	bne.n	80071f0 <__gethex+0x3a4>
 80071d2:	f047 0710 	orr.w	r7, r7, #16
 80071d6:	e033      	b.n	8007240 <__gethex+0x3f4>
 80071d8:	f04f 0a01 	mov.w	sl, #1
 80071dc:	e7d0      	b.n	8007180 <__gethex+0x334>
 80071de:	2701      	movs	r7, #1
 80071e0:	e7e2      	b.n	80071a8 <__gethex+0x35c>
 80071e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071e4:	f1c3 0301 	rsb	r3, r3, #1
 80071e8:	9315      	str	r3, [sp, #84]	; 0x54
 80071ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d0f0      	beq.n	80071d2 <__gethex+0x386>
 80071f0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80071f4:	f104 0314 	add.w	r3, r4, #20
 80071f8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80071fc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007200:	f04f 0c00 	mov.w	ip, #0
 8007204:	4618      	mov	r0, r3
 8007206:	f853 2b04 	ldr.w	r2, [r3], #4
 800720a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800720e:	d01c      	beq.n	800724a <__gethex+0x3fe>
 8007210:	3201      	adds	r2, #1
 8007212:	6002      	str	r2, [r0, #0]
 8007214:	2f02      	cmp	r7, #2
 8007216:	f104 0314 	add.w	r3, r4, #20
 800721a:	d13f      	bne.n	800729c <__gethex+0x450>
 800721c:	f8d8 2000 	ldr.w	r2, [r8]
 8007220:	3a01      	subs	r2, #1
 8007222:	42b2      	cmp	r2, r6
 8007224:	d10a      	bne.n	800723c <__gethex+0x3f0>
 8007226:	1171      	asrs	r1, r6, #5
 8007228:	2201      	movs	r2, #1
 800722a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800722e:	f006 061f 	and.w	r6, r6, #31
 8007232:	fa02 f606 	lsl.w	r6, r2, r6
 8007236:	421e      	tst	r6, r3
 8007238:	bf18      	it	ne
 800723a:	4617      	movne	r7, r2
 800723c:	f047 0720 	orr.w	r7, r7, #32
 8007240:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007242:	601c      	str	r4, [r3, #0]
 8007244:	9b04      	ldr	r3, [sp, #16]
 8007246:	601d      	str	r5, [r3, #0]
 8007248:	e695      	b.n	8006f76 <__gethex+0x12a>
 800724a:	4299      	cmp	r1, r3
 800724c:	f843 cc04 	str.w	ip, [r3, #-4]
 8007250:	d8d8      	bhi.n	8007204 <__gethex+0x3b8>
 8007252:	68a3      	ldr	r3, [r4, #8]
 8007254:	459b      	cmp	fp, r3
 8007256:	db19      	blt.n	800728c <__gethex+0x440>
 8007258:	6861      	ldr	r1, [r4, #4]
 800725a:	ee18 0a10 	vmov	r0, s16
 800725e:	3101      	adds	r1, #1
 8007260:	f000 f916 	bl	8007490 <_Balloc>
 8007264:	4681      	mov	r9, r0
 8007266:	b918      	cbnz	r0, 8007270 <__gethex+0x424>
 8007268:	4b1a      	ldr	r3, [pc, #104]	; (80072d4 <__gethex+0x488>)
 800726a:	4602      	mov	r2, r0
 800726c:	2184      	movs	r1, #132	; 0x84
 800726e:	e6a8      	b.n	8006fc2 <__gethex+0x176>
 8007270:	6922      	ldr	r2, [r4, #16]
 8007272:	3202      	adds	r2, #2
 8007274:	f104 010c 	add.w	r1, r4, #12
 8007278:	0092      	lsls	r2, r2, #2
 800727a:	300c      	adds	r0, #12
 800727c:	f7fe fd88 	bl	8005d90 <memcpy>
 8007280:	4621      	mov	r1, r4
 8007282:	ee18 0a10 	vmov	r0, s16
 8007286:	f000 f943 	bl	8007510 <_Bfree>
 800728a:	464c      	mov	r4, r9
 800728c:	6923      	ldr	r3, [r4, #16]
 800728e:	1c5a      	adds	r2, r3, #1
 8007290:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007294:	6122      	str	r2, [r4, #16]
 8007296:	2201      	movs	r2, #1
 8007298:	615a      	str	r2, [r3, #20]
 800729a:	e7bb      	b.n	8007214 <__gethex+0x3c8>
 800729c:	6922      	ldr	r2, [r4, #16]
 800729e:	455a      	cmp	r2, fp
 80072a0:	dd0b      	ble.n	80072ba <__gethex+0x46e>
 80072a2:	2101      	movs	r1, #1
 80072a4:	4620      	mov	r0, r4
 80072a6:	f7ff fd69 	bl	8006d7c <rshift>
 80072aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80072ae:	3501      	adds	r5, #1
 80072b0:	42ab      	cmp	r3, r5
 80072b2:	f6ff aed0 	blt.w	8007056 <__gethex+0x20a>
 80072b6:	2701      	movs	r7, #1
 80072b8:	e7c0      	b.n	800723c <__gethex+0x3f0>
 80072ba:	f016 061f 	ands.w	r6, r6, #31
 80072be:	d0fa      	beq.n	80072b6 <__gethex+0x46a>
 80072c0:	4453      	add	r3, sl
 80072c2:	f1c6 0620 	rsb	r6, r6, #32
 80072c6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80072ca:	f000 f9d3 	bl	8007674 <__hi0bits>
 80072ce:	42b0      	cmp	r0, r6
 80072d0:	dbe7      	blt.n	80072a2 <__gethex+0x456>
 80072d2:	e7f0      	b.n	80072b6 <__gethex+0x46a>
 80072d4:	08009669 	.word	0x08009669

080072d8 <L_shift>:
 80072d8:	f1c2 0208 	rsb	r2, r2, #8
 80072dc:	0092      	lsls	r2, r2, #2
 80072de:	b570      	push	{r4, r5, r6, lr}
 80072e0:	f1c2 0620 	rsb	r6, r2, #32
 80072e4:	6843      	ldr	r3, [r0, #4]
 80072e6:	6804      	ldr	r4, [r0, #0]
 80072e8:	fa03 f506 	lsl.w	r5, r3, r6
 80072ec:	432c      	orrs	r4, r5
 80072ee:	40d3      	lsrs	r3, r2
 80072f0:	6004      	str	r4, [r0, #0]
 80072f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80072f6:	4288      	cmp	r0, r1
 80072f8:	d3f4      	bcc.n	80072e4 <L_shift+0xc>
 80072fa:	bd70      	pop	{r4, r5, r6, pc}

080072fc <__match>:
 80072fc:	b530      	push	{r4, r5, lr}
 80072fe:	6803      	ldr	r3, [r0, #0]
 8007300:	3301      	adds	r3, #1
 8007302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007306:	b914      	cbnz	r4, 800730e <__match+0x12>
 8007308:	6003      	str	r3, [r0, #0]
 800730a:	2001      	movs	r0, #1
 800730c:	bd30      	pop	{r4, r5, pc}
 800730e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007312:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007316:	2d19      	cmp	r5, #25
 8007318:	bf98      	it	ls
 800731a:	3220      	addls	r2, #32
 800731c:	42a2      	cmp	r2, r4
 800731e:	d0f0      	beq.n	8007302 <__match+0x6>
 8007320:	2000      	movs	r0, #0
 8007322:	e7f3      	b.n	800730c <__match+0x10>

08007324 <__hexnan>:
 8007324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007328:	680b      	ldr	r3, [r1, #0]
 800732a:	115e      	asrs	r6, r3, #5
 800732c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007330:	f013 031f 	ands.w	r3, r3, #31
 8007334:	b087      	sub	sp, #28
 8007336:	bf18      	it	ne
 8007338:	3604      	addne	r6, #4
 800733a:	2500      	movs	r5, #0
 800733c:	1f37      	subs	r7, r6, #4
 800733e:	4690      	mov	r8, r2
 8007340:	6802      	ldr	r2, [r0, #0]
 8007342:	9301      	str	r3, [sp, #4]
 8007344:	4682      	mov	sl, r0
 8007346:	f846 5c04 	str.w	r5, [r6, #-4]
 800734a:	46b9      	mov	r9, r7
 800734c:	463c      	mov	r4, r7
 800734e:	9502      	str	r5, [sp, #8]
 8007350:	46ab      	mov	fp, r5
 8007352:	7851      	ldrb	r1, [r2, #1]
 8007354:	1c53      	adds	r3, r2, #1
 8007356:	9303      	str	r3, [sp, #12]
 8007358:	b341      	cbz	r1, 80073ac <__hexnan+0x88>
 800735a:	4608      	mov	r0, r1
 800735c:	9205      	str	r2, [sp, #20]
 800735e:	9104      	str	r1, [sp, #16]
 8007360:	f7ff fd5e 	bl	8006e20 <__hexdig_fun>
 8007364:	2800      	cmp	r0, #0
 8007366:	d14f      	bne.n	8007408 <__hexnan+0xe4>
 8007368:	9904      	ldr	r1, [sp, #16]
 800736a:	9a05      	ldr	r2, [sp, #20]
 800736c:	2920      	cmp	r1, #32
 800736e:	d818      	bhi.n	80073a2 <__hexnan+0x7e>
 8007370:	9b02      	ldr	r3, [sp, #8]
 8007372:	459b      	cmp	fp, r3
 8007374:	dd13      	ble.n	800739e <__hexnan+0x7a>
 8007376:	454c      	cmp	r4, r9
 8007378:	d206      	bcs.n	8007388 <__hexnan+0x64>
 800737a:	2d07      	cmp	r5, #7
 800737c:	dc04      	bgt.n	8007388 <__hexnan+0x64>
 800737e:	462a      	mov	r2, r5
 8007380:	4649      	mov	r1, r9
 8007382:	4620      	mov	r0, r4
 8007384:	f7ff ffa8 	bl	80072d8 <L_shift>
 8007388:	4544      	cmp	r4, r8
 800738a:	d950      	bls.n	800742e <__hexnan+0x10a>
 800738c:	2300      	movs	r3, #0
 800738e:	f1a4 0904 	sub.w	r9, r4, #4
 8007392:	f844 3c04 	str.w	r3, [r4, #-4]
 8007396:	f8cd b008 	str.w	fp, [sp, #8]
 800739a:	464c      	mov	r4, r9
 800739c:	461d      	mov	r5, r3
 800739e:	9a03      	ldr	r2, [sp, #12]
 80073a0:	e7d7      	b.n	8007352 <__hexnan+0x2e>
 80073a2:	2929      	cmp	r1, #41	; 0x29
 80073a4:	d156      	bne.n	8007454 <__hexnan+0x130>
 80073a6:	3202      	adds	r2, #2
 80073a8:	f8ca 2000 	str.w	r2, [sl]
 80073ac:	f1bb 0f00 	cmp.w	fp, #0
 80073b0:	d050      	beq.n	8007454 <__hexnan+0x130>
 80073b2:	454c      	cmp	r4, r9
 80073b4:	d206      	bcs.n	80073c4 <__hexnan+0xa0>
 80073b6:	2d07      	cmp	r5, #7
 80073b8:	dc04      	bgt.n	80073c4 <__hexnan+0xa0>
 80073ba:	462a      	mov	r2, r5
 80073bc:	4649      	mov	r1, r9
 80073be:	4620      	mov	r0, r4
 80073c0:	f7ff ff8a 	bl	80072d8 <L_shift>
 80073c4:	4544      	cmp	r4, r8
 80073c6:	d934      	bls.n	8007432 <__hexnan+0x10e>
 80073c8:	f1a8 0204 	sub.w	r2, r8, #4
 80073cc:	4623      	mov	r3, r4
 80073ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80073d2:	f842 1f04 	str.w	r1, [r2, #4]!
 80073d6:	429f      	cmp	r7, r3
 80073d8:	d2f9      	bcs.n	80073ce <__hexnan+0xaa>
 80073da:	1b3b      	subs	r3, r7, r4
 80073dc:	f023 0303 	bic.w	r3, r3, #3
 80073e0:	3304      	adds	r3, #4
 80073e2:	3401      	adds	r4, #1
 80073e4:	3e03      	subs	r6, #3
 80073e6:	42b4      	cmp	r4, r6
 80073e8:	bf88      	it	hi
 80073ea:	2304      	movhi	r3, #4
 80073ec:	4443      	add	r3, r8
 80073ee:	2200      	movs	r2, #0
 80073f0:	f843 2b04 	str.w	r2, [r3], #4
 80073f4:	429f      	cmp	r7, r3
 80073f6:	d2fb      	bcs.n	80073f0 <__hexnan+0xcc>
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	b91b      	cbnz	r3, 8007404 <__hexnan+0xe0>
 80073fc:	4547      	cmp	r7, r8
 80073fe:	d127      	bne.n	8007450 <__hexnan+0x12c>
 8007400:	2301      	movs	r3, #1
 8007402:	603b      	str	r3, [r7, #0]
 8007404:	2005      	movs	r0, #5
 8007406:	e026      	b.n	8007456 <__hexnan+0x132>
 8007408:	3501      	adds	r5, #1
 800740a:	2d08      	cmp	r5, #8
 800740c:	f10b 0b01 	add.w	fp, fp, #1
 8007410:	dd06      	ble.n	8007420 <__hexnan+0xfc>
 8007412:	4544      	cmp	r4, r8
 8007414:	d9c3      	bls.n	800739e <__hexnan+0x7a>
 8007416:	2300      	movs	r3, #0
 8007418:	f844 3c04 	str.w	r3, [r4, #-4]
 800741c:	2501      	movs	r5, #1
 800741e:	3c04      	subs	r4, #4
 8007420:	6822      	ldr	r2, [r4, #0]
 8007422:	f000 000f 	and.w	r0, r0, #15
 8007426:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800742a:	6022      	str	r2, [r4, #0]
 800742c:	e7b7      	b.n	800739e <__hexnan+0x7a>
 800742e:	2508      	movs	r5, #8
 8007430:	e7b5      	b.n	800739e <__hexnan+0x7a>
 8007432:	9b01      	ldr	r3, [sp, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d0df      	beq.n	80073f8 <__hexnan+0xd4>
 8007438:	f04f 32ff 	mov.w	r2, #4294967295
 800743c:	f1c3 0320 	rsb	r3, r3, #32
 8007440:	fa22 f303 	lsr.w	r3, r2, r3
 8007444:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007448:	401a      	ands	r2, r3
 800744a:	f846 2c04 	str.w	r2, [r6, #-4]
 800744e:	e7d3      	b.n	80073f8 <__hexnan+0xd4>
 8007450:	3f04      	subs	r7, #4
 8007452:	e7d1      	b.n	80073f8 <__hexnan+0xd4>
 8007454:	2004      	movs	r0, #4
 8007456:	b007      	add	sp, #28
 8007458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800745c <malloc>:
 800745c:	4b02      	ldr	r3, [pc, #8]	; (8007468 <malloc+0xc>)
 800745e:	4601      	mov	r1, r0
 8007460:	6818      	ldr	r0, [r3, #0]
 8007462:	f000 bd59 	b.w	8007f18 <_malloc_r>
 8007466:	bf00      	nop
 8007468:	20000098 	.word	0x20000098

0800746c <__ascii_mbtowc>:
 800746c:	b082      	sub	sp, #8
 800746e:	b901      	cbnz	r1, 8007472 <__ascii_mbtowc+0x6>
 8007470:	a901      	add	r1, sp, #4
 8007472:	b142      	cbz	r2, 8007486 <__ascii_mbtowc+0x1a>
 8007474:	b14b      	cbz	r3, 800748a <__ascii_mbtowc+0x1e>
 8007476:	7813      	ldrb	r3, [r2, #0]
 8007478:	600b      	str	r3, [r1, #0]
 800747a:	7812      	ldrb	r2, [r2, #0]
 800747c:	1e10      	subs	r0, r2, #0
 800747e:	bf18      	it	ne
 8007480:	2001      	movne	r0, #1
 8007482:	b002      	add	sp, #8
 8007484:	4770      	bx	lr
 8007486:	4610      	mov	r0, r2
 8007488:	e7fb      	b.n	8007482 <__ascii_mbtowc+0x16>
 800748a:	f06f 0001 	mvn.w	r0, #1
 800748e:	e7f8      	b.n	8007482 <__ascii_mbtowc+0x16>

08007490 <_Balloc>:
 8007490:	b570      	push	{r4, r5, r6, lr}
 8007492:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007494:	4604      	mov	r4, r0
 8007496:	460d      	mov	r5, r1
 8007498:	b976      	cbnz	r6, 80074b8 <_Balloc+0x28>
 800749a:	2010      	movs	r0, #16
 800749c:	f7ff ffde 	bl	800745c <malloc>
 80074a0:	4602      	mov	r2, r0
 80074a2:	6260      	str	r0, [r4, #36]	; 0x24
 80074a4:	b920      	cbnz	r0, 80074b0 <_Balloc+0x20>
 80074a6:	4b18      	ldr	r3, [pc, #96]	; (8007508 <_Balloc+0x78>)
 80074a8:	4818      	ldr	r0, [pc, #96]	; (800750c <_Balloc+0x7c>)
 80074aa:	2166      	movs	r1, #102	; 0x66
 80074ac:	f7ff fc36 	bl	8006d1c <__assert_func>
 80074b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074b4:	6006      	str	r6, [r0, #0]
 80074b6:	60c6      	str	r6, [r0, #12]
 80074b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80074ba:	68f3      	ldr	r3, [r6, #12]
 80074bc:	b183      	cbz	r3, 80074e0 <_Balloc+0x50>
 80074be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80074c6:	b9b8      	cbnz	r0, 80074f8 <_Balloc+0x68>
 80074c8:	2101      	movs	r1, #1
 80074ca:	fa01 f605 	lsl.w	r6, r1, r5
 80074ce:	1d72      	adds	r2, r6, #5
 80074d0:	0092      	lsls	r2, r2, #2
 80074d2:	4620      	mov	r0, r4
 80074d4:	f000 fc9d 	bl	8007e12 <_calloc_r>
 80074d8:	b160      	cbz	r0, 80074f4 <_Balloc+0x64>
 80074da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80074de:	e00e      	b.n	80074fe <_Balloc+0x6e>
 80074e0:	2221      	movs	r2, #33	; 0x21
 80074e2:	2104      	movs	r1, #4
 80074e4:	4620      	mov	r0, r4
 80074e6:	f000 fc94 	bl	8007e12 <_calloc_r>
 80074ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074ec:	60f0      	str	r0, [r6, #12]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1e4      	bne.n	80074be <_Balloc+0x2e>
 80074f4:	2000      	movs	r0, #0
 80074f6:	bd70      	pop	{r4, r5, r6, pc}
 80074f8:	6802      	ldr	r2, [r0, #0]
 80074fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80074fe:	2300      	movs	r3, #0
 8007500:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007504:	e7f7      	b.n	80074f6 <_Balloc+0x66>
 8007506:	bf00      	nop
 8007508:	080094b8 	.word	0x080094b8
 800750c:	080096f4 	.word	0x080096f4

08007510 <_Bfree>:
 8007510:	b570      	push	{r4, r5, r6, lr}
 8007512:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007514:	4605      	mov	r5, r0
 8007516:	460c      	mov	r4, r1
 8007518:	b976      	cbnz	r6, 8007538 <_Bfree+0x28>
 800751a:	2010      	movs	r0, #16
 800751c:	f7ff ff9e 	bl	800745c <malloc>
 8007520:	4602      	mov	r2, r0
 8007522:	6268      	str	r0, [r5, #36]	; 0x24
 8007524:	b920      	cbnz	r0, 8007530 <_Bfree+0x20>
 8007526:	4b09      	ldr	r3, [pc, #36]	; (800754c <_Bfree+0x3c>)
 8007528:	4809      	ldr	r0, [pc, #36]	; (8007550 <_Bfree+0x40>)
 800752a:	218a      	movs	r1, #138	; 0x8a
 800752c:	f7ff fbf6 	bl	8006d1c <__assert_func>
 8007530:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007534:	6006      	str	r6, [r0, #0]
 8007536:	60c6      	str	r6, [r0, #12]
 8007538:	b13c      	cbz	r4, 800754a <_Bfree+0x3a>
 800753a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800753c:	6862      	ldr	r2, [r4, #4]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007544:	6021      	str	r1, [r4, #0]
 8007546:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800754a:	bd70      	pop	{r4, r5, r6, pc}
 800754c:	080094b8 	.word	0x080094b8
 8007550:	080096f4 	.word	0x080096f4

08007554 <__multadd>:
 8007554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007558:	690d      	ldr	r5, [r1, #16]
 800755a:	4607      	mov	r7, r0
 800755c:	460c      	mov	r4, r1
 800755e:	461e      	mov	r6, r3
 8007560:	f101 0c14 	add.w	ip, r1, #20
 8007564:	2000      	movs	r0, #0
 8007566:	f8dc 3000 	ldr.w	r3, [ip]
 800756a:	b299      	uxth	r1, r3
 800756c:	fb02 6101 	mla	r1, r2, r1, r6
 8007570:	0c1e      	lsrs	r6, r3, #16
 8007572:	0c0b      	lsrs	r3, r1, #16
 8007574:	fb02 3306 	mla	r3, r2, r6, r3
 8007578:	b289      	uxth	r1, r1
 800757a:	3001      	adds	r0, #1
 800757c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007580:	4285      	cmp	r5, r0
 8007582:	f84c 1b04 	str.w	r1, [ip], #4
 8007586:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800758a:	dcec      	bgt.n	8007566 <__multadd+0x12>
 800758c:	b30e      	cbz	r6, 80075d2 <__multadd+0x7e>
 800758e:	68a3      	ldr	r3, [r4, #8]
 8007590:	42ab      	cmp	r3, r5
 8007592:	dc19      	bgt.n	80075c8 <__multadd+0x74>
 8007594:	6861      	ldr	r1, [r4, #4]
 8007596:	4638      	mov	r0, r7
 8007598:	3101      	adds	r1, #1
 800759a:	f7ff ff79 	bl	8007490 <_Balloc>
 800759e:	4680      	mov	r8, r0
 80075a0:	b928      	cbnz	r0, 80075ae <__multadd+0x5a>
 80075a2:	4602      	mov	r2, r0
 80075a4:	4b0c      	ldr	r3, [pc, #48]	; (80075d8 <__multadd+0x84>)
 80075a6:	480d      	ldr	r0, [pc, #52]	; (80075dc <__multadd+0x88>)
 80075a8:	21b5      	movs	r1, #181	; 0xb5
 80075aa:	f7ff fbb7 	bl	8006d1c <__assert_func>
 80075ae:	6922      	ldr	r2, [r4, #16]
 80075b0:	3202      	adds	r2, #2
 80075b2:	f104 010c 	add.w	r1, r4, #12
 80075b6:	0092      	lsls	r2, r2, #2
 80075b8:	300c      	adds	r0, #12
 80075ba:	f7fe fbe9 	bl	8005d90 <memcpy>
 80075be:	4621      	mov	r1, r4
 80075c0:	4638      	mov	r0, r7
 80075c2:	f7ff ffa5 	bl	8007510 <_Bfree>
 80075c6:	4644      	mov	r4, r8
 80075c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80075cc:	3501      	adds	r5, #1
 80075ce:	615e      	str	r6, [r3, #20]
 80075d0:	6125      	str	r5, [r4, #16]
 80075d2:	4620      	mov	r0, r4
 80075d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075d8:	08009669 	.word	0x08009669
 80075dc:	080096f4 	.word	0x080096f4

080075e0 <__s2b>:
 80075e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075e4:	460c      	mov	r4, r1
 80075e6:	4615      	mov	r5, r2
 80075e8:	461f      	mov	r7, r3
 80075ea:	2209      	movs	r2, #9
 80075ec:	3308      	adds	r3, #8
 80075ee:	4606      	mov	r6, r0
 80075f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80075f4:	2100      	movs	r1, #0
 80075f6:	2201      	movs	r2, #1
 80075f8:	429a      	cmp	r2, r3
 80075fa:	db09      	blt.n	8007610 <__s2b+0x30>
 80075fc:	4630      	mov	r0, r6
 80075fe:	f7ff ff47 	bl	8007490 <_Balloc>
 8007602:	b940      	cbnz	r0, 8007616 <__s2b+0x36>
 8007604:	4602      	mov	r2, r0
 8007606:	4b19      	ldr	r3, [pc, #100]	; (800766c <__s2b+0x8c>)
 8007608:	4819      	ldr	r0, [pc, #100]	; (8007670 <__s2b+0x90>)
 800760a:	21ce      	movs	r1, #206	; 0xce
 800760c:	f7ff fb86 	bl	8006d1c <__assert_func>
 8007610:	0052      	lsls	r2, r2, #1
 8007612:	3101      	adds	r1, #1
 8007614:	e7f0      	b.n	80075f8 <__s2b+0x18>
 8007616:	9b08      	ldr	r3, [sp, #32]
 8007618:	6143      	str	r3, [r0, #20]
 800761a:	2d09      	cmp	r5, #9
 800761c:	f04f 0301 	mov.w	r3, #1
 8007620:	6103      	str	r3, [r0, #16]
 8007622:	dd16      	ble.n	8007652 <__s2b+0x72>
 8007624:	f104 0909 	add.w	r9, r4, #9
 8007628:	46c8      	mov	r8, r9
 800762a:	442c      	add	r4, r5
 800762c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007630:	4601      	mov	r1, r0
 8007632:	3b30      	subs	r3, #48	; 0x30
 8007634:	220a      	movs	r2, #10
 8007636:	4630      	mov	r0, r6
 8007638:	f7ff ff8c 	bl	8007554 <__multadd>
 800763c:	45a0      	cmp	r8, r4
 800763e:	d1f5      	bne.n	800762c <__s2b+0x4c>
 8007640:	f1a5 0408 	sub.w	r4, r5, #8
 8007644:	444c      	add	r4, r9
 8007646:	1b2d      	subs	r5, r5, r4
 8007648:	1963      	adds	r3, r4, r5
 800764a:	42bb      	cmp	r3, r7
 800764c:	db04      	blt.n	8007658 <__s2b+0x78>
 800764e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007652:	340a      	adds	r4, #10
 8007654:	2509      	movs	r5, #9
 8007656:	e7f6      	b.n	8007646 <__s2b+0x66>
 8007658:	f814 3b01 	ldrb.w	r3, [r4], #1
 800765c:	4601      	mov	r1, r0
 800765e:	3b30      	subs	r3, #48	; 0x30
 8007660:	220a      	movs	r2, #10
 8007662:	4630      	mov	r0, r6
 8007664:	f7ff ff76 	bl	8007554 <__multadd>
 8007668:	e7ee      	b.n	8007648 <__s2b+0x68>
 800766a:	bf00      	nop
 800766c:	08009669 	.word	0x08009669
 8007670:	080096f4 	.word	0x080096f4

08007674 <__hi0bits>:
 8007674:	0c03      	lsrs	r3, r0, #16
 8007676:	041b      	lsls	r3, r3, #16
 8007678:	b9d3      	cbnz	r3, 80076b0 <__hi0bits+0x3c>
 800767a:	0400      	lsls	r0, r0, #16
 800767c:	2310      	movs	r3, #16
 800767e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007682:	bf04      	itt	eq
 8007684:	0200      	lsleq	r0, r0, #8
 8007686:	3308      	addeq	r3, #8
 8007688:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800768c:	bf04      	itt	eq
 800768e:	0100      	lsleq	r0, r0, #4
 8007690:	3304      	addeq	r3, #4
 8007692:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007696:	bf04      	itt	eq
 8007698:	0080      	lsleq	r0, r0, #2
 800769a:	3302      	addeq	r3, #2
 800769c:	2800      	cmp	r0, #0
 800769e:	db05      	blt.n	80076ac <__hi0bits+0x38>
 80076a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80076a4:	f103 0301 	add.w	r3, r3, #1
 80076a8:	bf08      	it	eq
 80076aa:	2320      	moveq	r3, #32
 80076ac:	4618      	mov	r0, r3
 80076ae:	4770      	bx	lr
 80076b0:	2300      	movs	r3, #0
 80076b2:	e7e4      	b.n	800767e <__hi0bits+0xa>

080076b4 <__lo0bits>:
 80076b4:	6803      	ldr	r3, [r0, #0]
 80076b6:	f013 0207 	ands.w	r2, r3, #7
 80076ba:	4601      	mov	r1, r0
 80076bc:	d00b      	beq.n	80076d6 <__lo0bits+0x22>
 80076be:	07da      	lsls	r2, r3, #31
 80076c0:	d423      	bmi.n	800770a <__lo0bits+0x56>
 80076c2:	0798      	lsls	r0, r3, #30
 80076c4:	bf49      	itett	mi
 80076c6:	085b      	lsrmi	r3, r3, #1
 80076c8:	089b      	lsrpl	r3, r3, #2
 80076ca:	2001      	movmi	r0, #1
 80076cc:	600b      	strmi	r3, [r1, #0]
 80076ce:	bf5c      	itt	pl
 80076d0:	600b      	strpl	r3, [r1, #0]
 80076d2:	2002      	movpl	r0, #2
 80076d4:	4770      	bx	lr
 80076d6:	b298      	uxth	r0, r3
 80076d8:	b9a8      	cbnz	r0, 8007706 <__lo0bits+0x52>
 80076da:	0c1b      	lsrs	r3, r3, #16
 80076dc:	2010      	movs	r0, #16
 80076de:	b2da      	uxtb	r2, r3
 80076e0:	b90a      	cbnz	r2, 80076e6 <__lo0bits+0x32>
 80076e2:	3008      	adds	r0, #8
 80076e4:	0a1b      	lsrs	r3, r3, #8
 80076e6:	071a      	lsls	r2, r3, #28
 80076e8:	bf04      	itt	eq
 80076ea:	091b      	lsreq	r3, r3, #4
 80076ec:	3004      	addeq	r0, #4
 80076ee:	079a      	lsls	r2, r3, #30
 80076f0:	bf04      	itt	eq
 80076f2:	089b      	lsreq	r3, r3, #2
 80076f4:	3002      	addeq	r0, #2
 80076f6:	07da      	lsls	r2, r3, #31
 80076f8:	d403      	bmi.n	8007702 <__lo0bits+0x4e>
 80076fa:	085b      	lsrs	r3, r3, #1
 80076fc:	f100 0001 	add.w	r0, r0, #1
 8007700:	d005      	beq.n	800770e <__lo0bits+0x5a>
 8007702:	600b      	str	r3, [r1, #0]
 8007704:	4770      	bx	lr
 8007706:	4610      	mov	r0, r2
 8007708:	e7e9      	b.n	80076de <__lo0bits+0x2a>
 800770a:	2000      	movs	r0, #0
 800770c:	4770      	bx	lr
 800770e:	2020      	movs	r0, #32
 8007710:	4770      	bx	lr
	...

08007714 <__i2b>:
 8007714:	b510      	push	{r4, lr}
 8007716:	460c      	mov	r4, r1
 8007718:	2101      	movs	r1, #1
 800771a:	f7ff feb9 	bl	8007490 <_Balloc>
 800771e:	4602      	mov	r2, r0
 8007720:	b928      	cbnz	r0, 800772e <__i2b+0x1a>
 8007722:	4b05      	ldr	r3, [pc, #20]	; (8007738 <__i2b+0x24>)
 8007724:	4805      	ldr	r0, [pc, #20]	; (800773c <__i2b+0x28>)
 8007726:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800772a:	f7ff faf7 	bl	8006d1c <__assert_func>
 800772e:	2301      	movs	r3, #1
 8007730:	6144      	str	r4, [r0, #20]
 8007732:	6103      	str	r3, [r0, #16]
 8007734:	bd10      	pop	{r4, pc}
 8007736:	bf00      	nop
 8007738:	08009669 	.word	0x08009669
 800773c:	080096f4 	.word	0x080096f4

08007740 <__multiply>:
 8007740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007744:	4691      	mov	r9, r2
 8007746:	690a      	ldr	r2, [r1, #16]
 8007748:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800774c:	429a      	cmp	r2, r3
 800774e:	bfb8      	it	lt
 8007750:	460b      	movlt	r3, r1
 8007752:	460c      	mov	r4, r1
 8007754:	bfbc      	itt	lt
 8007756:	464c      	movlt	r4, r9
 8007758:	4699      	movlt	r9, r3
 800775a:	6927      	ldr	r7, [r4, #16]
 800775c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007760:	68a3      	ldr	r3, [r4, #8]
 8007762:	6861      	ldr	r1, [r4, #4]
 8007764:	eb07 060a 	add.w	r6, r7, sl
 8007768:	42b3      	cmp	r3, r6
 800776a:	b085      	sub	sp, #20
 800776c:	bfb8      	it	lt
 800776e:	3101      	addlt	r1, #1
 8007770:	f7ff fe8e 	bl	8007490 <_Balloc>
 8007774:	b930      	cbnz	r0, 8007784 <__multiply+0x44>
 8007776:	4602      	mov	r2, r0
 8007778:	4b44      	ldr	r3, [pc, #272]	; (800788c <__multiply+0x14c>)
 800777a:	4845      	ldr	r0, [pc, #276]	; (8007890 <__multiply+0x150>)
 800777c:	f240 115d 	movw	r1, #349	; 0x15d
 8007780:	f7ff facc 	bl	8006d1c <__assert_func>
 8007784:	f100 0514 	add.w	r5, r0, #20
 8007788:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800778c:	462b      	mov	r3, r5
 800778e:	2200      	movs	r2, #0
 8007790:	4543      	cmp	r3, r8
 8007792:	d321      	bcc.n	80077d8 <__multiply+0x98>
 8007794:	f104 0314 	add.w	r3, r4, #20
 8007798:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800779c:	f109 0314 	add.w	r3, r9, #20
 80077a0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80077a4:	9202      	str	r2, [sp, #8]
 80077a6:	1b3a      	subs	r2, r7, r4
 80077a8:	3a15      	subs	r2, #21
 80077aa:	f022 0203 	bic.w	r2, r2, #3
 80077ae:	3204      	adds	r2, #4
 80077b0:	f104 0115 	add.w	r1, r4, #21
 80077b4:	428f      	cmp	r7, r1
 80077b6:	bf38      	it	cc
 80077b8:	2204      	movcc	r2, #4
 80077ba:	9201      	str	r2, [sp, #4]
 80077bc:	9a02      	ldr	r2, [sp, #8]
 80077be:	9303      	str	r3, [sp, #12]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d80c      	bhi.n	80077de <__multiply+0x9e>
 80077c4:	2e00      	cmp	r6, #0
 80077c6:	dd03      	ble.n	80077d0 <__multiply+0x90>
 80077c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d05a      	beq.n	8007886 <__multiply+0x146>
 80077d0:	6106      	str	r6, [r0, #16]
 80077d2:	b005      	add	sp, #20
 80077d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d8:	f843 2b04 	str.w	r2, [r3], #4
 80077dc:	e7d8      	b.n	8007790 <__multiply+0x50>
 80077de:	f8b3 a000 	ldrh.w	sl, [r3]
 80077e2:	f1ba 0f00 	cmp.w	sl, #0
 80077e6:	d024      	beq.n	8007832 <__multiply+0xf2>
 80077e8:	f104 0e14 	add.w	lr, r4, #20
 80077ec:	46a9      	mov	r9, r5
 80077ee:	f04f 0c00 	mov.w	ip, #0
 80077f2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80077f6:	f8d9 1000 	ldr.w	r1, [r9]
 80077fa:	fa1f fb82 	uxth.w	fp, r2
 80077fe:	b289      	uxth	r1, r1
 8007800:	fb0a 110b 	mla	r1, sl, fp, r1
 8007804:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007808:	f8d9 2000 	ldr.w	r2, [r9]
 800780c:	4461      	add	r1, ip
 800780e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007812:	fb0a c20b 	mla	r2, sl, fp, ip
 8007816:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800781a:	b289      	uxth	r1, r1
 800781c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007820:	4577      	cmp	r7, lr
 8007822:	f849 1b04 	str.w	r1, [r9], #4
 8007826:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800782a:	d8e2      	bhi.n	80077f2 <__multiply+0xb2>
 800782c:	9a01      	ldr	r2, [sp, #4]
 800782e:	f845 c002 	str.w	ip, [r5, r2]
 8007832:	9a03      	ldr	r2, [sp, #12]
 8007834:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007838:	3304      	adds	r3, #4
 800783a:	f1b9 0f00 	cmp.w	r9, #0
 800783e:	d020      	beq.n	8007882 <__multiply+0x142>
 8007840:	6829      	ldr	r1, [r5, #0]
 8007842:	f104 0c14 	add.w	ip, r4, #20
 8007846:	46ae      	mov	lr, r5
 8007848:	f04f 0a00 	mov.w	sl, #0
 800784c:	f8bc b000 	ldrh.w	fp, [ip]
 8007850:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007854:	fb09 220b 	mla	r2, r9, fp, r2
 8007858:	4492      	add	sl, r2
 800785a:	b289      	uxth	r1, r1
 800785c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007860:	f84e 1b04 	str.w	r1, [lr], #4
 8007864:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007868:	f8be 1000 	ldrh.w	r1, [lr]
 800786c:	0c12      	lsrs	r2, r2, #16
 800786e:	fb09 1102 	mla	r1, r9, r2, r1
 8007872:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007876:	4567      	cmp	r7, ip
 8007878:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800787c:	d8e6      	bhi.n	800784c <__multiply+0x10c>
 800787e:	9a01      	ldr	r2, [sp, #4]
 8007880:	50a9      	str	r1, [r5, r2]
 8007882:	3504      	adds	r5, #4
 8007884:	e79a      	b.n	80077bc <__multiply+0x7c>
 8007886:	3e01      	subs	r6, #1
 8007888:	e79c      	b.n	80077c4 <__multiply+0x84>
 800788a:	bf00      	nop
 800788c:	08009669 	.word	0x08009669
 8007890:	080096f4 	.word	0x080096f4

08007894 <__pow5mult>:
 8007894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007898:	4615      	mov	r5, r2
 800789a:	f012 0203 	ands.w	r2, r2, #3
 800789e:	4606      	mov	r6, r0
 80078a0:	460f      	mov	r7, r1
 80078a2:	d007      	beq.n	80078b4 <__pow5mult+0x20>
 80078a4:	4c25      	ldr	r4, [pc, #148]	; (800793c <__pow5mult+0xa8>)
 80078a6:	3a01      	subs	r2, #1
 80078a8:	2300      	movs	r3, #0
 80078aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078ae:	f7ff fe51 	bl	8007554 <__multadd>
 80078b2:	4607      	mov	r7, r0
 80078b4:	10ad      	asrs	r5, r5, #2
 80078b6:	d03d      	beq.n	8007934 <__pow5mult+0xa0>
 80078b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80078ba:	b97c      	cbnz	r4, 80078dc <__pow5mult+0x48>
 80078bc:	2010      	movs	r0, #16
 80078be:	f7ff fdcd 	bl	800745c <malloc>
 80078c2:	4602      	mov	r2, r0
 80078c4:	6270      	str	r0, [r6, #36]	; 0x24
 80078c6:	b928      	cbnz	r0, 80078d4 <__pow5mult+0x40>
 80078c8:	4b1d      	ldr	r3, [pc, #116]	; (8007940 <__pow5mult+0xac>)
 80078ca:	481e      	ldr	r0, [pc, #120]	; (8007944 <__pow5mult+0xb0>)
 80078cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80078d0:	f7ff fa24 	bl	8006d1c <__assert_func>
 80078d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078d8:	6004      	str	r4, [r0, #0]
 80078da:	60c4      	str	r4, [r0, #12]
 80078dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80078e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80078e4:	b94c      	cbnz	r4, 80078fa <__pow5mult+0x66>
 80078e6:	f240 2171 	movw	r1, #625	; 0x271
 80078ea:	4630      	mov	r0, r6
 80078ec:	f7ff ff12 	bl	8007714 <__i2b>
 80078f0:	2300      	movs	r3, #0
 80078f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80078f6:	4604      	mov	r4, r0
 80078f8:	6003      	str	r3, [r0, #0]
 80078fa:	f04f 0900 	mov.w	r9, #0
 80078fe:	07eb      	lsls	r3, r5, #31
 8007900:	d50a      	bpl.n	8007918 <__pow5mult+0x84>
 8007902:	4639      	mov	r1, r7
 8007904:	4622      	mov	r2, r4
 8007906:	4630      	mov	r0, r6
 8007908:	f7ff ff1a 	bl	8007740 <__multiply>
 800790c:	4639      	mov	r1, r7
 800790e:	4680      	mov	r8, r0
 8007910:	4630      	mov	r0, r6
 8007912:	f7ff fdfd 	bl	8007510 <_Bfree>
 8007916:	4647      	mov	r7, r8
 8007918:	106d      	asrs	r5, r5, #1
 800791a:	d00b      	beq.n	8007934 <__pow5mult+0xa0>
 800791c:	6820      	ldr	r0, [r4, #0]
 800791e:	b938      	cbnz	r0, 8007930 <__pow5mult+0x9c>
 8007920:	4622      	mov	r2, r4
 8007922:	4621      	mov	r1, r4
 8007924:	4630      	mov	r0, r6
 8007926:	f7ff ff0b 	bl	8007740 <__multiply>
 800792a:	6020      	str	r0, [r4, #0]
 800792c:	f8c0 9000 	str.w	r9, [r0]
 8007930:	4604      	mov	r4, r0
 8007932:	e7e4      	b.n	80078fe <__pow5mult+0x6a>
 8007934:	4638      	mov	r0, r7
 8007936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800793a:	bf00      	nop
 800793c:	08009840 	.word	0x08009840
 8007940:	080094b8 	.word	0x080094b8
 8007944:	080096f4 	.word	0x080096f4

08007948 <__lshift>:
 8007948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800794c:	460c      	mov	r4, r1
 800794e:	6849      	ldr	r1, [r1, #4]
 8007950:	6923      	ldr	r3, [r4, #16]
 8007952:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007956:	68a3      	ldr	r3, [r4, #8]
 8007958:	4607      	mov	r7, r0
 800795a:	4691      	mov	r9, r2
 800795c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007960:	f108 0601 	add.w	r6, r8, #1
 8007964:	42b3      	cmp	r3, r6
 8007966:	db0b      	blt.n	8007980 <__lshift+0x38>
 8007968:	4638      	mov	r0, r7
 800796a:	f7ff fd91 	bl	8007490 <_Balloc>
 800796e:	4605      	mov	r5, r0
 8007970:	b948      	cbnz	r0, 8007986 <__lshift+0x3e>
 8007972:	4602      	mov	r2, r0
 8007974:	4b2a      	ldr	r3, [pc, #168]	; (8007a20 <__lshift+0xd8>)
 8007976:	482b      	ldr	r0, [pc, #172]	; (8007a24 <__lshift+0xdc>)
 8007978:	f240 11d9 	movw	r1, #473	; 0x1d9
 800797c:	f7ff f9ce 	bl	8006d1c <__assert_func>
 8007980:	3101      	adds	r1, #1
 8007982:	005b      	lsls	r3, r3, #1
 8007984:	e7ee      	b.n	8007964 <__lshift+0x1c>
 8007986:	2300      	movs	r3, #0
 8007988:	f100 0114 	add.w	r1, r0, #20
 800798c:	f100 0210 	add.w	r2, r0, #16
 8007990:	4618      	mov	r0, r3
 8007992:	4553      	cmp	r3, sl
 8007994:	db37      	blt.n	8007a06 <__lshift+0xbe>
 8007996:	6920      	ldr	r0, [r4, #16]
 8007998:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800799c:	f104 0314 	add.w	r3, r4, #20
 80079a0:	f019 091f 	ands.w	r9, r9, #31
 80079a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80079ac:	d02f      	beq.n	8007a0e <__lshift+0xc6>
 80079ae:	f1c9 0e20 	rsb	lr, r9, #32
 80079b2:	468a      	mov	sl, r1
 80079b4:	f04f 0c00 	mov.w	ip, #0
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	fa02 f209 	lsl.w	r2, r2, r9
 80079be:	ea42 020c 	orr.w	r2, r2, ip
 80079c2:	f84a 2b04 	str.w	r2, [sl], #4
 80079c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80079ca:	4298      	cmp	r0, r3
 80079cc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80079d0:	d8f2      	bhi.n	80079b8 <__lshift+0x70>
 80079d2:	1b03      	subs	r3, r0, r4
 80079d4:	3b15      	subs	r3, #21
 80079d6:	f023 0303 	bic.w	r3, r3, #3
 80079da:	3304      	adds	r3, #4
 80079dc:	f104 0215 	add.w	r2, r4, #21
 80079e0:	4290      	cmp	r0, r2
 80079e2:	bf38      	it	cc
 80079e4:	2304      	movcc	r3, #4
 80079e6:	f841 c003 	str.w	ip, [r1, r3]
 80079ea:	f1bc 0f00 	cmp.w	ip, #0
 80079ee:	d001      	beq.n	80079f4 <__lshift+0xac>
 80079f0:	f108 0602 	add.w	r6, r8, #2
 80079f4:	3e01      	subs	r6, #1
 80079f6:	4638      	mov	r0, r7
 80079f8:	612e      	str	r6, [r5, #16]
 80079fa:	4621      	mov	r1, r4
 80079fc:	f7ff fd88 	bl	8007510 <_Bfree>
 8007a00:	4628      	mov	r0, r5
 8007a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a06:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	e7c1      	b.n	8007992 <__lshift+0x4a>
 8007a0e:	3904      	subs	r1, #4
 8007a10:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a14:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a18:	4298      	cmp	r0, r3
 8007a1a:	d8f9      	bhi.n	8007a10 <__lshift+0xc8>
 8007a1c:	e7ea      	b.n	80079f4 <__lshift+0xac>
 8007a1e:	bf00      	nop
 8007a20:	08009669 	.word	0x08009669
 8007a24:	080096f4 	.word	0x080096f4

08007a28 <__mcmp>:
 8007a28:	b530      	push	{r4, r5, lr}
 8007a2a:	6902      	ldr	r2, [r0, #16]
 8007a2c:	690c      	ldr	r4, [r1, #16]
 8007a2e:	1b12      	subs	r2, r2, r4
 8007a30:	d10e      	bne.n	8007a50 <__mcmp+0x28>
 8007a32:	f100 0314 	add.w	r3, r0, #20
 8007a36:	3114      	adds	r1, #20
 8007a38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007a3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007a40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007a44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007a48:	42a5      	cmp	r5, r4
 8007a4a:	d003      	beq.n	8007a54 <__mcmp+0x2c>
 8007a4c:	d305      	bcc.n	8007a5a <__mcmp+0x32>
 8007a4e:	2201      	movs	r2, #1
 8007a50:	4610      	mov	r0, r2
 8007a52:	bd30      	pop	{r4, r5, pc}
 8007a54:	4283      	cmp	r3, r0
 8007a56:	d3f3      	bcc.n	8007a40 <__mcmp+0x18>
 8007a58:	e7fa      	b.n	8007a50 <__mcmp+0x28>
 8007a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a5e:	e7f7      	b.n	8007a50 <__mcmp+0x28>

08007a60 <__mdiff>:
 8007a60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a64:	460c      	mov	r4, r1
 8007a66:	4606      	mov	r6, r0
 8007a68:	4611      	mov	r1, r2
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	4690      	mov	r8, r2
 8007a6e:	f7ff ffdb 	bl	8007a28 <__mcmp>
 8007a72:	1e05      	subs	r5, r0, #0
 8007a74:	d110      	bne.n	8007a98 <__mdiff+0x38>
 8007a76:	4629      	mov	r1, r5
 8007a78:	4630      	mov	r0, r6
 8007a7a:	f7ff fd09 	bl	8007490 <_Balloc>
 8007a7e:	b930      	cbnz	r0, 8007a8e <__mdiff+0x2e>
 8007a80:	4b3a      	ldr	r3, [pc, #232]	; (8007b6c <__mdiff+0x10c>)
 8007a82:	4602      	mov	r2, r0
 8007a84:	f240 2132 	movw	r1, #562	; 0x232
 8007a88:	4839      	ldr	r0, [pc, #228]	; (8007b70 <__mdiff+0x110>)
 8007a8a:	f7ff f947 	bl	8006d1c <__assert_func>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a98:	bfa4      	itt	ge
 8007a9a:	4643      	movge	r3, r8
 8007a9c:	46a0      	movge	r8, r4
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007aa4:	bfa6      	itte	ge
 8007aa6:	461c      	movge	r4, r3
 8007aa8:	2500      	movge	r5, #0
 8007aaa:	2501      	movlt	r5, #1
 8007aac:	f7ff fcf0 	bl	8007490 <_Balloc>
 8007ab0:	b920      	cbnz	r0, 8007abc <__mdiff+0x5c>
 8007ab2:	4b2e      	ldr	r3, [pc, #184]	; (8007b6c <__mdiff+0x10c>)
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007aba:	e7e5      	b.n	8007a88 <__mdiff+0x28>
 8007abc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007ac0:	6926      	ldr	r6, [r4, #16]
 8007ac2:	60c5      	str	r5, [r0, #12]
 8007ac4:	f104 0914 	add.w	r9, r4, #20
 8007ac8:	f108 0514 	add.w	r5, r8, #20
 8007acc:	f100 0e14 	add.w	lr, r0, #20
 8007ad0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007ad4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007ad8:	f108 0210 	add.w	r2, r8, #16
 8007adc:	46f2      	mov	sl, lr
 8007ade:	2100      	movs	r1, #0
 8007ae0:	f859 3b04 	ldr.w	r3, [r9], #4
 8007ae4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007ae8:	fa1f f883 	uxth.w	r8, r3
 8007aec:	fa11 f18b 	uxtah	r1, r1, fp
 8007af0:	0c1b      	lsrs	r3, r3, #16
 8007af2:	eba1 0808 	sub.w	r8, r1, r8
 8007af6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007afa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007afe:	fa1f f888 	uxth.w	r8, r8
 8007b02:	1419      	asrs	r1, r3, #16
 8007b04:	454e      	cmp	r6, r9
 8007b06:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007b0a:	f84a 3b04 	str.w	r3, [sl], #4
 8007b0e:	d8e7      	bhi.n	8007ae0 <__mdiff+0x80>
 8007b10:	1b33      	subs	r3, r6, r4
 8007b12:	3b15      	subs	r3, #21
 8007b14:	f023 0303 	bic.w	r3, r3, #3
 8007b18:	3304      	adds	r3, #4
 8007b1a:	3415      	adds	r4, #21
 8007b1c:	42a6      	cmp	r6, r4
 8007b1e:	bf38      	it	cc
 8007b20:	2304      	movcc	r3, #4
 8007b22:	441d      	add	r5, r3
 8007b24:	4473      	add	r3, lr
 8007b26:	469e      	mov	lr, r3
 8007b28:	462e      	mov	r6, r5
 8007b2a:	4566      	cmp	r6, ip
 8007b2c:	d30e      	bcc.n	8007b4c <__mdiff+0xec>
 8007b2e:	f10c 0203 	add.w	r2, ip, #3
 8007b32:	1b52      	subs	r2, r2, r5
 8007b34:	f022 0203 	bic.w	r2, r2, #3
 8007b38:	3d03      	subs	r5, #3
 8007b3a:	45ac      	cmp	ip, r5
 8007b3c:	bf38      	it	cc
 8007b3e:	2200      	movcc	r2, #0
 8007b40:	441a      	add	r2, r3
 8007b42:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007b46:	b17b      	cbz	r3, 8007b68 <__mdiff+0x108>
 8007b48:	6107      	str	r7, [r0, #16]
 8007b4a:	e7a3      	b.n	8007a94 <__mdiff+0x34>
 8007b4c:	f856 8b04 	ldr.w	r8, [r6], #4
 8007b50:	fa11 f288 	uxtah	r2, r1, r8
 8007b54:	1414      	asrs	r4, r2, #16
 8007b56:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007b5a:	b292      	uxth	r2, r2
 8007b5c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007b60:	f84e 2b04 	str.w	r2, [lr], #4
 8007b64:	1421      	asrs	r1, r4, #16
 8007b66:	e7e0      	b.n	8007b2a <__mdiff+0xca>
 8007b68:	3f01      	subs	r7, #1
 8007b6a:	e7ea      	b.n	8007b42 <__mdiff+0xe2>
 8007b6c:	08009669 	.word	0x08009669
 8007b70:	080096f4 	.word	0x080096f4

08007b74 <__ulp>:
 8007b74:	b082      	sub	sp, #8
 8007b76:	ed8d 0b00 	vstr	d0, [sp]
 8007b7a:	9b01      	ldr	r3, [sp, #4]
 8007b7c:	4912      	ldr	r1, [pc, #72]	; (8007bc8 <__ulp+0x54>)
 8007b7e:	4019      	ands	r1, r3
 8007b80:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007b84:	2900      	cmp	r1, #0
 8007b86:	dd05      	ble.n	8007b94 <__ulp+0x20>
 8007b88:	2200      	movs	r2, #0
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	ec43 2b10 	vmov	d0, r2, r3
 8007b90:	b002      	add	sp, #8
 8007b92:	4770      	bx	lr
 8007b94:	4249      	negs	r1, r1
 8007b96:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007b9a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007b9e:	f04f 0200 	mov.w	r2, #0
 8007ba2:	f04f 0300 	mov.w	r3, #0
 8007ba6:	da04      	bge.n	8007bb2 <__ulp+0x3e>
 8007ba8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007bac:	fa41 f300 	asr.w	r3, r1, r0
 8007bb0:	e7ec      	b.n	8007b8c <__ulp+0x18>
 8007bb2:	f1a0 0114 	sub.w	r1, r0, #20
 8007bb6:	291e      	cmp	r1, #30
 8007bb8:	bfda      	itte	le
 8007bba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007bbe:	fa20 f101 	lsrle.w	r1, r0, r1
 8007bc2:	2101      	movgt	r1, #1
 8007bc4:	460a      	mov	r2, r1
 8007bc6:	e7e1      	b.n	8007b8c <__ulp+0x18>
 8007bc8:	7ff00000 	.word	0x7ff00000

08007bcc <__b2d>:
 8007bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bce:	6905      	ldr	r5, [r0, #16]
 8007bd0:	f100 0714 	add.w	r7, r0, #20
 8007bd4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007bd8:	1f2e      	subs	r6, r5, #4
 8007bda:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007bde:	4620      	mov	r0, r4
 8007be0:	f7ff fd48 	bl	8007674 <__hi0bits>
 8007be4:	f1c0 0320 	rsb	r3, r0, #32
 8007be8:	280a      	cmp	r0, #10
 8007bea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007c68 <__b2d+0x9c>
 8007bee:	600b      	str	r3, [r1, #0]
 8007bf0:	dc14      	bgt.n	8007c1c <__b2d+0x50>
 8007bf2:	f1c0 0e0b 	rsb	lr, r0, #11
 8007bf6:	fa24 f10e 	lsr.w	r1, r4, lr
 8007bfa:	42b7      	cmp	r7, r6
 8007bfc:	ea41 030c 	orr.w	r3, r1, ip
 8007c00:	bf34      	ite	cc
 8007c02:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007c06:	2100      	movcs	r1, #0
 8007c08:	3015      	adds	r0, #21
 8007c0a:	fa04 f000 	lsl.w	r0, r4, r0
 8007c0e:	fa21 f10e 	lsr.w	r1, r1, lr
 8007c12:	ea40 0201 	orr.w	r2, r0, r1
 8007c16:	ec43 2b10 	vmov	d0, r2, r3
 8007c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c1c:	42b7      	cmp	r7, r6
 8007c1e:	bf3a      	itte	cc
 8007c20:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007c24:	f1a5 0608 	subcc.w	r6, r5, #8
 8007c28:	2100      	movcs	r1, #0
 8007c2a:	380b      	subs	r0, #11
 8007c2c:	d017      	beq.n	8007c5e <__b2d+0x92>
 8007c2e:	f1c0 0c20 	rsb	ip, r0, #32
 8007c32:	fa04 f500 	lsl.w	r5, r4, r0
 8007c36:	42be      	cmp	r6, r7
 8007c38:	fa21 f40c 	lsr.w	r4, r1, ip
 8007c3c:	ea45 0504 	orr.w	r5, r5, r4
 8007c40:	bf8c      	ite	hi
 8007c42:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007c46:	2400      	movls	r4, #0
 8007c48:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007c4c:	fa01 f000 	lsl.w	r0, r1, r0
 8007c50:	fa24 f40c 	lsr.w	r4, r4, ip
 8007c54:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007c58:	ea40 0204 	orr.w	r2, r0, r4
 8007c5c:	e7db      	b.n	8007c16 <__b2d+0x4a>
 8007c5e:	ea44 030c 	orr.w	r3, r4, ip
 8007c62:	460a      	mov	r2, r1
 8007c64:	e7d7      	b.n	8007c16 <__b2d+0x4a>
 8007c66:	bf00      	nop
 8007c68:	3ff00000 	.word	0x3ff00000

08007c6c <__d2b>:
 8007c6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c70:	4689      	mov	r9, r1
 8007c72:	2101      	movs	r1, #1
 8007c74:	ec57 6b10 	vmov	r6, r7, d0
 8007c78:	4690      	mov	r8, r2
 8007c7a:	f7ff fc09 	bl	8007490 <_Balloc>
 8007c7e:	4604      	mov	r4, r0
 8007c80:	b930      	cbnz	r0, 8007c90 <__d2b+0x24>
 8007c82:	4602      	mov	r2, r0
 8007c84:	4b25      	ldr	r3, [pc, #148]	; (8007d1c <__d2b+0xb0>)
 8007c86:	4826      	ldr	r0, [pc, #152]	; (8007d20 <__d2b+0xb4>)
 8007c88:	f240 310a 	movw	r1, #778	; 0x30a
 8007c8c:	f7ff f846 	bl	8006d1c <__assert_func>
 8007c90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007c94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c98:	bb35      	cbnz	r5, 8007ce8 <__d2b+0x7c>
 8007c9a:	2e00      	cmp	r6, #0
 8007c9c:	9301      	str	r3, [sp, #4]
 8007c9e:	d028      	beq.n	8007cf2 <__d2b+0x86>
 8007ca0:	4668      	mov	r0, sp
 8007ca2:	9600      	str	r6, [sp, #0]
 8007ca4:	f7ff fd06 	bl	80076b4 <__lo0bits>
 8007ca8:	9900      	ldr	r1, [sp, #0]
 8007caa:	b300      	cbz	r0, 8007cee <__d2b+0x82>
 8007cac:	9a01      	ldr	r2, [sp, #4]
 8007cae:	f1c0 0320 	rsb	r3, r0, #32
 8007cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb6:	430b      	orrs	r3, r1
 8007cb8:	40c2      	lsrs	r2, r0
 8007cba:	6163      	str	r3, [r4, #20]
 8007cbc:	9201      	str	r2, [sp, #4]
 8007cbe:	9b01      	ldr	r3, [sp, #4]
 8007cc0:	61a3      	str	r3, [r4, #24]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	bf14      	ite	ne
 8007cc6:	2202      	movne	r2, #2
 8007cc8:	2201      	moveq	r2, #1
 8007cca:	6122      	str	r2, [r4, #16]
 8007ccc:	b1d5      	cbz	r5, 8007d04 <__d2b+0x98>
 8007cce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007cd2:	4405      	add	r5, r0
 8007cd4:	f8c9 5000 	str.w	r5, [r9]
 8007cd8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007cdc:	f8c8 0000 	str.w	r0, [r8]
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	b003      	add	sp, #12
 8007ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ce8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cec:	e7d5      	b.n	8007c9a <__d2b+0x2e>
 8007cee:	6161      	str	r1, [r4, #20]
 8007cf0:	e7e5      	b.n	8007cbe <__d2b+0x52>
 8007cf2:	a801      	add	r0, sp, #4
 8007cf4:	f7ff fcde 	bl	80076b4 <__lo0bits>
 8007cf8:	9b01      	ldr	r3, [sp, #4]
 8007cfa:	6163      	str	r3, [r4, #20]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	6122      	str	r2, [r4, #16]
 8007d00:	3020      	adds	r0, #32
 8007d02:	e7e3      	b.n	8007ccc <__d2b+0x60>
 8007d04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007d0c:	f8c9 0000 	str.w	r0, [r9]
 8007d10:	6918      	ldr	r0, [r3, #16]
 8007d12:	f7ff fcaf 	bl	8007674 <__hi0bits>
 8007d16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007d1a:	e7df      	b.n	8007cdc <__d2b+0x70>
 8007d1c:	08009669 	.word	0x08009669
 8007d20:	080096f4 	.word	0x080096f4

08007d24 <__ratio>:
 8007d24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d28:	4688      	mov	r8, r1
 8007d2a:	4669      	mov	r1, sp
 8007d2c:	4681      	mov	r9, r0
 8007d2e:	f7ff ff4d 	bl	8007bcc <__b2d>
 8007d32:	a901      	add	r1, sp, #4
 8007d34:	4640      	mov	r0, r8
 8007d36:	ec55 4b10 	vmov	r4, r5, d0
 8007d3a:	f7ff ff47 	bl	8007bcc <__b2d>
 8007d3e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d42:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007d46:	eba3 0c02 	sub.w	ip, r3, r2
 8007d4a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007d4e:	1a9b      	subs	r3, r3, r2
 8007d50:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007d54:	ec51 0b10 	vmov	r0, r1, d0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	bfd6      	itet	le
 8007d5c:	460a      	movle	r2, r1
 8007d5e:	462a      	movgt	r2, r5
 8007d60:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007d64:	468b      	mov	fp, r1
 8007d66:	462f      	mov	r7, r5
 8007d68:	bfd4      	ite	le
 8007d6a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007d6e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007d72:	4620      	mov	r0, r4
 8007d74:	ee10 2a10 	vmov	r2, s0
 8007d78:	465b      	mov	r3, fp
 8007d7a:	4639      	mov	r1, r7
 8007d7c:	f7f8 fd66 	bl	800084c <__aeabi_ddiv>
 8007d80:	ec41 0b10 	vmov	d0, r0, r1
 8007d84:	b003      	add	sp, #12
 8007d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007d8a <__copybits>:
 8007d8a:	3901      	subs	r1, #1
 8007d8c:	b570      	push	{r4, r5, r6, lr}
 8007d8e:	1149      	asrs	r1, r1, #5
 8007d90:	6914      	ldr	r4, [r2, #16]
 8007d92:	3101      	adds	r1, #1
 8007d94:	f102 0314 	add.w	r3, r2, #20
 8007d98:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007d9c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007da0:	1f05      	subs	r5, r0, #4
 8007da2:	42a3      	cmp	r3, r4
 8007da4:	d30c      	bcc.n	8007dc0 <__copybits+0x36>
 8007da6:	1aa3      	subs	r3, r4, r2
 8007da8:	3b11      	subs	r3, #17
 8007daa:	f023 0303 	bic.w	r3, r3, #3
 8007dae:	3211      	adds	r2, #17
 8007db0:	42a2      	cmp	r2, r4
 8007db2:	bf88      	it	hi
 8007db4:	2300      	movhi	r3, #0
 8007db6:	4418      	add	r0, r3
 8007db8:	2300      	movs	r3, #0
 8007dba:	4288      	cmp	r0, r1
 8007dbc:	d305      	bcc.n	8007dca <__copybits+0x40>
 8007dbe:	bd70      	pop	{r4, r5, r6, pc}
 8007dc0:	f853 6b04 	ldr.w	r6, [r3], #4
 8007dc4:	f845 6f04 	str.w	r6, [r5, #4]!
 8007dc8:	e7eb      	b.n	8007da2 <__copybits+0x18>
 8007dca:	f840 3b04 	str.w	r3, [r0], #4
 8007dce:	e7f4      	b.n	8007dba <__copybits+0x30>

08007dd0 <__any_on>:
 8007dd0:	f100 0214 	add.w	r2, r0, #20
 8007dd4:	6900      	ldr	r0, [r0, #16]
 8007dd6:	114b      	asrs	r3, r1, #5
 8007dd8:	4298      	cmp	r0, r3
 8007dda:	b510      	push	{r4, lr}
 8007ddc:	db11      	blt.n	8007e02 <__any_on+0x32>
 8007dde:	dd0a      	ble.n	8007df6 <__any_on+0x26>
 8007de0:	f011 011f 	ands.w	r1, r1, #31
 8007de4:	d007      	beq.n	8007df6 <__any_on+0x26>
 8007de6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007dea:	fa24 f001 	lsr.w	r0, r4, r1
 8007dee:	fa00 f101 	lsl.w	r1, r0, r1
 8007df2:	428c      	cmp	r4, r1
 8007df4:	d10b      	bne.n	8007e0e <__any_on+0x3e>
 8007df6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d803      	bhi.n	8007e06 <__any_on+0x36>
 8007dfe:	2000      	movs	r0, #0
 8007e00:	bd10      	pop	{r4, pc}
 8007e02:	4603      	mov	r3, r0
 8007e04:	e7f7      	b.n	8007df6 <__any_on+0x26>
 8007e06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e0a:	2900      	cmp	r1, #0
 8007e0c:	d0f5      	beq.n	8007dfa <__any_on+0x2a>
 8007e0e:	2001      	movs	r0, #1
 8007e10:	e7f6      	b.n	8007e00 <__any_on+0x30>

08007e12 <_calloc_r>:
 8007e12:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e14:	fba1 2402 	umull	r2, r4, r1, r2
 8007e18:	b94c      	cbnz	r4, 8007e2e <_calloc_r+0x1c>
 8007e1a:	4611      	mov	r1, r2
 8007e1c:	9201      	str	r2, [sp, #4]
 8007e1e:	f000 f87b 	bl	8007f18 <_malloc_r>
 8007e22:	9a01      	ldr	r2, [sp, #4]
 8007e24:	4605      	mov	r5, r0
 8007e26:	b930      	cbnz	r0, 8007e36 <_calloc_r+0x24>
 8007e28:	4628      	mov	r0, r5
 8007e2a:	b003      	add	sp, #12
 8007e2c:	bd30      	pop	{r4, r5, pc}
 8007e2e:	220c      	movs	r2, #12
 8007e30:	6002      	str	r2, [r0, #0]
 8007e32:	2500      	movs	r5, #0
 8007e34:	e7f8      	b.n	8007e28 <_calloc_r+0x16>
 8007e36:	4621      	mov	r1, r4
 8007e38:	f7fd ffb8 	bl	8005dac <memset>
 8007e3c:	e7f4      	b.n	8007e28 <_calloc_r+0x16>
	...

08007e40 <_free_r>:
 8007e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e42:	2900      	cmp	r1, #0
 8007e44:	d044      	beq.n	8007ed0 <_free_r+0x90>
 8007e46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e4a:	9001      	str	r0, [sp, #4]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f1a1 0404 	sub.w	r4, r1, #4
 8007e52:	bfb8      	it	lt
 8007e54:	18e4      	addlt	r4, r4, r3
 8007e56:	f001 f84d 	bl	8008ef4 <__malloc_lock>
 8007e5a:	4a1e      	ldr	r2, [pc, #120]	; (8007ed4 <_free_r+0x94>)
 8007e5c:	9801      	ldr	r0, [sp, #4]
 8007e5e:	6813      	ldr	r3, [r2, #0]
 8007e60:	b933      	cbnz	r3, 8007e70 <_free_r+0x30>
 8007e62:	6063      	str	r3, [r4, #4]
 8007e64:	6014      	str	r4, [r2, #0]
 8007e66:	b003      	add	sp, #12
 8007e68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e6c:	f001 b848 	b.w	8008f00 <__malloc_unlock>
 8007e70:	42a3      	cmp	r3, r4
 8007e72:	d908      	bls.n	8007e86 <_free_r+0x46>
 8007e74:	6825      	ldr	r5, [r4, #0]
 8007e76:	1961      	adds	r1, r4, r5
 8007e78:	428b      	cmp	r3, r1
 8007e7a:	bf01      	itttt	eq
 8007e7c:	6819      	ldreq	r1, [r3, #0]
 8007e7e:	685b      	ldreq	r3, [r3, #4]
 8007e80:	1949      	addeq	r1, r1, r5
 8007e82:	6021      	streq	r1, [r4, #0]
 8007e84:	e7ed      	b.n	8007e62 <_free_r+0x22>
 8007e86:	461a      	mov	r2, r3
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	b10b      	cbz	r3, 8007e90 <_free_r+0x50>
 8007e8c:	42a3      	cmp	r3, r4
 8007e8e:	d9fa      	bls.n	8007e86 <_free_r+0x46>
 8007e90:	6811      	ldr	r1, [r2, #0]
 8007e92:	1855      	adds	r5, r2, r1
 8007e94:	42a5      	cmp	r5, r4
 8007e96:	d10b      	bne.n	8007eb0 <_free_r+0x70>
 8007e98:	6824      	ldr	r4, [r4, #0]
 8007e9a:	4421      	add	r1, r4
 8007e9c:	1854      	adds	r4, r2, r1
 8007e9e:	42a3      	cmp	r3, r4
 8007ea0:	6011      	str	r1, [r2, #0]
 8007ea2:	d1e0      	bne.n	8007e66 <_free_r+0x26>
 8007ea4:	681c      	ldr	r4, [r3, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	6053      	str	r3, [r2, #4]
 8007eaa:	4421      	add	r1, r4
 8007eac:	6011      	str	r1, [r2, #0]
 8007eae:	e7da      	b.n	8007e66 <_free_r+0x26>
 8007eb0:	d902      	bls.n	8007eb8 <_free_r+0x78>
 8007eb2:	230c      	movs	r3, #12
 8007eb4:	6003      	str	r3, [r0, #0]
 8007eb6:	e7d6      	b.n	8007e66 <_free_r+0x26>
 8007eb8:	6825      	ldr	r5, [r4, #0]
 8007eba:	1961      	adds	r1, r4, r5
 8007ebc:	428b      	cmp	r3, r1
 8007ebe:	bf04      	itt	eq
 8007ec0:	6819      	ldreq	r1, [r3, #0]
 8007ec2:	685b      	ldreq	r3, [r3, #4]
 8007ec4:	6063      	str	r3, [r4, #4]
 8007ec6:	bf04      	itt	eq
 8007ec8:	1949      	addeq	r1, r1, r5
 8007eca:	6021      	streq	r1, [r4, #0]
 8007ecc:	6054      	str	r4, [r2, #4]
 8007ece:	e7ca      	b.n	8007e66 <_free_r+0x26>
 8007ed0:	b003      	add	sp, #12
 8007ed2:	bd30      	pop	{r4, r5, pc}
 8007ed4:	2000078c 	.word	0x2000078c

08007ed8 <sbrk_aligned>:
 8007ed8:	b570      	push	{r4, r5, r6, lr}
 8007eda:	4e0e      	ldr	r6, [pc, #56]	; (8007f14 <sbrk_aligned+0x3c>)
 8007edc:	460c      	mov	r4, r1
 8007ede:	6831      	ldr	r1, [r6, #0]
 8007ee0:	4605      	mov	r5, r0
 8007ee2:	b911      	cbnz	r1, 8007eea <sbrk_aligned+0x12>
 8007ee4:	f000 fce0 	bl	80088a8 <_sbrk_r>
 8007ee8:	6030      	str	r0, [r6, #0]
 8007eea:	4621      	mov	r1, r4
 8007eec:	4628      	mov	r0, r5
 8007eee:	f000 fcdb 	bl	80088a8 <_sbrk_r>
 8007ef2:	1c43      	adds	r3, r0, #1
 8007ef4:	d00a      	beq.n	8007f0c <sbrk_aligned+0x34>
 8007ef6:	1cc4      	adds	r4, r0, #3
 8007ef8:	f024 0403 	bic.w	r4, r4, #3
 8007efc:	42a0      	cmp	r0, r4
 8007efe:	d007      	beq.n	8007f10 <sbrk_aligned+0x38>
 8007f00:	1a21      	subs	r1, r4, r0
 8007f02:	4628      	mov	r0, r5
 8007f04:	f000 fcd0 	bl	80088a8 <_sbrk_r>
 8007f08:	3001      	adds	r0, #1
 8007f0a:	d101      	bne.n	8007f10 <sbrk_aligned+0x38>
 8007f0c:	f04f 34ff 	mov.w	r4, #4294967295
 8007f10:	4620      	mov	r0, r4
 8007f12:	bd70      	pop	{r4, r5, r6, pc}
 8007f14:	20000790 	.word	0x20000790

08007f18 <_malloc_r>:
 8007f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f1c:	1ccd      	adds	r5, r1, #3
 8007f1e:	f025 0503 	bic.w	r5, r5, #3
 8007f22:	3508      	adds	r5, #8
 8007f24:	2d0c      	cmp	r5, #12
 8007f26:	bf38      	it	cc
 8007f28:	250c      	movcc	r5, #12
 8007f2a:	2d00      	cmp	r5, #0
 8007f2c:	4607      	mov	r7, r0
 8007f2e:	db01      	blt.n	8007f34 <_malloc_r+0x1c>
 8007f30:	42a9      	cmp	r1, r5
 8007f32:	d905      	bls.n	8007f40 <_malloc_r+0x28>
 8007f34:	230c      	movs	r3, #12
 8007f36:	603b      	str	r3, [r7, #0]
 8007f38:	2600      	movs	r6, #0
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f40:	4e2e      	ldr	r6, [pc, #184]	; (8007ffc <_malloc_r+0xe4>)
 8007f42:	f000 ffd7 	bl	8008ef4 <__malloc_lock>
 8007f46:	6833      	ldr	r3, [r6, #0]
 8007f48:	461c      	mov	r4, r3
 8007f4a:	bb34      	cbnz	r4, 8007f9a <_malloc_r+0x82>
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	4638      	mov	r0, r7
 8007f50:	f7ff ffc2 	bl	8007ed8 <sbrk_aligned>
 8007f54:	1c43      	adds	r3, r0, #1
 8007f56:	4604      	mov	r4, r0
 8007f58:	d14d      	bne.n	8007ff6 <_malloc_r+0xde>
 8007f5a:	6834      	ldr	r4, [r6, #0]
 8007f5c:	4626      	mov	r6, r4
 8007f5e:	2e00      	cmp	r6, #0
 8007f60:	d140      	bne.n	8007fe4 <_malloc_r+0xcc>
 8007f62:	6823      	ldr	r3, [r4, #0]
 8007f64:	4631      	mov	r1, r6
 8007f66:	4638      	mov	r0, r7
 8007f68:	eb04 0803 	add.w	r8, r4, r3
 8007f6c:	f000 fc9c 	bl	80088a8 <_sbrk_r>
 8007f70:	4580      	cmp	r8, r0
 8007f72:	d13a      	bne.n	8007fea <_malloc_r+0xd2>
 8007f74:	6821      	ldr	r1, [r4, #0]
 8007f76:	3503      	adds	r5, #3
 8007f78:	1a6d      	subs	r5, r5, r1
 8007f7a:	f025 0503 	bic.w	r5, r5, #3
 8007f7e:	3508      	adds	r5, #8
 8007f80:	2d0c      	cmp	r5, #12
 8007f82:	bf38      	it	cc
 8007f84:	250c      	movcc	r5, #12
 8007f86:	4629      	mov	r1, r5
 8007f88:	4638      	mov	r0, r7
 8007f8a:	f7ff ffa5 	bl	8007ed8 <sbrk_aligned>
 8007f8e:	3001      	adds	r0, #1
 8007f90:	d02b      	beq.n	8007fea <_malloc_r+0xd2>
 8007f92:	6823      	ldr	r3, [r4, #0]
 8007f94:	442b      	add	r3, r5
 8007f96:	6023      	str	r3, [r4, #0]
 8007f98:	e00e      	b.n	8007fb8 <_malloc_r+0xa0>
 8007f9a:	6822      	ldr	r2, [r4, #0]
 8007f9c:	1b52      	subs	r2, r2, r5
 8007f9e:	d41e      	bmi.n	8007fde <_malloc_r+0xc6>
 8007fa0:	2a0b      	cmp	r2, #11
 8007fa2:	d916      	bls.n	8007fd2 <_malloc_r+0xba>
 8007fa4:	1961      	adds	r1, r4, r5
 8007fa6:	42a3      	cmp	r3, r4
 8007fa8:	6025      	str	r5, [r4, #0]
 8007faa:	bf18      	it	ne
 8007fac:	6059      	strne	r1, [r3, #4]
 8007fae:	6863      	ldr	r3, [r4, #4]
 8007fb0:	bf08      	it	eq
 8007fb2:	6031      	streq	r1, [r6, #0]
 8007fb4:	5162      	str	r2, [r4, r5]
 8007fb6:	604b      	str	r3, [r1, #4]
 8007fb8:	4638      	mov	r0, r7
 8007fba:	f104 060b 	add.w	r6, r4, #11
 8007fbe:	f000 ff9f 	bl	8008f00 <__malloc_unlock>
 8007fc2:	f026 0607 	bic.w	r6, r6, #7
 8007fc6:	1d23      	adds	r3, r4, #4
 8007fc8:	1af2      	subs	r2, r6, r3
 8007fca:	d0b6      	beq.n	8007f3a <_malloc_r+0x22>
 8007fcc:	1b9b      	subs	r3, r3, r6
 8007fce:	50a3      	str	r3, [r4, r2]
 8007fd0:	e7b3      	b.n	8007f3a <_malloc_r+0x22>
 8007fd2:	6862      	ldr	r2, [r4, #4]
 8007fd4:	42a3      	cmp	r3, r4
 8007fd6:	bf0c      	ite	eq
 8007fd8:	6032      	streq	r2, [r6, #0]
 8007fda:	605a      	strne	r2, [r3, #4]
 8007fdc:	e7ec      	b.n	8007fb8 <_malloc_r+0xa0>
 8007fde:	4623      	mov	r3, r4
 8007fe0:	6864      	ldr	r4, [r4, #4]
 8007fe2:	e7b2      	b.n	8007f4a <_malloc_r+0x32>
 8007fe4:	4634      	mov	r4, r6
 8007fe6:	6876      	ldr	r6, [r6, #4]
 8007fe8:	e7b9      	b.n	8007f5e <_malloc_r+0x46>
 8007fea:	230c      	movs	r3, #12
 8007fec:	603b      	str	r3, [r7, #0]
 8007fee:	4638      	mov	r0, r7
 8007ff0:	f000 ff86 	bl	8008f00 <__malloc_unlock>
 8007ff4:	e7a1      	b.n	8007f3a <_malloc_r+0x22>
 8007ff6:	6025      	str	r5, [r4, #0]
 8007ff8:	e7de      	b.n	8007fb8 <_malloc_r+0xa0>
 8007ffa:	bf00      	nop
 8007ffc:	2000078c 	.word	0x2000078c

08008000 <__ssputs_r>:
 8008000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008004:	688e      	ldr	r6, [r1, #8]
 8008006:	429e      	cmp	r6, r3
 8008008:	4682      	mov	sl, r0
 800800a:	460c      	mov	r4, r1
 800800c:	4690      	mov	r8, r2
 800800e:	461f      	mov	r7, r3
 8008010:	d838      	bhi.n	8008084 <__ssputs_r+0x84>
 8008012:	898a      	ldrh	r2, [r1, #12]
 8008014:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008018:	d032      	beq.n	8008080 <__ssputs_r+0x80>
 800801a:	6825      	ldr	r5, [r4, #0]
 800801c:	6909      	ldr	r1, [r1, #16]
 800801e:	eba5 0901 	sub.w	r9, r5, r1
 8008022:	6965      	ldr	r5, [r4, #20]
 8008024:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008028:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800802c:	3301      	adds	r3, #1
 800802e:	444b      	add	r3, r9
 8008030:	106d      	asrs	r5, r5, #1
 8008032:	429d      	cmp	r5, r3
 8008034:	bf38      	it	cc
 8008036:	461d      	movcc	r5, r3
 8008038:	0553      	lsls	r3, r2, #21
 800803a:	d531      	bpl.n	80080a0 <__ssputs_r+0xa0>
 800803c:	4629      	mov	r1, r5
 800803e:	f7ff ff6b 	bl	8007f18 <_malloc_r>
 8008042:	4606      	mov	r6, r0
 8008044:	b950      	cbnz	r0, 800805c <__ssputs_r+0x5c>
 8008046:	230c      	movs	r3, #12
 8008048:	f8ca 3000 	str.w	r3, [sl]
 800804c:	89a3      	ldrh	r3, [r4, #12]
 800804e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008052:	81a3      	strh	r3, [r4, #12]
 8008054:	f04f 30ff 	mov.w	r0, #4294967295
 8008058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800805c:	6921      	ldr	r1, [r4, #16]
 800805e:	464a      	mov	r2, r9
 8008060:	f7fd fe96 	bl	8005d90 <memcpy>
 8008064:	89a3      	ldrh	r3, [r4, #12]
 8008066:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800806a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800806e:	81a3      	strh	r3, [r4, #12]
 8008070:	6126      	str	r6, [r4, #16]
 8008072:	6165      	str	r5, [r4, #20]
 8008074:	444e      	add	r6, r9
 8008076:	eba5 0509 	sub.w	r5, r5, r9
 800807a:	6026      	str	r6, [r4, #0]
 800807c:	60a5      	str	r5, [r4, #8]
 800807e:	463e      	mov	r6, r7
 8008080:	42be      	cmp	r6, r7
 8008082:	d900      	bls.n	8008086 <__ssputs_r+0x86>
 8008084:	463e      	mov	r6, r7
 8008086:	6820      	ldr	r0, [r4, #0]
 8008088:	4632      	mov	r2, r6
 800808a:	4641      	mov	r1, r8
 800808c:	f000 ff18 	bl	8008ec0 <memmove>
 8008090:	68a3      	ldr	r3, [r4, #8]
 8008092:	1b9b      	subs	r3, r3, r6
 8008094:	60a3      	str	r3, [r4, #8]
 8008096:	6823      	ldr	r3, [r4, #0]
 8008098:	4433      	add	r3, r6
 800809a:	6023      	str	r3, [r4, #0]
 800809c:	2000      	movs	r0, #0
 800809e:	e7db      	b.n	8008058 <__ssputs_r+0x58>
 80080a0:	462a      	mov	r2, r5
 80080a2:	f000 ff33 	bl	8008f0c <_realloc_r>
 80080a6:	4606      	mov	r6, r0
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d1e1      	bne.n	8008070 <__ssputs_r+0x70>
 80080ac:	6921      	ldr	r1, [r4, #16]
 80080ae:	4650      	mov	r0, sl
 80080b0:	f7ff fec6 	bl	8007e40 <_free_r>
 80080b4:	e7c7      	b.n	8008046 <__ssputs_r+0x46>
	...

080080b8 <_svfiprintf_r>:
 80080b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080bc:	4698      	mov	r8, r3
 80080be:	898b      	ldrh	r3, [r1, #12]
 80080c0:	061b      	lsls	r3, r3, #24
 80080c2:	b09d      	sub	sp, #116	; 0x74
 80080c4:	4607      	mov	r7, r0
 80080c6:	460d      	mov	r5, r1
 80080c8:	4614      	mov	r4, r2
 80080ca:	d50e      	bpl.n	80080ea <_svfiprintf_r+0x32>
 80080cc:	690b      	ldr	r3, [r1, #16]
 80080ce:	b963      	cbnz	r3, 80080ea <_svfiprintf_r+0x32>
 80080d0:	2140      	movs	r1, #64	; 0x40
 80080d2:	f7ff ff21 	bl	8007f18 <_malloc_r>
 80080d6:	6028      	str	r0, [r5, #0]
 80080d8:	6128      	str	r0, [r5, #16]
 80080da:	b920      	cbnz	r0, 80080e6 <_svfiprintf_r+0x2e>
 80080dc:	230c      	movs	r3, #12
 80080de:	603b      	str	r3, [r7, #0]
 80080e0:	f04f 30ff 	mov.w	r0, #4294967295
 80080e4:	e0d1      	b.n	800828a <_svfiprintf_r+0x1d2>
 80080e6:	2340      	movs	r3, #64	; 0x40
 80080e8:	616b      	str	r3, [r5, #20]
 80080ea:	2300      	movs	r3, #0
 80080ec:	9309      	str	r3, [sp, #36]	; 0x24
 80080ee:	2320      	movs	r3, #32
 80080f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80080f8:	2330      	movs	r3, #48	; 0x30
 80080fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80082a4 <_svfiprintf_r+0x1ec>
 80080fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008102:	f04f 0901 	mov.w	r9, #1
 8008106:	4623      	mov	r3, r4
 8008108:	469a      	mov	sl, r3
 800810a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800810e:	b10a      	cbz	r2, 8008114 <_svfiprintf_r+0x5c>
 8008110:	2a25      	cmp	r2, #37	; 0x25
 8008112:	d1f9      	bne.n	8008108 <_svfiprintf_r+0x50>
 8008114:	ebba 0b04 	subs.w	fp, sl, r4
 8008118:	d00b      	beq.n	8008132 <_svfiprintf_r+0x7a>
 800811a:	465b      	mov	r3, fp
 800811c:	4622      	mov	r2, r4
 800811e:	4629      	mov	r1, r5
 8008120:	4638      	mov	r0, r7
 8008122:	f7ff ff6d 	bl	8008000 <__ssputs_r>
 8008126:	3001      	adds	r0, #1
 8008128:	f000 80aa 	beq.w	8008280 <_svfiprintf_r+0x1c8>
 800812c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800812e:	445a      	add	r2, fp
 8008130:	9209      	str	r2, [sp, #36]	; 0x24
 8008132:	f89a 3000 	ldrb.w	r3, [sl]
 8008136:	2b00      	cmp	r3, #0
 8008138:	f000 80a2 	beq.w	8008280 <_svfiprintf_r+0x1c8>
 800813c:	2300      	movs	r3, #0
 800813e:	f04f 32ff 	mov.w	r2, #4294967295
 8008142:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008146:	f10a 0a01 	add.w	sl, sl, #1
 800814a:	9304      	str	r3, [sp, #16]
 800814c:	9307      	str	r3, [sp, #28]
 800814e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008152:	931a      	str	r3, [sp, #104]	; 0x68
 8008154:	4654      	mov	r4, sl
 8008156:	2205      	movs	r2, #5
 8008158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800815c:	4851      	ldr	r0, [pc, #324]	; (80082a4 <_svfiprintf_r+0x1ec>)
 800815e:	f7f8 f83f 	bl	80001e0 <memchr>
 8008162:	9a04      	ldr	r2, [sp, #16]
 8008164:	b9d8      	cbnz	r0, 800819e <_svfiprintf_r+0xe6>
 8008166:	06d0      	lsls	r0, r2, #27
 8008168:	bf44      	itt	mi
 800816a:	2320      	movmi	r3, #32
 800816c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008170:	0711      	lsls	r1, r2, #28
 8008172:	bf44      	itt	mi
 8008174:	232b      	movmi	r3, #43	; 0x2b
 8008176:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800817a:	f89a 3000 	ldrb.w	r3, [sl]
 800817e:	2b2a      	cmp	r3, #42	; 0x2a
 8008180:	d015      	beq.n	80081ae <_svfiprintf_r+0xf6>
 8008182:	9a07      	ldr	r2, [sp, #28]
 8008184:	4654      	mov	r4, sl
 8008186:	2000      	movs	r0, #0
 8008188:	f04f 0c0a 	mov.w	ip, #10
 800818c:	4621      	mov	r1, r4
 800818e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008192:	3b30      	subs	r3, #48	; 0x30
 8008194:	2b09      	cmp	r3, #9
 8008196:	d94e      	bls.n	8008236 <_svfiprintf_r+0x17e>
 8008198:	b1b0      	cbz	r0, 80081c8 <_svfiprintf_r+0x110>
 800819a:	9207      	str	r2, [sp, #28]
 800819c:	e014      	b.n	80081c8 <_svfiprintf_r+0x110>
 800819e:	eba0 0308 	sub.w	r3, r0, r8
 80081a2:	fa09 f303 	lsl.w	r3, r9, r3
 80081a6:	4313      	orrs	r3, r2
 80081a8:	9304      	str	r3, [sp, #16]
 80081aa:	46a2      	mov	sl, r4
 80081ac:	e7d2      	b.n	8008154 <_svfiprintf_r+0x9c>
 80081ae:	9b03      	ldr	r3, [sp, #12]
 80081b0:	1d19      	adds	r1, r3, #4
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	9103      	str	r1, [sp, #12]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	bfbb      	ittet	lt
 80081ba:	425b      	neglt	r3, r3
 80081bc:	f042 0202 	orrlt.w	r2, r2, #2
 80081c0:	9307      	strge	r3, [sp, #28]
 80081c2:	9307      	strlt	r3, [sp, #28]
 80081c4:	bfb8      	it	lt
 80081c6:	9204      	strlt	r2, [sp, #16]
 80081c8:	7823      	ldrb	r3, [r4, #0]
 80081ca:	2b2e      	cmp	r3, #46	; 0x2e
 80081cc:	d10c      	bne.n	80081e8 <_svfiprintf_r+0x130>
 80081ce:	7863      	ldrb	r3, [r4, #1]
 80081d0:	2b2a      	cmp	r3, #42	; 0x2a
 80081d2:	d135      	bne.n	8008240 <_svfiprintf_r+0x188>
 80081d4:	9b03      	ldr	r3, [sp, #12]
 80081d6:	1d1a      	adds	r2, r3, #4
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	9203      	str	r2, [sp, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	bfb8      	it	lt
 80081e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80081e4:	3402      	adds	r4, #2
 80081e6:	9305      	str	r3, [sp, #20]
 80081e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80082b4 <_svfiprintf_r+0x1fc>
 80081ec:	7821      	ldrb	r1, [r4, #0]
 80081ee:	2203      	movs	r2, #3
 80081f0:	4650      	mov	r0, sl
 80081f2:	f7f7 fff5 	bl	80001e0 <memchr>
 80081f6:	b140      	cbz	r0, 800820a <_svfiprintf_r+0x152>
 80081f8:	2340      	movs	r3, #64	; 0x40
 80081fa:	eba0 000a 	sub.w	r0, r0, sl
 80081fe:	fa03 f000 	lsl.w	r0, r3, r0
 8008202:	9b04      	ldr	r3, [sp, #16]
 8008204:	4303      	orrs	r3, r0
 8008206:	3401      	adds	r4, #1
 8008208:	9304      	str	r3, [sp, #16]
 800820a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800820e:	4826      	ldr	r0, [pc, #152]	; (80082a8 <_svfiprintf_r+0x1f0>)
 8008210:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008214:	2206      	movs	r2, #6
 8008216:	f7f7 ffe3 	bl	80001e0 <memchr>
 800821a:	2800      	cmp	r0, #0
 800821c:	d038      	beq.n	8008290 <_svfiprintf_r+0x1d8>
 800821e:	4b23      	ldr	r3, [pc, #140]	; (80082ac <_svfiprintf_r+0x1f4>)
 8008220:	bb1b      	cbnz	r3, 800826a <_svfiprintf_r+0x1b2>
 8008222:	9b03      	ldr	r3, [sp, #12]
 8008224:	3307      	adds	r3, #7
 8008226:	f023 0307 	bic.w	r3, r3, #7
 800822a:	3308      	adds	r3, #8
 800822c:	9303      	str	r3, [sp, #12]
 800822e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008230:	4433      	add	r3, r6
 8008232:	9309      	str	r3, [sp, #36]	; 0x24
 8008234:	e767      	b.n	8008106 <_svfiprintf_r+0x4e>
 8008236:	fb0c 3202 	mla	r2, ip, r2, r3
 800823a:	460c      	mov	r4, r1
 800823c:	2001      	movs	r0, #1
 800823e:	e7a5      	b.n	800818c <_svfiprintf_r+0xd4>
 8008240:	2300      	movs	r3, #0
 8008242:	3401      	adds	r4, #1
 8008244:	9305      	str	r3, [sp, #20]
 8008246:	4619      	mov	r1, r3
 8008248:	f04f 0c0a 	mov.w	ip, #10
 800824c:	4620      	mov	r0, r4
 800824e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008252:	3a30      	subs	r2, #48	; 0x30
 8008254:	2a09      	cmp	r2, #9
 8008256:	d903      	bls.n	8008260 <_svfiprintf_r+0x1a8>
 8008258:	2b00      	cmp	r3, #0
 800825a:	d0c5      	beq.n	80081e8 <_svfiprintf_r+0x130>
 800825c:	9105      	str	r1, [sp, #20]
 800825e:	e7c3      	b.n	80081e8 <_svfiprintf_r+0x130>
 8008260:	fb0c 2101 	mla	r1, ip, r1, r2
 8008264:	4604      	mov	r4, r0
 8008266:	2301      	movs	r3, #1
 8008268:	e7f0      	b.n	800824c <_svfiprintf_r+0x194>
 800826a:	ab03      	add	r3, sp, #12
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	462a      	mov	r2, r5
 8008270:	4b0f      	ldr	r3, [pc, #60]	; (80082b0 <_svfiprintf_r+0x1f8>)
 8008272:	a904      	add	r1, sp, #16
 8008274:	4638      	mov	r0, r7
 8008276:	f3af 8000 	nop.w
 800827a:	1c42      	adds	r2, r0, #1
 800827c:	4606      	mov	r6, r0
 800827e:	d1d6      	bne.n	800822e <_svfiprintf_r+0x176>
 8008280:	89ab      	ldrh	r3, [r5, #12]
 8008282:	065b      	lsls	r3, r3, #25
 8008284:	f53f af2c 	bmi.w	80080e0 <_svfiprintf_r+0x28>
 8008288:	9809      	ldr	r0, [sp, #36]	; 0x24
 800828a:	b01d      	add	sp, #116	; 0x74
 800828c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008290:	ab03      	add	r3, sp, #12
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	462a      	mov	r2, r5
 8008296:	4b06      	ldr	r3, [pc, #24]	; (80082b0 <_svfiprintf_r+0x1f8>)
 8008298:	a904      	add	r1, sp, #16
 800829a:	4638      	mov	r0, r7
 800829c:	f000 f9d4 	bl	8008648 <_printf_i>
 80082a0:	e7eb      	b.n	800827a <_svfiprintf_r+0x1c2>
 80082a2:	bf00      	nop
 80082a4:	0800984c 	.word	0x0800984c
 80082a8:	08009856 	.word	0x08009856
 80082ac:	00000000 	.word	0x00000000
 80082b0:	08008001 	.word	0x08008001
 80082b4:	08009852 	.word	0x08009852

080082b8 <__sfputc_r>:
 80082b8:	6893      	ldr	r3, [r2, #8]
 80082ba:	3b01      	subs	r3, #1
 80082bc:	2b00      	cmp	r3, #0
 80082be:	b410      	push	{r4}
 80082c0:	6093      	str	r3, [r2, #8]
 80082c2:	da08      	bge.n	80082d6 <__sfputc_r+0x1e>
 80082c4:	6994      	ldr	r4, [r2, #24]
 80082c6:	42a3      	cmp	r3, r4
 80082c8:	db01      	blt.n	80082ce <__sfputc_r+0x16>
 80082ca:	290a      	cmp	r1, #10
 80082cc:	d103      	bne.n	80082d6 <__sfputc_r+0x1e>
 80082ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082d2:	f000 baff 	b.w	80088d4 <__swbuf_r>
 80082d6:	6813      	ldr	r3, [r2, #0]
 80082d8:	1c58      	adds	r0, r3, #1
 80082da:	6010      	str	r0, [r2, #0]
 80082dc:	7019      	strb	r1, [r3, #0]
 80082de:	4608      	mov	r0, r1
 80082e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082e4:	4770      	bx	lr

080082e6 <__sfputs_r>:
 80082e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e8:	4606      	mov	r6, r0
 80082ea:	460f      	mov	r7, r1
 80082ec:	4614      	mov	r4, r2
 80082ee:	18d5      	adds	r5, r2, r3
 80082f0:	42ac      	cmp	r4, r5
 80082f2:	d101      	bne.n	80082f8 <__sfputs_r+0x12>
 80082f4:	2000      	movs	r0, #0
 80082f6:	e007      	b.n	8008308 <__sfputs_r+0x22>
 80082f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082fc:	463a      	mov	r2, r7
 80082fe:	4630      	mov	r0, r6
 8008300:	f7ff ffda 	bl	80082b8 <__sfputc_r>
 8008304:	1c43      	adds	r3, r0, #1
 8008306:	d1f3      	bne.n	80082f0 <__sfputs_r+0xa>
 8008308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800830c <_vfiprintf_r>:
 800830c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008310:	460d      	mov	r5, r1
 8008312:	b09d      	sub	sp, #116	; 0x74
 8008314:	4614      	mov	r4, r2
 8008316:	4698      	mov	r8, r3
 8008318:	4606      	mov	r6, r0
 800831a:	b118      	cbz	r0, 8008324 <_vfiprintf_r+0x18>
 800831c:	6983      	ldr	r3, [r0, #24]
 800831e:	b90b      	cbnz	r3, 8008324 <_vfiprintf_r+0x18>
 8008320:	f000 fcc8 	bl	8008cb4 <__sinit>
 8008324:	4b89      	ldr	r3, [pc, #548]	; (800854c <_vfiprintf_r+0x240>)
 8008326:	429d      	cmp	r5, r3
 8008328:	d11b      	bne.n	8008362 <_vfiprintf_r+0x56>
 800832a:	6875      	ldr	r5, [r6, #4]
 800832c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800832e:	07d9      	lsls	r1, r3, #31
 8008330:	d405      	bmi.n	800833e <_vfiprintf_r+0x32>
 8008332:	89ab      	ldrh	r3, [r5, #12]
 8008334:	059a      	lsls	r2, r3, #22
 8008336:	d402      	bmi.n	800833e <_vfiprintf_r+0x32>
 8008338:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800833a:	f000 fd59 	bl	8008df0 <__retarget_lock_acquire_recursive>
 800833e:	89ab      	ldrh	r3, [r5, #12]
 8008340:	071b      	lsls	r3, r3, #28
 8008342:	d501      	bpl.n	8008348 <_vfiprintf_r+0x3c>
 8008344:	692b      	ldr	r3, [r5, #16]
 8008346:	b9eb      	cbnz	r3, 8008384 <_vfiprintf_r+0x78>
 8008348:	4629      	mov	r1, r5
 800834a:	4630      	mov	r0, r6
 800834c:	f000 fb22 	bl	8008994 <__swsetup_r>
 8008350:	b1c0      	cbz	r0, 8008384 <_vfiprintf_r+0x78>
 8008352:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008354:	07dc      	lsls	r4, r3, #31
 8008356:	d50e      	bpl.n	8008376 <_vfiprintf_r+0x6a>
 8008358:	f04f 30ff 	mov.w	r0, #4294967295
 800835c:	b01d      	add	sp, #116	; 0x74
 800835e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008362:	4b7b      	ldr	r3, [pc, #492]	; (8008550 <_vfiprintf_r+0x244>)
 8008364:	429d      	cmp	r5, r3
 8008366:	d101      	bne.n	800836c <_vfiprintf_r+0x60>
 8008368:	68b5      	ldr	r5, [r6, #8]
 800836a:	e7df      	b.n	800832c <_vfiprintf_r+0x20>
 800836c:	4b79      	ldr	r3, [pc, #484]	; (8008554 <_vfiprintf_r+0x248>)
 800836e:	429d      	cmp	r5, r3
 8008370:	bf08      	it	eq
 8008372:	68f5      	ldreq	r5, [r6, #12]
 8008374:	e7da      	b.n	800832c <_vfiprintf_r+0x20>
 8008376:	89ab      	ldrh	r3, [r5, #12]
 8008378:	0598      	lsls	r0, r3, #22
 800837a:	d4ed      	bmi.n	8008358 <_vfiprintf_r+0x4c>
 800837c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800837e:	f000 fd38 	bl	8008df2 <__retarget_lock_release_recursive>
 8008382:	e7e9      	b.n	8008358 <_vfiprintf_r+0x4c>
 8008384:	2300      	movs	r3, #0
 8008386:	9309      	str	r3, [sp, #36]	; 0x24
 8008388:	2320      	movs	r3, #32
 800838a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800838e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008392:	2330      	movs	r3, #48	; 0x30
 8008394:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008558 <_vfiprintf_r+0x24c>
 8008398:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800839c:	f04f 0901 	mov.w	r9, #1
 80083a0:	4623      	mov	r3, r4
 80083a2:	469a      	mov	sl, r3
 80083a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083a8:	b10a      	cbz	r2, 80083ae <_vfiprintf_r+0xa2>
 80083aa:	2a25      	cmp	r2, #37	; 0x25
 80083ac:	d1f9      	bne.n	80083a2 <_vfiprintf_r+0x96>
 80083ae:	ebba 0b04 	subs.w	fp, sl, r4
 80083b2:	d00b      	beq.n	80083cc <_vfiprintf_r+0xc0>
 80083b4:	465b      	mov	r3, fp
 80083b6:	4622      	mov	r2, r4
 80083b8:	4629      	mov	r1, r5
 80083ba:	4630      	mov	r0, r6
 80083bc:	f7ff ff93 	bl	80082e6 <__sfputs_r>
 80083c0:	3001      	adds	r0, #1
 80083c2:	f000 80aa 	beq.w	800851a <_vfiprintf_r+0x20e>
 80083c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083c8:	445a      	add	r2, fp
 80083ca:	9209      	str	r2, [sp, #36]	; 0x24
 80083cc:	f89a 3000 	ldrb.w	r3, [sl]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f000 80a2 	beq.w	800851a <_vfiprintf_r+0x20e>
 80083d6:	2300      	movs	r3, #0
 80083d8:	f04f 32ff 	mov.w	r2, #4294967295
 80083dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083e0:	f10a 0a01 	add.w	sl, sl, #1
 80083e4:	9304      	str	r3, [sp, #16]
 80083e6:	9307      	str	r3, [sp, #28]
 80083e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083ec:	931a      	str	r3, [sp, #104]	; 0x68
 80083ee:	4654      	mov	r4, sl
 80083f0:	2205      	movs	r2, #5
 80083f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083f6:	4858      	ldr	r0, [pc, #352]	; (8008558 <_vfiprintf_r+0x24c>)
 80083f8:	f7f7 fef2 	bl	80001e0 <memchr>
 80083fc:	9a04      	ldr	r2, [sp, #16]
 80083fe:	b9d8      	cbnz	r0, 8008438 <_vfiprintf_r+0x12c>
 8008400:	06d1      	lsls	r1, r2, #27
 8008402:	bf44      	itt	mi
 8008404:	2320      	movmi	r3, #32
 8008406:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800840a:	0713      	lsls	r3, r2, #28
 800840c:	bf44      	itt	mi
 800840e:	232b      	movmi	r3, #43	; 0x2b
 8008410:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008414:	f89a 3000 	ldrb.w	r3, [sl]
 8008418:	2b2a      	cmp	r3, #42	; 0x2a
 800841a:	d015      	beq.n	8008448 <_vfiprintf_r+0x13c>
 800841c:	9a07      	ldr	r2, [sp, #28]
 800841e:	4654      	mov	r4, sl
 8008420:	2000      	movs	r0, #0
 8008422:	f04f 0c0a 	mov.w	ip, #10
 8008426:	4621      	mov	r1, r4
 8008428:	f811 3b01 	ldrb.w	r3, [r1], #1
 800842c:	3b30      	subs	r3, #48	; 0x30
 800842e:	2b09      	cmp	r3, #9
 8008430:	d94e      	bls.n	80084d0 <_vfiprintf_r+0x1c4>
 8008432:	b1b0      	cbz	r0, 8008462 <_vfiprintf_r+0x156>
 8008434:	9207      	str	r2, [sp, #28]
 8008436:	e014      	b.n	8008462 <_vfiprintf_r+0x156>
 8008438:	eba0 0308 	sub.w	r3, r0, r8
 800843c:	fa09 f303 	lsl.w	r3, r9, r3
 8008440:	4313      	orrs	r3, r2
 8008442:	9304      	str	r3, [sp, #16]
 8008444:	46a2      	mov	sl, r4
 8008446:	e7d2      	b.n	80083ee <_vfiprintf_r+0xe2>
 8008448:	9b03      	ldr	r3, [sp, #12]
 800844a:	1d19      	adds	r1, r3, #4
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	9103      	str	r1, [sp, #12]
 8008450:	2b00      	cmp	r3, #0
 8008452:	bfbb      	ittet	lt
 8008454:	425b      	neglt	r3, r3
 8008456:	f042 0202 	orrlt.w	r2, r2, #2
 800845a:	9307      	strge	r3, [sp, #28]
 800845c:	9307      	strlt	r3, [sp, #28]
 800845e:	bfb8      	it	lt
 8008460:	9204      	strlt	r2, [sp, #16]
 8008462:	7823      	ldrb	r3, [r4, #0]
 8008464:	2b2e      	cmp	r3, #46	; 0x2e
 8008466:	d10c      	bne.n	8008482 <_vfiprintf_r+0x176>
 8008468:	7863      	ldrb	r3, [r4, #1]
 800846a:	2b2a      	cmp	r3, #42	; 0x2a
 800846c:	d135      	bne.n	80084da <_vfiprintf_r+0x1ce>
 800846e:	9b03      	ldr	r3, [sp, #12]
 8008470:	1d1a      	adds	r2, r3, #4
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	9203      	str	r2, [sp, #12]
 8008476:	2b00      	cmp	r3, #0
 8008478:	bfb8      	it	lt
 800847a:	f04f 33ff 	movlt.w	r3, #4294967295
 800847e:	3402      	adds	r4, #2
 8008480:	9305      	str	r3, [sp, #20]
 8008482:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008568 <_vfiprintf_r+0x25c>
 8008486:	7821      	ldrb	r1, [r4, #0]
 8008488:	2203      	movs	r2, #3
 800848a:	4650      	mov	r0, sl
 800848c:	f7f7 fea8 	bl	80001e0 <memchr>
 8008490:	b140      	cbz	r0, 80084a4 <_vfiprintf_r+0x198>
 8008492:	2340      	movs	r3, #64	; 0x40
 8008494:	eba0 000a 	sub.w	r0, r0, sl
 8008498:	fa03 f000 	lsl.w	r0, r3, r0
 800849c:	9b04      	ldr	r3, [sp, #16]
 800849e:	4303      	orrs	r3, r0
 80084a0:	3401      	adds	r4, #1
 80084a2:	9304      	str	r3, [sp, #16]
 80084a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084a8:	482c      	ldr	r0, [pc, #176]	; (800855c <_vfiprintf_r+0x250>)
 80084aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084ae:	2206      	movs	r2, #6
 80084b0:	f7f7 fe96 	bl	80001e0 <memchr>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	d03f      	beq.n	8008538 <_vfiprintf_r+0x22c>
 80084b8:	4b29      	ldr	r3, [pc, #164]	; (8008560 <_vfiprintf_r+0x254>)
 80084ba:	bb1b      	cbnz	r3, 8008504 <_vfiprintf_r+0x1f8>
 80084bc:	9b03      	ldr	r3, [sp, #12]
 80084be:	3307      	adds	r3, #7
 80084c0:	f023 0307 	bic.w	r3, r3, #7
 80084c4:	3308      	adds	r3, #8
 80084c6:	9303      	str	r3, [sp, #12]
 80084c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ca:	443b      	add	r3, r7
 80084cc:	9309      	str	r3, [sp, #36]	; 0x24
 80084ce:	e767      	b.n	80083a0 <_vfiprintf_r+0x94>
 80084d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80084d4:	460c      	mov	r4, r1
 80084d6:	2001      	movs	r0, #1
 80084d8:	e7a5      	b.n	8008426 <_vfiprintf_r+0x11a>
 80084da:	2300      	movs	r3, #0
 80084dc:	3401      	adds	r4, #1
 80084de:	9305      	str	r3, [sp, #20]
 80084e0:	4619      	mov	r1, r3
 80084e2:	f04f 0c0a 	mov.w	ip, #10
 80084e6:	4620      	mov	r0, r4
 80084e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084ec:	3a30      	subs	r2, #48	; 0x30
 80084ee:	2a09      	cmp	r2, #9
 80084f0:	d903      	bls.n	80084fa <_vfiprintf_r+0x1ee>
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d0c5      	beq.n	8008482 <_vfiprintf_r+0x176>
 80084f6:	9105      	str	r1, [sp, #20]
 80084f8:	e7c3      	b.n	8008482 <_vfiprintf_r+0x176>
 80084fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80084fe:	4604      	mov	r4, r0
 8008500:	2301      	movs	r3, #1
 8008502:	e7f0      	b.n	80084e6 <_vfiprintf_r+0x1da>
 8008504:	ab03      	add	r3, sp, #12
 8008506:	9300      	str	r3, [sp, #0]
 8008508:	462a      	mov	r2, r5
 800850a:	4b16      	ldr	r3, [pc, #88]	; (8008564 <_vfiprintf_r+0x258>)
 800850c:	a904      	add	r1, sp, #16
 800850e:	4630      	mov	r0, r6
 8008510:	f3af 8000 	nop.w
 8008514:	4607      	mov	r7, r0
 8008516:	1c78      	adds	r0, r7, #1
 8008518:	d1d6      	bne.n	80084c8 <_vfiprintf_r+0x1bc>
 800851a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800851c:	07d9      	lsls	r1, r3, #31
 800851e:	d405      	bmi.n	800852c <_vfiprintf_r+0x220>
 8008520:	89ab      	ldrh	r3, [r5, #12]
 8008522:	059a      	lsls	r2, r3, #22
 8008524:	d402      	bmi.n	800852c <_vfiprintf_r+0x220>
 8008526:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008528:	f000 fc63 	bl	8008df2 <__retarget_lock_release_recursive>
 800852c:	89ab      	ldrh	r3, [r5, #12]
 800852e:	065b      	lsls	r3, r3, #25
 8008530:	f53f af12 	bmi.w	8008358 <_vfiprintf_r+0x4c>
 8008534:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008536:	e711      	b.n	800835c <_vfiprintf_r+0x50>
 8008538:	ab03      	add	r3, sp, #12
 800853a:	9300      	str	r3, [sp, #0]
 800853c:	462a      	mov	r2, r5
 800853e:	4b09      	ldr	r3, [pc, #36]	; (8008564 <_vfiprintf_r+0x258>)
 8008540:	a904      	add	r1, sp, #16
 8008542:	4630      	mov	r0, r6
 8008544:	f000 f880 	bl	8008648 <_printf_i>
 8008548:	e7e4      	b.n	8008514 <_vfiprintf_r+0x208>
 800854a:	bf00      	nop
 800854c:	080098a0 	.word	0x080098a0
 8008550:	080098c0 	.word	0x080098c0
 8008554:	08009880 	.word	0x08009880
 8008558:	0800984c 	.word	0x0800984c
 800855c:	08009856 	.word	0x08009856
 8008560:	00000000 	.word	0x00000000
 8008564:	080082e7 	.word	0x080082e7
 8008568:	08009852 	.word	0x08009852

0800856c <_printf_common>:
 800856c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008570:	4616      	mov	r6, r2
 8008572:	4699      	mov	r9, r3
 8008574:	688a      	ldr	r2, [r1, #8]
 8008576:	690b      	ldr	r3, [r1, #16]
 8008578:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800857c:	4293      	cmp	r3, r2
 800857e:	bfb8      	it	lt
 8008580:	4613      	movlt	r3, r2
 8008582:	6033      	str	r3, [r6, #0]
 8008584:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008588:	4607      	mov	r7, r0
 800858a:	460c      	mov	r4, r1
 800858c:	b10a      	cbz	r2, 8008592 <_printf_common+0x26>
 800858e:	3301      	adds	r3, #1
 8008590:	6033      	str	r3, [r6, #0]
 8008592:	6823      	ldr	r3, [r4, #0]
 8008594:	0699      	lsls	r1, r3, #26
 8008596:	bf42      	ittt	mi
 8008598:	6833      	ldrmi	r3, [r6, #0]
 800859a:	3302      	addmi	r3, #2
 800859c:	6033      	strmi	r3, [r6, #0]
 800859e:	6825      	ldr	r5, [r4, #0]
 80085a0:	f015 0506 	ands.w	r5, r5, #6
 80085a4:	d106      	bne.n	80085b4 <_printf_common+0x48>
 80085a6:	f104 0a19 	add.w	sl, r4, #25
 80085aa:	68e3      	ldr	r3, [r4, #12]
 80085ac:	6832      	ldr	r2, [r6, #0]
 80085ae:	1a9b      	subs	r3, r3, r2
 80085b0:	42ab      	cmp	r3, r5
 80085b2:	dc26      	bgt.n	8008602 <_printf_common+0x96>
 80085b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085b8:	1e13      	subs	r3, r2, #0
 80085ba:	6822      	ldr	r2, [r4, #0]
 80085bc:	bf18      	it	ne
 80085be:	2301      	movne	r3, #1
 80085c0:	0692      	lsls	r2, r2, #26
 80085c2:	d42b      	bmi.n	800861c <_printf_common+0xb0>
 80085c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085c8:	4649      	mov	r1, r9
 80085ca:	4638      	mov	r0, r7
 80085cc:	47c0      	blx	r8
 80085ce:	3001      	adds	r0, #1
 80085d0:	d01e      	beq.n	8008610 <_printf_common+0xa4>
 80085d2:	6823      	ldr	r3, [r4, #0]
 80085d4:	68e5      	ldr	r5, [r4, #12]
 80085d6:	6832      	ldr	r2, [r6, #0]
 80085d8:	f003 0306 	and.w	r3, r3, #6
 80085dc:	2b04      	cmp	r3, #4
 80085de:	bf08      	it	eq
 80085e0:	1aad      	subeq	r5, r5, r2
 80085e2:	68a3      	ldr	r3, [r4, #8]
 80085e4:	6922      	ldr	r2, [r4, #16]
 80085e6:	bf0c      	ite	eq
 80085e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085ec:	2500      	movne	r5, #0
 80085ee:	4293      	cmp	r3, r2
 80085f0:	bfc4      	itt	gt
 80085f2:	1a9b      	subgt	r3, r3, r2
 80085f4:	18ed      	addgt	r5, r5, r3
 80085f6:	2600      	movs	r6, #0
 80085f8:	341a      	adds	r4, #26
 80085fa:	42b5      	cmp	r5, r6
 80085fc:	d11a      	bne.n	8008634 <_printf_common+0xc8>
 80085fe:	2000      	movs	r0, #0
 8008600:	e008      	b.n	8008614 <_printf_common+0xa8>
 8008602:	2301      	movs	r3, #1
 8008604:	4652      	mov	r2, sl
 8008606:	4649      	mov	r1, r9
 8008608:	4638      	mov	r0, r7
 800860a:	47c0      	blx	r8
 800860c:	3001      	adds	r0, #1
 800860e:	d103      	bne.n	8008618 <_printf_common+0xac>
 8008610:	f04f 30ff 	mov.w	r0, #4294967295
 8008614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008618:	3501      	adds	r5, #1
 800861a:	e7c6      	b.n	80085aa <_printf_common+0x3e>
 800861c:	18e1      	adds	r1, r4, r3
 800861e:	1c5a      	adds	r2, r3, #1
 8008620:	2030      	movs	r0, #48	; 0x30
 8008622:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008626:	4422      	add	r2, r4
 8008628:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800862c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008630:	3302      	adds	r3, #2
 8008632:	e7c7      	b.n	80085c4 <_printf_common+0x58>
 8008634:	2301      	movs	r3, #1
 8008636:	4622      	mov	r2, r4
 8008638:	4649      	mov	r1, r9
 800863a:	4638      	mov	r0, r7
 800863c:	47c0      	blx	r8
 800863e:	3001      	adds	r0, #1
 8008640:	d0e6      	beq.n	8008610 <_printf_common+0xa4>
 8008642:	3601      	adds	r6, #1
 8008644:	e7d9      	b.n	80085fa <_printf_common+0x8e>
	...

08008648 <_printf_i>:
 8008648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800864c:	7e0f      	ldrb	r7, [r1, #24]
 800864e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008650:	2f78      	cmp	r7, #120	; 0x78
 8008652:	4691      	mov	r9, r2
 8008654:	4680      	mov	r8, r0
 8008656:	460c      	mov	r4, r1
 8008658:	469a      	mov	sl, r3
 800865a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800865e:	d807      	bhi.n	8008670 <_printf_i+0x28>
 8008660:	2f62      	cmp	r7, #98	; 0x62
 8008662:	d80a      	bhi.n	800867a <_printf_i+0x32>
 8008664:	2f00      	cmp	r7, #0
 8008666:	f000 80d8 	beq.w	800881a <_printf_i+0x1d2>
 800866a:	2f58      	cmp	r7, #88	; 0x58
 800866c:	f000 80a3 	beq.w	80087b6 <_printf_i+0x16e>
 8008670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008674:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008678:	e03a      	b.n	80086f0 <_printf_i+0xa8>
 800867a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800867e:	2b15      	cmp	r3, #21
 8008680:	d8f6      	bhi.n	8008670 <_printf_i+0x28>
 8008682:	a101      	add	r1, pc, #4	; (adr r1, 8008688 <_printf_i+0x40>)
 8008684:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008688:	080086e1 	.word	0x080086e1
 800868c:	080086f5 	.word	0x080086f5
 8008690:	08008671 	.word	0x08008671
 8008694:	08008671 	.word	0x08008671
 8008698:	08008671 	.word	0x08008671
 800869c:	08008671 	.word	0x08008671
 80086a0:	080086f5 	.word	0x080086f5
 80086a4:	08008671 	.word	0x08008671
 80086a8:	08008671 	.word	0x08008671
 80086ac:	08008671 	.word	0x08008671
 80086b0:	08008671 	.word	0x08008671
 80086b4:	08008801 	.word	0x08008801
 80086b8:	08008725 	.word	0x08008725
 80086bc:	080087e3 	.word	0x080087e3
 80086c0:	08008671 	.word	0x08008671
 80086c4:	08008671 	.word	0x08008671
 80086c8:	08008823 	.word	0x08008823
 80086cc:	08008671 	.word	0x08008671
 80086d0:	08008725 	.word	0x08008725
 80086d4:	08008671 	.word	0x08008671
 80086d8:	08008671 	.word	0x08008671
 80086dc:	080087eb 	.word	0x080087eb
 80086e0:	682b      	ldr	r3, [r5, #0]
 80086e2:	1d1a      	adds	r2, r3, #4
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	602a      	str	r2, [r5, #0]
 80086e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086f0:	2301      	movs	r3, #1
 80086f2:	e0a3      	b.n	800883c <_printf_i+0x1f4>
 80086f4:	6820      	ldr	r0, [r4, #0]
 80086f6:	6829      	ldr	r1, [r5, #0]
 80086f8:	0606      	lsls	r6, r0, #24
 80086fa:	f101 0304 	add.w	r3, r1, #4
 80086fe:	d50a      	bpl.n	8008716 <_printf_i+0xce>
 8008700:	680e      	ldr	r6, [r1, #0]
 8008702:	602b      	str	r3, [r5, #0]
 8008704:	2e00      	cmp	r6, #0
 8008706:	da03      	bge.n	8008710 <_printf_i+0xc8>
 8008708:	232d      	movs	r3, #45	; 0x2d
 800870a:	4276      	negs	r6, r6
 800870c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008710:	485e      	ldr	r0, [pc, #376]	; (800888c <_printf_i+0x244>)
 8008712:	230a      	movs	r3, #10
 8008714:	e019      	b.n	800874a <_printf_i+0x102>
 8008716:	680e      	ldr	r6, [r1, #0]
 8008718:	602b      	str	r3, [r5, #0]
 800871a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800871e:	bf18      	it	ne
 8008720:	b236      	sxthne	r6, r6
 8008722:	e7ef      	b.n	8008704 <_printf_i+0xbc>
 8008724:	682b      	ldr	r3, [r5, #0]
 8008726:	6820      	ldr	r0, [r4, #0]
 8008728:	1d19      	adds	r1, r3, #4
 800872a:	6029      	str	r1, [r5, #0]
 800872c:	0601      	lsls	r1, r0, #24
 800872e:	d501      	bpl.n	8008734 <_printf_i+0xec>
 8008730:	681e      	ldr	r6, [r3, #0]
 8008732:	e002      	b.n	800873a <_printf_i+0xf2>
 8008734:	0646      	lsls	r6, r0, #25
 8008736:	d5fb      	bpl.n	8008730 <_printf_i+0xe8>
 8008738:	881e      	ldrh	r6, [r3, #0]
 800873a:	4854      	ldr	r0, [pc, #336]	; (800888c <_printf_i+0x244>)
 800873c:	2f6f      	cmp	r7, #111	; 0x6f
 800873e:	bf0c      	ite	eq
 8008740:	2308      	moveq	r3, #8
 8008742:	230a      	movne	r3, #10
 8008744:	2100      	movs	r1, #0
 8008746:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800874a:	6865      	ldr	r5, [r4, #4]
 800874c:	60a5      	str	r5, [r4, #8]
 800874e:	2d00      	cmp	r5, #0
 8008750:	bfa2      	ittt	ge
 8008752:	6821      	ldrge	r1, [r4, #0]
 8008754:	f021 0104 	bicge.w	r1, r1, #4
 8008758:	6021      	strge	r1, [r4, #0]
 800875a:	b90e      	cbnz	r6, 8008760 <_printf_i+0x118>
 800875c:	2d00      	cmp	r5, #0
 800875e:	d04d      	beq.n	80087fc <_printf_i+0x1b4>
 8008760:	4615      	mov	r5, r2
 8008762:	fbb6 f1f3 	udiv	r1, r6, r3
 8008766:	fb03 6711 	mls	r7, r3, r1, r6
 800876a:	5dc7      	ldrb	r7, [r0, r7]
 800876c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008770:	4637      	mov	r7, r6
 8008772:	42bb      	cmp	r3, r7
 8008774:	460e      	mov	r6, r1
 8008776:	d9f4      	bls.n	8008762 <_printf_i+0x11a>
 8008778:	2b08      	cmp	r3, #8
 800877a:	d10b      	bne.n	8008794 <_printf_i+0x14c>
 800877c:	6823      	ldr	r3, [r4, #0]
 800877e:	07de      	lsls	r6, r3, #31
 8008780:	d508      	bpl.n	8008794 <_printf_i+0x14c>
 8008782:	6923      	ldr	r3, [r4, #16]
 8008784:	6861      	ldr	r1, [r4, #4]
 8008786:	4299      	cmp	r1, r3
 8008788:	bfde      	ittt	le
 800878a:	2330      	movle	r3, #48	; 0x30
 800878c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008790:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008794:	1b52      	subs	r2, r2, r5
 8008796:	6122      	str	r2, [r4, #16]
 8008798:	f8cd a000 	str.w	sl, [sp]
 800879c:	464b      	mov	r3, r9
 800879e:	aa03      	add	r2, sp, #12
 80087a0:	4621      	mov	r1, r4
 80087a2:	4640      	mov	r0, r8
 80087a4:	f7ff fee2 	bl	800856c <_printf_common>
 80087a8:	3001      	adds	r0, #1
 80087aa:	d14c      	bne.n	8008846 <_printf_i+0x1fe>
 80087ac:	f04f 30ff 	mov.w	r0, #4294967295
 80087b0:	b004      	add	sp, #16
 80087b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b6:	4835      	ldr	r0, [pc, #212]	; (800888c <_printf_i+0x244>)
 80087b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80087bc:	6829      	ldr	r1, [r5, #0]
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80087c4:	6029      	str	r1, [r5, #0]
 80087c6:	061d      	lsls	r5, r3, #24
 80087c8:	d514      	bpl.n	80087f4 <_printf_i+0x1ac>
 80087ca:	07df      	lsls	r7, r3, #31
 80087cc:	bf44      	itt	mi
 80087ce:	f043 0320 	orrmi.w	r3, r3, #32
 80087d2:	6023      	strmi	r3, [r4, #0]
 80087d4:	b91e      	cbnz	r6, 80087de <_printf_i+0x196>
 80087d6:	6823      	ldr	r3, [r4, #0]
 80087d8:	f023 0320 	bic.w	r3, r3, #32
 80087dc:	6023      	str	r3, [r4, #0]
 80087de:	2310      	movs	r3, #16
 80087e0:	e7b0      	b.n	8008744 <_printf_i+0xfc>
 80087e2:	6823      	ldr	r3, [r4, #0]
 80087e4:	f043 0320 	orr.w	r3, r3, #32
 80087e8:	6023      	str	r3, [r4, #0]
 80087ea:	2378      	movs	r3, #120	; 0x78
 80087ec:	4828      	ldr	r0, [pc, #160]	; (8008890 <_printf_i+0x248>)
 80087ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087f2:	e7e3      	b.n	80087bc <_printf_i+0x174>
 80087f4:	0659      	lsls	r1, r3, #25
 80087f6:	bf48      	it	mi
 80087f8:	b2b6      	uxthmi	r6, r6
 80087fa:	e7e6      	b.n	80087ca <_printf_i+0x182>
 80087fc:	4615      	mov	r5, r2
 80087fe:	e7bb      	b.n	8008778 <_printf_i+0x130>
 8008800:	682b      	ldr	r3, [r5, #0]
 8008802:	6826      	ldr	r6, [r4, #0]
 8008804:	6961      	ldr	r1, [r4, #20]
 8008806:	1d18      	adds	r0, r3, #4
 8008808:	6028      	str	r0, [r5, #0]
 800880a:	0635      	lsls	r5, r6, #24
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	d501      	bpl.n	8008814 <_printf_i+0x1cc>
 8008810:	6019      	str	r1, [r3, #0]
 8008812:	e002      	b.n	800881a <_printf_i+0x1d2>
 8008814:	0670      	lsls	r0, r6, #25
 8008816:	d5fb      	bpl.n	8008810 <_printf_i+0x1c8>
 8008818:	8019      	strh	r1, [r3, #0]
 800881a:	2300      	movs	r3, #0
 800881c:	6123      	str	r3, [r4, #16]
 800881e:	4615      	mov	r5, r2
 8008820:	e7ba      	b.n	8008798 <_printf_i+0x150>
 8008822:	682b      	ldr	r3, [r5, #0]
 8008824:	1d1a      	adds	r2, r3, #4
 8008826:	602a      	str	r2, [r5, #0]
 8008828:	681d      	ldr	r5, [r3, #0]
 800882a:	6862      	ldr	r2, [r4, #4]
 800882c:	2100      	movs	r1, #0
 800882e:	4628      	mov	r0, r5
 8008830:	f7f7 fcd6 	bl	80001e0 <memchr>
 8008834:	b108      	cbz	r0, 800883a <_printf_i+0x1f2>
 8008836:	1b40      	subs	r0, r0, r5
 8008838:	6060      	str	r0, [r4, #4]
 800883a:	6863      	ldr	r3, [r4, #4]
 800883c:	6123      	str	r3, [r4, #16]
 800883e:	2300      	movs	r3, #0
 8008840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008844:	e7a8      	b.n	8008798 <_printf_i+0x150>
 8008846:	6923      	ldr	r3, [r4, #16]
 8008848:	462a      	mov	r2, r5
 800884a:	4649      	mov	r1, r9
 800884c:	4640      	mov	r0, r8
 800884e:	47d0      	blx	sl
 8008850:	3001      	adds	r0, #1
 8008852:	d0ab      	beq.n	80087ac <_printf_i+0x164>
 8008854:	6823      	ldr	r3, [r4, #0]
 8008856:	079b      	lsls	r3, r3, #30
 8008858:	d413      	bmi.n	8008882 <_printf_i+0x23a>
 800885a:	68e0      	ldr	r0, [r4, #12]
 800885c:	9b03      	ldr	r3, [sp, #12]
 800885e:	4298      	cmp	r0, r3
 8008860:	bfb8      	it	lt
 8008862:	4618      	movlt	r0, r3
 8008864:	e7a4      	b.n	80087b0 <_printf_i+0x168>
 8008866:	2301      	movs	r3, #1
 8008868:	4632      	mov	r2, r6
 800886a:	4649      	mov	r1, r9
 800886c:	4640      	mov	r0, r8
 800886e:	47d0      	blx	sl
 8008870:	3001      	adds	r0, #1
 8008872:	d09b      	beq.n	80087ac <_printf_i+0x164>
 8008874:	3501      	adds	r5, #1
 8008876:	68e3      	ldr	r3, [r4, #12]
 8008878:	9903      	ldr	r1, [sp, #12]
 800887a:	1a5b      	subs	r3, r3, r1
 800887c:	42ab      	cmp	r3, r5
 800887e:	dcf2      	bgt.n	8008866 <_printf_i+0x21e>
 8008880:	e7eb      	b.n	800885a <_printf_i+0x212>
 8008882:	2500      	movs	r5, #0
 8008884:	f104 0619 	add.w	r6, r4, #25
 8008888:	e7f5      	b.n	8008876 <_printf_i+0x22e>
 800888a:	bf00      	nop
 800888c:	0800985d 	.word	0x0800985d
 8008890:	0800986e 	.word	0x0800986e
 8008894:	00000000 	.word	0x00000000

08008898 <nan>:
 8008898:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80088a0 <nan+0x8>
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	00000000 	.word	0x00000000
 80088a4:	7ff80000 	.word	0x7ff80000

080088a8 <_sbrk_r>:
 80088a8:	b538      	push	{r3, r4, r5, lr}
 80088aa:	4d06      	ldr	r5, [pc, #24]	; (80088c4 <_sbrk_r+0x1c>)
 80088ac:	2300      	movs	r3, #0
 80088ae:	4604      	mov	r4, r0
 80088b0:	4608      	mov	r0, r1
 80088b2:	602b      	str	r3, [r5, #0]
 80088b4:	f7f9 fbb6 	bl	8002024 <_sbrk>
 80088b8:	1c43      	adds	r3, r0, #1
 80088ba:	d102      	bne.n	80088c2 <_sbrk_r+0x1a>
 80088bc:	682b      	ldr	r3, [r5, #0]
 80088be:	b103      	cbz	r3, 80088c2 <_sbrk_r+0x1a>
 80088c0:	6023      	str	r3, [r4, #0]
 80088c2:	bd38      	pop	{r3, r4, r5, pc}
 80088c4:	20000798 	.word	0x20000798

080088c8 <nanf>:
 80088c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80088d0 <nanf+0x8>
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	7fc00000 	.word	0x7fc00000

080088d4 <__swbuf_r>:
 80088d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d6:	460e      	mov	r6, r1
 80088d8:	4614      	mov	r4, r2
 80088da:	4605      	mov	r5, r0
 80088dc:	b118      	cbz	r0, 80088e6 <__swbuf_r+0x12>
 80088de:	6983      	ldr	r3, [r0, #24]
 80088e0:	b90b      	cbnz	r3, 80088e6 <__swbuf_r+0x12>
 80088e2:	f000 f9e7 	bl	8008cb4 <__sinit>
 80088e6:	4b21      	ldr	r3, [pc, #132]	; (800896c <__swbuf_r+0x98>)
 80088e8:	429c      	cmp	r4, r3
 80088ea:	d12b      	bne.n	8008944 <__swbuf_r+0x70>
 80088ec:	686c      	ldr	r4, [r5, #4]
 80088ee:	69a3      	ldr	r3, [r4, #24]
 80088f0:	60a3      	str	r3, [r4, #8]
 80088f2:	89a3      	ldrh	r3, [r4, #12]
 80088f4:	071a      	lsls	r2, r3, #28
 80088f6:	d52f      	bpl.n	8008958 <__swbuf_r+0x84>
 80088f8:	6923      	ldr	r3, [r4, #16]
 80088fa:	b36b      	cbz	r3, 8008958 <__swbuf_r+0x84>
 80088fc:	6923      	ldr	r3, [r4, #16]
 80088fe:	6820      	ldr	r0, [r4, #0]
 8008900:	1ac0      	subs	r0, r0, r3
 8008902:	6963      	ldr	r3, [r4, #20]
 8008904:	b2f6      	uxtb	r6, r6
 8008906:	4283      	cmp	r3, r0
 8008908:	4637      	mov	r7, r6
 800890a:	dc04      	bgt.n	8008916 <__swbuf_r+0x42>
 800890c:	4621      	mov	r1, r4
 800890e:	4628      	mov	r0, r5
 8008910:	f000 f93c 	bl	8008b8c <_fflush_r>
 8008914:	bb30      	cbnz	r0, 8008964 <__swbuf_r+0x90>
 8008916:	68a3      	ldr	r3, [r4, #8]
 8008918:	3b01      	subs	r3, #1
 800891a:	60a3      	str	r3, [r4, #8]
 800891c:	6823      	ldr	r3, [r4, #0]
 800891e:	1c5a      	adds	r2, r3, #1
 8008920:	6022      	str	r2, [r4, #0]
 8008922:	701e      	strb	r6, [r3, #0]
 8008924:	6963      	ldr	r3, [r4, #20]
 8008926:	3001      	adds	r0, #1
 8008928:	4283      	cmp	r3, r0
 800892a:	d004      	beq.n	8008936 <__swbuf_r+0x62>
 800892c:	89a3      	ldrh	r3, [r4, #12]
 800892e:	07db      	lsls	r3, r3, #31
 8008930:	d506      	bpl.n	8008940 <__swbuf_r+0x6c>
 8008932:	2e0a      	cmp	r6, #10
 8008934:	d104      	bne.n	8008940 <__swbuf_r+0x6c>
 8008936:	4621      	mov	r1, r4
 8008938:	4628      	mov	r0, r5
 800893a:	f000 f927 	bl	8008b8c <_fflush_r>
 800893e:	b988      	cbnz	r0, 8008964 <__swbuf_r+0x90>
 8008940:	4638      	mov	r0, r7
 8008942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008944:	4b0a      	ldr	r3, [pc, #40]	; (8008970 <__swbuf_r+0x9c>)
 8008946:	429c      	cmp	r4, r3
 8008948:	d101      	bne.n	800894e <__swbuf_r+0x7a>
 800894a:	68ac      	ldr	r4, [r5, #8]
 800894c:	e7cf      	b.n	80088ee <__swbuf_r+0x1a>
 800894e:	4b09      	ldr	r3, [pc, #36]	; (8008974 <__swbuf_r+0xa0>)
 8008950:	429c      	cmp	r4, r3
 8008952:	bf08      	it	eq
 8008954:	68ec      	ldreq	r4, [r5, #12]
 8008956:	e7ca      	b.n	80088ee <__swbuf_r+0x1a>
 8008958:	4621      	mov	r1, r4
 800895a:	4628      	mov	r0, r5
 800895c:	f000 f81a 	bl	8008994 <__swsetup_r>
 8008960:	2800      	cmp	r0, #0
 8008962:	d0cb      	beq.n	80088fc <__swbuf_r+0x28>
 8008964:	f04f 37ff 	mov.w	r7, #4294967295
 8008968:	e7ea      	b.n	8008940 <__swbuf_r+0x6c>
 800896a:	bf00      	nop
 800896c:	080098a0 	.word	0x080098a0
 8008970:	080098c0 	.word	0x080098c0
 8008974:	08009880 	.word	0x08009880

08008978 <__ascii_wctomb>:
 8008978:	b149      	cbz	r1, 800898e <__ascii_wctomb+0x16>
 800897a:	2aff      	cmp	r2, #255	; 0xff
 800897c:	bf85      	ittet	hi
 800897e:	238a      	movhi	r3, #138	; 0x8a
 8008980:	6003      	strhi	r3, [r0, #0]
 8008982:	700a      	strbls	r2, [r1, #0]
 8008984:	f04f 30ff 	movhi.w	r0, #4294967295
 8008988:	bf98      	it	ls
 800898a:	2001      	movls	r0, #1
 800898c:	4770      	bx	lr
 800898e:	4608      	mov	r0, r1
 8008990:	4770      	bx	lr
	...

08008994 <__swsetup_r>:
 8008994:	4b32      	ldr	r3, [pc, #200]	; (8008a60 <__swsetup_r+0xcc>)
 8008996:	b570      	push	{r4, r5, r6, lr}
 8008998:	681d      	ldr	r5, [r3, #0]
 800899a:	4606      	mov	r6, r0
 800899c:	460c      	mov	r4, r1
 800899e:	b125      	cbz	r5, 80089aa <__swsetup_r+0x16>
 80089a0:	69ab      	ldr	r3, [r5, #24]
 80089a2:	b913      	cbnz	r3, 80089aa <__swsetup_r+0x16>
 80089a4:	4628      	mov	r0, r5
 80089a6:	f000 f985 	bl	8008cb4 <__sinit>
 80089aa:	4b2e      	ldr	r3, [pc, #184]	; (8008a64 <__swsetup_r+0xd0>)
 80089ac:	429c      	cmp	r4, r3
 80089ae:	d10f      	bne.n	80089d0 <__swsetup_r+0x3c>
 80089b0:	686c      	ldr	r4, [r5, #4]
 80089b2:	89a3      	ldrh	r3, [r4, #12]
 80089b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089b8:	0719      	lsls	r1, r3, #28
 80089ba:	d42c      	bmi.n	8008a16 <__swsetup_r+0x82>
 80089bc:	06dd      	lsls	r5, r3, #27
 80089be:	d411      	bmi.n	80089e4 <__swsetup_r+0x50>
 80089c0:	2309      	movs	r3, #9
 80089c2:	6033      	str	r3, [r6, #0]
 80089c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80089c8:	81a3      	strh	r3, [r4, #12]
 80089ca:	f04f 30ff 	mov.w	r0, #4294967295
 80089ce:	e03e      	b.n	8008a4e <__swsetup_r+0xba>
 80089d0:	4b25      	ldr	r3, [pc, #148]	; (8008a68 <__swsetup_r+0xd4>)
 80089d2:	429c      	cmp	r4, r3
 80089d4:	d101      	bne.n	80089da <__swsetup_r+0x46>
 80089d6:	68ac      	ldr	r4, [r5, #8]
 80089d8:	e7eb      	b.n	80089b2 <__swsetup_r+0x1e>
 80089da:	4b24      	ldr	r3, [pc, #144]	; (8008a6c <__swsetup_r+0xd8>)
 80089dc:	429c      	cmp	r4, r3
 80089de:	bf08      	it	eq
 80089e0:	68ec      	ldreq	r4, [r5, #12]
 80089e2:	e7e6      	b.n	80089b2 <__swsetup_r+0x1e>
 80089e4:	0758      	lsls	r0, r3, #29
 80089e6:	d512      	bpl.n	8008a0e <__swsetup_r+0x7a>
 80089e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089ea:	b141      	cbz	r1, 80089fe <__swsetup_r+0x6a>
 80089ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089f0:	4299      	cmp	r1, r3
 80089f2:	d002      	beq.n	80089fa <__swsetup_r+0x66>
 80089f4:	4630      	mov	r0, r6
 80089f6:	f7ff fa23 	bl	8007e40 <_free_r>
 80089fa:	2300      	movs	r3, #0
 80089fc:	6363      	str	r3, [r4, #52]	; 0x34
 80089fe:	89a3      	ldrh	r3, [r4, #12]
 8008a00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a04:	81a3      	strh	r3, [r4, #12]
 8008a06:	2300      	movs	r3, #0
 8008a08:	6063      	str	r3, [r4, #4]
 8008a0a:	6923      	ldr	r3, [r4, #16]
 8008a0c:	6023      	str	r3, [r4, #0]
 8008a0e:	89a3      	ldrh	r3, [r4, #12]
 8008a10:	f043 0308 	orr.w	r3, r3, #8
 8008a14:	81a3      	strh	r3, [r4, #12]
 8008a16:	6923      	ldr	r3, [r4, #16]
 8008a18:	b94b      	cbnz	r3, 8008a2e <__swsetup_r+0x9a>
 8008a1a:	89a3      	ldrh	r3, [r4, #12]
 8008a1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a24:	d003      	beq.n	8008a2e <__swsetup_r+0x9a>
 8008a26:	4621      	mov	r1, r4
 8008a28:	4630      	mov	r0, r6
 8008a2a:	f000 fa09 	bl	8008e40 <__smakebuf_r>
 8008a2e:	89a0      	ldrh	r0, [r4, #12]
 8008a30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a34:	f010 0301 	ands.w	r3, r0, #1
 8008a38:	d00a      	beq.n	8008a50 <__swsetup_r+0xbc>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	60a3      	str	r3, [r4, #8]
 8008a3e:	6963      	ldr	r3, [r4, #20]
 8008a40:	425b      	negs	r3, r3
 8008a42:	61a3      	str	r3, [r4, #24]
 8008a44:	6923      	ldr	r3, [r4, #16]
 8008a46:	b943      	cbnz	r3, 8008a5a <__swsetup_r+0xc6>
 8008a48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a4c:	d1ba      	bne.n	80089c4 <__swsetup_r+0x30>
 8008a4e:	bd70      	pop	{r4, r5, r6, pc}
 8008a50:	0781      	lsls	r1, r0, #30
 8008a52:	bf58      	it	pl
 8008a54:	6963      	ldrpl	r3, [r4, #20]
 8008a56:	60a3      	str	r3, [r4, #8]
 8008a58:	e7f4      	b.n	8008a44 <__swsetup_r+0xb0>
 8008a5a:	2000      	movs	r0, #0
 8008a5c:	e7f7      	b.n	8008a4e <__swsetup_r+0xba>
 8008a5e:	bf00      	nop
 8008a60:	20000098 	.word	0x20000098
 8008a64:	080098a0 	.word	0x080098a0
 8008a68:	080098c0 	.word	0x080098c0
 8008a6c:	08009880 	.word	0x08009880

08008a70 <abort>:
 8008a70:	b508      	push	{r3, lr}
 8008a72:	2006      	movs	r0, #6
 8008a74:	f000 faa2 	bl	8008fbc <raise>
 8008a78:	2001      	movs	r0, #1
 8008a7a:	f7f9 fa5b 	bl	8001f34 <_exit>
	...

08008a80 <__sflush_r>:
 8008a80:	898a      	ldrh	r2, [r1, #12]
 8008a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a86:	4605      	mov	r5, r0
 8008a88:	0710      	lsls	r0, r2, #28
 8008a8a:	460c      	mov	r4, r1
 8008a8c:	d458      	bmi.n	8008b40 <__sflush_r+0xc0>
 8008a8e:	684b      	ldr	r3, [r1, #4]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	dc05      	bgt.n	8008aa0 <__sflush_r+0x20>
 8008a94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	dc02      	bgt.n	8008aa0 <__sflush_r+0x20>
 8008a9a:	2000      	movs	r0, #0
 8008a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008aa2:	2e00      	cmp	r6, #0
 8008aa4:	d0f9      	beq.n	8008a9a <__sflush_r+0x1a>
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008aac:	682f      	ldr	r7, [r5, #0]
 8008aae:	602b      	str	r3, [r5, #0]
 8008ab0:	d032      	beq.n	8008b18 <__sflush_r+0x98>
 8008ab2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ab4:	89a3      	ldrh	r3, [r4, #12]
 8008ab6:	075a      	lsls	r2, r3, #29
 8008ab8:	d505      	bpl.n	8008ac6 <__sflush_r+0x46>
 8008aba:	6863      	ldr	r3, [r4, #4]
 8008abc:	1ac0      	subs	r0, r0, r3
 8008abe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ac0:	b10b      	cbz	r3, 8008ac6 <__sflush_r+0x46>
 8008ac2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ac4:	1ac0      	subs	r0, r0, r3
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	4602      	mov	r2, r0
 8008aca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008acc:	6a21      	ldr	r1, [r4, #32]
 8008ace:	4628      	mov	r0, r5
 8008ad0:	47b0      	blx	r6
 8008ad2:	1c43      	adds	r3, r0, #1
 8008ad4:	89a3      	ldrh	r3, [r4, #12]
 8008ad6:	d106      	bne.n	8008ae6 <__sflush_r+0x66>
 8008ad8:	6829      	ldr	r1, [r5, #0]
 8008ada:	291d      	cmp	r1, #29
 8008adc:	d82c      	bhi.n	8008b38 <__sflush_r+0xb8>
 8008ade:	4a2a      	ldr	r2, [pc, #168]	; (8008b88 <__sflush_r+0x108>)
 8008ae0:	40ca      	lsrs	r2, r1
 8008ae2:	07d6      	lsls	r6, r2, #31
 8008ae4:	d528      	bpl.n	8008b38 <__sflush_r+0xb8>
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	6062      	str	r2, [r4, #4]
 8008aea:	04d9      	lsls	r1, r3, #19
 8008aec:	6922      	ldr	r2, [r4, #16]
 8008aee:	6022      	str	r2, [r4, #0]
 8008af0:	d504      	bpl.n	8008afc <__sflush_r+0x7c>
 8008af2:	1c42      	adds	r2, r0, #1
 8008af4:	d101      	bne.n	8008afa <__sflush_r+0x7a>
 8008af6:	682b      	ldr	r3, [r5, #0]
 8008af8:	b903      	cbnz	r3, 8008afc <__sflush_r+0x7c>
 8008afa:	6560      	str	r0, [r4, #84]	; 0x54
 8008afc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008afe:	602f      	str	r7, [r5, #0]
 8008b00:	2900      	cmp	r1, #0
 8008b02:	d0ca      	beq.n	8008a9a <__sflush_r+0x1a>
 8008b04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b08:	4299      	cmp	r1, r3
 8008b0a:	d002      	beq.n	8008b12 <__sflush_r+0x92>
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	f7ff f997 	bl	8007e40 <_free_r>
 8008b12:	2000      	movs	r0, #0
 8008b14:	6360      	str	r0, [r4, #52]	; 0x34
 8008b16:	e7c1      	b.n	8008a9c <__sflush_r+0x1c>
 8008b18:	6a21      	ldr	r1, [r4, #32]
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	47b0      	blx	r6
 8008b20:	1c41      	adds	r1, r0, #1
 8008b22:	d1c7      	bne.n	8008ab4 <__sflush_r+0x34>
 8008b24:	682b      	ldr	r3, [r5, #0]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d0c4      	beq.n	8008ab4 <__sflush_r+0x34>
 8008b2a:	2b1d      	cmp	r3, #29
 8008b2c:	d001      	beq.n	8008b32 <__sflush_r+0xb2>
 8008b2e:	2b16      	cmp	r3, #22
 8008b30:	d101      	bne.n	8008b36 <__sflush_r+0xb6>
 8008b32:	602f      	str	r7, [r5, #0]
 8008b34:	e7b1      	b.n	8008a9a <__sflush_r+0x1a>
 8008b36:	89a3      	ldrh	r3, [r4, #12]
 8008b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b3c:	81a3      	strh	r3, [r4, #12]
 8008b3e:	e7ad      	b.n	8008a9c <__sflush_r+0x1c>
 8008b40:	690f      	ldr	r7, [r1, #16]
 8008b42:	2f00      	cmp	r7, #0
 8008b44:	d0a9      	beq.n	8008a9a <__sflush_r+0x1a>
 8008b46:	0793      	lsls	r3, r2, #30
 8008b48:	680e      	ldr	r6, [r1, #0]
 8008b4a:	bf08      	it	eq
 8008b4c:	694b      	ldreq	r3, [r1, #20]
 8008b4e:	600f      	str	r7, [r1, #0]
 8008b50:	bf18      	it	ne
 8008b52:	2300      	movne	r3, #0
 8008b54:	eba6 0807 	sub.w	r8, r6, r7
 8008b58:	608b      	str	r3, [r1, #8]
 8008b5a:	f1b8 0f00 	cmp.w	r8, #0
 8008b5e:	dd9c      	ble.n	8008a9a <__sflush_r+0x1a>
 8008b60:	6a21      	ldr	r1, [r4, #32]
 8008b62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b64:	4643      	mov	r3, r8
 8008b66:	463a      	mov	r2, r7
 8008b68:	4628      	mov	r0, r5
 8008b6a:	47b0      	blx	r6
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	dc06      	bgt.n	8008b7e <__sflush_r+0xfe>
 8008b70:	89a3      	ldrh	r3, [r4, #12]
 8008b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b76:	81a3      	strh	r3, [r4, #12]
 8008b78:	f04f 30ff 	mov.w	r0, #4294967295
 8008b7c:	e78e      	b.n	8008a9c <__sflush_r+0x1c>
 8008b7e:	4407      	add	r7, r0
 8008b80:	eba8 0800 	sub.w	r8, r8, r0
 8008b84:	e7e9      	b.n	8008b5a <__sflush_r+0xda>
 8008b86:	bf00      	nop
 8008b88:	20400001 	.word	0x20400001

08008b8c <_fflush_r>:
 8008b8c:	b538      	push	{r3, r4, r5, lr}
 8008b8e:	690b      	ldr	r3, [r1, #16]
 8008b90:	4605      	mov	r5, r0
 8008b92:	460c      	mov	r4, r1
 8008b94:	b913      	cbnz	r3, 8008b9c <_fflush_r+0x10>
 8008b96:	2500      	movs	r5, #0
 8008b98:	4628      	mov	r0, r5
 8008b9a:	bd38      	pop	{r3, r4, r5, pc}
 8008b9c:	b118      	cbz	r0, 8008ba6 <_fflush_r+0x1a>
 8008b9e:	6983      	ldr	r3, [r0, #24]
 8008ba0:	b90b      	cbnz	r3, 8008ba6 <_fflush_r+0x1a>
 8008ba2:	f000 f887 	bl	8008cb4 <__sinit>
 8008ba6:	4b14      	ldr	r3, [pc, #80]	; (8008bf8 <_fflush_r+0x6c>)
 8008ba8:	429c      	cmp	r4, r3
 8008baa:	d11b      	bne.n	8008be4 <_fflush_r+0x58>
 8008bac:	686c      	ldr	r4, [r5, #4]
 8008bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d0ef      	beq.n	8008b96 <_fflush_r+0xa>
 8008bb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008bb8:	07d0      	lsls	r0, r2, #31
 8008bba:	d404      	bmi.n	8008bc6 <_fflush_r+0x3a>
 8008bbc:	0599      	lsls	r1, r3, #22
 8008bbe:	d402      	bmi.n	8008bc6 <_fflush_r+0x3a>
 8008bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bc2:	f000 f915 	bl	8008df0 <__retarget_lock_acquire_recursive>
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	4621      	mov	r1, r4
 8008bca:	f7ff ff59 	bl	8008a80 <__sflush_r>
 8008bce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bd0:	07da      	lsls	r2, r3, #31
 8008bd2:	4605      	mov	r5, r0
 8008bd4:	d4e0      	bmi.n	8008b98 <_fflush_r+0xc>
 8008bd6:	89a3      	ldrh	r3, [r4, #12]
 8008bd8:	059b      	lsls	r3, r3, #22
 8008bda:	d4dd      	bmi.n	8008b98 <_fflush_r+0xc>
 8008bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bde:	f000 f908 	bl	8008df2 <__retarget_lock_release_recursive>
 8008be2:	e7d9      	b.n	8008b98 <_fflush_r+0xc>
 8008be4:	4b05      	ldr	r3, [pc, #20]	; (8008bfc <_fflush_r+0x70>)
 8008be6:	429c      	cmp	r4, r3
 8008be8:	d101      	bne.n	8008bee <_fflush_r+0x62>
 8008bea:	68ac      	ldr	r4, [r5, #8]
 8008bec:	e7df      	b.n	8008bae <_fflush_r+0x22>
 8008bee:	4b04      	ldr	r3, [pc, #16]	; (8008c00 <_fflush_r+0x74>)
 8008bf0:	429c      	cmp	r4, r3
 8008bf2:	bf08      	it	eq
 8008bf4:	68ec      	ldreq	r4, [r5, #12]
 8008bf6:	e7da      	b.n	8008bae <_fflush_r+0x22>
 8008bf8:	080098a0 	.word	0x080098a0
 8008bfc:	080098c0 	.word	0x080098c0
 8008c00:	08009880 	.word	0x08009880

08008c04 <std>:
 8008c04:	2300      	movs	r3, #0
 8008c06:	b510      	push	{r4, lr}
 8008c08:	4604      	mov	r4, r0
 8008c0a:	e9c0 3300 	strd	r3, r3, [r0]
 8008c0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c12:	6083      	str	r3, [r0, #8]
 8008c14:	8181      	strh	r1, [r0, #12]
 8008c16:	6643      	str	r3, [r0, #100]	; 0x64
 8008c18:	81c2      	strh	r2, [r0, #14]
 8008c1a:	6183      	str	r3, [r0, #24]
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	2208      	movs	r2, #8
 8008c20:	305c      	adds	r0, #92	; 0x5c
 8008c22:	f7fd f8c3 	bl	8005dac <memset>
 8008c26:	4b05      	ldr	r3, [pc, #20]	; (8008c3c <std+0x38>)
 8008c28:	6263      	str	r3, [r4, #36]	; 0x24
 8008c2a:	4b05      	ldr	r3, [pc, #20]	; (8008c40 <std+0x3c>)
 8008c2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c2e:	4b05      	ldr	r3, [pc, #20]	; (8008c44 <std+0x40>)
 8008c30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c32:	4b05      	ldr	r3, [pc, #20]	; (8008c48 <std+0x44>)
 8008c34:	6224      	str	r4, [r4, #32]
 8008c36:	6323      	str	r3, [r4, #48]	; 0x30
 8008c38:	bd10      	pop	{r4, pc}
 8008c3a:	bf00      	nop
 8008c3c:	08008ff5 	.word	0x08008ff5
 8008c40:	08009017 	.word	0x08009017
 8008c44:	0800904f 	.word	0x0800904f
 8008c48:	08009073 	.word	0x08009073

08008c4c <_cleanup_r>:
 8008c4c:	4901      	ldr	r1, [pc, #4]	; (8008c54 <_cleanup_r+0x8>)
 8008c4e:	f000 b8af 	b.w	8008db0 <_fwalk_reent>
 8008c52:	bf00      	nop
 8008c54:	08008b8d 	.word	0x08008b8d

08008c58 <__sfmoreglue>:
 8008c58:	b570      	push	{r4, r5, r6, lr}
 8008c5a:	2268      	movs	r2, #104	; 0x68
 8008c5c:	1e4d      	subs	r5, r1, #1
 8008c5e:	4355      	muls	r5, r2
 8008c60:	460e      	mov	r6, r1
 8008c62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008c66:	f7ff f957 	bl	8007f18 <_malloc_r>
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	b140      	cbz	r0, 8008c80 <__sfmoreglue+0x28>
 8008c6e:	2100      	movs	r1, #0
 8008c70:	e9c0 1600 	strd	r1, r6, [r0]
 8008c74:	300c      	adds	r0, #12
 8008c76:	60a0      	str	r0, [r4, #8]
 8008c78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008c7c:	f7fd f896 	bl	8005dac <memset>
 8008c80:	4620      	mov	r0, r4
 8008c82:	bd70      	pop	{r4, r5, r6, pc}

08008c84 <__sfp_lock_acquire>:
 8008c84:	4801      	ldr	r0, [pc, #4]	; (8008c8c <__sfp_lock_acquire+0x8>)
 8008c86:	f000 b8b3 	b.w	8008df0 <__retarget_lock_acquire_recursive>
 8008c8a:	bf00      	nop
 8008c8c:	20000795 	.word	0x20000795

08008c90 <__sfp_lock_release>:
 8008c90:	4801      	ldr	r0, [pc, #4]	; (8008c98 <__sfp_lock_release+0x8>)
 8008c92:	f000 b8ae 	b.w	8008df2 <__retarget_lock_release_recursive>
 8008c96:	bf00      	nop
 8008c98:	20000795 	.word	0x20000795

08008c9c <__sinit_lock_acquire>:
 8008c9c:	4801      	ldr	r0, [pc, #4]	; (8008ca4 <__sinit_lock_acquire+0x8>)
 8008c9e:	f000 b8a7 	b.w	8008df0 <__retarget_lock_acquire_recursive>
 8008ca2:	bf00      	nop
 8008ca4:	20000796 	.word	0x20000796

08008ca8 <__sinit_lock_release>:
 8008ca8:	4801      	ldr	r0, [pc, #4]	; (8008cb0 <__sinit_lock_release+0x8>)
 8008caa:	f000 b8a2 	b.w	8008df2 <__retarget_lock_release_recursive>
 8008cae:	bf00      	nop
 8008cb0:	20000796 	.word	0x20000796

08008cb4 <__sinit>:
 8008cb4:	b510      	push	{r4, lr}
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	f7ff fff0 	bl	8008c9c <__sinit_lock_acquire>
 8008cbc:	69a3      	ldr	r3, [r4, #24]
 8008cbe:	b11b      	cbz	r3, 8008cc8 <__sinit+0x14>
 8008cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cc4:	f7ff bff0 	b.w	8008ca8 <__sinit_lock_release>
 8008cc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008ccc:	6523      	str	r3, [r4, #80]	; 0x50
 8008cce:	4b13      	ldr	r3, [pc, #76]	; (8008d1c <__sinit+0x68>)
 8008cd0:	4a13      	ldr	r2, [pc, #76]	; (8008d20 <__sinit+0x6c>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008cd6:	42a3      	cmp	r3, r4
 8008cd8:	bf04      	itt	eq
 8008cda:	2301      	moveq	r3, #1
 8008cdc:	61a3      	streq	r3, [r4, #24]
 8008cde:	4620      	mov	r0, r4
 8008ce0:	f000 f820 	bl	8008d24 <__sfp>
 8008ce4:	6060      	str	r0, [r4, #4]
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	f000 f81c 	bl	8008d24 <__sfp>
 8008cec:	60a0      	str	r0, [r4, #8]
 8008cee:	4620      	mov	r0, r4
 8008cf0:	f000 f818 	bl	8008d24 <__sfp>
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	60e0      	str	r0, [r4, #12]
 8008cf8:	2104      	movs	r1, #4
 8008cfa:	6860      	ldr	r0, [r4, #4]
 8008cfc:	f7ff ff82 	bl	8008c04 <std>
 8008d00:	68a0      	ldr	r0, [r4, #8]
 8008d02:	2201      	movs	r2, #1
 8008d04:	2109      	movs	r1, #9
 8008d06:	f7ff ff7d 	bl	8008c04 <std>
 8008d0a:	68e0      	ldr	r0, [r4, #12]
 8008d0c:	2202      	movs	r2, #2
 8008d0e:	2112      	movs	r1, #18
 8008d10:	f7ff ff78 	bl	8008c04 <std>
 8008d14:	2301      	movs	r3, #1
 8008d16:	61a3      	str	r3, [r4, #24]
 8008d18:	e7d2      	b.n	8008cc0 <__sinit+0xc>
 8008d1a:	bf00      	nop
 8008d1c:	08009454 	.word	0x08009454
 8008d20:	08008c4d 	.word	0x08008c4d

08008d24 <__sfp>:
 8008d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d26:	4607      	mov	r7, r0
 8008d28:	f7ff ffac 	bl	8008c84 <__sfp_lock_acquire>
 8008d2c:	4b1e      	ldr	r3, [pc, #120]	; (8008da8 <__sfp+0x84>)
 8008d2e:	681e      	ldr	r6, [r3, #0]
 8008d30:	69b3      	ldr	r3, [r6, #24]
 8008d32:	b913      	cbnz	r3, 8008d3a <__sfp+0x16>
 8008d34:	4630      	mov	r0, r6
 8008d36:	f7ff ffbd 	bl	8008cb4 <__sinit>
 8008d3a:	3648      	adds	r6, #72	; 0x48
 8008d3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d40:	3b01      	subs	r3, #1
 8008d42:	d503      	bpl.n	8008d4c <__sfp+0x28>
 8008d44:	6833      	ldr	r3, [r6, #0]
 8008d46:	b30b      	cbz	r3, 8008d8c <__sfp+0x68>
 8008d48:	6836      	ldr	r6, [r6, #0]
 8008d4a:	e7f7      	b.n	8008d3c <__sfp+0x18>
 8008d4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d50:	b9d5      	cbnz	r5, 8008d88 <__sfp+0x64>
 8008d52:	4b16      	ldr	r3, [pc, #88]	; (8008dac <__sfp+0x88>)
 8008d54:	60e3      	str	r3, [r4, #12]
 8008d56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d5a:	6665      	str	r5, [r4, #100]	; 0x64
 8008d5c:	f000 f847 	bl	8008dee <__retarget_lock_init_recursive>
 8008d60:	f7ff ff96 	bl	8008c90 <__sfp_lock_release>
 8008d64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008d68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008d6c:	6025      	str	r5, [r4, #0]
 8008d6e:	61a5      	str	r5, [r4, #24]
 8008d70:	2208      	movs	r2, #8
 8008d72:	4629      	mov	r1, r5
 8008d74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d78:	f7fd f818 	bl	8005dac <memset>
 8008d7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d84:	4620      	mov	r0, r4
 8008d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d88:	3468      	adds	r4, #104	; 0x68
 8008d8a:	e7d9      	b.n	8008d40 <__sfp+0x1c>
 8008d8c:	2104      	movs	r1, #4
 8008d8e:	4638      	mov	r0, r7
 8008d90:	f7ff ff62 	bl	8008c58 <__sfmoreglue>
 8008d94:	4604      	mov	r4, r0
 8008d96:	6030      	str	r0, [r6, #0]
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	d1d5      	bne.n	8008d48 <__sfp+0x24>
 8008d9c:	f7ff ff78 	bl	8008c90 <__sfp_lock_release>
 8008da0:	230c      	movs	r3, #12
 8008da2:	603b      	str	r3, [r7, #0]
 8008da4:	e7ee      	b.n	8008d84 <__sfp+0x60>
 8008da6:	bf00      	nop
 8008da8:	08009454 	.word	0x08009454
 8008dac:	ffff0001 	.word	0xffff0001

08008db0 <_fwalk_reent>:
 8008db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008db4:	4606      	mov	r6, r0
 8008db6:	4688      	mov	r8, r1
 8008db8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008dbc:	2700      	movs	r7, #0
 8008dbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008dc2:	f1b9 0901 	subs.w	r9, r9, #1
 8008dc6:	d505      	bpl.n	8008dd4 <_fwalk_reent+0x24>
 8008dc8:	6824      	ldr	r4, [r4, #0]
 8008dca:	2c00      	cmp	r4, #0
 8008dcc:	d1f7      	bne.n	8008dbe <_fwalk_reent+0xe>
 8008dce:	4638      	mov	r0, r7
 8008dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dd4:	89ab      	ldrh	r3, [r5, #12]
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d907      	bls.n	8008dea <_fwalk_reent+0x3a>
 8008dda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008dde:	3301      	adds	r3, #1
 8008de0:	d003      	beq.n	8008dea <_fwalk_reent+0x3a>
 8008de2:	4629      	mov	r1, r5
 8008de4:	4630      	mov	r0, r6
 8008de6:	47c0      	blx	r8
 8008de8:	4307      	orrs	r7, r0
 8008dea:	3568      	adds	r5, #104	; 0x68
 8008dec:	e7e9      	b.n	8008dc2 <_fwalk_reent+0x12>

08008dee <__retarget_lock_init_recursive>:
 8008dee:	4770      	bx	lr

08008df0 <__retarget_lock_acquire_recursive>:
 8008df0:	4770      	bx	lr

08008df2 <__retarget_lock_release_recursive>:
 8008df2:	4770      	bx	lr

08008df4 <__swhatbuf_r>:
 8008df4:	b570      	push	{r4, r5, r6, lr}
 8008df6:	460e      	mov	r6, r1
 8008df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dfc:	2900      	cmp	r1, #0
 8008dfe:	b096      	sub	sp, #88	; 0x58
 8008e00:	4614      	mov	r4, r2
 8008e02:	461d      	mov	r5, r3
 8008e04:	da08      	bge.n	8008e18 <__swhatbuf_r+0x24>
 8008e06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	602a      	str	r2, [r5, #0]
 8008e0e:	061a      	lsls	r2, r3, #24
 8008e10:	d410      	bmi.n	8008e34 <__swhatbuf_r+0x40>
 8008e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e16:	e00e      	b.n	8008e36 <__swhatbuf_r+0x42>
 8008e18:	466a      	mov	r2, sp
 8008e1a:	f000 f951 	bl	80090c0 <_fstat_r>
 8008e1e:	2800      	cmp	r0, #0
 8008e20:	dbf1      	blt.n	8008e06 <__swhatbuf_r+0x12>
 8008e22:	9a01      	ldr	r2, [sp, #4]
 8008e24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e2c:	425a      	negs	r2, r3
 8008e2e:	415a      	adcs	r2, r3
 8008e30:	602a      	str	r2, [r5, #0]
 8008e32:	e7ee      	b.n	8008e12 <__swhatbuf_r+0x1e>
 8008e34:	2340      	movs	r3, #64	; 0x40
 8008e36:	2000      	movs	r0, #0
 8008e38:	6023      	str	r3, [r4, #0]
 8008e3a:	b016      	add	sp, #88	; 0x58
 8008e3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008e40 <__smakebuf_r>:
 8008e40:	898b      	ldrh	r3, [r1, #12]
 8008e42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e44:	079d      	lsls	r5, r3, #30
 8008e46:	4606      	mov	r6, r0
 8008e48:	460c      	mov	r4, r1
 8008e4a:	d507      	bpl.n	8008e5c <__smakebuf_r+0x1c>
 8008e4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e50:	6023      	str	r3, [r4, #0]
 8008e52:	6123      	str	r3, [r4, #16]
 8008e54:	2301      	movs	r3, #1
 8008e56:	6163      	str	r3, [r4, #20]
 8008e58:	b002      	add	sp, #8
 8008e5a:	bd70      	pop	{r4, r5, r6, pc}
 8008e5c:	ab01      	add	r3, sp, #4
 8008e5e:	466a      	mov	r2, sp
 8008e60:	f7ff ffc8 	bl	8008df4 <__swhatbuf_r>
 8008e64:	9900      	ldr	r1, [sp, #0]
 8008e66:	4605      	mov	r5, r0
 8008e68:	4630      	mov	r0, r6
 8008e6a:	f7ff f855 	bl	8007f18 <_malloc_r>
 8008e6e:	b948      	cbnz	r0, 8008e84 <__smakebuf_r+0x44>
 8008e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e74:	059a      	lsls	r2, r3, #22
 8008e76:	d4ef      	bmi.n	8008e58 <__smakebuf_r+0x18>
 8008e78:	f023 0303 	bic.w	r3, r3, #3
 8008e7c:	f043 0302 	orr.w	r3, r3, #2
 8008e80:	81a3      	strh	r3, [r4, #12]
 8008e82:	e7e3      	b.n	8008e4c <__smakebuf_r+0xc>
 8008e84:	4b0d      	ldr	r3, [pc, #52]	; (8008ebc <__smakebuf_r+0x7c>)
 8008e86:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	6020      	str	r0, [r4, #0]
 8008e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e90:	81a3      	strh	r3, [r4, #12]
 8008e92:	9b00      	ldr	r3, [sp, #0]
 8008e94:	6163      	str	r3, [r4, #20]
 8008e96:	9b01      	ldr	r3, [sp, #4]
 8008e98:	6120      	str	r0, [r4, #16]
 8008e9a:	b15b      	cbz	r3, 8008eb4 <__smakebuf_r+0x74>
 8008e9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ea0:	4630      	mov	r0, r6
 8008ea2:	f000 f91f 	bl	80090e4 <_isatty_r>
 8008ea6:	b128      	cbz	r0, 8008eb4 <__smakebuf_r+0x74>
 8008ea8:	89a3      	ldrh	r3, [r4, #12]
 8008eaa:	f023 0303 	bic.w	r3, r3, #3
 8008eae:	f043 0301 	orr.w	r3, r3, #1
 8008eb2:	81a3      	strh	r3, [r4, #12]
 8008eb4:	89a0      	ldrh	r0, [r4, #12]
 8008eb6:	4305      	orrs	r5, r0
 8008eb8:	81a5      	strh	r5, [r4, #12]
 8008eba:	e7cd      	b.n	8008e58 <__smakebuf_r+0x18>
 8008ebc:	08008c4d 	.word	0x08008c4d

08008ec0 <memmove>:
 8008ec0:	4288      	cmp	r0, r1
 8008ec2:	b510      	push	{r4, lr}
 8008ec4:	eb01 0402 	add.w	r4, r1, r2
 8008ec8:	d902      	bls.n	8008ed0 <memmove+0x10>
 8008eca:	4284      	cmp	r4, r0
 8008ecc:	4623      	mov	r3, r4
 8008ece:	d807      	bhi.n	8008ee0 <memmove+0x20>
 8008ed0:	1e43      	subs	r3, r0, #1
 8008ed2:	42a1      	cmp	r1, r4
 8008ed4:	d008      	beq.n	8008ee8 <memmove+0x28>
 8008ed6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008eda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ede:	e7f8      	b.n	8008ed2 <memmove+0x12>
 8008ee0:	4402      	add	r2, r0
 8008ee2:	4601      	mov	r1, r0
 8008ee4:	428a      	cmp	r2, r1
 8008ee6:	d100      	bne.n	8008eea <memmove+0x2a>
 8008ee8:	bd10      	pop	{r4, pc}
 8008eea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008eee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ef2:	e7f7      	b.n	8008ee4 <memmove+0x24>

08008ef4 <__malloc_lock>:
 8008ef4:	4801      	ldr	r0, [pc, #4]	; (8008efc <__malloc_lock+0x8>)
 8008ef6:	f7ff bf7b 	b.w	8008df0 <__retarget_lock_acquire_recursive>
 8008efa:	bf00      	nop
 8008efc:	20000794 	.word	0x20000794

08008f00 <__malloc_unlock>:
 8008f00:	4801      	ldr	r0, [pc, #4]	; (8008f08 <__malloc_unlock+0x8>)
 8008f02:	f7ff bf76 	b.w	8008df2 <__retarget_lock_release_recursive>
 8008f06:	bf00      	nop
 8008f08:	20000794 	.word	0x20000794

08008f0c <_realloc_r>:
 8008f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f10:	4680      	mov	r8, r0
 8008f12:	4614      	mov	r4, r2
 8008f14:	460e      	mov	r6, r1
 8008f16:	b921      	cbnz	r1, 8008f22 <_realloc_r+0x16>
 8008f18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	f7fe bffb 	b.w	8007f18 <_malloc_r>
 8008f22:	b92a      	cbnz	r2, 8008f30 <_realloc_r+0x24>
 8008f24:	f7fe ff8c 	bl	8007e40 <_free_r>
 8008f28:	4625      	mov	r5, r4
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f30:	f000 f8fa 	bl	8009128 <_malloc_usable_size_r>
 8008f34:	4284      	cmp	r4, r0
 8008f36:	4607      	mov	r7, r0
 8008f38:	d802      	bhi.n	8008f40 <_realloc_r+0x34>
 8008f3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f3e:	d812      	bhi.n	8008f66 <_realloc_r+0x5a>
 8008f40:	4621      	mov	r1, r4
 8008f42:	4640      	mov	r0, r8
 8008f44:	f7fe ffe8 	bl	8007f18 <_malloc_r>
 8008f48:	4605      	mov	r5, r0
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	d0ed      	beq.n	8008f2a <_realloc_r+0x1e>
 8008f4e:	42bc      	cmp	r4, r7
 8008f50:	4622      	mov	r2, r4
 8008f52:	4631      	mov	r1, r6
 8008f54:	bf28      	it	cs
 8008f56:	463a      	movcs	r2, r7
 8008f58:	f7fc ff1a 	bl	8005d90 <memcpy>
 8008f5c:	4631      	mov	r1, r6
 8008f5e:	4640      	mov	r0, r8
 8008f60:	f7fe ff6e 	bl	8007e40 <_free_r>
 8008f64:	e7e1      	b.n	8008f2a <_realloc_r+0x1e>
 8008f66:	4635      	mov	r5, r6
 8008f68:	e7df      	b.n	8008f2a <_realloc_r+0x1e>

08008f6a <_raise_r>:
 8008f6a:	291f      	cmp	r1, #31
 8008f6c:	b538      	push	{r3, r4, r5, lr}
 8008f6e:	4604      	mov	r4, r0
 8008f70:	460d      	mov	r5, r1
 8008f72:	d904      	bls.n	8008f7e <_raise_r+0x14>
 8008f74:	2316      	movs	r3, #22
 8008f76:	6003      	str	r3, [r0, #0]
 8008f78:	f04f 30ff 	mov.w	r0, #4294967295
 8008f7c:	bd38      	pop	{r3, r4, r5, pc}
 8008f7e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008f80:	b112      	cbz	r2, 8008f88 <_raise_r+0x1e>
 8008f82:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f86:	b94b      	cbnz	r3, 8008f9c <_raise_r+0x32>
 8008f88:	4620      	mov	r0, r4
 8008f8a:	f000 f831 	bl	8008ff0 <_getpid_r>
 8008f8e:	462a      	mov	r2, r5
 8008f90:	4601      	mov	r1, r0
 8008f92:	4620      	mov	r0, r4
 8008f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f98:	f000 b818 	b.w	8008fcc <_kill_r>
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d00a      	beq.n	8008fb6 <_raise_r+0x4c>
 8008fa0:	1c59      	adds	r1, r3, #1
 8008fa2:	d103      	bne.n	8008fac <_raise_r+0x42>
 8008fa4:	2316      	movs	r3, #22
 8008fa6:	6003      	str	r3, [r0, #0]
 8008fa8:	2001      	movs	r0, #1
 8008faa:	e7e7      	b.n	8008f7c <_raise_r+0x12>
 8008fac:	2400      	movs	r4, #0
 8008fae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	4798      	blx	r3
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	e7e0      	b.n	8008f7c <_raise_r+0x12>
	...

08008fbc <raise>:
 8008fbc:	4b02      	ldr	r3, [pc, #8]	; (8008fc8 <raise+0xc>)
 8008fbe:	4601      	mov	r1, r0
 8008fc0:	6818      	ldr	r0, [r3, #0]
 8008fc2:	f7ff bfd2 	b.w	8008f6a <_raise_r>
 8008fc6:	bf00      	nop
 8008fc8:	20000098 	.word	0x20000098

08008fcc <_kill_r>:
 8008fcc:	b538      	push	{r3, r4, r5, lr}
 8008fce:	4d07      	ldr	r5, [pc, #28]	; (8008fec <_kill_r+0x20>)
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	4608      	mov	r0, r1
 8008fd6:	4611      	mov	r1, r2
 8008fd8:	602b      	str	r3, [r5, #0]
 8008fda:	f7f8 ff9b 	bl	8001f14 <_kill>
 8008fde:	1c43      	adds	r3, r0, #1
 8008fe0:	d102      	bne.n	8008fe8 <_kill_r+0x1c>
 8008fe2:	682b      	ldr	r3, [r5, #0]
 8008fe4:	b103      	cbz	r3, 8008fe8 <_kill_r+0x1c>
 8008fe6:	6023      	str	r3, [r4, #0]
 8008fe8:	bd38      	pop	{r3, r4, r5, pc}
 8008fea:	bf00      	nop
 8008fec:	20000798 	.word	0x20000798

08008ff0 <_getpid_r>:
 8008ff0:	f7f8 bf88 	b.w	8001f04 <_getpid>

08008ff4 <__sread>:
 8008ff4:	b510      	push	{r4, lr}
 8008ff6:	460c      	mov	r4, r1
 8008ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ffc:	f000 f89c 	bl	8009138 <_read_r>
 8009000:	2800      	cmp	r0, #0
 8009002:	bfab      	itete	ge
 8009004:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009006:	89a3      	ldrhlt	r3, [r4, #12]
 8009008:	181b      	addge	r3, r3, r0
 800900a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800900e:	bfac      	ite	ge
 8009010:	6563      	strge	r3, [r4, #84]	; 0x54
 8009012:	81a3      	strhlt	r3, [r4, #12]
 8009014:	bd10      	pop	{r4, pc}

08009016 <__swrite>:
 8009016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800901a:	461f      	mov	r7, r3
 800901c:	898b      	ldrh	r3, [r1, #12]
 800901e:	05db      	lsls	r3, r3, #23
 8009020:	4605      	mov	r5, r0
 8009022:	460c      	mov	r4, r1
 8009024:	4616      	mov	r6, r2
 8009026:	d505      	bpl.n	8009034 <__swrite+0x1e>
 8009028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800902c:	2302      	movs	r3, #2
 800902e:	2200      	movs	r2, #0
 8009030:	f000 f868 	bl	8009104 <_lseek_r>
 8009034:	89a3      	ldrh	r3, [r4, #12]
 8009036:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800903a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800903e:	81a3      	strh	r3, [r4, #12]
 8009040:	4632      	mov	r2, r6
 8009042:	463b      	mov	r3, r7
 8009044:	4628      	mov	r0, r5
 8009046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800904a:	f000 b817 	b.w	800907c <_write_r>

0800904e <__sseek>:
 800904e:	b510      	push	{r4, lr}
 8009050:	460c      	mov	r4, r1
 8009052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009056:	f000 f855 	bl	8009104 <_lseek_r>
 800905a:	1c43      	adds	r3, r0, #1
 800905c:	89a3      	ldrh	r3, [r4, #12]
 800905e:	bf15      	itete	ne
 8009060:	6560      	strne	r0, [r4, #84]	; 0x54
 8009062:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009066:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800906a:	81a3      	strheq	r3, [r4, #12]
 800906c:	bf18      	it	ne
 800906e:	81a3      	strhne	r3, [r4, #12]
 8009070:	bd10      	pop	{r4, pc}

08009072 <__sclose>:
 8009072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009076:	f000 b813 	b.w	80090a0 <_close_r>
	...

0800907c <_write_r>:
 800907c:	b538      	push	{r3, r4, r5, lr}
 800907e:	4d07      	ldr	r5, [pc, #28]	; (800909c <_write_r+0x20>)
 8009080:	4604      	mov	r4, r0
 8009082:	4608      	mov	r0, r1
 8009084:	4611      	mov	r1, r2
 8009086:	2200      	movs	r2, #0
 8009088:	602a      	str	r2, [r5, #0]
 800908a:	461a      	mov	r2, r3
 800908c:	f7f8 ff79 	bl	8001f82 <_write>
 8009090:	1c43      	adds	r3, r0, #1
 8009092:	d102      	bne.n	800909a <_write_r+0x1e>
 8009094:	682b      	ldr	r3, [r5, #0]
 8009096:	b103      	cbz	r3, 800909a <_write_r+0x1e>
 8009098:	6023      	str	r3, [r4, #0]
 800909a:	bd38      	pop	{r3, r4, r5, pc}
 800909c:	20000798 	.word	0x20000798

080090a0 <_close_r>:
 80090a0:	b538      	push	{r3, r4, r5, lr}
 80090a2:	4d06      	ldr	r5, [pc, #24]	; (80090bc <_close_r+0x1c>)
 80090a4:	2300      	movs	r3, #0
 80090a6:	4604      	mov	r4, r0
 80090a8:	4608      	mov	r0, r1
 80090aa:	602b      	str	r3, [r5, #0]
 80090ac:	f7f8 ff85 	bl	8001fba <_close>
 80090b0:	1c43      	adds	r3, r0, #1
 80090b2:	d102      	bne.n	80090ba <_close_r+0x1a>
 80090b4:	682b      	ldr	r3, [r5, #0]
 80090b6:	b103      	cbz	r3, 80090ba <_close_r+0x1a>
 80090b8:	6023      	str	r3, [r4, #0]
 80090ba:	bd38      	pop	{r3, r4, r5, pc}
 80090bc:	20000798 	.word	0x20000798

080090c0 <_fstat_r>:
 80090c0:	b538      	push	{r3, r4, r5, lr}
 80090c2:	4d07      	ldr	r5, [pc, #28]	; (80090e0 <_fstat_r+0x20>)
 80090c4:	2300      	movs	r3, #0
 80090c6:	4604      	mov	r4, r0
 80090c8:	4608      	mov	r0, r1
 80090ca:	4611      	mov	r1, r2
 80090cc:	602b      	str	r3, [r5, #0]
 80090ce:	f7f8 ff80 	bl	8001fd2 <_fstat>
 80090d2:	1c43      	adds	r3, r0, #1
 80090d4:	d102      	bne.n	80090dc <_fstat_r+0x1c>
 80090d6:	682b      	ldr	r3, [r5, #0]
 80090d8:	b103      	cbz	r3, 80090dc <_fstat_r+0x1c>
 80090da:	6023      	str	r3, [r4, #0]
 80090dc:	bd38      	pop	{r3, r4, r5, pc}
 80090de:	bf00      	nop
 80090e0:	20000798 	.word	0x20000798

080090e4 <_isatty_r>:
 80090e4:	b538      	push	{r3, r4, r5, lr}
 80090e6:	4d06      	ldr	r5, [pc, #24]	; (8009100 <_isatty_r+0x1c>)
 80090e8:	2300      	movs	r3, #0
 80090ea:	4604      	mov	r4, r0
 80090ec:	4608      	mov	r0, r1
 80090ee:	602b      	str	r3, [r5, #0]
 80090f0:	f7f8 ff7f 	bl	8001ff2 <_isatty>
 80090f4:	1c43      	adds	r3, r0, #1
 80090f6:	d102      	bne.n	80090fe <_isatty_r+0x1a>
 80090f8:	682b      	ldr	r3, [r5, #0]
 80090fa:	b103      	cbz	r3, 80090fe <_isatty_r+0x1a>
 80090fc:	6023      	str	r3, [r4, #0]
 80090fe:	bd38      	pop	{r3, r4, r5, pc}
 8009100:	20000798 	.word	0x20000798

08009104 <_lseek_r>:
 8009104:	b538      	push	{r3, r4, r5, lr}
 8009106:	4d07      	ldr	r5, [pc, #28]	; (8009124 <_lseek_r+0x20>)
 8009108:	4604      	mov	r4, r0
 800910a:	4608      	mov	r0, r1
 800910c:	4611      	mov	r1, r2
 800910e:	2200      	movs	r2, #0
 8009110:	602a      	str	r2, [r5, #0]
 8009112:	461a      	mov	r2, r3
 8009114:	f7f8 ff78 	bl	8002008 <_lseek>
 8009118:	1c43      	adds	r3, r0, #1
 800911a:	d102      	bne.n	8009122 <_lseek_r+0x1e>
 800911c:	682b      	ldr	r3, [r5, #0]
 800911e:	b103      	cbz	r3, 8009122 <_lseek_r+0x1e>
 8009120:	6023      	str	r3, [r4, #0]
 8009122:	bd38      	pop	{r3, r4, r5, pc}
 8009124:	20000798 	.word	0x20000798

08009128 <_malloc_usable_size_r>:
 8009128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800912c:	1f18      	subs	r0, r3, #4
 800912e:	2b00      	cmp	r3, #0
 8009130:	bfbc      	itt	lt
 8009132:	580b      	ldrlt	r3, [r1, r0]
 8009134:	18c0      	addlt	r0, r0, r3
 8009136:	4770      	bx	lr

08009138 <_read_r>:
 8009138:	b538      	push	{r3, r4, r5, lr}
 800913a:	4d07      	ldr	r5, [pc, #28]	; (8009158 <_read_r+0x20>)
 800913c:	4604      	mov	r4, r0
 800913e:	4608      	mov	r0, r1
 8009140:	4611      	mov	r1, r2
 8009142:	2200      	movs	r2, #0
 8009144:	602a      	str	r2, [r5, #0]
 8009146:	461a      	mov	r2, r3
 8009148:	f7f8 fefe 	bl	8001f48 <_read>
 800914c:	1c43      	adds	r3, r0, #1
 800914e:	d102      	bne.n	8009156 <_read_r+0x1e>
 8009150:	682b      	ldr	r3, [r5, #0]
 8009152:	b103      	cbz	r3, 8009156 <_read_r+0x1e>
 8009154:	6023      	str	r3, [r4, #0]
 8009156:	bd38      	pop	{r3, r4, r5, pc}
 8009158:	20000798 	.word	0x20000798

0800915c <_init>:
 800915c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800915e:	bf00      	nop
 8009160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009162:	bc08      	pop	{r3}
 8009164:	469e      	mov	lr, r3
 8009166:	4770      	bx	lr

08009168 <_fini>:
 8009168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916a:	bf00      	nop
 800916c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800916e:	bc08      	pop	{r3}
 8009170:	469e      	mov	lr, r3
 8009172:	4770      	bx	lr
