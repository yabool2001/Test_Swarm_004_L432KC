
Test_Swarm_004_L432KC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  080090e0  080090e0  000190e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009800  08009800  00020264  2**0
                  CONTENTS
  4 .ARM          00000008  08009800  08009800  00019800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009808  08009808  00020264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009808  08009808  00019808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800980c  0800980c  0001980c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  08009810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  20000264  08009a74  00020264  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  08009a74  000206c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b51  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad0  00000000  00000000  00035de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  000388b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001218  00000000  00000000  00039be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e66  00000000  00000000  0003ae00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000153d2  00000000  00000000  0005dc66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d38d0  00000000  00000000  00073038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00146908  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006524  00000000  00000000  00146958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000264 	.word	0x20000264
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080090c4 	.word	0x080090c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000268 	.word	0x20000268
 80001cc:	080090c4 	.word	0x080090c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9aa 	b.w	8000fa4 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff33 	bl	8000adc <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fca9 	bl	80005f8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc2a 	bl	8000504 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fca0 	bl	80005f8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff fae2 	bl	8000288 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	4604      	mov	r4, r0
 8000cdc:	468e      	mov	lr, r1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d14d      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce2:	428a      	cmp	r2, r1
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	d969      	bls.n	8000dbc <__udivmoddi4+0xe8>
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	b152      	cbz	r2, 8000d04 <__udivmoddi4+0x30>
 8000cee:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf2:	f1c2 0120 	rsb	r1, r2, #32
 8000cf6:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfe:	ea41 0e03 	orr.w	lr, r1, r3
 8000d02:	4094      	lsls	r4, r2
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	0c21      	lsrs	r1, r4, #16
 8000d0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d0e:	fa1f f78c 	uxth.w	r7, ip
 8000d12:	fb08 e316 	mls	r3, r8, r6, lr
 8000d16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1a:	fb06 f107 	mul.w	r1, r6, r7
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 811f 	bcs.w	8000f6c <__udivmoddi4+0x298>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 811c 	bls.w	8000f6c <__udivmoddi4+0x298>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 f707 	mul.w	r7, r0, r7
 8000d4c:	42a7      	cmp	r7, r4
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x92>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d58:	f080 810a 	bcs.w	8000f70 <__udivmoddi4+0x29c>
 8000d5c:	42a7      	cmp	r7, r4
 8000d5e:	f240 8107 	bls.w	8000f70 <__udivmoddi4+0x29c>
 8000d62:	4464      	add	r4, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6a:	1be4      	subs	r4, r4, r7
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa4>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xc2>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80ef 	beq.w	8000f66 <__udivmoddi4+0x292>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x160>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd4>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80f9 	bhi.w	8000f9a <__udivmoddi4+0x2c6>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	469e      	mov	lr, r3
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa4>
 8000db6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xec>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 8092 	bne.w	8000eee <__udivmoddi4+0x21a>
 8000dca:	eba1 010c 	sub.w	r1, r1, ip
 8000dce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	2601      	movs	r6, #1
 8000dd8:	0c20      	lsrs	r0, r4, #16
 8000dda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dde:	fb07 1113 	mls	r1, r7, r3, r1
 8000de2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de6:	fb0e f003 	mul.w	r0, lr, r3
 8000dea:	4288      	cmp	r0, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x12c>
 8000dee:	eb1c 0101 	adds.w	r1, ip, r1
 8000df2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x12a>
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	f200 80cb 	bhi.w	8000f94 <__udivmoddi4+0x2c0>
 8000dfe:	4643      	mov	r3, r8
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1110 	mls	r1, r7, r0, r1
 8000e0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e10:	fb0e fe00 	mul.w	lr, lr, r0
 8000e14:	45a6      	cmp	lr, r4
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x156>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e20:	d202      	bcs.n	8000e28 <__udivmoddi4+0x154>
 8000e22:	45a6      	cmp	lr, r4
 8000e24:	f200 80bb 	bhi.w	8000f9e <__udivmoddi4+0x2ca>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e32:	e79c      	b.n	8000d6e <__udivmoddi4+0x9a>
 8000e34:	f1c6 0720 	rsb	r7, r6, #32
 8000e38:	40b3      	lsls	r3, r6
 8000e3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e42:	fa20 f407 	lsr.w	r4, r0, r7
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	431c      	orrs	r4, r3
 8000e4c:	40f9      	lsrs	r1, r7
 8000e4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e52:	fa00 f306 	lsl.w	r3, r0, r6
 8000e56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5a:	0c20      	lsrs	r0, r4, #16
 8000e5c:	fa1f fe8c 	uxth.w	lr, ip
 8000e60:	fb09 1118 	mls	r1, r9, r8, r1
 8000e64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e68:	fb08 f00e 	mul.w	r0, r8, lr
 8000e6c:	4288      	cmp	r0, r1
 8000e6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e72:	d90b      	bls.n	8000e8c <__udivmoddi4+0x1b8>
 8000e74:	eb1c 0101 	adds.w	r1, ip, r1
 8000e78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e7c:	f080 8088 	bcs.w	8000f90 <__udivmoddi4+0x2bc>
 8000e80:	4288      	cmp	r0, r1
 8000e82:	f240 8085 	bls.w	8000f90 <__udivmoddi4+0x2bc>
 8000e86:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	1a09      	subs	r1, r1, r0
 8000e8e:	b2a4      	uxth	r4, r4
 8000e90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e94:	fb09 1110 	mls	r1, r9, r0, r1
 8000e98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea0:	458e      	cmp	lr, r1
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x1e2>
 8000ea4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eac:	d26c      	bcs.n	8000f88 <__udivmoddi4+0x2b4>
 8000eae:	458e      	cmp	lr, r1
 8000eb0:	d96a      	bls.n	8000f88 <__udivmoddi4+0x2b4>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4461      	add	r1, ip
 8000eb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eba:	fba0 9402 	umull	r9, r4, r0, r2
 8000ebe:	eba1 010e 	sub.w	r1, r1, lr
 8000ec2:	42a1      	cmp	r1, r4
 8000ec4:	46c8      	mov	r8, r9
 8000ec6:	46a6      	mov	lr, r4
 8000ec8:	d356      	bcc.n	8000f78 <__udivmoddi4+0x2a4>
 8000eca:	d053      	beq.n	8000f74 <__udivmoddi4+0x2a0>
 8000ecc:	b15d      	cbz	r5, 8000ee6 <__udivmoddi4+0x212>
 8000ece:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ed6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eda:	fa22 f306 	lsr.w	r3, r2, r6
 8000ede:	40f1      	lsrs	r1, r6
 8000ee0:	431f      	orrs	r7, r3
 8000ee2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ee6:	2600      	movs	r6, #0
 8000ee8:	4631      	mov	r1, r6
 8000eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eee:	f1c2 0320 	rsb	r3, r2, #32
 8000ef2:	40d8      	lsrs	r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa21 f303 	lsr.w	r3, r1, r3
 8000efc:	4091      	lsls	r1, r2
 8000efe:	4301      	orrs	r1, r0
 8000f00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f04:	fa1f fe8c 	uxth.w	lr, ip
 8000f08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f10:	0c0b      	lsrs	r3, r1, #16
 8000f12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f16:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1a:	429e      	cmp	r6, r3
 8000f1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x260>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2a:	d22f      	bcs.n	8000f8c <__udivmoddi4+0x2b8>
 8000f2c:	429e      	cmp	r6, r3
 8000f2e:	d92d      	bls.n	8000f8c <__udivmoddi4+0x2b8>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1b9b      	subs	r3, r3, r6
 8000f36:	b289      	uxth	r1, r1
 8000f38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f44:	fb06 f30e 	mul.w	r3, r6, lr
 8000f48:	428b      	cmp	r3, r1
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x28a>
 8000f4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f54:	d216      	bcs.n	8000f84 <__udivmoddi4+0x2b0>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d914      	bls.n	8000f84 <__udivmoddi4+0x2b0>
 8000f5a:	3e02      	subs	r6, #2
 8000f5c:	4461      	add	r1, ip
 8000f5e:	1ac9      	subs	r1, r1, r3
 8000f60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f64:	e738      	b.n	8000dd8 <__udivmoddi4+0x104>
 8000f66:	462e      	mov	r6, r5
 8000f68:	4628      	mov	r0, r5
 8000f6a:	e705      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000f6c:	4606      	mov	r6, r0
 8000f6e:	e6e3      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f70:	4618      	mov	r0, r3
 8000f72:	e6f8      	b.n	8000d66 <__udivmoddi4+0x92>
 8000f74:	454b      	cmp	r3, r9
 8000f76:	d2a9      	bcs.n	8000ecc <__udivmoddi4+0x1f8>
 8000f78:	ebb9 0802 	subs.w	r8, r9, r2
 8000f7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f80:	3801      	subs	r0, #1
 8000f82:	e7a3      	b.n	8000ecc <__udivmoddi4+0x1f8>
 8000f84:	4646      	mov	r6, r8
 8000f86:	e7ea      	b.n	8000f5e <__udivmoddi4+0x28a>
 8000f88:	4620      	mov	r0, r4
 8000f8a:	e794      	b.n	8000eb6 <__udivmoddi4+0x1e2>
 8000f8c:	4640      	mov	r0, r8
 8000f8e:	e7d1      	b.n	8000f34 <__udivmoddi4+0x260>
 8000f90:	46d0      	mov	r8, sl
 8000f92:	e77b      	b.n	8000e8c <__udivmoddi4+0x1b8>
 8000f94:	3b02      	subs	r3, #2
 8000f96:	4461      	add	r1, ip
 8000f98:	e732      	b.n	8000e00 <__udivmoddi4+0x12c>
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	e709      	b.n	8000db2 <__udivmoddi4+0xde>
 8000f9e:	4464      	add	r4, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e742      	b.n	8000e2a <__udivmoddi4+0x156>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fac:	f001 f85f 	bl	800206e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb0:	f000 f83a 	bl	8001028 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb4:	f000 f978 	bl	80012a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fb8:	f000 f958 	bl	800126c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fbc:	f000 f926 	bl	800120c <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000fc0:	f000 f894 	bl	80010ec <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000fc4:	f000 f8f2 	bl	80011ac <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8000fc8:	f000 f8b8 	bl	800113c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  send_string_2_dbg_uart ( "Hello! Test_Swarm_004_L432KC started\n" ) ;
 8000fcc:	4814      	ldr	r0, [pc, #80]	; (8001020 <main+0x78>)
 8000fce:	f000 fce9 	bl	80019a4 <send_string_2_dbg_uart>
  tim_init () ;
 8000fd2:	f000 fd29 	bl	8001a28 <tim_init>
  m138_init () ;
 8000fd6:	f000 fb9f 	bl	8001718 <m138_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ( m138_init_status_reg != M138_INITIALISED )
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <main+0x7c>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b7f      	cmp	r3, #127	; 0x7f
 8000fe0:	d001      	beq.n	8000fe6 <main+0x3e>
		  m138_init () ;
 8000fe2:	f000 fb99 	bl	8001718 <m138_init>
	  if ( m138_payload () == 3 )
 8000fe6:	f000 fb3f 	bl	8001668 <m138_payload>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	d106      	bne.n	8000ffe <main+0x56>
		  if ( m138_del_all_unsent () )
 8000ff0:	f000 fb0c 	bl	800160c <m138_del_all_unsent>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <main+0x56>
			  m138_send_message () ;
 8000ffa:	f000 fb1d 	bl	8001638 <m138_send_message>
	  m138_sleep ( 5 ) ;
 8000ffe:	2005      	movs	r0, #5
 8001000:	f000 fada 	bl	80015b8 <m138_sleep>
	  set_swarm_uart ( 0 ) ;
 8001004:	2000      	movs	r0, #0
 8001006:	f000 fa3b 	bl	8001480 <set_swarm_uart>
	  //bkpt = 1 ;
	  reset_m138_var () ;
 800100a:	f000 fa21 	bl	8001450 <reset_m138_var>
	  HAL_Delay ( 6000 ) ;
 800100e:	f241 7070 	movw	r0, #6000	; 0x1770
 8001012:	f001 f8a1 	bl	8002158 <HAL_Delay>
	  set_swarm_uart ( 1 ) ;
 8001016:	2001      	movs	r0, #1
 8001018:	f000 fa32 	bl	8001480 <set_swarm_uart>
	  if ( m138_init_status_reg != M138_INITIALISED )
 800101c:	e7dd      	b.n	8000fda <main+0x32>
 800101e:	bf00      	nop
 8001020:	08009230 	.word	0x08009230
 8001024:	20000632 	.word	0x20000632

08001028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b096      	sub	sp, #88	; 0x58
 800102c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	2244      	movs	r2, #68	; 0x44
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f004 fe6c 	bl	8005d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800103c:	463b      	mov	r3, r7
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800104a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800104e:	f001 fdcf 	bl	8002bf0 <HAL_PWREx_ControlVoltageScaling>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001058:	f000 fd62 	bl	8001b20 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800105c:	f001 fdaa 	bl	8002bb4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001060:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <SystemClock_Config+0xc0>)
 8001062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001066:	4a20      	ldr	r2, [pc, #128]	; (80010e8 <SystemClock_Config+0xc0>)
 8001068:	f023 0318 	bic.w	r3, r3, #24
 800106c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001070:	2314      	movs	r3, #20
 8001072:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001074:	2301      	movs	r3, #1
 8001076:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001078:	2301      	movs	r3, #1
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001080:	2360      	movs	r3, #96	; 0x60
 8001082:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001084:	2302      	movs	r3, #2
 8001086:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001088:	2301      	movs	r3, #1
 800108a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800108c:	2301      	movs	r3, #1
 800108e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001090:	2310      	movs	r3, #16
 8001092:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001094:	2307      	movs	r3, #7
 8001096:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001098:	2302      	movs	r3, #2
 800109a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800109c:	2302      	movs	r3, #2
 800109e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4618      	mov	r0, r3
 80010a6:	f001 fdf9 	bl	8002c9c <HAL_RCC_OscConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80010b0:	f000 fd36 	bl	8001b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b4:	230f      	movs	r3, #15
 80010b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b8:	2303      	movs	r3, #3
 80010ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010c8:	463b      	mov	r3, r7
 80010ca:	2101      	movs	r1, #1
 80010cc:	4618      	mov	r0, r3
 80010ce:	f002 f9f9 	bl	80034c4 <HAL_RCC_ClockConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80010d8:	f000 fd22 	bl	8001b20 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80010dc:	f002 fe0c 	bl	8003cf8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80010e0:	bf00      	nop
 80010e2:	3758      	adds	r7, #88	; 0x58
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40021000 	.word	0x40021000

080010ec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010f0:	4b10      	ldr	r3, [pc, #64]	; (8001134 <MX_RTC_Init+0x48>)
 80010f2:	4a11      	ldr	r2, [pc, #68]	; (8001138 <MX_RTC_Init+0x4c>)
 80010f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_RTC_Init+0x48>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <MX_RTC_Init+0x48>)
 80010fe:	227f      	movs	r2, #127	; 0x7f
 8001100:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_RTC_Init+0x48>)
 8001104:	22ff      	movs	r2, #255	; 0xff
 8001106:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <MX_RTC_Init+0x48>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_RTC_Init+0x48>)
 8001110:	2200      	movs	r2, #0
 8001112:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <MX_RTC_Init+0x48>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_RTC_Init+0x48>)
 800111c:	2200      	movs	r2, #0
 800111e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001120:	4804      	ldr	r0, [pc, #16]	; (8001134 <MX_RTC_Init+0x48>)
 8001122:	f002 feeb 	bl	8003efc <HAL_RTC_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800112c:	f000 fcf8 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000280 	.word	0x20000280
 8001138:	40002800 	.word	0x40002800

0800113c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800114c:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <MX_TIM6_Init+0x68>)
 800114e:	4a16      	ldr	r2, [pc, #88]	; (80011a8 <MX_TIM6_Init+0x6c>)
 8001150:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32000-1;
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <MX_TIM6_Init+0x68>)
 8001154:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8001158:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <MX_TIM6_Init+0x68>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8001160:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <MX_TIM6_Init+0x68>)
 8001162:	f242 720f 	movw	r2, #9999	; 0x270f
 8001166:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <MX_TIM6_Init+0x68>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <MX_TIM6_Init+0x68>)
 8001170:	f003 f806 	bl	8004180 <HAL_TIM_Base_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800117a:	f000 fcd1 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	4619      	mov	r1, r3
 800118a:	4806      	ldr	r0, [pc, #24]	; (80011a4 <MX_TIM6_Init+0x68>)
 800118c:	f003 fa7e 	bl	800468c <HAL_TIMEx_MasterConfigSynchronization>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001196:	f000 fcc3 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200002a4 	.word	0x200002a4
 80011a8:	40001000 	.word	0x40001000

080011ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <MX_USART1_UART_Init+0x58>)
 80011b2:	4a15      	ldr	r2, [pc, #84]	; (8001208 <MX_USART1_UART_Init+0x5c>)
 80011b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <MX_USART1_UART_Init+0x58>)
 80011b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_USART1_UART_Init+0x58>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <MX_USART1_UART_Init+0x58>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_USART1_UART_Init+0x58>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MX_USART1_UART_Init+0x58>)
 80011d2:	220c      	movs	r2, #12
 80011d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <MX_USART1_UART_Init+0x58>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_USART1_UART_Init+0x58>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <MX_USART1_UART_Init+0x58>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <MX_USART1_UART_Init+0x58>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_USART1_UART_Init+0x58>)
 80011f0:	f003 fad0 	bl	8004794 <HAL_UART_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80011fa:	f000 fc91 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200002f0 	.word	0x200002f0
 8001208:	40013800 	.word	0x40013800

0800120c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <MX_USART2_UART_Init+0x58>)
 8001212:	4a15      	ldr	r2, [pc, #84]	; (8001268 <MX_USART2_UART_Init+0x5c>)
 8001214:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <MX_USART2_UART_Init+0x58>)
 8001218:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800121c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_USART2_UART_Init+0x58>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <MX_USART2_UART_Init+0x58>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <MX_USART2_UART_Init+0x58>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <MX_USART2_UART_Init+0x58>)
 8001232:	220c      	movs	r2, #12
 8001234:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <MX_USART2_UART_Init+0x58>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <MX_USART2_UART_Init+0x58>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <MX_USART2_UART_Init+0x58>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <MX_USART2_UART_Init+0x58>)
 800124a:	2200      	movs	r2, #0
 800124c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <MX_USART2_UART_Init+0x58>)
 8001250:	f003 faa0 	bl	8004794 <HAL_UART_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800125a:	f000 fc61 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000374 	.word	0x20000374
 8001268:	40004400 	.word	0x40004400

0800126c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_DMA_Init+0x38>)
 8001274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001276:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <MX_DMA_Init+0x38>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6493      	str	r3, [r2, #72]	; 0x48
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_DMA_Init+0x38>)
 8001280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	200f      	movs	r0, #15
 8001290:	f001 f861 	bl	8002356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001294:	200f      	movs	r0, #15
 8001296:	f001 f87a 	bl	800238e <HAL_NVIC_EnableIRQ>

}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000

080012a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <MX_GPIO_Init+0x8c>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	4a1c      	ldr	r2, [pc, #112]	; (8001334 <MX_GPIO_Init+0x8c>)
 80012c4:	f043 0304 	orr.w	r3, r3, #4
 80012c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ca:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <MX_GPIO_Init+0x8c>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	4b17      	ldr	r3, [pc, #92]	; (8001334 <MX_GPIO_Init+0x8c>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	4a16      	ldr	r2, [pc, #88]	; (8001334 <MX_GPIO_Init+0x8c>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e2:	4b14      	ldr	r3, [pc, #80]	; (8001334 <MX_GPIO_Init+0x8c>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <MX_GPIO_Init+0x8c>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	4a10      	ldr	r2, [pc, #64]	; (8001334 <MX_GPIO_Init+0x8c>)
 80012f4:	f043 0302 	orr.w	r3, r3, #2
 80012f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <MX_GPIO_Init+0x8c>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	2108      	movs	r1, #8
 800130a:	480b      	ldr	r0, [pc, #44]	; (8001338 <MX_GPIO_Init+0x90>)
 800130c:	f001 fc3a 	bl	8002b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 8001310:	2308      	movs	r3, #8
 8001312:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001314:	2301      	movs	r3, #1
 8001316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	4619      	mov	r1, r3
 8001326:	4804      	ldr	r0, [pc, #16]	; (8001338 <MX_GPIO_Init+0x90>)
 8001328:	f001 fac2 	bl	80028b0 <HAL_GPIO_Init>

}
 800132c:	bf00      	nop
 800132e:	3720      	adds	r7, #32
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40021000 	.word	0x40021000
 8001338:	48000400 	.word	0x48000400

0800133c <store_m138_dev_id>:

/* USER CODE BEGIN 4 */
uint8_t store_m138_dev_id ( uint32_t* id , char* s )
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
	if ( ! strstr ( s , "DI=0x" ) )
 8001346:	4910      	ldr	r1, [pc, #64]	; (8001388 <store_m138_dev_id+0x4c>)
 8001348:	6838      	ldr	r0, [r7, #0]
 800134a:	f004 fd1f 	bl	8005d8c <strstr>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d101      	bne.n	8001358 <store_m138_dev_id+0x1c>
		return 0 ;
 8001354:	2300      	movs	r3, #0
 8001356:	e013      	b.n	8001380 <store_m138_dev_id+0x44>
	s = strtok ( (char*) s , "=" ) ;
 8001358:	490c      	ldr	r1, [pc, #48]	; (800138c <store_m138_dev_id+0x50>)
 800135a:	6838      	ldr	r0, [r7, #0]
 800135c:	f005 fbaa 	bl	8006ab4 <strtok>
 8001360:	6038      	str	r0, [r7, #0]
	s = strtok ( NULL , "," ) ;
 8001362:	490b      	ldr	r1, [pc, #44]	; (8001390 <store_m138_dev_id+0x54>)
 8001364:	2000      	movs	r0, #0
 8001366:	f005 fba5 	bl	8006ab4 <strtok>
 800136a:	6038      	str	r0, [r7, #0]
	*id = (uint32_t) strtol ( s , NULL , 16 ) ;
 800136c:	2210      	movs	r2, #16
 800136e:	2100      	movs	r1, #0
 8001370:	6838      	ldr	r0, [r7, #0]
 8001372:	f005 fc7d 	bl	8006c70 <strtol>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	601a      	str	r2, [r3, #0]
	return 1 ;
 800137e:	2301      	movs	r3, #1
}
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	08009258 	.word	0x08009258
 800138c:	08009260 	.word	0x08009260
 8001390:	08009264 	.word	0x08009264

08001394 <store_m138_voltage>:
uint8_t store_m138_voltage ( float* d , char* s )
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
	if ( ! strstr ( s , "$PW " ) )
 800139e:	4910      	ldr	r1, [pc, #64]	; (80013e0 <store_m138_voltage+0x4c>)
 80013a0:	6838      	ldr	r0, [r7, #0]
 80013a2:	f004 fcf3 	bl	8005d8c <strstr>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <store_m138_voltage+0x1c>
		return 0 ;
 80013ac:	2300      	movs	r3, #0
 80013ae:	e013      	b.n	80013d8 <store_m138_voltage+0x44>
	s = strtok ( (char*) s , " " ) ;
 80013b0:	490c      	ldr	r1, [pc, #48]	; (80013e4 <store_m138_voltage+0x50>)
 80013b2:	6838      	ldr	r0, [r7, #0]
 80013b4:	f005 fb7e 	bl	8006ab4 <strtok>
 80013b8:	6038      	str	r0, [r7, #0]
	s = strtok ( NULL , "," ) ;
 80013ba:	490b      	ldr	r1, [pc, #44]	; (80013e8 <store_m138_voltage+0x54>)
 80013bc:	2000      	movs	r0, #0
 80013be:	f005 fb79 	bl	8006ab4 <strtok>
 80013c2:	6038      	str	r0, [r7, #0]
	*d = (float) strtof ( s , NULL ) ;
 80013c4:	2100      	movs	r1, #0
 80013c6:	6838      	ldr	r0, [r7, #0]
 80013c8:	f005 fb18 	bl	80069fc <strtof>
 80013cc:	eef0 7a40 	vmov.f32	s15, s0
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	edc3 7a00 	vstr	s15, [r3]
	return 1 ;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	08009198 	.word	0x08009198
 80013e4:	08009268 	.word	0x08009268
 80013e8:	08009264 	.word	0x08009264

080013ec <store_m138_fix>:
uint8_t store_m138_fix ( char* d , char* s )
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
	if ( ! strstr ( s , "$GN " ) )
 80013f6:	4913      	ldr	r1, [pc, #76]	; (8001444 <store_m138_fix+0x58>)
 80013f8:	6838      	ldr	r0, [r7, #0]
 80013fa:	f004 fcc7 	bl	8005d8c <strstr>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <store_m138_fix+0x1c>
		return 0 ;
 8001404:	2300      	movs	r3, #0
 8001406:	e018      	b.n	800143a <store_m138_fix+0x4e>
	s = strtok ( (char*) s , " " ) ;
 8001408:	490f      	ldr	r1, [pc, #60]	; (8001448 <store_m138_fix+0x5c>)
 800140a:	6838      	ldr	r0, [r7, #0]
 800140c:	f005 fb52 	bl	8006ab4 <strtok>
 8001410:	6038      	str	r0, [r7, #0]
	s = strtok ( NULL , "*" ) ;
 8001412:	490e      	ldr	r1, [pc, #56]	; (800144c <store_m138_fix+0x60>)
 8001414:	2000      	movs	r0, #0
 8001416:	f005 fb4d 	bl	8006ab4 <strtok>
 800141a:	6038      	str	r0, [r7, #0]
	size_t l =  strlen ( s ) ;
 800141c:	6838      	ldr	r0, [r7, #0]
 800141e:	f7fe fed7 	bl	80001d0 <strlen>
 8001422:	60f8      	str	r0, [r7, #12]
	memcpy ( d , s , l ) ;
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	6839      	ldr	r1, [r7, #0]
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f004 fc65 	bl	8005cf8 <memcpy>
	d[l] = '\0' ;
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4413      	add	r3, r2
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
	return 1 ;
 8001438:	2301      	movs	r3, #1
}
 800143a:	4618      	mov	r0, r3
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	08009200 	.word	0x08009200
 8001448:	08009268 	.word	0x08009268
 800144c:	0800926c 	.word	0x0800926c

08001450 <reset_m138_var>:
void reset_m138_var ()
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
	m138_voltage = 0 ;
 8001454:	4b07      	ldr	r3, [pc, #28]	; (8001474 <reset_m138_var+0x24>)
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
	m138_fix[0] = '\0' ;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <reset_m138_var+0x28>)
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
	m138_payload_status_reg = 0 ;
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <reset_m138_var+0x2c>)
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000638 	.word	0x20000638
 8001478:	2000063c 	.word	0x2000063c
 800147c:	20000633 	.word	0x20000633

08001480 <set_swarm_uart>:

void set_swarm_uart ( uint8_t on )
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
	if ( on )
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d008      	beq.n	80014a2 <set_swarm_uart+0x22>
		__HAL_UART_ENABLE ( SWARM_UART_HANDLER ) ;
 8001490:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <set_swarm_uart+0x40>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <set_swarm_uart+0x40>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f042 0201 	orr.w	r2, r2, #1
 800149e:	601a      	str	r2, [r3, #0]
	else
		__HAL_UART_DISABLE ( SWARM_UART_HANDLER ) ;
}
 80014a0:	e007      	b.n	80014b2 <set_swarm_uart+0x32>
		__HAL_UART_DISABLE ( SWARM_UART_HANDLER ) ;
 80014a2:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <set_swarm_uart+0x40>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <set_swarm_uart+0x40>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 0201 	bic.w	r2, r2, #1
 80014b0:	601a      	str	r2, [r3, #0]
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	200002f0 	.word	0x200002f0

080014c4 <swarm_cc>:
uint8_t swarm_cc ( const char* at_command , const char* expected_answer )
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
	uint8_t try ;
	uint8_t cs = nmea_checksum ( at_command , strlen ( at_command ) ) ;
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7fe fe7e 	bl	80001d0 <strlen>
 80014d4:	4603      	mov	r3, r0
 80014d6:	4619      	mov	r1, r3
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 fa79 	bl	80019d0 <nmea_checksum>
 80014de:	4603      	mov	r3, r0
 80014e0:	73bb      	strb	r3, [r7, #14]
	int l ;

	l = sprintf ( swarm_uart_tx_buff , "%s*%02x\n" , at_command , cs ) ;
 80014e2:	7bbb      	ldrb	r3, [r7, #14]
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	492b      	ldr	r1, [pc, #172]	; (8001594 <swarm_cc+0xd0>)
 80014e8:	482b      	ldr	r0, [pc, #172]	; (8001598 <swarm_cc+0xd4>)
 80014ea:	f004 fc1b 	bl	8005d24 <siprintf>
 80014ee:	60b8      	str	r0, [r7, #8]
	swarm_uart_rx_buff[0] = '\0' ;
 80014f0:	4b2a      	ldr	r3, [pc, #168]	; (800159c <swarm_cc+0xd8>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
	//clean_swarm_uart_rx_buff () ;
	for ( try = 0 ; try < 5 ; try++ )
 80014f6:	2300      	movs	r3, #0
 80014f8:	73fb      	strb	r3, [r7, #15]
 80014fa:	e039      	b.n	8001570 <swarm_cc+0xac>
	{
		tim_start () ;
 80014fc:	f000 faa2 	bl	8001a44 <tim_start>
		/*if ( bkpt )
			__NOP () ;*/
		if ( answer_from_swarm == 0 )
 8001500:	4b27      	ldr	r3, [pc, #156]	; (80015a0 <swarm_cc+0xdc>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d10f      	bne.n	8001528 <swarm_cc+0x64>
			if ( receive_swarm_uart_dma () != HAL_OK )
 8001508:	f000 fac4 	bl	8001a94 <receive_swarm_uart_dma>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d00a      	beq.n	8001528 <swarm_cc+0x64>
			{
				sprintf ( dbg_uart_tx_buff , "try no. %u != HAL_OK for %s\n" , try , at_command ) ;
 8001512:	7bfa      	ldrb	r2, [r7, #15]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4923      	ldr	r1, [pc, #140]	; (80015a4 <swarm_cc+0xe0>)
 8001518:	4823      	ldr	r0, [pc, #140]	; (80015a8 <swarm_cc+0xe4>)
 800151a:	f004 fc03 	bl	8005d24 <siprintf>
				send_string_2_dbg_uart ( dbg_uart_tx_buff ) ;
 800151e:	4822      	ldr	r0, [pc, #136]	; (80015a8 <swarm_cc+0xe4>)
 8001520:	f000 fa40 	bl	80019a4 <send_string_2_dbg_uart>
				clean_swarm_uart_rx_buff () ;
 8001524:	f000 fa10 	bl	8001948 <clean_swarm_uart_rx_buff>
			}
		send_string_2_swarm_uart ( swarm_uart_tx_buff , l ) ;
 8001528:	68b9      	ldr	r1, [r7, #8]
 800152a:	481b      	ldr	r0, [pc, #108]	; (8001598 <swarm_cc+0xd4>)
 800152c:	f000 fa26 	bl	800197c <send_string_2_swarm_uart>
		while ( tim_on )
 8001530:	e017      	b.n	8001562 <swarm_cc+0x9e>
			if ( answer_from_swarm == 2 )
 8001532:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <swarm_cc+0xdc>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d113      	bne.n	8001562 <swarm_cc+0x9e>
			{
				answer_from_swarm = 0 ;
 800153a:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <swarm_cc+0xdc>)
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
				//sprintf ( dbg_uart_tx_buff , "try no. %u answer_from_swarm = 2 for %s\n" , try , at_command ) ;
				//send_string_2_dbg_uart ( dbg_uart_tx_buff ) ;
				if ( strncmp ( swarm_uart_rx_buff , expected_answer , strlen ( expected_answer ) ) == 0 )
 8001540:	6838      	ldr	r0, [r7, #0]
 8001542:	f7fe fe45 	bl	80001d0 <strlen>
 8001546:	4603      	mov	r3, r0
 8001548:	461a      	mov	r2, r3
 800154a:	6839      	ldr	r1, [r7, #0]
 800154c:	4813      	ldr	r0, [pc, #76]	; (800159c <swarm_cc+0xd8>)
 800154e:	f004 fc09 	bl	8005d64 <strncmp>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d101      	bne.n	800155c <swarm_cc+0x98>
				{
					//sprintf ( dbg_uart_tx_buff , "try no. %u success for %s\n" , try , at_command ) ;
					//send_string_2_dbg_uart ( dbg_uart_tx_buff ) ;
					return 1 ;
 8001558:	2301      	movs	r3, #1
 800155a:	e016      	b.n	800158a <swarm_cc+0xc6>
				}
				else
				{
					clean_swarm_uart_rx_buff () ;
 800155c:	f000 f9f4 	bl	8001948 <clean_swarm_uart_rx_buff>
					break ;
 8001560:	e003      	b.n	800156a <swarm_cc+0xa6>
		while ( tim_on )
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <swarm_cc+0xe8>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1e3      	bne.n	8001532 <swarm_cc+0x6e>
	for ( try = 0 ; try < 5 ; try++ )
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	3301      	adds	r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	2b04      	cmp	r3, #4
 8001574:	d9c2      	bls.n	80014fc <swarm_cc+0x38>
				}
			}
	}
	sprintf ( dbg_uart_tx_buff , "%s %s\n" , (char*) expected_answer , "not received." ) ;
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <swarm_cc+0xec>)
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	490e      	ldr	r1, [pc, #56]	; (80015b4 <swarm_cc+0xf0>)
 800157c:	480a      	ldr	r0, [pc, #40]	; (80015a8 <swarm_cc+0xe4>)
 800157e:	f004 fbd1 	bl	8005d24 <siprintf>
	send_string_2_dbg_uart ( dbg_uart_tx_buff ) ;
 8001582:	4809      	ldr	r0, [pc, #36]	; (80015a8 <swarm_cc+0xe4>)
 8001584:	f000 fa0e 	bl	80019a4 <send_string_2_dbg_uart>
	return 0 ;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	08009270 	.word	0x08009270
 8001598:	200004a4 	.word	0x200004a4
 800159c:	20000440 	.word	0x20000440
 80015a0:	20000631 	.word	0x20000631
 80015a4:	0800927c 	.word	0x0800927c
 80015a8:	20000568 	.word	0x20000568
 80015ac:	20000630 	.word	0x20000630
 80015b0:	0800929c 	.word	0x0800929c
 80015b4:	080092ac 	.word	0x080092ac

080015b8 <m138_sleep>:

uint8_t m138_sleep ( unsigned int t )
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	sprintf ( (char*) sl_at_comm , "$SL S=%u" , t ) ;
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	490d      	ldr	r1, [pc, #52]	; (80015f8 <m138_sleep+0x40>)
 80015c4:	480d      	ldr	r0, [pc, #52]	; (80015fc <m138_sleep+0x44>)
 80015c6:	f004 fbad 	bl	8005d24 <siprintf>
	if ( swarm_cc ( (const char*) sl_at_comm , sl_ok_answer ) )
 80015ca:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <m138_sleep+0x48>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4619      	mov	r1, r3
 80015d0:	480a      	ldr	r0, [pc, #40]	; (80015fc <m138_sleep+0x44>)
 80015d2:	f7ff ff77 	bl	80014c4 <swarm_cc>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d008      	beq.n	80015ee <m138_sleep+0x36>
	{
		sprintf ( dbg_uart_tx_buff , "Swarm went sleep for 5.\n" ) ;
 80015dc:	4909      	ldr	r1, [pc, #36]	; (8001604 <m138_sleep+0x4c>)
 80015de:	480a      	ldr	r0, [pc, #40]	; (8001608 <m138_sleep+0x50>)
 80015e0:	f004 fba0 	bl	8005d24 <siprintf>
		send_string_2_dbg_uart ( dbg_uart_tx_buff ) ;
 80015e4:	4808      	ldr	r0, [pc, #32]	; (8001608 <m138_sleep+0x50>)
 80015e6:	f000 f9dd 	bl	80019a4 <send_string_2_dbg_uart>
		return 1 ;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <m138_sleep+0x38>
	}
	return 0 ;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	080092b4 	.word	0x080092b4
 80015fc:	20000670 	.word	0x20000670
 8001600:	20000080 	.word	0x20000080
 8001604:	080092c0 	.word	0x080092c0
 8001608:	20000568 	.word	0x20000568

0800160c <m138_del_all_unsent>:
uint8_t m138_del_all_unsent	()
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
	if ( swarm_cc ( mt_del_all_unsent_at , mt_del_all_unsent_answer ) )
 8001610:	4b07      	ldr	r3, [pc, #28]	; (8001630 <m138_del_all_unsent+0x24>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a07      	ldr	r2, [pc, #28]	; (8001634 <m138_del_all_unsent+0x28>)
 8001616:	6812      	ldr	r2, [r2, #0]
 8001618:	4611      	mov	r1, r2
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ff52 	bl	80014c4 <swarm_cc>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <m138_del_all_unsent+0x1e>
		return 1 ;
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <m138_del_all_unsent+0x20>
	else
		return 0 ;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	bd80      	pop	{r7, pc}
 8001630:	2000003c 	.word	0x2000003c
 8001634:	2000007c 	.word	0x2000007c

08001638 <m138_send_message>:
uint8_t m138_send_message ()
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	sprintf ( dbg_uart_tx_buff , "$TD HD=60,\"%u;%s\"\n" , (unsigned int) m138_dev_id , m138_fix ) ;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <m138_send_message+0x20>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <m138_send_message+0x24>)
 8001642:	4907      	ldr	r1, [pc, #28]	; (8001660 <m138_send_message+0x28>)
 8001644:	4807      	ldr	r0, [pc, #28]	; (8001664 <m138_send_message+0x2c>)
 8001646:	f004 fb6d 	bl	8005d24 <siprintf>
	send_string_2_dbg_uart ( dbg_uart_tx_buff ) ;
 800164a:	4806      	ldr	r0, [pc, #24]	; (8001664 <m138_send_message+0x2c>)
 800164c:	f000 f9aa 	bl	80019a4 <send_string_2_dbg_uart>
	return 1;
 8001650:	2301      	movs	r3, #1
}
 8001652:	4618      	mov	r0, r3
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000634 	.word	0x20000634
 800165c:	2000063c 	.word	0x2000063c
 8001660:	080092dc 	.word	0x080092dc
 8001664:	20000568 	.word	0x20000568

08001668 <m138_payload>:

uint8_t m138_payload ()
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	if ( swarm_cc ( pw_mostrecent_at , pw_mostrecent_answer ) )
 800166c:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <m138_payload+0x84>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a1f      	ldr	r2, [pc, #124]	; (80016f0 <m138_payload+0x88>)
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	4611      	mov	r1, r2
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ff24 	bl	80014c4 <swarm_cc>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00d      	beq.n	800169e <m138_payload+0x36>
		if ( store_m138_voltage ( &m138_voltage , swarm_uart_rx_buff ) )
 8001682:	491c      	ldr	r1, [pc, #112]	; (80016f4 <m138_payload+0x8c>)
 8001684:	481c      	ldr	r0, [pc, #112]	; (80016f8 <m138_payload+0x90>)
 8001686:	f7ff fe85 	bl	8001394 <store_m138_voltage>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d006      	beq.n	800169e <m138_payload+0x36>
			m138_payload_status_reg = m138_payload_status_reg | 1 ;
 8001690:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <m138_payload+0x94>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4b18      	ldr	r3, [pc, #96]	; (80016fc <m138_payload+0x94>)
 800169c:	701a      	strb	r2, [r3, #0]
	if ( swarm_cc ( gn_mostrecent_at , gn_mostrecent_answer ) )
 800169e:	4b18      	ldr	r3, [pc, #96]	; (8001700 <m138_payload+0x98>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a18      	ldr	r2, [pc, #96]	; (8001704 <m138_payload+0x9c>)
 80016a4:	6812      	ldr	r2, [r2, #0]
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff0b 	bl	80014c4 <swarm_cc>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d00d      	beq.n	80016d0 <m138_payload+0x68>
		if ( store_m138_fix ( m138_fix , swarm_uart_rx_buff ) )
 80016b4:	490f      	ldr	r1, [pc, #60]	; (80016f4 <m138_payload+0x8c>)
 80016b6:	4814      	ldr	r0, [pc, #80]	; (8001708 <m138_payload+0xa0>)
 80016b8:	f7ff fe98 	bl	80013ec <store_m138_fix>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d006      	beq.n	80016d0 <m138_payload+0x68>
			m138_payload_status_reg = m138_payload_status_reg | 2 ;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <m138_payload+0x94>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	f043 0302 	orr.w	r3, r3, #2
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <m138_payload+0x94>)
 80016ce:	701a      	strb	r2, [r3, #0]

	sprintf ( dbg_uart_tx_buff , "%s%u\n" , "m138_payload_status_reg = " , m138_payload_status_reg ) ;
 80016d0:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <m138_payload+0x94>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4a0d      	ldr	r2, [pc, #52]	; (800170c <m138_payload+0xa4>)
 80016d6:	490e      	ldr	r1, [pc, #56]	; (8001710 <m138_payload+0xa8>)
 80016d8:	480e      	ldr	r0, [pc, #56]	; (8001714 <m138_payload+0xac>)
 80016da:	f004 fb23 	bl	8005d24 <siprintf>
	send_string_2_dbg_uart ( dbg_uart_tx_buff ) ;
 80016de:	480d      	ldr	r0, [pc, #52]	; (8001714 <m138_payload+0xac>)
 80016e0:	f000 f960 	bl	80019a4 <send_string_2_dbg_uart>

	return m138_payload_status_reg ;
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <m138_payload+0x94>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000014 	.word	0x20000014
 80016f0:	20000054 	.word	0x20000054
 80016f4:	20000440 	.word	0x20000440
 80016f8:	20000638 	.word	0x20000638
 80016fc:	20000633 	.word	0x20000633
 8001700:	20000038 	.word	0x20000038
 8001704:	20000078 	.word	0x20000078
 8001708:	2000063c 	.word	0x2000063c
 800170c:	080092f0 	.word	0x080092f0
 8001710:	0800930c 	.word	0x0800930c
 8001714:	20000568 	.word	0x20000568

08001718 <m138_init>:
uint8_t m138_init ()
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	if ( swarm_cc ( cs_at , cs_answer ) )
 800171c:	4b6a      	ldr	r3, [pc, #424]	; (80018c8 <m138_init+0x1b0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a6a      	ldr	r2, [pc, #424]	; (80018cc <m138_init+0x1b4>)
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	4611      	mov	r1, r2
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fecc 	bl	80014c4 <swarm_cc>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00d      	beq.n	800174e <m138_init+0x36>
		if ( store_m138_dev_id ( &m138_dev_id , swarm_uart_rx_buff ) )
 8001732:	4967      	ldr	r1, [pc, #412]	; (80018d0 <m138_init+0x1b8>)
 8001734:	4867      	ldr	r0, [pc, #412]	; (80018d4 <m138_init+0x1bc>)
 8001736:	f7ff fe01 	bl	800133c <store_m138_dev_id>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d006      	beq.n	800174e <m138_init+0x36>
			m138_init_status_reg = m138_init_status_reg | 1 ;
 8001740:	4b65      	ldr	r3, [pc, #404]	; (80018d8 <m138_init+0x1c0>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4b63      	ldr	r3, [pc, #396]	; (80018d8 <m138_init+0x1c0>)
 800174c:	701a      	strb	r2, [r3, #0]
	if ( swarm_cc ( rt_0_at , rt_ok_answer ) )
 800174e:	4b63      	ldr	r3, [pc, #396]	; (80018dc <m138_init+0x1c4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a63      	ldr	r2, [pc, #396]	; (80018e0 <m138_init+0x1c8>)
 8001754:	6812      	ldr	r2, [r2, #0]
 8001756:	4611      	mov	r1, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff feb3 	bl	80014c4 <swarm_cc>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d011      	beq.n	8001788 <m138_init+0x70>
		if ( swarm_cc ( rt_q_rate_at , rt_0_answer ) )
 8001764:	4b5f      	ldr	r3, [pc, #380]	; (80018e4 <m138_init+0x1cc>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a5f      	ldr	r2, [pc, #380]	; (80018e8 <m138_init+0x1d0>)
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	4611      	mov	r1, r2
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fea8 	bl	80014c4 <swarm_cc>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d006      	beq.n	8001788 <m138_init+0x70>
			m138_init_status_reg = m138_init_status_reg | 2 ;
 800177a:	4b57      	ldr	r3, [pc, #348]	; (80018d8 <m138_init+0x1c0>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	f043 0302 	orr.w	r3, r3, #2
 8001782:	b2da      	uxtb	r2, r3
 8001784:	4b54      	ldr	r3, [pc, #336]	; (80018d8 <m138_init+0x1c0>)
 8001786:	701a      	strb	r2, [r3, #0]
	if ( swarm_cc ( pw_0_at , pw_ok_answer ) )
 8001788:	4b58      	ldr	r3, [pc, #352]	; (80018ec <m138_init+0x1d4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a58      	ldr	r2, [pc, #352]	; (80018f0 <m138_init+0x1d8>)
 800178e:	6812      	ldr	r2, [r2, #0]
 8001790:	4611      	mov	r1, r2
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fe96 	bl	80014c4 <swarm_cc>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d011      	beq.n	80017c2 <m138_init+0xaa>
		if ( swarm_cc ( pw_q_rate_at , pw_0_answer ) )
 800179e:	4b55      	ldr	r3, [pc, #340]	; (80018f4 <m138_init+0x1dc>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a55      	ldr	r2, [pc, #340]	; (80018f8 <m138_init+0x1e0>)
 80017a4:	6812      	ldr	r2, [r2, #0]
 80017a6:	4611      	mov	r1, r2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fe8b 	bl	80014c4 <swarm_cc>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d006      	beq.n	80017c2 <m138_init+0xaa>
			m138_init_status_reg = m138_init_status_reg | 4 ;
 80017b4:	4b48      	ldr	r3, [pc, #288]	; (80018d8 <m138_init+0x1c0>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	f043 0304 	orr.w	r3, r3, #4
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4b46      	ldr	r3, [pc, #280]	; (80018d8 <m138_init+0x1c0>)
 80017c0:	701a      	strb	r2, [r3, #0]
	if ( swarm_cc ( dt_0_at , dt_ok_answer ) )
 80017c2:	4b4e      	ldr	r3, [pc, #312]	; (80018fc <m138_init+0x1e4>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a4e      	ldr	r2, [pc, #312]	; (8001900 <m138_init+0x1e8>)
 80017c8:	6812      	ldr	r2, [r2, #0]
 80017ca:	4611      	mov	r1, r2
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fe79 	bl	80014c4 <swarm_cc>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d011      	beq.n	80017fc <m138_init+0xe4>
		if ( swarm_cc ( dt_q_rate_at , dt_0_answer ) )
 80017d8:	4b4a      	ldr	r3, [pc, #296]	; (8001904 <m138_init+0x1ec>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a4a      	ldr	r2, [pc, #296]	; (8001908 <m138_init+0x1f0>)
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fe6e 	bl	80014c4 <swarm_cc>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d006      	beq.n	80017fc <m138_init+0xe4>
			m138_init_status_reg = m138_init_status_reg | 8 ;
 80017ee:	4b3a      	ldr	r3, [pc, #232]	; (80018d8 <m138_init+0x1c0>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	f043 0308 	orr.w	r3, r3, #8
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	4b37      	ldr	r3, [pc, #220]	; (80018d8 <m138_init+0x1c0>)
 80017fa:	701a      	strb	r2, [r3, #0]
	if ( swarm_cc ( gs_0_at , gs_ok_answer ) )
 80017fc:	4b43      	ldr	r3, [pc, #268]	; (800190c <m138_init+0x1f4>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a43      	ldr	r2, [pc, #268]	; (8001910 <m138_init+0x1f8>)
 8001802:	6812      	ldr	r2, [r2, #0]
 8001804:	4611      	mov	r1, r2
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fe5c 	bl	80014c4 <swarm_cc>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d011      	beq.n	8001836 <m138_init+0x11e>
		if ( swarm_cc ( gs_q_rate_at , gs_0_answer ) )
 8001812:	4b40      	ldr	r3, [pc, #256]	; (8001914 <m138_init+0x1fc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a40      	ldr	r2, [pc, #256]	; (8001918 <m138_init+0x200>)
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fe51 	bl	80014c4 <swarm_cc>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d006      	beq.n	8001836 <m138_init+0x11e>
			m138_init_status_reg = m138_init_status_reg | 16 ;
 8001828:	4b2b      	ldr	r3, [pc, #172]	; (80018d8 <m138_init+0x1c0>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	f043 0310 	orr.w	r3, r3, #16
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4b29      	ldr	r3, [pc, #164]	; (80018d8 <m138_init+0x1c0>)
 8001834:	701a      	strb	r2, [r3, #0]
	if ( swarm_cc ( gj_0_at , gj_ok_answer ) )
 8001836:	4b39      	ldr	r3, [pc, #228]	; (800191c <m138_init+0x204>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a39      	ldr	r2, [pc, #228]	; (8001920 <m138_init+0x208>)
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	4611      	mov	r1, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fe3f 	bl	80014c4 <swarm_cc>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d011      	beq.n	8001870 <m138_init+0x158>
		if ( swarm_cc ( gj_q_rate_at , gj_0_answer ) )
 800184c:	4b35      	ldr	r3, [pc, #212]	; (8001924 <m138_init+0x20c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a35      	ldr	r2, [pc, #212]	; (8001928 <m138_init+0x210>)
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	4611      	mov	r1, r2
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fe34 	bl	80014c4 <swarm_cc>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d006      	beq.n	8001870 <m138_init+0x158>
			m138_init_status_reg = m138_init_status_reg | 32 ;
 8001862:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <m138_init+0x1c0>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	f043 0320 	orr.w	r3, r3, #32
 800186a:	b2da      	uxtb	r2, r3
 800186c:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <m138_init+0x1c0>)
 800186e:	701a      	strb	r2, [r3, #0]
	if ( swarm_cc ( gn_0_at , gn_ok_answer ) )
 8001870:	4b2e      	ldr	r3, [pc, #184]	; (800192c <m138_init+0x214>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a2e      	ldr	r2, [pc, #184]	; (8001930 <m138_init+0x218>)
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	4611      	mov	r1, r2
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fe22 	bl	80014c4 <swarm_cc>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d011      	beq.n	80018aa <m138_init+0x192>
		if ( swarm_cc ( gn_q_rate_at , gn_0_answer ) )
 8001886:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <m138_init+0x21c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a2b      	ldr	r2, [pc, #172]	; (8001938 <m138_init+0x220>)
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	4611      	mov	r1, r2
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fe17 	bl	80014c4 <swarm_cc>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d006      	beq.n	80018aa <m138_init+0x192>
			m138_init_status_reg = m138_init_status_reg | 64 ;
 800189c:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <m138_init+0x1c0>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <m138_init+0x1c0>)
 80018a8:	701a      	strb	r2, [r3, #0]

	sprintf ( dbg_uart_tx_buff , "%s%u\n" , "m138_init_status_reg = " , m138_init_status_reg ) ;
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <m138_init+0x1c0>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	4a23      	ldr	r2, [pc, #140]	; (800193c <m138_init+0x224>)
 80018b0:	4923      	ldr	r1, [pc, #140]	; (8001940 <m138_init+0x228>)
 80018b2:	4824      	ldr	r0, [pc, #144]	; (8001944 <m138_init+0x22c>)
 80018b4:	f004 fa36 	bl	8005d24 <siprintf>
	send_string_2_dbg_uart ( dbg_uart_tx_buff ) ;
 80018b8:	4822      	ldr	r0, [pc, #136]	; (8001944 <m138_init+0x22c>)
 80018ba:	f000 f873 	bl	80019a4 <send_string_2_dbg_uart>

	return m138_init_status_reg ;
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <m138_init+0x1c0>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000000 	.word	0x20000000
 80018cc:	20000040 	.word	0x20000040
 80018d0:	20000440 	.word	0x20000440
 80018d4:	20000634 	.word	0x20000634
 80018d8:	20000632 	.word	0x20000632
 80018dc:	20000004 	.word	0x20000004
 80018e0:	20000044 	.word	0x20000044
 80018e4:	20000008 	.word	0x20000008
 80018e8:	20000048 	.word	0x20000048
 80018ec:	2000000c 	.word	0x2000000c
 80018f0:	2000004c 	.word	0x2000004c
 80018f4:	20000010 	.word	0x20000010
 80018f8:	20000050 	.word	0x20000050
 80018fc:	20000018 	.word	0x20000018
 8001900:	20000058 	.word	0x20000058
 8001904:	2000001c 	.word	0x2000001c
 8001908:	2000005c 	.word	0x2000005c
 800190c:	20000020 	.word	0x20000020
 8001910:	20000060 	.word	0x20000060
 8001914:	20000024 	.word	0x20000024
 8001918:	20000064 	.word	0x20000064
 800191c:	20000028 	.word	0x20000028
 8001920:	20000068 	.word	0x20000068
 8001924:	2000002c 	.word	0x2000002c
 8001928:	2000006c 	.word	0x2000006c
 800192c:	20000030 	.word	0x20000030
 8001930:	20000070 	.word	0x20000070
 8001934:	20000034 	.word	0x20000034
 8001938:	20000074 	.word	0x20000074
 800193c:	08009314 	.word	0x08009314
 8001940:	0800930c 	.word	0x0800930c
 8001944:	20000568 	.word	0x20000568

08001948 <clean_swarm_uart_rx_buff>:

void clean_swarm_uart_rx_buff ()
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
	uint8_t i ;
	for ( i = 0 ; i < SWARM_UART_RX_MAX_BUFF_SIZE ; i++ )
 800194e:	2300      	movs	r3, #0
 8001950:	71fb      	strb	r3, [r7, #7]
 8001952:	e006      	b.n	8001962 <clean_swarm_uart_rx_buff+0x1a>
		swarm_uart_rx_buff[i] = '\0' ;
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	4a08      	ldr	r2, [pc, #32]	; (8001978 <clean_swarm_uart_rx_buff+0x30>)
 8001958:	2100      	movs	r1, #0
 800195a:	54d1      	strb	r1, [r2, r3]
	for ( i = 0 ; i < SWARM_UART_RX_MAX_BUFF_SIZE ; i++ )
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	3301      	adds	r3, #1
 8001960:	71fb      	strb	r3, [r7, #7]
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	2b63      	cmp	r3, #99	; 0x63
 8001966:	d9f5      	bls.n	8001954 <clean_swarm_uart_rx_buff+0xc>
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20000440 	.word	0x20000440

0800197c <send_string_2_swarm_uart>:
{
	HAL_GPIO_TogglePin ( GREEN_GPIO_Port , GREEN_Pin ) ;
}

HAL_StatusTypeDef send_string_2_swarm_uart ( char* s , int l )
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
	return HAL_UART_Transmit ( SWARM_UART_HANDLER , (uint8_t *) s , l , UART_TX_TIMEOUT ) ;
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	b29a      	uxth	r2, r3
 800198a:	2364      	movs	r3, #100	; 0x64
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	4804      	ldr	r0, [pc, #16]	; (80019a0 <send_string_2_swarm_uart+0x24>)
 8001990:	f002 ff4e 	bl	8004830 <HAL_UART_Transmit>
 8001994:	4603      	mov	r3, r0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200002f0 	.word	0x200002f0

080019a4 <send_string_2_dbg_uart>:
HAL_StatusTypeDef send_string_2_dbg_uart ( char* s )
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	return HAL_UART_Transmit ( DBG_UART_HANDLER , (uint8_t *) s , strlen ( s ) , UART_TX_TIMEOUT ) ;
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7fe fc0f 	bl	80001d0 <strlen>
 80019b2:	4603      	mov	r3, r0
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	2364      	movs	r3, #100	; 0x64
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	4804      	ldr	r0, [pc, #16]	; (80019cc <send_string_2_dbg_uart+0x28>)
 80019bc:	f002 ff38 	bl	8004830 <HAL_UART_Transmit>
 80019c0:	4603      	mov	r3, r0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000374 	.word	0x20000374

080019d0 <nmea_checksum>:

uint8_t nmea_checksum ( const char *message , size_t len )
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
	size_t i = 0 ;
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
	uint8_t cs ;
	if ( message [0] == '$' )
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b24      	cmp	r3, #36	; 0x24
 80019e4:	d102      	bne.n	80019ec <nmea_checksum+0x1c>
		i++ ;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	3301      	adds	r3, #1
 80019ea:	60fb      	str	r3, [r7, #12]
	for ( cs = 0 ; ( i < len ) && message [i] ; i++ )
 80019ec:	2300      	movs	r3, #0
 80019ee:	72fb      	strb	r3, [r7, #11]
 80019f0:	e009      	b.n	8001a06 <nmea_checksum+0x36>
		cs ^= ( (uint8_t) message [i] ) ;
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	781a      	ldrb	r2, [r3, #0]
 80019fa:	7afb      	ldrb	r3, [r7, #11]
 80019fc:	4053      	eors	r3, r2
 80019fe:	72fb      	strb	r3, [r7, #11]
	for ( cs = 0 ; ( i < len ) && message [i] ; i++ )
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	3301      	adds	r3, #1
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d205      	bcs.n	8001a1a <nmea_checksum+0x4a>
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4413      	add	r3, r2
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1eb      	bne.n	80019f2 <nmea_checksum+0x22>
	return cs;
 8001a1a:	7afb      	ldrb	r3, [r7, #11]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <tim_init>:

void tim_init ()
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( &TIM_HANDLER , TIM_IT_UPDATE ) ;
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <tim_init+0x18>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f06f 0201 	mvn.w	r2, #1
 8001a34:	611a      	str	r2, [r3, #16]
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	200002a4 	.word	0x200002a4

08001a44 <tim_start>:
void tim_start ()
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT ( &TIM_HANDLER ) ;
 8001a48:	4803      	ldr	r0, [pc, #12]	; (8001a58 <tim_start+0x14>)
 8001a4a:	f002 fbf1 	bl	8004230 <HAL_TIM_Base_Start_IT>
	tim_on = 1 ;
 8001a4e:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <tim_start+0x18>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	200002a4 	.word	0x200002a4
 8001a5c:	20000630 	.word	0x20000630

08001a60 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM_INSTANCE )
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a06      	ldr	r2, [pc, #24]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d105      	bne.n	8001a7e <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		HAL_TIM_Base_Stop_IT ( &TIM_HANDLER ) ;
 8001a72:	4806      	ldr	r0, [pc, #24]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001a74:	f002 fc30 	bl	80042d8 <HAL_TIM_Base_Stop_IT>
		tim_on = 0 ;
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
	}
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40001000 	.word	0x40001000
 8001a8c:	200002a4 	.word	0x200002a4
 8001a90:	20000630 	.word	0x20000630

08001a94 <receive_swarm_uart_dma>:

HAL_StatusTypeDef receive_swarm_uart_dma ()
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0

	//__HAL_UART_CLEAR_IDLEFLAG ( SWARM_UART_HANDLER ) ;

	//__HAL_UART_RESET_HANDLE_STATE (SWARM_UART_HANDLER) ;
*/
	HAL_StatusTypeDef r = HAL_UARTEx_ReceiveToIdle_DMA ( SWARM_UART_HANDLER , (uint8_t*) swarm_uart_rx_buff , SWARM_UART_RX_MAX_BUFF_SIZE ) ;
 8001a9a:	2264      	movs	r2, #100	; 0x64
 8001a9c:	490d      	ldr	r1, [pc, #52]	; (8001ad4 <receive_swarm_uart_dma+0x40>)
 8001a9e:	480e      	ldr	r0, [pc, #56]	; (8001ad8 <receive_swarm_uart_dma+0x44>)
 8001aa0:	f004 f8a5 	bl	8005bee <HAL_UARTEx_ReceiveToIdle_DMA>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	71fb      	strb	r3, [r7, #7]
	if ( r == HAL_OK )
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10b      	bne.n	8001ac6 <receive_swarm_uart_dma+0x32>
	{
		answer_from_swarm = 1 ;
 8001aae:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <receive_swarm_uart_dma+0x48>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	701a      	strb	r2, [r3, #0]
		__HAL_DMA_DISABLE_IT ( &hdma_usart1_rx, DMA_IT_HT ) ; //Disable Half Transfer interrupt.
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <receive_swarm_uart_dma+0x4c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <receive_swarm_uart_dma+0x4c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0204 	bic.w	r2, r2, #4
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	e000      	b.n	8001ac8 <receive_swarm_uart_dma+0x34>
	}
	else
	{
		__NOP();
 8001ac6:	bf00      	nop
	}
	return r ;
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000440 	.word	0x20000440
 8001ad8:	200002f0 	.word	0x200002f0
 8001adc:	20000631 	.word	0x20000631
 8001ae0:	200003f8 	.word	0x200003f8

08001ae4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback ( UART_HandleTypeDef *huart , uint16_t Size )
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	807b      	strh	r3, [r7, #2]
    if ( huart->Instance == SWARM_UART_INSTANCE )
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a07      	ldr	r2, [pc, #28]	; (8001b14 <HAL_UARTEx_RxEventCallback+0x30>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d106      	bne.n	8001b08 <HAL_UARTEx_RxEventCallback+0x24>
    {
    	answer_from_swarm = 2 ;
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <HAL_UARTEx_RxEventCallback+0x34>)
 8001afc:	2202      	movs	r2, #2
 8001afe:	701a      	strb	r2, [r3, #0]
    	swarm_uart_rx_buff[Size] = '\0' ;
 8001b00:	887b      	ldrh	r3, [r7, #2]
 8001b02:	4a06      	ldr	r2, [pc, #24]	; (8001b1c <HAL_UARTEx_RxEventCallback+0x38>)
 8001b04:	2100      	movs	r1, #0
 8001b06:	54d1      	strb	r1, [r2, r3]
    }
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	40013800 	.word	0x40013800
 8001b18:	20000631 	.word	0x20000631
 8001b1c:	20000440 	.word	0x20000440

08001b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b24:	b672      	cpsid	i
}
 8001b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <Error_Handler+0x8>
	...

08001b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b32:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <HAL_MspInit+0x44>)
 8001b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b36:	4a0e      	ldr	r2, [pc, #56]	; (8001b70 <HAL_MspInit+0x44>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <HAL_MspInit+0x44>)
 8001b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <HAL_MspInit+0x44>)
 8001b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4e:	4a08      	ldr	r2, [pc, #32]	; (8001b70 <HAL_MspInit+0x44>)
 8001b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b54:	6593      	str	r3, [r2, #88]	; 0x58
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_MspInit+0x44>)
 8001b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40021000 	.word	0x40021000

08001b74 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b098      	sub	sp, #96	; 0x60
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b7c:	f107 030c 	add.w	r3, r7, #12
 8001b80:	2254      	movs	r2, #84	; 0x54
 8001b82:	2100      	movs	r1, #0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f004 f8c5 	bl	8005d14 <memset>
  if(hrtc->Instance==RTC)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a13      	ldr	r2, [pc, #76]	; (8001bdc <HAL_RTC_MspInit+0x68>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d11f      	bne.n	8001bd4 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b98:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001b9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b9e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ba0:	f107 030c 	add.w	r3, r7, #12
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f001 feb1 	bl	800390c <HAL_RCCEx_PeriphCLKConfig>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001bb0:	f7ff ffb6 	bl	8001b20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_RTC_MspInit+0x6c>)
 8001bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bba:	4a09      	ldr	r2, [pc, #36]	; (8001be0 <HAL_RTC_MspInit+0x6c>)
 8001bbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	2003      	movs	r0, #3
 8001bca:	f000 fbc4 	bl	8002356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001bce:	2003      	movs	r0, #3
 8001bd0:	f000 fbdd 	bl	800238e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001bd4:	bf00      	nop
 8001bd6:	3760      	adds	r7, #96	; 0x60
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40002800 	.word	0x40002800
 8001be0:	40021000 	.word	0x40021000

08001be4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	; (8001c28 <HAL_TIM_Base_MspInit+0x44>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d113      	bne.n	8001c1e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001bf6:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <HAL_TIM_Base_MspInit+0x48>)
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfa:	4a0c      	ldr	r2, [pc, #48]	; (8001c2c <HAL_TIM_Base_MspInit+0x48>)
 8001bfc:	f043 0310 	orr.w	r3, r3, #16
 8001c00:	6593      	str	r3, [r2, #88]	; 0x58
 8001c02:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <HAL_TIM_Base_MspInit+0x48>)
 8001c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c06:	f003 0310 	and.w	r3, r3, #16
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2100      	movs	r1, #0
 8001c12:	2036      	movs	r0, #54	; 0x36
 8001c14:	f000 fb9f 	bl	8002356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c18:	2036      	movs	r0, #54	; 0x36
 8001c1a:	f000 fbb8 	bl	800238e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001c1e:	bf00      	nop
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40001000 	.word	0x40001000
 8001c2c:	40021000 	.word	0x40021000

08001c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b0a0      	sub	sp, #128	; 0x80
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c48:	f107 0318 	add.w	r3, r7, #24
 8001c4c:	2254      	movs	r2, #84	; 0x54
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f004 f85f 	bl	8005d14 <memset>
  if(huart->Instance==USART1)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a56      	ldr	r2, [pc, #344]	; (8001db4 <HAL_UART_MspInit+0x184>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d169      	bne.n	8001d34 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c60:	2301      	movs	r3, #1
 8001c62:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c64:	2300      	movs	r3, #0
 8001c66:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c68:	f107 0318 	add.w	r3, r7, #24
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f001 fe4d 	bl	800390c <HAL_RCCEx_PeriphCLKConfig>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c78:	f7ff ff52 	bl	8001b20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c7c:	4b4e      	ldr	r3, [pc, #312]	; (8001db8 <HAL_UART_MspInit+0x188>)
 8001c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c80:	4a4d      	ldr	r2, [pc, #308]	; (8001db8 <HAL_UART_MspInit+0x188>)
 8001c82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c86:	6613      	str	r3, [r2, #96]	; 0x60
 8001c88:	4b4b      	ldr	r3, [pc, #300]	; (8001db8 <HAL_UART_MspInit+0x188>)
 8001c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c94:	4b48      	ldr	r3, [pc, #288]	; (8001db8 <HAL_UART_MspInit+0x188>)
 8001c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c98:	4a47      	ldr	r2, [pc, #284]	; (8001db8 <HAL_UART_MspInit+0x188>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ca0:	4b45      	ldr	r3, [pc, #276]	; (8001db8 <HAL_UART_MspInit+0x188>)
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cb0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cbe:	2307      	movs	r3, #7
 8001cc0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ccc:	f000 fdf0 	bl	80028b0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001cd0:	4b3a      	ldr	r3, [pc, #232]	; (8001dbc <HAL_UART_MspInit+0x18c>)
 8001cd2:	4a3b      	ldr	r2, [pc, #236]	; (8001dc0 <HAL_UART_MspInit+0x190>)
 8001cd4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001cd6:	4b39      	ldr	r3, [pc, #228]	; (8001dbc <HAL_UART_MspInit+0x18c>)
 8001cd8:	2202      	movs	r2, #2
 8001cda:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cdc:	4b37      	ldr	r3, [pc, #220]	; (8001dbc <HAL_UART_MspInit+0x18c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ce2:	4b36      	ldr	r3, [pc, #216]	; (8001dbc <HAL_UART_MspInit+0x18c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ce8:	4b34      	ldr	r3, [pc, #208]	; (8001dbc <HAL_UART_MspInit+0x18c>)
 8001cea:	2280      	movs	r2, #128	; 0x80
 8001cec:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cee:	4b33      	ldr	r3, [pc, #204]	; (8001dbc <HAL_UART_MspInit+0x18c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cf4:	4b31      	ldr	r3, [pc, #196]	; (8001dbc <HAL_UART_MspInit+0x18c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001cfa:	4b30      	ldr	r3, [pc, #192]	; (8001dbc <HAL_UART_MspInit+0x18c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d00:	4b2e      	ldr	r3, [pc, #184]	; (8001dbc <HAL_UART_MspInit+0x18c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d06:	482d      	ldr	r0, [pc, #180]	; (8001dbc <HAL_UART_MspInit+0x18c>)
 8001d08:	f000 fb5c 	bl	80023c4 <HAL_DMA_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001d12:	f7ff ff05 	bl	8001b20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a28      	ldr	r2, [pc, #160]	; (8001dbc <HAL_UART_MspInit+0x18c>)
 8001d1a:	671a      	str	r2, [r3, #112]	; 0x70
 8001d1c:	4a27      	ldr	r2, [pc, #156]	; (8001dbc <HAL_UART_MspInit+0x18c>)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2100      	movs	r1, #0
 8001d26:	2025      	movs	r0, #37	; 0x25
 8001d28:	f000 fb15 	bl	8002356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d2c:	2025      	movs	r0, #37	; 0x25
 8001d2e:	f000 fb2e 	bl	800238e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d32:	e03b      	b.n	8001dac <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==USART2)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a22      	ldr	r2, [pc, #136]	; (8001dc4 <HAL_UART_MspInit+0x194>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d136      	bne.n	8001dac <HAL_UART_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d42:	2300      	movs	r3, #0
 8001d44:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d46:	f107 0318 	add.w	r3, r7, #24
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f001 fdde 	bl	800390c <HAL_RCCEx_PeriphCLKConfig>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8001d56:	f7ff fee3 	bl	8001b20 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d5a:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <HAL_UART_MspInit+0x188>)
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5e:	4a16      	ldr	r2, [pc, #88]	; (8001db8 <HAL_UART_MspInit+0x188>)
 8001d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d64:	6593      	str	r3, [r2, #88]	; 0x58
 8001d66:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <HAL_UART_MspInit+0x188>)
 8001d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <HAL_UART_MspInit+0x188>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d76:	4a10      	ldr	r2, [pc, #64]	; (8001db8 <HAL_UART_MspInit+0x188>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <HAL_UART_MspInit+0x188>)
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d8a:	230c      	movs	r3, #12
 8001d8c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d96:	2303      	movs	r3, #3
 8001d98:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d9a:	2307      	movs	r3, #7
 8001d9c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001da2:	4619      	mov	r1, r3
 8001da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001da8:	f000 fd82 	bl	80028b0 <HAL_GPIO_Init>
}
 8001dac:	bf00      	nop
 8001dae:	3780      	adds	r7, #128	; 0x80
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40013800 	.word	0x40013800
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	200003f8 	.word	0x200003f8
 8001dc0:	40020058 	.word	0x40020058
 8001dc4:	40004400 	.word	0x40004400

08001dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <NMI_Handler+0x4>

08001dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <HardFault_Handler+0x4>

08001dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <MemManage_Handler+0x4>

08001dda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dde:	e7fe      	b.n	8001dde <BusFault_Handler+0x4>

08001de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <UsageFault_Handler+0x4>

08001de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e14:	f000 f980 	bl	8002118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <RTC_WKUP_IRQHandler+0x10>)
 8001e22:	f002 f97d 	bl	8004120 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000280 	.word	0x20000280

08001e30 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <DMA1_Channel5_IRQHandler+0x10>)
 8001e36:	f000 fc5c 	bl	80026f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	200003f8 	.word	0x200003f8

08001e44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e48:	4802      	ldr	r0, [pc, #8]	; (8001e54 <USART1_IRQHandler+0x10>)
 8001e4a:	f002 fd85 	bl	8004958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200002f0 	.word	0x200002f0

08001e58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e5c:	4802      	ldr	r0, [pc, #8]	; (8001e68 <TIM6_DAC_IRQHandler+0x10>)
 8001e5e:	f002 fa6a 	bl	8004336 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	200002a4 	.word	0x200002a4

08001e6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
	return 1;
 8001e70:	2301      	movs	r3, #1
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <_kill>:

int _kill(int pid, int sig)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e86:	f003 ff0d 	bl	8005ca4 <__errno>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2216      	movs	r2, #22
 8001e8e:	601a      	str	r2, [r3, #0]
	return -1;
 8001e90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <_exit>:

void _exit (int status)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ffe7 	bl	8001e7c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001eae:	e7fe      	b.n	8001eae <_exit+0x12>

08001eb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	e00a      	b.n	8001ed8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ec2:	f3af 8000 	nop.w
 8001ec6:	4601      	mov	r1, r0
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	60ba      	str	r2, [r7, #8]
 8001ece:	b2ca      	uxtb	r2, r1
 8001ed0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	dbf0      	blt.n	8001ec2 <_read+0x12>
	}

return len;
 8001ee0:	687b      	ldr	r3, [r7, #4]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b086      	sub	sp, #24
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	60f8      	str	r0, [r7, #12]
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	e009      	b.n	8001f10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	60ba      	str	r2, [r7, #8]
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	dbf1      	blt.n	8001efc <_write+0x12>
	}
	return len;
 8001f18:	687b      	ldr	r3, [r7, #4]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <_close>:

int _close(int file)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
	return -1;
 8001f2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f4a:	605a      	str	r2, [r3, #4]
	return 0;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <_isatty>:

int _isatty(int file)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
	return 1;
 8001f62:	2301      	movs	r3, #1
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
	return 0;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f94:	4a14      	ldr	r2, [pc, #80]	; (8001fe8 <_sbrk+0x5c>)
 8001f96:	4b15      	ldr	r3, [pc, #84]	; (8001fec <_sbrk+0x60>)
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fa0:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <_sbrk+0x64>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d102      	bne.n	8001fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <_sbrk+0x64>)
 8001faa:	4a12      	ldr	r2, [pc, #72]	; (8001ff4 <_sbrk+0x68>)
 8001fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <_sbrk+0x64>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d207      	bcs.n	8001fcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fbc:	f003 fe72 	bl	8005ca4 <__errno>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	220c      	movs	r2, #12
 8001fc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fca:	e009      	b.n	8001fe0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fcc:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <_sbrk+0x64>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fd2:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <_sbrk+0x64>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	4a05      	ldr	r2, [pc, #20]	; (8001ff0 <_sbrk+0x64>)
 8001fdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fde:	68fb      	ldr	r3, [r7, #12]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20010000 	.word	0x20010000
 8001fec:	00000400 	.word	0x00000400
 8001ff0:	200006ac 	.word	0x200006ac
 8001ff4:	200006c8 	.word	0x200006c8

08001ff8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <SystemInit+0x20>)
 8001ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002002:	4a05      	ldr	r2, [pc, #20]	; (8002018 <SystemInit+0x20>)
 8002004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800201c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002054 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002020:	f7ff ffea 	bl	8001ff8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002024:	480c      	ldr	r0, [pc, #48]	; (8002058 <LoopForever+0x6>)
  ldr r1, =_edata
 8002026:	490d      	ldr	r1, [pc, #52]	; (800205c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002028:	4a0d      	ldr	r2, [pc, #52]	; (8002060 <LoopForever+0xe>)
  movs r3, #0
 800202a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800202c:	e002      	b.n	8002034 <LoopCopyDataInit>

0800202e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800202e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002032:	3304      	adds	r3, #4

08002034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002038:	d3f9      	bcc.n	800202e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800203a:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <LoopForever+0x12>)
  ldr r4, =_ebss
 800203c:	4c0a      	ldr	r4, [pc, #40]	; (8002068 <LoopForever+0x16>)
  movs r3, #0
 800203e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002040:	e001      	b.n	8002046 <LoopFillZerobss>

08002042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002044:	3204      	adds	r2, #4

08002046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002048:	d3fb      	bcc.n	8002042 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800204a:	f003 fe31 	bl	8005cb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800204e:	f7fe ffab 	bl	8000fa8 <main>

08002052 <LoopForever>:

LoopForever:
    b LoopForever
 8002052:	e7fe      	b.n	8002052 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002054:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800205c:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8002060:	08009810 	.word	0x08009810
  ldr r2, =_sbss
 8002064:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 8002068:	200006c4 	.word	0x200006c4

0800206c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800206c:	e7fe      	b.n	800206c <ADC1_IRQHandler>

0800206e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002078:	2003      	movs	r0, #3
 800207a:	f000 f961 	bl	8002340 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800207e:	2000      	movs	r0, #0
 8002080:	f000 f80e 	bl	80020a0 <HAL_InitTick>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d002      	beq.n	8002090 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	71fb      	strb	r3, [r7, #7]
 800208e:	e001      	b.n	8002094 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002090:	f7ff fd4c 	bl	8001b2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002094:	79fb      	ldrb	r3, [r7, #7]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80020ac:	4b17      	ldr	r3, [pc, #92]	; (800210c <HAL_InitTick+0x6c>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d023      	beq.n	80020fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80020b4:	4b16      	ldr	r3, [pc, #88]	; (8002110 <HAL_InitTick+0x70>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b14      	ldr	r3, [pc, #80]	; (800210c <HAL_InitTick+0x6c>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	4619      	mov	r1, r3
 80020be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 f96d 	bl	80023aa <HAL_SYSTICK_Config>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10f      	bne.n	80020f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b0f      	cmp	r3, #15
 80020da:	d809      	bhi.n	80020f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020dc:	2200      	movs	r2, #0
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	f04f 30ff 	mov.w	r0, #4294967295
 80020e4:	f000 f937 	bl	8002356 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020e8:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <HAL_InitTick+0x74>)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	e007      	b.n	8002100 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	73fb      	strb	r3, [r7, #15]
 80020f4:	e004      	b.n	8002100 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	73fb      	strb	r3, [r7, #15]
 80020fa:	e001      	b.n	8002100 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002100:	7bfb      	ldrb	r3, [r7, #15]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	2000008c 	.word	0x2000008c
 8002110:	20000084 	.word	0x20000084
 8002114:	20000088 	.word	0x20000088

08002118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_IncTick+0x20>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	461a      	mov	r2, r3
 8002122:	4b06      	ldr	r3, [pc, #24]	; (800213c <HAL_IncTick+0x24>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4413      	add	r3, r2
 8002128:	4a04      	ldr	r2, [pc, #16]	; (800213c <HAL_IncTick+0x24>)
 800212a:	6013      	str	r3, [r2, #0]
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	2000008c 	.word	0x2000008c
 800213c:	200006b0 	.word	0x200006b0

08002140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return uwTick;
 8002144:	4b03      	ldr	r3, [pc, #12]	; (8002154 <HAL_GetTick+0x14>)
 8002146:	681b      	ldr	r3, [r3, #0]
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	200006b0 	.word	0x200006b0

08002158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002160:	f7ff ffee 	bl	8002140 <HAL_GetTick>
 8002164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002170:	d005      	beq.n	800217e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002172:	4b0a      	ldr	r3, [pc, #40]	; (800219c <HAL_Delay+0x44>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4413      	add	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800217e:	bf00      	nop
 8002180:	f7ff ffde 	bl	8002140 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	429a      	cmp	r2, r3
 800218e:	d8f7      	bhi.n	8002180 <HAL_Delay+0x28>
  {
  }
}
 8002190:	bf00      	nop
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	2000008c 	.word	0x2000008c

080021a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021bc:	4013      	ands	r3, r2
 80021be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021d2:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	60d3      	str	r3, [r2, #12]
}
 80021d8:	bf00      	nop
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ec:	4b04      	ldr	r3, [pc, #16]	; (8002200 <__NVIC_GetPriorityGrouping+0x18>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	0a1b      	lsrs	r3, r3, #8
 80021f2:	f003 0307 	and.w	r3, r3, #7
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	2b00      	cmp	r3, #0
 8002214:	db0b      	blt.n	800222e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	f003 021f 	and.w	r2, r3, #31
 800221c:	4907      	ldr	r1, [pc, #28]	; (800223c <__NVIC_EnableIRQ+0x38>)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	2001      	movs	r0, #1
 8002226:	fa00 f202 	lsl.w	r2, r0, r2
 800222a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000e100 	.word	0xe000e100

08002240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	6039      	str	r1, [r7, #0]
 800224a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002250:	2b00      	cmp	r3, #0
 8002252:	db0a      	blt.n	800226a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	b2da      	uxtb	r2, r3
 8002258:	490c      	ldr	r1, [pc, #48]	; (800228c <__NVIC_SetPriority+0x4c>)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	0112      	lsls	r2, r2, #4
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	440b      	add	r3, r1
 8002264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002268:	e00a      	b.n	8002280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4908      	ldr	r1, [pc, #32]	; (8002290 <__NVIC_SetPriority+0x50>)
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	3b04      	subs	r3, #4
 8002278:	0112      	lsls	r2, r2, #4
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	440b      	add	r3, r1
 800227e:	761a      	strb	r2, [r3, #24]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000e100 	.word	0xe000e100
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	; 0x24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f1c3 0307 	rsb	r3, r3, #7
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	bf28      	it	cs
 80022b2:	2304      	movcs	r3, #4
 80022b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3304      	adds	r3, #4
 80022ba:	2b06      	cmp	r3, #6
 80022bc:	d902      	bls.n	80022c4 <NVIC_EncodePriority+0x30>
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3b03      	subs	r3, #3
 80022c2:	e000      	b.n	80022c6 <NVIC_EncodePriority+0x32>
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	f04f 32ff 	mov.w	r2, #4294967295
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43da      	mvns	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	401a      	ands	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022dc:	f04f 31ff 	mov.w	r1, #4294967295
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	43d9      	mvns	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	4313      	orrs	r3, r2
         );
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3724      	adds	r7, #36	; 0x24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3b01      	subs	r3, #1
 8002308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800230c:	d301      	bcc.n	8002312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800230e:	2301      	movs	r3, #1
 8002310:	e00f      	b.n	8002332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002312:	4a0a      	ldr	r2, [pc, #40]	; (800233c <SysTick_Config+0x40>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3b01      	subs	r3, #1
 8002318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800231a:	210f      	movs	r1, #15
 800231c:	f04f 30ff 	mov.w	r0, #4294967295
 8002320:	f7ff ff8e 	bl	8002240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <SysTick_Config+0x40>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800232a:	4b04      	ldr	r3, [pc, #16]	; (800233c <SysTick_Config+0x40>)
 800232c:	2207      	movs	r2, #7
 800232e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	e000e010 	.word	0xe000e010

08002340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff29 	bl	80021a0 <__NVIC_SetPriorityGrouping>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002368:	f7ff ff3e 	bl	80021e8 <__NVIC_GetPriorityGrouping>
 800236c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	6978      	ldr	r0, [r7, #20]
 8002374:	f7ff ff8e 	bl	8002294 <NVIC_EncodePriority>
 8002378:	4602      	mov	r2, r0
 800237a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff5d 	bl	8002240 <__NVIC_SetPriority>
}
 8002386:	bf00      	nop
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	4603      	mov	r3, r0
 8002396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff31 	bl	8002204 <__NVIC_EnableIRQ>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff ffa2 	bl	80022fc <SysTick_Config>
 80023b8:	4603      	mov	r3, r0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e098      	b.n	8002508 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	4b4d      	ldr	r3, [pc, #308]	; (8002514 <HAL_DMA_Init+0x150>)
 80023de:	429a      	cmp	r2, r3
 80023e0:	d80f      	bhi.n	8002402 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	4b4b      	ldr	r3, [pc, #300]	; (8002518 <HAL_DMA_Init+0x154>)
 80023ea:	4413      	add	r3, r2
 80023ec:	4a4b      	ldr	r2, [pc, #300]	; (800251c <HAL_DMA_Init+0x158>)
 80023ee:	fba2 2303 	umull	r2, r3, r2, r3
 80023f2:	091b      	lsrs	r3, r3, #4
 80023f4:	009a      	lsls	r2, r3, #2
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a48      	ldr	r2, [pc, #288]	; (8002520 <HAL_DMA_Init+0x15c>)
 80023fe:	641a      	str	r2, [r3, #64]	; 0x40
 8002400:	e00e      	b.n	8002420 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	4b46      	ldr	r3, [pc, #280]	; (8002524 <HAL_DMA_Init+0x160>)
 800240a:	4413      	add	r3, r2
 800240c:	4a43      	ldr	r2, [pc, #268]	; (800251c <HAL_DMA_Init+0x158>)
 800240e:	fba2 2303 	umull	r2, r3, r2, r3
 8002412:	091b      	lsrs	r3, r3, #4
 8002414:	009a      	lsls	r2, r3, #2
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a42      	ldr	r2, [pc, #264]	; (8002528 <HAL_DMA_Init+0x164>)
 800241e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2202      	movs	r2, #2
 8002424:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800243a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002444:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002450:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800245c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	4313      	orrs	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800247a:	d039      	beq.n	80024f0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	4a27      	ldr	r2, [pc, #156]	; (8002520 <HAL_DMA_Init+0x15c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d11a      	bne.n	80024bc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002486:	4b29      	ldr	r3, [pc, #164]	; (800252c <HAL_DMA_Init+0x168>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	f003 031c 	and.w	r3, r3, #28
 8002492:	210f      	movs	r1, #15
 8002494:	fa01 f303 	lsl.w	r3, r1, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	4924      	ldr	r1, [pc, #144]	; (800252c <HAL_DMA_Init+0x168>)
 800249c:	4013      	ands	r3, r2
 800249e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80024a0:	4b22      	ldr	r3, [pc, #136]	; (800252c <HAL_DMA_Init+0x168>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6859      	ldr	r1, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ac:	f003 031c 	and.w	r3, r3, #28
 80024b0:	fa01 f303 	lsl.w	r3, r1, r3
 80024b4:	491d      	ldr	r1, [pc, #116]	; (800252c <HAL_DMA_Init+0x168>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]
 80024ba:	e019      	b.n	80024f0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80024bc:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <HAL_DMA_Init+0x16c>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c4:	f003 031c 	and.w	r3, r3, #28
 80024c8:	210f      	movs	r1, #15
 80024ca:	fa01 f303 	lsl.w	r3, r1, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	4917      	ldr	r1, [pc, #92]	; (8002530 <HAL_DMA_Init+0x16c>)
 80024d2:	4013      	ands	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80024d6:	4b16      	ldr	r3, [pc, #88]	; (8002530 <HAL_DMA_Init+0x16c>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6859      	ldr	r1, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	f003 031c 	and.w	r3, r3, #28
 80024e6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ea:	4911      	ldr	r1, [pc, #68]	; (8002530 <HAL_DMA_Init+0x16c>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	40020407 	.word	0x40020407
 8002518:	bffdfff8 	.word	0xbffdfff8
 800251c:	cccccccd 	.word	0xcccccccd
 8002520:	40020000 	.word	0x40020000
 8002524:	bffdfbf8 	.word	0xbffdfbf8
 8002528:	40020400 	.word	0x40020400
 800252c:	400200a8 	.word	0x400200a8
 8002530:	400204a8 	.word	0x400204a8

08002534 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <HAL_DMA_Start_IT+0x20>
 8002550:	2302      	movs	r3, #2
 8002552:	e04b      	b.n	80025ec <HAL_DMA_Start_IT+0xb8>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b01      	cmp	r3, #1
 8002566:	d13a      	bne.n	80025de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0201 	bic.w	r2, r2, #1
 8002584:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	68b9      	ldr	r1, [r7, #8]
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 f95f 	bl	8002850 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	2b00      	cmp	r3, #0
 8002598:	d008      	beq.n	80025ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f042 020e 	orr.w	r2, r2, #14
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	e00f      	b.n	80025cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0204 	bic.w	r2, r2, #4
 80025ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 020a 	orr.w	r2, r2, #10
 80025ca:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0201 	orr.w	r2, r2, #1
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	e005      	b.n	80025ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80025e6:	2302      	movs	r3, #2
 80025e8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80025ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d008      	beq.n	800261e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2204      	movs	r2, #4
 8002610:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e022      	b.n	8002664 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 020e 	bic.w	r2, r2, #14
 800262c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0201 	bic.w	r2, r2, #1
 800263c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	f003 021c 	and.w	r2, r3, #28
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	2101      	movs	r1, #1
 800264c:	fa01 f202 	lsl.w	r2, r1, r2
 8002650:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002662:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002664:	4618      	mov	r0, r3
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d005      	beq.n	8002694 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2204      	movs	r2, #4
 800268c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	73fb      	strb	r3, [r7, #15]
 8002692:	e029      	b.n	80026e8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 020e 	bic.w	r2, r2, #14
 80026a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0201 	bic.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b8:	f003 021c 	and.w	r2, r3, #28
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	2101      	movs	r1, #1
 80026c2:	fa01 f202 	lsl.w	r2, r1, r2
 80026c6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	4798      	blx	r3
    }
  }
  return status;
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	f003 031c 	and.w	r3, r3, #28
 8002712:	2204      	movs	r2, #4
 8002714:	409a      	lsls	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4013      	ands	r3, r2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d026      	beq.n	800276c <HAL_DMA_IRQHandler+0x7a>
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	d021      	beq.n	800276c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0320 	and.w	r3, r3, #32
 8002732:	2b00      	cmp	r3, #0
 8002734:	d107      	bne.n	8002746 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0204 	bic.w	r2, r2, #4
 8002744:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	f003 021c 	and.w	r2, r3, #28
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	2104      	movs	r1, #4
 8002754:	fa01 f202 	lsl.w	r2, r1, r2
 8002758:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	2b00      	cmp	r3, #0
 8002760:	d071      	beq.n	8002846 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800276a:	e06c      	b.n	8002846 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002770:	f003 031c 	and.w	r3, r3, #28
 8002774:	2202      	movs	r2, #2
 8002776:	409a      	lsls	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4013      	ands	r3, r2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d02e      	beq.n	80027de <HAL_DMA_IRQHandler+0xec>
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d029      	beq.n	80027de <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10b      	bne.n	80027b0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 020a 	bic.w	r2, r2, #10
 80027a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b4:	f003 021c 	and.w	r2, r3, #28
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	2102      	movs	r1, #2
 80027be:	fa01 f202 	lsl.w	r2, r1, r2
 80027c2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d038      	beq.n	8002846 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80027dc:	e033      	b.n	8002846 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e2:	f003 031c 	and.w	r3, r3, #28
 80027e6:	2208      	movs	r2, #8
 80027e8:	409a      	lsls	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	4013      	ands	r3, r2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d02a      	beq.n	8002848 <HAL_DMA_IRQHandler+0x156>
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d025      	beq.n	8002848 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 020e 	bic.w	r2, r2, #14
 800280a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002810:	f003 021c 	and.w	r2, r3, #28
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	2101      	movs	r1, #1
 800281a:	fa01 f202 	lsl.w	r2, r1, r2
 800281e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283a:	2b00      	cmp	r3, #0
 800283c:	d004      	beq.n	8002848 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002846:	bf00      	nop
 8002848:	bf00      	nop
}
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	f003 021c 	and.w	r2, r3, #28
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	2101      	movs	r1, #1
 800286c:	fa01 f202 	lsl.w	r2, r1, r2
 8002870:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b10      	cmp	r3, #16
 8002880:	d108      	bne.n	8002894 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002892:	e007      	b.n	80028a4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	60da      	str	r2, [r3, #12]
}
 80028a4:	bf00      	nop
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028be:	e148      	b.n	8002b52 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	2101      	movs	r1, #1
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	fa01 f303 	lsl.w	r3, r1, r3
 80028cc:	4013      	ands	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 813a 	beq.w	8002b4c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 0303 	and.w	r3, r3, #3
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d005      	beq.n	80028f0 <HAL_GPIO_Init+0x40>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d130      	bne.n	8002952 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	2203      	movs	r2, #3
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4013      	ands	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	4313      	orrs	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002926:	2201      	movs	r2, #1
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4013      	ands	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	f003 0201 	and.w	r2, r3, #1
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	2b03      	cmp	r3, #3
 800295c:	d017      	beq.n	800298e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	2203      	movs	r2, #3
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4013      	ands	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d123      	bne.n	80029e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	08da      	lsrs	r2, r3, #3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3208      	adds	r2, #8
 80029a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	220f      	movs	r2, #15
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4013      	ands	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	691a      	ldr	r2, [r3, #16]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	08da      	lsrs	r2, r3, #3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3208      	adds	r2, #8
 80029dc:	6939      	ldr	r1, [r7, #16]
 80029de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	2203      	movs	r2, #3
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4013      	ands	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 0203 	and.w	r2, r3, #3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 8094 	beq.w	8002b4c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a24:	4b52      	ldr	r3, [pc, #328]	; (8002b70 <HAL_GPIO_Init+0x2c0>)
 8002a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a28:	4a51      	ldr	r2, [pc, #324]	; (8002b70 <HAL_GPIO_Init+0x2c0>)
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	6613      	str	r3, [r2, #96]	; 0x60
 8002a30:	4b4f      	ldr	r3, [pc, #316]	; (8002b70 <HAL_GPIO_Init+0x2c0>)
 8002a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a3c:	4a4d      	ldr	r2, [pc, #308]	; (8002b74 <HAL_GPIO_Init+0x2c4>)
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	089b      	lsrs	r3, r3, #2
 8002a42:	3302      	adds	r3, #2
 8002a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	220f      	movs	r2, #15
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a66:	d00d      	beq.n	8002a84 <HAL_GPIO_Init+0x1d4>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a43      	ldr	r2, [pc, #268]	; (8002b78 <HAL_GPIO_Init+0x2c8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d007      	beq.n	8002a80 <HAL_GPIO_Init+0x1d0>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a42      	ldr	r2, [pc, #264]	; (8002b7c <HAL_GPIO_Init+0x2cc>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d101      	bne.n	8002a7c <HAL_GPIO_Init+0x1cc>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	e004      	b.n	8002a86 <HAL_GPIO_Init+0x1d6>
 8002a7c:	2307      	movs	r3, #7
 8002a7e:	e002      	b.n	8002a86 <HAL_GPIO_Init+0x1d6>
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <HAL_GPIO_Init+0x1d6>
 8002a84:	2300      	movs	r3, #0
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	f002 0203 	and.w	r2, r2, #3
 8002a8c:	0092      	lsls	r2, r2, #2
 8002a8e:	4093      	lsls	r3, r2
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a96:	4937      	ldr	r1, [pc, #220]	; (8002b74 <HAL_GPIO_Init+0x2c4>)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	089b      	lsrs	r3, r3, #2
 8002a9c:	3302      	adds	r3, #2
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002aa4:	4b36      	ldr	r3, [pc, #216]	; (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ac8:	4a2d      	ldr	r2, [pc, #180]	; (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ace:	4b2c      	ldr	r3, [pc, #176]	; (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4013      	ands	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002af2:	4a23      	ldr	r2, [pc, #140]	; (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002af8:	4b21      	ldr	r3, [pc, #132]	; (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b1c:	4a18      	ldr	r2, [pc, #96]	; (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b22:	4b17      	ldr	r3, [pc, #92]	; (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b46:	4a0e      	ldr	r2, [pc, #56]	; (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f47f aeaf 	bne.w	80028c0 <HAL_GPIO_Init+0x10>
  }
}
 8002b62:	bf00      	nop
 8002b64:	bf00      	nop
 8002b66:	371c      	adds	r7, #28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	40021000 	.word	0x40021000
 8002b74:	40010000 	.word	0x40010000
 8002b78:	48000400 	.word	0x48000400
 8002b7c:	48000800 	.word	0x48000800
 8002b80:	40010400 	.word	0x40010400

08002b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	807b      	strh	r3, [r7, #2]
 8002b90:	4613      	mov	r3, r2
 8002b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b94:	787b      	ldrb	r3, [r7, #1]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b9a:	887a      	ldrh	r2, [r7, #2]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ba0:	e002      	b.n	8002ba8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ba2:	887a      	ldrh	r2, [r7, #2]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a04      	ldr	r2, [pc, #16]	; (8002bd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc2:	6013      	str	r3, [r2, #0]
}
 8002bc4:	bf00      	nop
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40007000 	.word	0x40007000

08002bd4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002bd8:	4b04      	ldr	r3, [pc, #16]	; (8002bec <HAL_PWREx_GetVoltageRange+0x18>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40007000 	.word	0x40007000

08002bf0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bfe:	d130      	bne.n	8002c62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c00:	4b23      	ldr	r3, [pc, #140]	; (8002c90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c0c:	d038      	beq.n	8002c80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c0e:	4b20      	ldr	r3, [pc, #128]	; (8002c90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c16:	4a1e      	ldr	r2, [pc, #120]	; (8002c90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c1e:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2232      	movs	r2, #50	; 0x32
 8002c24:	fb02 f303 	mul.w	r3, r2, r3
 8002c28:	4a1b      	ldr	r2, [pc, #108]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	0c9b      	lsrs	r3, r3, #18
 8002c30:	3301      	adds	r3, #1
 8002c32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c34:	e002      	b.n	8002c3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c3c:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c48:	d102      	bne.n	8002c50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f2      	bne.n	8002c36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c50:	4b0f      	ldr	r3, [pc, #60]	; (8002c90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c5c:	d110      	bne.n	8002c80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e00f      	b.n	8002c82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c6e:	d007      	beq.n	8002c80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c70:	4b07      	ldr	r3, [pc, #28]	; (8002c90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c78:	4a05      	ldr	r2, [pc, #20]	; (8002c90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40007000 	.word	0x40007000
 8002c94:	20000084 	.word	0x20000084
 8002c98:	431bde83 	.word	0x431bde83

08002c9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d102      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	f000 bc02 	b.w	80034b4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb0:	4b96      	ldr	r3, [pc, #600]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 030c 	and.w	r3, r3, #12
 8002cb8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cba:	4b94      	ldr	r3, [pc, #592]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 80e4 	beq.w	8002e9a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d007      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x4c>
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	2b0c      	cmp	r3, #12
 8002cdc:	f040 808b 	bne.w	8002df6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	f040 8087 	bne.w	8002df6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ce8:	4b88      	ldr	r3, [pc, #544]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_OscConfig+0x64>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e3d9      	b.n	80034b4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a1a      	ldr	r2, [r3, #32]
 8002d04:	4b81      	ldr	r3, [pc, #516]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d004      	beq.n	8002d1a <HAL_RCC_OscConfig+0x7e>
 8002d10:	4b7e      	ldr	r3, [pc, #504]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d18:	e005      	b.n	8002d26 <HAL_RCC_OscConfig+0x8a>
 8002d1a:	4b7c      	ldr	r3, [pc, #496]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d20:	091b      	lsrs	r3, r3, #4
 8002d22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d223      	bcs.n	8002d72 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 fd8c 	bl	800384c <RCC_SetFlashLatencyFromMSIRange>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e3ba      	b.n	80034b4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d3e:	4b73      	ldr	r3, [pc, #460]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a72      	ldr	r2, [pc, #456]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d44:	f043 0308 	orr.w	r3, r3, #8
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	4b70      	ldr	r3, [pc, #448]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	496d      	ldr	r1, [pc, #436]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d5c:	4b6b      	ldr	r3, [pc, #428]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	021b      	lsls	r3, r3, #8
 8002d6a:	4968      	ldr	r1, [pc, #416]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	604b      	str	r3, [r1, #4]
 8002d70:	e025      	b.n	8002dbe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d72:	4b66      	ldr	r3, [pc, #408]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a65      	ldr	r2, [pc, #404]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d78:	f043 0308 	orr.w	r3, r3, #8
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	4b63      	ldr	r3, [pc, #396]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	4960      	ldr	r1, [pc, #384]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d90:	4b5e      	ldr	r3, [pc, #376]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	021b      	lsls	r3, r3, #8
 8002d9e:	495b      	ldr	r1, [pc, #364]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d109      	bne.n	8002dbe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 fd4c 	bl	800384c <RCC_SetFlashLatencyFromMSIRange>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e37a      	b.n	80034b4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dbe:	f000 fc81 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	4b51      	ldr	r3, [pc, #324]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	091b      	lsrs	r3, r3, #4
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	4950      	ldr	r1, [pc, #320]	; (8002f10 <HAL_RCC_OscConfig+0x274>)
 8002dd0:	5ccb      	ldrb	r3, [r1, r3]
 8002dd2:	f003 031f 	and.w	r3, r3, #31
 8002dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dda:	4a4e      	ldr	r2, [pc, #312]	; (8002f14 <HAL_RCC_OscConfig+0x278>)
 8002ddc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002dde:	4b4e      	ldr	r3, [pc, #312]	; (8002f18 <HAL_RCC_OscConfig+0x27c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff f95c 	bl	80020a0 <HAL_InitTick>
 8002de8:	4603      	mov	r3, r0
 8002dea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d052      	beq.n	8002e98 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
 8002df4:	e35e      	b.n	80034b4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d032      	beq.n	8002e64 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dfe:	4b43      	ldr	r3, [pc, #268]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a42      	ldr	r2, [pc, #264]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e0a:	f7ff f999 	bl	8002140 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e12:	f7ff f995 	bl	8002140 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e347      	b.n	80034b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e24:	4b39      	ldr	r3, [pc, #228]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e30:	4b36      	ldr	r3, [pc, #216]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a35      	ldr	r2, [pc, #212]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e36:	f043 0308 	orr.w	r3, r3, #8
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	4b33      	ldr	r3, [pc, #204]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	4930      	ldr	r1, [pc, #192]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e4e:	4b2f      	ldr	r3, [pc, #188]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	021b      	lsls	r3, r3, #8
 8002e5c:	492b      	ldr	r1, [pc, #172]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	604b      	str	r3, [r1, #4]
 8002e62:	e01a      	b.n	8002e9a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e64:	4b29      	ldr	r3, [pc, #164]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a28      	ldr	r2, [pc, #160]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e6a:	f023 0301 	bic.w	r3, r3, #1
 8002e6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e70:	f7ff f966 	bl	8002140 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e78:	f7ff f962 	bl	8002140 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e314      	b.n	80034b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e8a:	4b20      	ldr	r3, [pc, #128]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f0      	bne.n	8002e78 <HAL_RCC_OscConfig+0x1dc>
 8002e96:	e000      	b.n	8002e9a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d073      	beq.n	8002f8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x21c>
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	2b0c      	cmp	r3, #12
 8002eb0:	d10e      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d10b      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb8:	4b14      	ldr	r3, [pc, #80]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d063      	beq.n	8002f8c <HAL_RCC_OscConfig+0x2f0>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d15f      	bne.n	8002f8c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e2f1      	b.n	80034b4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed8:	d106      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x24c>
 8002eda:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a0b      	ldr	r2, [pc, #44]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	e025      	b.n	8002f34 <HAL_RCC_OscConfig+0x298>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ef0:	d114      	bne.n	8002f1c <HAL_RCC_OscConfig+0x280>
 8002ef2:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a05      	ldr	r2, [pc, #20]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	4b03      	ldr	r3, [pc, #12]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a02      	ldr	r2, [pc, #8]	; (8002f0c <HAL_RCC_OscConfig+0x270>)
 8002f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	e013      	b.n	8002f34 <HAL_RCC_OscConfig+0x298>
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	0800932c 	.word	0x0800932c
 8002f14:	20000084 	.word	0x20000084
 8002f18:	20000088 	.word	0x20000088
 8002f1c:	4ba0      	ldr	r3, [pc, #640]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a9f      	ldr	r2, [pc, #636]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	4b9d      	ldr	r3, [pc, #628]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a9c      	ldr	r2, [pc, #624]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d013      	beq.n	8002f64 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3c:	f7ff f900 	bl	8002140 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f44:	f7ff f8fc 	bl	8002140 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b64      	cmp	r3, #100	; 0x64
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e2ae      	b.n	80034b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f56:	4b92      	ldr	r3, [pc, #584]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0x2a8>
 8002f62:	e014      	b.n	8002f8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f64:	f7ff f8ec 	bl	8002140 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f6c:	f7ff f8e8 	bl	8002140 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b64      	cmp	r3, #100	; 0x64
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e29a      	b.n	80034b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f7e:	4b88      	ldr	r3, [pc, #544]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x2d0>
 8002f8a:	e000      	b.n	8002f8e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d060      	beq.n	800305c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d005      	beq.n	8002fac <HAL_RCC_OscConfig+0x310>
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	2b0c      	cmp	r3, #12
 8002fa4:	d119      	bne.n	8002fda <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d116      	bne.n	8002fda <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fac:	4b7c      	ldr	r3, [pc, #496]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x328>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e277      	b.n	80034b4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc4:	4b76      	ldr	r3, [pc, #472]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	061b      	lsls	r3, r3, #24
 8002fd2:	4973      	ldr	r1, [pc, #460]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fd8:	e040      	b.n	800305c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d023      	beq.n	800302a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fe2:	4b6f      	ldr	r3, [pc, #444]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a6e      	ldr	r2, [pc, #440]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8002fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fee:	f7ff f8a7 	bl	8002140 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff6:	f7ff f8a3 	bl	8002140 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e255      	b.n	80034b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003008:	4b65      	ldr	r3, [pc, #404]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003014:	4b62      	ldr	r3, [pc, #392]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	061b      	lsls	r3, r3, #24
 8003022:	495f      	ldr	r1, [pc, #380]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003024:	4313      	orrs	r3, r2
 8003026:	604b      	str	r3, [r1, #4]
 8003028:	e018      	b.n	800305c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800302a:	4b5d      	ldr	r3, [pc, #372]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a5c      	ldr	r2, [pc, #368]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003034:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003036:	f7ff f883 	bl	8002140 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800303e:	f7ff f87f 	bl	8002140 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e231      	b.n	80034b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003050:	4b53      	ldr	r3, [pc, #332]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f0      	bne.n	800303e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b00      	cmp	r3, #0
 8003066:	d03c      	beq.n	80030e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d01c      	beq.n	80030aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003070:	4b4b      	ldr	r3, [pc, #300]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003072:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003076:	4a4a      	ldr	r2, [pc, #296]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003080:	f7ff f85e 	bl	8002140 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003088:	f7ff f85a 	bl	8002140 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e20c      	b.n	80034b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800309a:	4b41      	ldr	r3, [pc, #260]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 800309c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0ef      	beq.n	8003088 <HAL_RCC_OscConfig+0x3ec>
 80030a8:	e01b      	b.n	80030e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030aa:	4b3d      	ldr	r3, [pc, #244]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 80030ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b0:	4a3b      	ldr	r2, [pc, #236]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 80030b2:	f023 0301 	bic.w	r3, r3, #1
 80030b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ba:	f7ff f841 	bl	8002140 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c2:	f7ff f83d 	bl	8002140 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e1ef      	b.n	80034b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030d4:	4b32      	ldr	r3, [pc, #200]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 80030d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1ef      	bne.n	80030c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 80a6 	beq.w	800323c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030f0:	2300      	movs	r3, #0
 80030f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030f4:	4b2a      	ldr	r3, [pc, #168]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 80030f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10d      	bne.n	800311c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003100:	4b27      	ldr	r3, [pc, #156]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003104:	4a26      	ldr	r2, [pc, #152]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800310a:	6593      	str	r3, [r2, #88]	; 0x58
 800310c:	4b24      	ldr	r3, [pc, #144]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 800310e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003114:	60bb      	str	r3, [r7, #8]
 8003116:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003118:	2301      	movs	r3, #1
 800311a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800311c:	4b21      	ldr	r3, [pc, #132]	; (80031a4 <HAL_RCC_OscConfig+0x508>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003124:	2b00      	cmp	r3, #0
 8003126:	d118      	bne.n	800315a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003128:	4b1e      	ldr	r3, [pc, #120]	; (80031a4 <HAL_RCC_OscConfig+0x508>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a1d      	ldr	r2, [pc, #116]	; (80031a4 <HAL_RCC_OscConfig+0x508>)
 800312e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003132:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003134:	f7ff f804 	bl	8002140 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313c:	f7ff f800 	bl	8002140 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e1b2      	b.n	80034b4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800314e:	4b15      	ldr	r3, [pc, #84]	; (80031a4 <HAL_RCC_OscConfig+0x508>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d108      	bne.n	8003174 <HAL_RCC_OscConfig+0x4d8>
 8003162:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003168:	4a0d      	ldr	r2, [pc, #52]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003172:	e029      	b.n	80031c8 <HAL_RCC_OscConfig+0x52c>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2b05      	cmp	r3, #5
 800317a:	d115      	bne.n	80031a8 <HAL_RCC_OscConfig+0x50c>
 800317c:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 800317e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003182:	4a07      	ldr	r2, [pc, #28]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003184:	f043 0304 	orr.w	r3, r3, #4
 8003188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800318c:	4b04      	ldr	r3, [pc, #16]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003192:	4a03      	ldr	r2, [pc, #12]	; (80031a0 <HAL_RCC_OscConfig+0x504>)
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800319c:	e014      	b.n	80031c8 <HAL_RCC_OscConfig+0x52c>
 800319e:	bf00      	nop
 80031a0:	40021000 	.word	0x40021000
 80031a4:	40007000 	.word	0x40007000
 80031a8:	4b9a      	ldr	r3, [pc, #616]	; (8003414 <HAL_RCC_OscConfig+0x778>)
 80031aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ae:	4a99      	ldr	r2, [pc, #612]	; (8003414 <HAL_RCC_OscConfig+0x778>)
 80031b0:	f023 0301 	bic.w	r3, r3, #1
 80031b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031b8:	4b96      	ldr	r3, [pc, #600]	; (8003414 <HAL_RCC_OscConfig+0x778>)
 80031ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031be:	4a95      	ldr	r2, [pc, #596]	; (8003414 <HAL_RCC_OscConfig+0x778>)
 80031c0:	f023 0304 	bic.w	r3, r3, #4
 80031c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d016      	beq.n	80031fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d0:	f7fe ffb6 	bl	8002140 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d6:	e00a      	b.n	80031ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d8:	f7fe ffb2 	bl	8002140 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e162      	b.n	80034b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ee:	4b89      	ldr	r3, [pc, #548]	; (8003414 <HAL_RCC_OscConfig+0x778>)
 80031f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0ed      	beq.n	80031d8 <HAL_RCC_OscConfig+0x53c>
 80031fc:	e015      	b.n	800322a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fe:	f7fe ff9f 	bl	8002140 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003204:	e00a      	b.n	800321c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003206:	f7fe ff9b 	bl	8002140 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	f241 3288 	movw	r2, #5000	; 0x1388
 8003214:	4293      	cmp	r3, r2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e14b      	b.n	80034b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800321c:	4b7d      	ldr	r3, [pc, #500]	; (8003414 <HAL_RCC_OscConfig+0x778>)
 800321e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1ed      	bne.n	8003206 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800322a:	7ffb      	ldrb	r3, [r7, #31]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d105      	bne.n	800323c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003230:	4b78      	ldr	r3, [pc, #480]	; (8003414 <HAL_RCC_OscConfig+0x778>)
 8003232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003234:	4a77      	ldr	r2, [pc, #476]	; (8003414 <HAL_RCC_OscConfig+0x778>)
 8003236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800323a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b00      	cmp	r3, #0
 8003246:	d03c      	beq.n	80032c2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	2b00      	cmp	r3, #0
 800324e:	d01c      	beq.n	800328a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003250:	4b70      	ldr	r3, [pc, #448]	; (8003414 <HAL_RCC_OscConfig+0x778>)
 8003252:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003256:	4a6f      	ldr	r2, [pc, #444]	; (8003414 <HAL_RCC_OscConfig+0x778>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003260:	f7fe ff6e 	bl	8002140 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003268:	f7fe ff6a 	bl	8002140 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e11c      	b.n	80034b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800327a:	4b66      	ldr	r3, [pc, #408]	; (8003414 <HAL_RCC_OscConfig+0x778>)
 800327c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0ef      	beq.n	8003268 <HAL_RCC_OscConfig+0x5cc>
 8003288:	e01b      	b.n	80032c2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800328a:	4b62      	ldr	r3, [pc, #392]	; (8003414 <HAL_RCC_OscConfig+0x778>)
 800328c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003290:	4a60      	ldr	r2, [pc, #384]	; (8003414 <HAL_RCC_OscConfig+0x778>)
 8003292:	f023 0301 	bic.w	r3, r3, #1
 8003296:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329a:	f7fe ff51 	bl	8002140 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032a2:	f7fe ff4d 	bl	8002140 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e0ff      	b.n	80034b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032b4:	4b57      	ldr	r3, [pc, #348]	; (8003414 <HAL_RCC_OscConfig+0x778>)
 80032b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1ef      	bne.n	80032a2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 80f3 	beq.w	80034b2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	f040 80c9 	bne.w	8003468 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032d6:	4b4f      	ldr	r3, [pc, #316]	; (8003414 <HAL_RCC_OscConfig+0x778>)
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f003 0203 	and.w	r2, r3, #3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d12c      	bne.n	8003344 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	3b01      	subs	r3, #1
 80032f6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d123      	bne.n	8003344 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003306:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003308:	429a      	cmp	r2, r3
 800330a:	d11b      	bne.n	8003344 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003316:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003318:	429a      	cmp	r2, r3
 800331a:	d113      	bne.n	8003344 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003326:	085b      	lsrs	r3, r3, #1
 8003328:	3b01      	subs	r3, #1
 800332a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800332c:	429a      	cmp	r2, r3
 800332e:	d109      	bne.n	8003344 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	085b      	lsrs	r3, r3, #1
 800333c:	3b01      	subs	r3, #1
 800333e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003340:	429a      	cmp	r2, r3
 8003342:	d06b      	beq.n	800341c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	2b0c      	cmp	r3, #12
 8003348:	d062      	beq.n	8003410 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800334a:	4b32      	ldr	r3, [pc, #200]	; (8003414 <HAL_RCC_OscConfig+0x778>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e0ac      	b.n	80034b4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800335a:	4b2e      	ldr	r3, [pc, #184]	; (8003414 <HAL_RCC_OscConfig+0x778>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a2d      	ldr	r2, [pc, #180]	; (8003414 <HAL_RCC_OscConfig+0x778>)
 8003360:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003364:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003366:	f7fe feeb 	bl	8002140 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336e:	f7fe fee7 	bl	8002140 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e099      	b.n	80034b4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003380:	4b24      	ldr	r3, [pc, #144]	; (8003414 <HAL_RCC_OscConfig+0x778>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1f0      	bne.n	800336e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800338c:	4b21      	ldr	r3, [pc, #132]	; (8003414 <HAL_RCC_OscConfig+0x778>)
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	4b21      	ldr	r3, [pc, #132]	; (8003418 <HAL_RCC_OscConfig+0x77c>)
 8003392:	4013      	ands	r3, r2
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800339c:	3a01      	subs	r2, #1
 800339e:	0112      	lsls	r2, r2, #4
 80033a0:	4311      	orrs	r1, r2
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033a6:	0212      	lsls	r2, r2, #8
 80033a8:	4311      	orrs	r1, r2
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033ae:	0852      	lsrs	r2, r2, #1
 80033b0:	3a01      	subs	r2, #1
 80033b2:	0552      	lsls	r2, r2, #21
 80033b4:	4311      	orrs	r1, r2
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033ba:	0852      	lsrs	r2, r2, #1
 80033bc:	3a01      	subs	r2, #1
 80033be:	0652      	lsls	r2, r2, #25
 80033c0:	4311      	orrs	r1, r2
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033c6:	06d2      	lsls	r2, r2, #27
 80033c8:	430a      	orrs	r2, r1
 80033ca:	4912      	ldr	r1, [pc, #72]	; (8003414 <HAL_RCC_OscConfig+0x778>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033d0:	4b10      	ldr	r3, [pc, #64]	; (8003414 <HAL_RCC_OscConfig+0x778>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a0f      	ldr	r2, [pc, #60]	; (8003414 <HAL_RCC_OscConfig+0x778>)
 80033d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033dc:	4b0d      	ldr	r3, [pc, #52]	; (8003414 <HAL_RCC_OscConfig+0x778>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4a0c      	ldr	r2, [pc, #48]	; (8003414 <HAL_RCC_OscConfig+0x778>)
 80033e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033e8:	f7fe feaa 	bl	8002140 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f0:	f7fe fea6 	bl	8002140 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e058      	b.n	80034b4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003402:	4b04      	ldr	r3, [pc, #16]	; (8003414 <HAL_RCC_OscConfig+0x778>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800340e:	e050      	b.n	80034b2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e04f      	b.n	80034b4 <HAL_RCC_OscConfig+0x818>
 8003414:	40021000 	.word	0x40021000
 8003418:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800341c:	4b27      	ldr	r3, [pc, #156]	; (80034bc <HAL_RCC_OscConfig+0x820>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d144      	bne.n	80034b2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003428:	4b24      	ldr	r3, [pc, #144]	; (80034bc <HAL_RCC_OscConfig+0x820>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a23      	ldr	r2, [pc, #140]	; (80034bc <HAL_RCC_OscConfig+0x820>)
 800342e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003432:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003434:	4b21      	ldr	r3, [pc, #132]	; (80034bc <HAL_RCC_OscConfig+0x820>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	4a20      	ldr	r2, [pc, #128]	; (80034bc <HAL_RCC_OscConfig+0x820>)
 800343a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800343e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003440:	f7fe fe7e 	bl	8002140 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003448:	f7fe fe7a 	bl	8002140 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e02c      	b.n	80034b4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800345a:	4b18      	ldr	r3, [pc, #96]	; (80034bc <HAL_RCC_OscConfig+0x820>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCC_OscConfig+0x7ac>
 8003466:	e024      	b.n	80034b2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	2b0c      	cmp	r3, #12
 800346c:	d01f      	beq.n	80034ae <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346e:	4b13      	ldr	r3, [pc, #76]	; (80034bc <HAL_RCC_OscConfig+0x820>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a12      	ldr	r2, [pc, #72]	; (80034bc <HAL_RCC_OscConfig+0x820>)
 8003474:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347a:	f7fe fe61 	bl	8002140 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003480:	e008      	b.n	8003494 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003482:	f7fe fe5d 	bl	8002140 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e00f      	b.n	80034b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003494:	4b09      	ldr	r3, [pc, #36]	; (80034bc <HAL_RCC_OscConfig+0x820>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1f0      	bne.n	8003482 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80034a0:	4b06      	ldr	r3, [pc, #24]	; (80034bc <HAL_RCC_OscConfig+0x820>)
 80034a2:	68da      	ldr	r2, [r3, #12]
 80034a4:	4905      	ldr	r1, [pc, #20]	; (80034bc <HAL_RCC_OscConfig+0x820>)
 80034a6:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <HAL_RCC_OscConfig+0x824>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	60cb      	str	r3, [r1, #12]
 80034ac:	e001      	b.n	80034b2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3720      	adds	r7, #32
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40021000 	.word	0x40021000
 80034c0:	feeefffc 	.word	0xfeeefffc

080034c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0e7      	b.n	80036a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034d8:	4b75      	ldr	r3, [pc, #468]	; (80036b0 <HAL_RCC_ClockConfig+0x1ec>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d910      	bls.n	8003508 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e6:	4b72      	ldr	r3, [pc, #456]	; (80036b0 <HAL_RCC_ClockConfig+0x1ec>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f023 0207 	bic.w	r2, r3, #7
 80034ee:	4970      	ldr	r1, [pc, #448]	; (80036b0 <HAL_RCC_ClockConfig+0x1ec>)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f6:	4b6e      	ldr	r3, [pc, #440]	; (80036b0 <HAL_RCC_ClockConfig+0x1ec>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d001      	beq.n	8003508 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e0cf      	b.n	80036a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d010      	beq.n	8003536 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	4b66      	ldr	r3, [pc, #408]	; (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003520:	429a      	cmp	r2, r3
 8003522:	d908      	bls.n	8003536 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003524:	4b63      	ldr	r3, [pc, #396]	; (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	4960      	ldr	r1, [pc, #384]	; (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003532:	4313      	orrs	r3, r2
 8003534:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d04c      	beq.n	80035dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b03      	cmp	r3, #3
 8003548:	d107      	bne.n	800355a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800354a:	4b5a      	ldr	r3, [pc, #360]	; (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d121      	bne.n	800359a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e0a6      	b.n	80036a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d107      	bne.n	8003572 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003562:	4b54      	ldr	r3, [pc, #336]	; (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d115      	bne.n	800359a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e09a      	b.n	80036a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d107      	bne.n	800358a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800357a:	4b4e      	ldr	r3, [pc, #312]	; (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d109      	bne.n	800359a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e08e      	b.n	80036a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800358a:	4b4a      	ldr	r3, [pc, #296]	; (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e086      	b.n	80036a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800359a:	4b46      	ldr	r3, [pc, #280]	; (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f023 0203 	bic.w	r2, r3, #3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	4943      	ldr	r1, [pc, #268]	; (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ac:	f7fe fdc8 	bl	8002140 <HAL_GetTick>
 80035b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b2:	e00a      	b.n	80035ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b4:	f7fe fdc4 	bl	8002140 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e06e      	b.n	80036a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ca:	4b3a      	ldr	r3, [pc, #232]	; (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 020c 	and.w	r2, r3, #12
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	429a      	cmp	r2, r3
 80035da:	d1eb      	bne.n	80035b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d010      	beq.n	800360a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	4b31      	ldr	r3, [pc, #196]	; (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d208      	bcs.n	800360a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f8:	4b2e      	ldr	r3, [pc, #184]	; (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	492b      	ldr	r1, [pc, #172]	; (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003606:	4313      	orrs	r3, r2
 8003608:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800360a:	4b29      	ldr	r3, [pc, #164]	; (80036b0 <HAL_RCC_ClockConfig+0x1ec>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d210      	bcs.n	800363a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003618:	4b25      	ldr	r3, [pc, #148]	; (80036b0 <HAL_RCC_ClockConfig+0x1ec>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f023 0207 	bic.w	r2, r3, #7
 8003620:	4923      	ldr	r1, [pc, #140]	; (80036b0 <HAL_RCC_ClockConfig+0x1ec>)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	4313      	orrs	r3, r2
 8003626:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003628:	4b21      	ldr	r3, [pc, #132]	; (80036b0 <HAL_RCC_ClockConfig+0x1ec>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d001      	beq.n	800363a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e036      	b.n	80036a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	2b00      	cmp	r3, #0
 8003644:	d008      	beq.n	8003658 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003646:	4b1b      	ldr	r3, [pc, #108]	; (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	4918      	ldr	r1, [pc, #96]	; (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003654:	4313      	orrs	r3, r2
 8003656:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d009      	beq.n	8003678 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003664:	4b13      	ldr	r3, [pc, #76]	; (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	4910      	ldr	r1, [pc, #64]	; (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003674:	4313      	orrs	r3, r2
 8003676:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003678:	f000 f824 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 800367c:	4602      	mov	r2, r0
 800367e:	4b0d      	ldr	r3, [pc, #52]	; (80036b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	091b      	lsrs	r3, r3, #4
 8003684:	f003 030f 	and.w	r3, r3, #15
 8003688:	490b      	ldr	r1, [pc, #44]	; (80036b8 <HAL_RCC_ClockConfig+0x1f4>)
 800368a:	5ccb      	ldrb	r3, [r1, r3]
 800368c:	f003 031f 	and.w	r3, r3, #31
 8003690:	fa22 f303 	lsr.w	r3, r2, r3
 8003694:	4a09      	ldr	r2, [pc, #36]	; (80036bc <HAL_RCC_ClockConfig+0x1f8>)
 8003696:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003698:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <HAL_RCC_ClockConfig+0x1fc>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f7fe fcff 	bl	80020a0 <HAL_InitTick>
 80036a2:	4603      	mov	r3, r0
 80036a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80036a6:	7afb      	ldrb	r3, [r7, #11]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40022000 	.word	0x40022000
 80036b4:	40021000 	.word	0x40021000
 80036b8:	0800932c 	.word	0x0800932c
 80036bc:	20000084 	.word	0x20000084
 80036c0:	20000088 	.word	0x20000088

080036c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b089      	sub	sp, #36	; 0x24
 80036c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61fb      	str	r3, [r7, #28]
 80036ce:	2300      	movs	r3, #0
 80036d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036d2:	4b3e      	ldr	r3, [pc, #248]	; (80037cc <HAL_RCC_GetSysClockFreq+0x108>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 030c 	and.w	r3, r3, #12
 80036da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036dc:	4b3b      	ldr	r3, [pc, #236]	; (80037cc <HAL_RCC_GetSysClockFreq+0x108>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f003 0303 	and.w	r3, r3, #3
 80036e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_GetSysClockFreq+0x34>
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	2b0c      	cmp	r3, #12
 80036f0:	d121      	bne.n	8003736 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d11e      	bne.n	8003736 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036f8:	4b34      	ldr	r3, [pc, #208]	; (80037cc <HAL_RCC_GetSysClockFreq+0x108>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b00      	cmp	r3, #0
 8003702:	d107      	bne.n	8003714 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003704:	4b31      	ldr	r3, [pc, #196]	; (80037cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800370a:	0a1b      	lsrs	r3, r3, #8
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	61fb      	str	r3, [r7, #28]
 8003712:	e005      	b.n	8003720 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003714:	4b2d      	ldr	r3, [pc, #180]	; (80037cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	091b      	lsrs	r3, r3, #4
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003720:	4a2b      	ldr	r2, [pc, #172]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003728:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10d      	bne.n	800374c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003734:	e00a      	b.n	800374c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	2b04      	cmp	r3, #4
 800373a:	d102      	bne.n	8003742 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800373c:	4b25      	ldr	r3, [pc, #148]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800373e:	61bb      	str	r3, [r7, #24]
 8003740:	e004      	b.n	800374c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	2b08      	cmp	r3, #8
 8003746:	d101      	bne.n	800374c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003748:	4b23      	ldr	r3, [pc, #140]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800374a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	2b0c      	cmp	r3, #12
 8003750:	d134      	bne.n	80037bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003752:	4b1e      	ldr	r3, [pc, #120]	; (80037cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b02      	cmp	r3, #2
 8003760:	d003      	beq.n	800376a <HAL_RCC_GetSysClockFreq+0xa6>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b03      	cmp	r3, #3
 8003766:	d003      	beq.n	8003770 <HAL_RCC_GetSysClockFreq+0xac>
 8003768:	e005      	b.n	8003776 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800376a:	4b1a      	ldr	r3, [pc, #104]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800376c:	617b      	str	r3, [r7, #20]
      break;
 800376e:	e005      	b.n	800377c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003770:	4b19      	ldr	r3, [pc, #100]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003772:	617b      	str	r3, [r7, #20]
      break;
 8003774:	e002      	b.n	800377c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	617b      	str	r3, [r7, #20]
      break;
 800377a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800377c:	4b13      	ldr	r3, [pc, #76]	; (80037cc <HAL_RCC_GetSysClockFreq+0x108>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	3301      	adds	r3, #1
 8003788:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800378a:	4b10      	ldr	r3, [pc, #64]	; (80037cc <HAL_RCC_GetSysClockFreq+0x108>)
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	0a1b      	lsrs	r3, r3, #8
 8003790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	fb03 f202 	mul.w	r2, r3, r2
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037a2:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <HAL_RCC_GetSysClockFreq+0x108>)
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	0e5b      	lsrs	r3, r3, #25
 80037a8:	f003 0303 	and.w	r3, r3, #3
 80037ac:	3301      	adds	r3, #1
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037bc:	69bb      	ldr	r3, [r7, #24]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3724      	adds	r7, #36	; 0x24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40021000 	.word	0x40021000
 80037d0:	08009344 	.word	0x08009344
 80037d4:	00f42400 	.word	0x00f42400
 80037d8:	007a1200 	.word	0x007a1200

080037dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037e0:	4b03      	ldr	r3, [pc, #12]	; (80037f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037e2:	681b      	ldr	r3, [r3, #0]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	20000084 	.word	0x20000084

080037f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037f8:	f7ff fff0 	bl	80037dc <HAL_RCC_GetHCLKFreq>
 80037fc:	4602      	mov	r2, r0
 80037fe:	4b06      	ldr	r3, [pc, #24]	; (8003818 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	0a1b      	lsrs	r3, r3, #8
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	4904      	ldr	r1, [pc, #16]	; (800381c <HAL_RCC_GetPCLK1Freq+0x28>)
 800380a:	5ccb      	ldrb	r3, [r1, r3]
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003814:	4618      	mov	r0, r3
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40021000 	.word	0x40021000
 800381c:	0800933c 	.word	0x0800933c

08003820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003824:	f7ff ffda 	bl	80037dc <HAL_RCC_GetHCLKFreq>
 8003828:	4602      	mov	r2, r0
 800382a:	4b06      	ldr	r3, [pc, #24]	; (8003844 <HAL_RCC_GetPCLK2Freq+0x24>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	0adb      	lsrs	r3, r3, #11
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	4904      	ldr	r1, [pc, #16]	; (8003848 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003836:	5ccb      	ldrb	r3, [r1, r3]
 8003838:	f003 031f 	and.w	r3, r3, #31
 800383c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003840:	4618      	mov	r0, r3
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40021000 	.word	0x40021000
 8003848:	0800933c 	.word	0x0800933c

0800384c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003854:	2300      	movs	r3, #0
 8003856:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003858:	4b2a      	ldr	r3, [pc, #168]	; (8003904 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800385a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003864:	f7ff f9b6 	bl	8002bd4 <HAL_PWREx_GetVoltageRange>
 8003868:	6178      	str	r0, [r7, #20]
 800386a:	e014      	b.n	8003896 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800386c:	4b25      	ldr	r3, [pc, #148]	; (8003904 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800386e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003870:	4a24      	ldr	r2, [pc, #144]	; (8003904 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003876:	6593      	str	r3, [r2, #88]	; 0x58
 8003878:	4b22      	ldr	r3, [pc, #136]	; (8003904 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800387a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003884:	f7ff f9a6 	bl	8002bd4 <HAL_PWREx_GetVoltageRange>
 8003888:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800388a:	4b1e      	ldr	r3, [pc, #120]	; (8003904 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800388c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388e:	4a1d      	ldr	r2, [pc, #116]	; (8003904 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003894:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800389c:	d10b      	bne.n	80038b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b80      	cmp	r3, #128	; 0x80
 80038a2:	d919      	bls.n	80038d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2ba0      	cmp	r3, #160	; 0xa0
 80038a8:	d902      	bls.n	80038b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038aa:	2302      	movs	r3, #2
 80038ac:	613b      	str	r3, [r7, #16]
 80038ae:	e013      	b.n	80038d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038b0:	2301      	movs	r3, #1
 80038b2:	613b      	str	r3, [r7, #16]
 80038b4:	e010      	b.n	80038d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b80      	cmp	r3, #128	; 0x80
 80038ba:	d902      	bls.n	80038c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038bc:	2303      	movs	r3, #3
 80038be:	613b      	str	r3, [r7, #16]
 80038c0:	e00a      	b.n	80038d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b80      	cmp	r3, #128	; 0x80
 80038c6:	d102      	bne.n	80038ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038c8:	2302      	movs	r3, #2
 80038ca:	613b      	str	r3, [r7, #16]
 80038cc:	e004      	b.n	80038d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b70      	cmp	r3, #112	; 0x70
 80038d2:	d101      	bne.n	80038d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038d4:	2301      	movs	r3, #1
 80038d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f023 0207 	bic.w	r2, r3, #7
 80038e0:	4909      	ldr	r1, [pc, #36]	; (8003908 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038e8:	4b07      	ldr	r3, [pc, #28]	; (8003908 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d001      	beq.n	80038fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40021000 	.word	0x40021000
 8003908:	40022000 	.word	0x40022000

0800390c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003914:	2300      	movs	r3, #0
 8003916:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003918:	2300      	movs	r3, #0
 800391a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003924:	2b00      	cmp	r3, #0
 8003926:	d031      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003930:	d01a      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003932:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003936:	d814      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003938:	2b00      	cmp	r3, #0
 800393a:	d009      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800393c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003940:	d10f      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003942:	4b5d      	ldr	r3, [pc, #372]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	4a5c      	ldr	r2, [pc, #368]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800394c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800394e:	e00c      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3304      	adds	r3, #4
 8003954:	2100      	movs	r1, #0
 8003956:	4618      	mov	r0, r3
 8003958:	f000 f9de 	bl	8003d18 <RCCEx_PLLSAI1_Config>
 800395c:	4603      	mov	r3, r0
 800395e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003960:	e003      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	74fb      	strb	r3, [r7, #19]
      break;
 8003966:	e000      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003968:	bf00      	nop
    }

    if(ret == HAL_OK)
 800396a:	7cfb      	ldrb	r3, [r7, #19]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10b      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003970:	4b51      	ldr	r3, [pc, #324]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003976:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397e:	494e      	ldr	r1, [pc, #312]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003980:	4313      	orrs	r3, r2
 8003982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003986:	e001      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003988:	7cfb      	ldrb	r3, [r7, #19]
 800398a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 809e 	beq.w	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800399a:	2300      	movs	r3, #0
 800399c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800399e:	4b46      	ldr	r3, [pc, #280]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80039aa:	2301      	movs	r3, #1
 80039ac:	e000      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80039ae:	2300      	movs	r3, #0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00d      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b4:	4b40      	ldr	r3, [pc, #256]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b8:	4a3f      	ldr	r2, [pc, #252]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039be:	6593      	str	r3, [r2, #88]	; 0x58
 80039c0:	4b3d      	ldr	r3, [pc, #244]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039cc:	2301      	movs	r3, #1
 80039ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039d0:	4b3a      	ldr	r3, [pc, #232]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a39      	ldr	r2, [pc, #228]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80039d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039dc:	f7fe fbb0 	bl	8002140 <HAL_GetTick>
 80039e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039e2:	e009      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e4:	f7fe fbac 	bl	8002140 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d902      	bls.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	74fb      	strb	r3, [r7, #19]
        break;
 80039f6:	e005      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039f8:	4b30      	ldr	r3, [pc, #192]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0ef      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003a04:	7cfb      	ldrb	r3, [r7, #19]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d15a      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a0a:	4b2b      	ldr	r3, [pc, #172]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a14:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d01e      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d019      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a26:	4b24      	ldr	r3, [pc, #144]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a30:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a32:	4b21      	ldr	r3, [pc, #132]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a38:	4a1f      	ldr	r2, [pc, #124]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a42:	4b1d      	ldr	r3, [pc, #116]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a48:	4a1b      	ldr	r2, [pc, #108]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a52:	4a19      	ldr	r2, [pc, #100]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d016      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a64:	f7fe fb6c 	bl	8002140 <HAL_GetTick>
 8003a68:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a6a:	e00b      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6c:	f7fe fb68 	bl	8002140 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d902      	bls.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	74fb      	strb	r3, [r7, #19]
            break;
 8003a82:	e006      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a84:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0ec      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003a92:	7cfb      	ldrb	r3, [r7, #19]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10b      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a98:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa6:	4904      	ldr	r1, [pc, #16]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003aae:	e009      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ab0:	7cfb      	ldrb	r3, [r7, #19]
 8003ab2:	74bb      	strb	r3, [r7, #18]
 8003ab4:	e006      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003ab6:	bf00      	nop
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac0:	7cfb      	ldrb	r3, [r7, #19]
 8003ac2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ac4:	7c7b      	ldrb	r3, [r7, #17]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d105      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aca:	4b8a      	ldr	r3, [pc, #552]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ace:	4a89      	ldr	r2, [pc, #548]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ad4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ae2:	4b84      	ldr	r3, [pc, #528]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae8:	f023 0203 	bic.w	r2, r3, #3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	4980      	ldr	r1, [pc, #512]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00a      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b04:	4b7b      	ldr	r3, [pc, #492]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0a:	f023 020c 	bic.w	r2, r3, #12
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	4978      	ldr	r1, [pc, #480]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b26:	4b73      	ldr	r3, [pc, #460]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b34:	496f      	ldr	r1, [pc, #444]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00a      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b48:	4b6a      	ldr	r3, [pc, #424]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b56:	4967      	ldr	r1, [pc, #412]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b6a:	4b62      	ldr	r3, [pc, #392]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b78:	495e      	ldr	r1, [pc, #376]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00a      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b8c:	4b59      	ldr	r3, [pc, #356]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b92:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9a:	4956      	ldr	r1, [pc, #344]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bae:	4b51      	ldr	r3, [pc, #324]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbc:	494d      	ldr	r1, [pc, #308]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d028      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bd0:	4b48      	ldr	r3, [pc, #288]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	4945      	ldr	r1, [pc, #276]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bee:	d106      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bf0:	4b40      	ldr	r3, [pc, #256]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	4a3f      	ldr	r2, [pc, #252]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bfa:	60d3      	str	r3, [r2, #12]
 8003bfc:	e011      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c06:	d10c      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 f882 	bl	8003d18 <RCCEx_PLLSAI1_Config>
 8003c14:	4603      	mov	r3, r0
 8003c16:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c18:	7cfb      	ldrb	r3, [r7, #19]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003c1e:	7cfb      	ldrb	r3, [r7, #19]
 8003c20:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d028      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c2e:	4b31      	ldr	r3, [pc, #196]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c34:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3c:	492d      	ldr	r1, [pc, #180]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c4c:	d106      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c4e:	4b29      	ldr	r3, [pc, #164]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	4a28      	ldr	r2, [pc, #160]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c58:	60d3      	str	r3, [r2, #12]
 8003c5a:	e011      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c64:	d10c      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3304      	adds	r3, #4
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 f853 	bl	8003d18 <RCCEx_PLLSAI1_Config>
 8003c72:	4603      	mov	r3, r0
 8003c74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c76:	7cfb      	ldrb	r3, [r7, #19]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003c7c:	7cfb      	ldrb	r3, [r7, #19]
 8003c7e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d01c      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c8c:	4b19      	ldr	r3, [pc, #100]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c9a:	4916      	ldr	r1, [pc, #88]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003caa:	d10c      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3304      	adds	r3, #4
 8003cb0:	2102      	movs	r1, #2
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 f830 	bl	8003d18 <RCCEx_PLLSAI1_Config>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cbc:	7cfb      	ldrb	r3, [r7, #19]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003cc2:	7cfb      	ldrb	r3, [r7, #19]
 8003cc4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003cd2:	4b08      	ldr	r3, [pc, #32]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce0:	4904      	ldr	r1, [pc, #16]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ce8:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40021000 	.word	0x40021000

08003cf8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a04      	ldr	r2, [pc, #16]	; (8003d14 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003d02:	f043 0304 	orr.w	r3, r3, #4
 8003d06:	6013      	str	r3, [r2, #0]
}
 8003d08:	bf00      	nop
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	40021000 	.word	0x40021000

08003d18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d26:	4b74      	ldr	r3, [pc, #464]	; (8003ef8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d018      	beq.n	8003d64 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d32:	4b71      	ldr	r3, [pc, #452]	; (8003ef8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f003 0203 	and.w	r2, r3, #3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d10d      	bne.n	8003d5e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
       ||
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d009      	beq.n	8003d5e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d4a:	4b6b      	ldr	r3, [pc, #428]	; (8003ef8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	091b      	lsrs	r3, r3, #4
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	1c5a      	adds	r2, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
       ||
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d047      	beq.n	8003dee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	73fb      	strb	r3, [r7, #15]
 8003d62:	e044      	b.n	8003dee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d018      	beq.n	8003d9e <RCCEx_PLLSAI1_Config+0x86>
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	d825      	bhi.n	8003dbc <RCCEx_PLLSAI1_Config+0xa4>
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d002      	beq.n	8003d7a <RCCEx_PLLSAI1_Config+0x62>
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d009      	beq.n	8003d8c <RCCEx_PLLSAI1_Config+0x74>
 8003d78:	e020      	b.n	8003dbc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d7a:	4b5f      	ldr	r3, [pc, #380]	; (8003ef8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d11d      	bne.n	8003dc2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d8a:	e01a      	b.n	8003dc2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d8c:	4b5a      	ldr	r3, [pc, #360]	; (8003ef8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d116      	bne.n	8003dc6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d9c:	e013      	b.n	8003dc6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d9e:	4b56      	ldr	r3, [pc, #344]	; (8003ef8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10f      	bne.n	8003dca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003daa:	4b53      	ldr	r3, [pc, #332]	; (8003ef8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d109      	bne.n	8003dca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003dba:	e006      	b.n	8003dca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc0:	e004      	b.n	8003dcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dc2:	bf00      	nop
 8003dc4:	e002      	b.n	8003dcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dc6:	bf00      	nop
 8003dc8:	e000      	b.n	8003dcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dca:	bf00      	nop
    }

    if(status == HAL_OK)
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10d      	bne.n	8003dee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003dd2:	4b49      	ldr	r3, [pc, #292]	; (8003ef8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6819      	ldr	r1, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	430b      	orrs	r3, r1
 8003de8:	4943      	ldr	r1, [pc, #268]	; (8003ef8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003dee:	7bfb      	ldrb	r3, [r7, #15]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d17c      	bne.n	8003eee <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003df4:	4b40      	ldr	r3, [pc, #256]	; (8003ef8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a3f      	ldr	r2, [pc, #252]	; (8003ef8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dfa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003dfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e00:	f7fe f99e 	bl	8002140 <HAL_GetTick>
 8003e04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e06:	e009      	b.n	8003e1c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e08:	f7fe f99a 	bl	8002140 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d902      	bls.n	8003e1c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	73fb      	strb	r3, [r7, #15]
        break;
 8003e1a:	e005      	b.n	8003e28 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e1c:	4b36      	ldr	r3, [pc, #216]	; (8003ef8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1ef      	bne.n	8003e08 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d15f      	bne.n	8003eee <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d110      	bne.n	8003e56 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e34:	4b30      	ldr	r3, [pc, #192]	; (8003ef8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003e3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6892      	ldr	r2, [r2, #8]
 8003e44:	0211      	lsls	r1, r2, #8
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	68d2      	ldr	r2, [r2, #12]
 8003e4a:	06d2      	lsls	r2, r2, #27
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	492a      	ldr	r1, [pc, #168]	; (8003ef8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	610b      	str	r3, [r1, #16]
 8003e54:	e027      	b.n	8003ea6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d112      	bne.n	8003e82 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e5c:	4b26      	ldr	r3, [pc, #152]	; (8003ef8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003e64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6892      	ldr	r2, [r2, #8]
 8003e6c:	0211      	lsls	r1, r2, #8
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6912      	ldr	r2, [r2, #16]
 8003e72:	0852      	lsrs	r2, r2, #1
 8003e74:	3a01      	subs	r2, #1
 8003e76:	0552      	lsls	r2, r2, #21
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	491f      	ldr	r1, [pc, #124]	; (8003ef8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	610b      	str	r3, [r1, #16]
 8003e80:	e011      	b.n	8003ea6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e82:	4b1d      	ldr	r3, [pc, #116]	; (8003ef8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e8a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6892      	ldr	r2, [r2, #8]
 8003e92:	0211      	lsls	r1, r2, #8
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6952      	ldr	r2, [r2, #20]
 8003e98:	0852      	lsrs	r2, r2, #1
 8003e9a:	3a01      	subs	r2, #1
 8003e9c:	0652      	lsls	r2, r2, #25
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	4915      	ldr	r1, [pc, #84]	; (8003ef8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ea6:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a13      	ldr	r2, [pc, #76]	; (8003ef8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003eb0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb2:	f7fe f945 	bl	8002140 <HAL_GetTick>
 8003eb6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003eb8:	e009      	b.n	8003ece <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003eba:	f7fe f941 	bl	8002140 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d902      	bls.n	8003ece <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	73fb      	strb	r3, [r7, #15]
          break;
 8003ecc:	e005      	b.n	8003eda <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ece:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0ef      	beq.n	8003eba <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d106      	bne.n	8003eee <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ee0:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ee2:	691a      	ldr	r2, [r3, #16]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	4903      	ldr	r1, [pc, #12]	; (8003ef8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40021000 	.word	0x40021000

08003efc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d06c      	beq.n	8003fe8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d106      	bne.n	8003f28 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7fd fe26 	bl	8001b74 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	22ca      	movs	r2, #202	; 0xca
 8003f36:	625a      	str	r2, [r3, #36]	; 0x24
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2253      	movs	r2, #83	; 0x53
 8003f3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f87c 	bl	800403e <RTC_EnterInitMode>
 8003f46:	4603      	mov	r3, r0
 8003f48:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d14b      	bne.n	8003fe8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6812      	ldr	r2, [r2, #0]
 8003f5a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f62:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6899      	ldr	r1, [r3, #8]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	68d2      	ldr	r2, [r2, #12]
 8003f8a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6919      	ldr	r1, [r3, #16]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	041a      	lsls	r2, r3, #16
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f87f 	bl	80040a4 <RTC_ExitInitMode>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d11b      	bne.n	8003fe8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0203 	bic.w	r2, r2, #3
 8003fbe:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69da      	ldr	r2, [r3, #28]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	22ff      	movs	r2, #255	; 0xff
 8003fde:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b084      	sub	sp, #16
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004008:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800400a:	f7fe f899 	bl	8002140 <HAL_GetTick>
 800400e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004010:	e009      	b.n	8004026 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004012:	f7fe f895 	bl	8002140 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004020:	d901      	bls.n	8004026 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e007      	b.n	8004036 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f003 0320 	and.w	r3, r3, #32
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0ee      	beq.n	8004012 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b084      	sub	sp, #16
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004046:	2300      	movs	r3, #0
 8004048:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004054:	2b00      	cmp	r3, #0
 8004056:	d120      	bne.n	800409a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f04f 32ff 	mov.w	r2, #4294967295
 8004060:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004062:	f7fe f86d 	bl	8002140 <HAL_GetTick>
 8004066:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004068:	e00d      	b.n	8004086 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800406a:	f7fe f869 	bl	8002140 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004078:	d905      	bls.n	8004086 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2203      	movs	r2, #3
 8004082:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004090:	2b00      	cmp	r3, #0
 8004092:	d102      	bne.n	800409a <RTC_EnterInitMode+0x5c>
 8004094:	7bfb      	ldrb	r3, [r7, #15]
 8004096:	2b03      	cmp	r3, #3
 8004098:	d1e7      	bne.n	800406a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800409a:	7bfb      	ldrb	r3, [r7, #15]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80040b0:	4b1a      	ldr	r3, [pc, #104]	; (800411c <RTC_ExitInitMode+0x78>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	4a19      	ldr	r2, [pc, #100]	; (800411c <RTC_ExitInitMode+0x78>)
 80040b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040ba:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80040bc:	4b17      	ldr	r3, [pc, #92]	; (800411c <RTC_ExitInitMode+0x78>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 0320 	and.w	r3, r3, #32
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10c      	bne.n	80040e2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff ff92 	bl	8003ff2 <HAL_RTC_WaitForSynchro>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d01e      	beq.n	8004112 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2203      	movs	r2, #3
 80040d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	73fb      	strb	r3, [r7, #15]
 80040e0:	e017      	b.n	8004112 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80040e2:	4b0e      	ldr	r3, [pc, #56]	; (800411c <RTC_ExitInitMode+0x78>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	4a0d      	ldr	r2, [pc, #52]	; (800411c <RTC_ExitInitMode+0x78>)
 80040e8:	f023 0320 	bic.w	r3, r3, #32
 80040ec:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7ff ff7f 	bl	8003ff2 <HAL_RTC_WaitForSynchro>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d005      	beq.n	8004106 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2203      	movs	r2, #3
 80040fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004106:	4b05      	ldr	r3, [pc, #20]	; (800411c <RTC_ExitInitMode+0x78>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	4a04      	ldr	r2, [pc, #16]	; (800411c <RTC_ExitInitMode+0x78>)
 800410c:	f043 0320 	orr.w	r3, r3, #32
 8004110:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004112:	7bfb      	ldrb	r3, [r7, #15]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40002800 	.word	0x40002800

08004120 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004128:	4b0f      	ldr	r3, [pc, #60]	; (8004168 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 800412a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800412e:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00b      	beq.n	8004156 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	b2da      	uxtb	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800414e:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f80b 	bl	800416c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800415e:	bf00      	nop
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	40010400 	.word	0x40010400

0800416c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e049      	b.n	8004226 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d106      	bne.n	80041ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fd fd1c 	bl	8001be4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3304      	adds	r3, #4
 80041bc:	4619      	mov	r1, r3
 80041be:	4610      	mov	r0, r2
 80041c0:	f000 fa00 	bl	80045c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b01      	cmp	r3, #1
 8004242:	d001      	beq.n	8004248 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e03b      	b.n	80042c0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a19      	ldr	r2, [pc, #100]	; (80042cc <HAL_TIM_Base_Start_IT+0x9c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d009      	beq.n	800427e <HAL_TIM_Base_Start_IT+0x4e>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004272:	d004      	beq.n	800427e <HAL_TIM_Base_Start_IT+0x4e>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a15      	ldr	r2, [pc, #84]	; (80042d0 <HAL_TIM_Base_Start_IT+0xa0>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d115      	bne.n	80042aa <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	4b13      	ldr	r3, [pc, #76]	; (80042d4 <HAL_TIM_Base_Start_IT+0xa4>)
 8004286:	4013      	ands	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2b06      	cmp	r3, #6
 800428e:	d015      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x8c>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004296:	d011      	beq.n	80042bc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0201 	orr.w	r2, r2, #1
 80042a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a8:	e008      	b.n	80042bc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0201 	orr.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	e000      	b.n	80042be <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	40012c00 	.word	0x40012c00
 80042d0:	40014000 	.word	0x40014000
 80042d4:	00010007 	.word	0x00010007

080042d8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0201 	bic.w	r2, r2, #1
 80042ee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6a1a      	ldr	r2, [r3, #32]
 80042f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80042fa:	4013      	ands	r3, r2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10f      	bne.n	8004320 <HAL_TIM_Base_Stop_IT+0x48>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6a1a      	ldr	r2, [r3, #32]
 8004306:	f240 4344 	movw	r3, #1092	; 0x444
 800430a:	4013      	ands	r3, r2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d107      	bne.n	8004320 <HAL_TIM_Base_Stop_IT+0x48>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0201 	bic.w	r2, r2, #1
 800431e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b02      	cmp	r3, #2
 800434a:	d122      	bne.n	8004392 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b02      	cmp	r3, #2
 8004358:	d11b      	bne.n	8004392 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f06f 0202 	mvn.w	r2, #2
 8004362:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	f003 0303 	and.w	r3, r3, #3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f905 	bl	8004588 <HAL_TIM_IC_CaptureCallback>
 800437e:	e005      	b.n	800438c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f8f7 	bl	8004574 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f908 	bl	800459c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b04      	cmp	r3, #4
 800439e:	d122      	bne.n	80043e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f003 0304 	and.w	r3, r3, #4
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d11b      	bne.n	80043e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f06f 0204 	mvn.w	r2, #4
 80043b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f8db 	bl	8004588 <HAL_TIM_IC_CaptureCallback>
 80043d2:	e005      	b.n	80043e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f8cd 	bl	8004574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f8de 	bl	800459c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	f003 0308 	and.w	r3, r3, #8
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d122      	bne.n	800443a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d11b      	bne.n	800443a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f06f 0208 	mvn.w	r2, #8
 800440a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2204      	movs	r2, #4
 8004410:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d003      	beq.n	8004428 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f8b1 	bl	8004588 <HAL_TIM_IC_CaptureCallback>
 8004426:	e005      	b.n	8004434 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f8a3 	bl	8004574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f8b4 	bl	800459c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	f003 0310 	and.w	r3, r3, #16
 8004444:	2b10      	cmp	r3, #16
 8004446:	d122      	bne.n	800448e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f003 0310 	and.w	r3, r3, #16
 8004452:	2b10      	cmp	r3, #16
 8004454:	d11b      	bne.n	800448e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f06f 0210 	mvn.w	r2, #16
 800445e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2208      	movs	r2, #8
 8004464:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f887 	bl	8004588 <HAL_TIM_IC_CaptureCallback>
 800447a:	e005      	b.n	8004488 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f879 	bl	8004574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f88a 	bl	800459c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b01      	cmp	r3, #1
 800449a:	d10e      	bne.n	80044ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d107      	bne.n	80044ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f06f 0201 	mvn.w	r2, #1
 80044b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7fd fad3 	bl	8001a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c4:	2b80      	cmp	r3, #128	; 0x80
 80044c6:	d10e      	bne.n	80044e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d2:	2b80      	cmp	r3, #128	; 0x80
 80044d4:	d107      	bne.n	80044e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f943 	bl	800476c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044f4:	d10e      	bne.n	8004514 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004500:	2b80      	cmp	r3, #128	; 0x80
 8004502:	d107      	bne.n	8004514 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800450c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f936 	bl	8004780 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451e:	2b40      	cmp	r3, #64	; 0x40
 8004520:	d10e      	bne.n	8004540 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452c:	2b40      	cmp	r3, #64	; 0x40
 800452e:	d107      	bne.n	8004540 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f838 	bl	80045b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b20      	cmp	r3, #32
 800454c:	d10e      	bne.n	800456c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f003 0320 	and.w	r3, r3, #32
 8004558:	2b20      	cmp	r3, #32
 800455a:	d107      	bne.n	800456c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f06f 0220 	mvn.w	r2, #32
 8004564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f8f6 	bl	8004758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800456c:	bf00      	nop
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a2a      	ldr	r2, [pc, #168]	; (8004680 <TIM_Base_SetConfig+0xbc>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d003      	beq.n	80045e4 <TIM_Base_SetConfig+0x20>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e2:	d108      	bne.n	80045f6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a21      	ldr	r2, [pc, #132]	; (8004680 <TIM_Base_SetConfig+0xbc>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d00b      	beq.n	8004616 <TIM_Base_SetConfig+0x52>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004604:	d007      	beq.n	8004616 <TIM_Base_SetConfig+0x52>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a1e      	ldr	r2, [pc, #120]	; (8004684 <TIM_Base_SetConfig+0xc0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d003      	beq.n	8004616 <TIM_Base_SetConfig+0x52>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a1d      	ldr	r2, [pc, #116]	; (8004688 <TIM_Base_SetConfig+0xc4>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d108      	bne.n	8004628 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800461c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	4313      	orrs	r3, r2
 8004626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	4313      	orrs	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a0c      	ldr	r2, [pc, #48]	; (8004680 <TIM_Base_SetConfig+0xbc>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d007      	beq.n	8004664 <TIM_Base_SetConfig+0xa0>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a0b      	ldr	r2, [pc, #44]	; (8004684 <TIM_Base_SetConfig+0xc0>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d003      	beq.n	8004664 <TIM_Base_SetConfig+0xa0>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a0a      	ldr	r2, [pc, #40]	; (8004688 <TIM_Base_SetConfig+0xc4>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d103      	bne.n	800466c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	691a      	ldr	r2, [r3, #16]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	615a      	str	r2, [r3, #20]
}
 8004672:	bf00      	nop
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	40012c00 	.word	0x40012c00
 8004684:	40014000 	.word	0x40014000
 8004688:	40014400 	.word	0x40014400

0800468c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e04f      	b.n	8004744 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a21      	ldr	r2, [pc, #132]	; (8004750 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d108      	bne.n	80046e0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80046d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	4313      	orrs	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a14      	ldr	r2, [pc, #80]	; (8004750 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d009      	beq.n	8004718 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800470c:	d004      	beq.n	8004718 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a10      	ldr	r2, [pc, #64]	; (8004754 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d10c      	bne.n	8004732 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800471e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	4313      	orrs	r3, r2
 8004728:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	40012c00 	.word	0x40012c00
 8004754:	40014000 	.word	0x40014000

08004758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e040      	b.n	8004828 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d106      	bne.n	80047bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7fd fa3a 	bl	8001c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2224      	movs	r2, #36	; 0x24
 80047c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0201 	bic.w	r2, r2, #1
 80047d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 fbca 	bl	8004f6c <UART_SetConfig>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d101      	bne.n	80047e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e022      	b.n	8004828 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 fdea 	bl	80053c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689a      	ldr	r2, [r3, #8]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800480e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0201 	orr.w	r2, r2, #1
 800481e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 fe71 	bl	8005508 <UART_CheckIdleState>
 8004826:	4603      	mov	r3, r0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b08a      	sub	sp, #40	; 0x28
 8004834:	af02      	add	r7, sp, #8
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	4613      	mov	r3, r2
 800483e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004844:	2b20      	cmp	r3, #32
 8004846:	f040 8082 	bne.w	800494e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <HAL_UART_Transmit+0x26>
 8004850:	88fb      	ldrh	r3, [r7, #6]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e07a      	b.n	8004950 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <HAL_UART_Transmit+0x38>
 8004864:	2302      	movs	r3, #2
 8004866:	e073      	b.n	8004950 <HAL_UART_Transmit+0x120>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2221      	movs	r2, #33	; 0x21
 800487c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800487e:	f7fd fc5f 	bl	8002140 <HAL_GetTick>
 8004882:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	88fa      	ldrh	r2, [r7, #6]
 8004888:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	88fa      	ldrh	r2, [r7, #6]
 8004890:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800489c:	d108      	bne.n	80048b0 <HAL_UART_Transmit+0x80>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d104      	bne.n	80048b0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	e003      	b.n	80048b8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048b4:	2300      	movs	r3, #0
 80048b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80048c0:	e02d      	b.n	800491e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2200      	movs	r2, #0
 80048ca:	2180      	movs	r1, #128	; 0x80
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 fe64 	bl	800559a <UART_WaitOnFlagUntilTimeout>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e039      	b.n	8004950 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10b      	bne.n	80048fa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	881a      	ldrh	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048ee:	b292      	uxth	r2, r2
 80048f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	3302      	adds	r3, #2
 80048f6:	61bb      	str	r3, [r7, #24]
 80048f8:	e008      	b.n	800490c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	781a      	ldrb	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	b292      	uxth	r2, r2
 8004904:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	3301      	adds	r3, #1
 800490a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004912:	b29b      	uxth	r3, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1cb      	bne.n	80048c2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	2200      	movs	r2, #0
 8004932:	2140      	movs	r1, #64	; 0x40
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 fe30 	bl	800559a <UART_WaitOnFlagUntilTimeout>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e005      	b.n	8004950 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2220      	movs	r2, #32
 8004948:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800494a:	2300      	movs	r3, #0
 800494c:	e000      	b.n	8004950 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800494e:	2302      	movs	r3, #2
  }
}
 8004950:	4618      	mov	r0, r3
 8004952:	3720      	adds	r7, #32
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b0ba      	sub	sp, #232	; 0xe8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800497e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004982:	f640 030f 	movw	r3, #2063	; 0x80f
 8004986:	4013      	ands	r3, r2
 8004988:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800498c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004990:	2b00      	cmp	r3, #0
 8004992:	d115      	bne.n	80049c0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004998:	f003 0320 	and.w	r3, r3, #32
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00f      	beq.n	80049c0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049a4:	f003 0320 	and.w	r3, r3, #32
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d009      	beq.n	80049c0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 82a6 	beq.w	8004f02 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	4798      	blx	r3
      }
      return;
 80049be:	e2a0      	b.n	8004f02 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80049c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 8117 	beq.w	8004bf8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80049ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d106      	bne.n	80049e4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80049d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80049da:	4b85      	ldr	r3, [pc, #532]	; (8004bf0 <HAL_UART_IRQHandler+0x298>)
 80049dc:	4013      	ands	r3, r2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 810a 	beq.w	8004bf8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d011      	beq.n	8004a14 <HAL_UART_IRQHandler+0xbc>
 80049f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00b      	beq.n	8004a14 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2201      	movs	r2, #1
 8004a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a0a:	f043 0201 	orr.w	r2, r3, #1
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d011      	beq.n	8004a44 <HAL_UART_IRQHandler+0xec>
 8004a20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00b      	beq.n	8004a44 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2202      	movs	r2, #2
 8004a32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a3a:	f043 0204 	orr.w	r2, r3, #4
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d011      	beq.n	8004a74 <HAL_UART_IRQHandler+0x11c>
 8004a50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00b      	beq.n	8004a74 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2204      	movs	r2, #4
 8004a62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a6a:	f043 0202 	orr.w	r2, r3, #2
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a78:	f003 0308 	and.w	r3, r3, #8
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d017      	beq.n	8004ab0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a84:	f003 0320 	and.w	r3, r3, #32
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d105      	bne.n	8004a98 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a90:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00b      	beq.n	8004ab0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2208      	movs	r2, #8
 8004a9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aa6:	f043 0208 	orr.w	r2, r3, #8
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ab4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d012      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x18a>
 8004abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ac0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00c      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ad0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ad8:	f043 0220 	orr.w	r2, r3, #32
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 820c 	beq.w	8004f06 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af2:	f003 0320 	and.w	r3, r3, #32
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00d      	beq.n	8004b16 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004afe:	f003 0320 	and.w	r3, r3, #32
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d007      	beq.n	8004b16 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2a:	2b40      	cmp	r3, #64	; 0x40
 8004b2c:	d005      	beq.n	8004b3a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b32:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d04f      	beq.n	8004bda <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 febe 	bl	80058bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4a:	2b40      	cmp	r3, #64	; 0x40
 8004b4c:	d141      	bne.n	8004bd2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3308      	adds	r3, #8
 8004b54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b5c:	e853 3f00 	ldrex	r3, [r3]
 8004b60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	3308      	adds	r3, #8
 8004b76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b8a:	e841 2300 	strex	r3, r2, [r1]
 8004b8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1d9      	bne.n	8004b4e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d013      	beq.n	8004bca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba6:	4a13      	ldr	r2, [pc, #76]	; (8004bf4 <HAL_UART_IRQHandler+0x29c>)
 8004ba8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fd fd5e 	bl	8002670 <HAL_DMA_Abort_IT>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d017      	beq.n	8004bea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc8:	e00f      	b.n	8004bea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f9c4 	bl	8004f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd0:	e00b      	b.n	8004bea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f9c0 	bl	8004f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd8:	e007      	b.n	8004bea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f9bc 	bl	8004f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004be8:	e18d      	b.n	8004f06 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bea:	bf00      	nop
    return;
 8004bec:	e18b      	b.n	8004f06 <HAL_UART_IRQHandler+0x5ae>
 8004bee:	bf00      	nop
 8004bf0:	04000120 	.word	0x04000120
 8004bf4:	08005b5b 	.word	0x08005b5b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	f040 8146 	bne.w	8004e8e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c06:	f003 0310 	and.w	r3, r3, #16
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 813f 	beq.w	8004e8e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c14:	f003 0310 	and.w	r3, r3, #16
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 8138 	beq.w	8004e8e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2210      	movs	r2, #16
 8004c24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c30:	2b40      	cmp	r3, #64	; 0x40
 8004c32:	f040 80b4 	bne.w	8004d9e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c42:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 815f 	beq.w	8004f0a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c56:	429a      	cmp	r2, r3
 8004c58:	f080 8157 	bcs.w	8004f0a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0320 	and.w	r3, r3, #32
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f040 8085 	bne.w	8004d82 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c84:	e853 3f00 	ldrex	r3, [r3]
 8004c88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ca2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ca6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004caa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004cae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004cb2:	e841 2300 	strex	r3, r2, [r1]
 8004cb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004cba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1da      	bne.n	8004c78 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3308      	adds	r3, #8
 8004cc8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004cd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cd4:	f023 0301 	bic.w	r3, r3, #1
 8004cd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3308      	adds	r3, #8
 8004ce2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ce6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004cea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004cee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004cf2:	e841 2300 	strex	r3, r2, [r1]
 8004cf6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004cf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1e1      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3308      	adds	r3, #8
 8004d04:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d08:	e853 3f00 	ldrex	r3, [r3]
 8004d0c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3308      	adds	r3, #8
 8004d1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d22:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d24:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d26:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d2a:	e841 2300 	strex	r3, r2, [r1]
 8004d2e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1e3      	bne.n	8004cfe <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2220      	movs	r2, #32
 8004d3a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d4a:	e853 3f00 	ldrex	r3, [r3]
 8004d4e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d52:	f023 0310 	bic.w	r3, r3, #16
 8004d56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d64:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d66:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d6c:	e841 2300 	strex	r3, r2, [r1]
 8004d70:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1e4      	bne.n	8004d42 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7fd fc39 	bl	80025f4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	4619      	mov	r1, r3
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7fc fea4 	bl	8001ae4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d9c:	e0b5      	b.n	8004f0a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 80a7 	beq.w	8004f0e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004dc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 80a2 	beq.w	8004f0e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd2:	e853 3f00 	ldrex	r3, [r3]
 8004dd6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	461a      	mov	r2, r3
 8004de8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004dec:	647b      	str	r3, [r7, #68]	; 0x44
 8004dee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004df2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004df4:	e841 2300 	strex	r3, r2, [r1]
 8004df8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1e4      	bne.n	8004dca <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3308      	adds	r3, #8
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	e853 3f00 	ldrex	r3, [r3]
 8004e0e:	623b      	str	r3, [r7, #32]
   return(result);
 8004e10:	6a3b      	ldr	r3, [r7, #32]
 8004e12:	f023 0301 	bic.w	r3, r3, #1
 8004e16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	3308      	adds	r3, #8
 8004e20:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e24:	633a      	str	r2, [r7, #48]	; 0x30
 8004e26:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e2c:	e841 2300 	strex	r3, r2, [r1]
 8004e30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1e3      	bne.n	8004e00 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	e853 3f00 	ldrex	r3, [r3]
 8004e56:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0310 	bic.w	r3, r3, #16
 8004e5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	461a      	mov	r2, r3
 8004e68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e6c:	61fb      	str	r3, [r7, #28]
 8004e6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e70:	69b9      	ldr	r1, [r7, #24]
 8004e72:	69fa      	ldr	r2, [r7, #28]
 8004e74:	e841 2300 	strex	r3, r2, [r1]
 8004e78:	617b      	str	r3, [r7, #20]
   return(result);
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1e4      	bne.n	8004e4a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e84:	4619      	mov	r1, r3
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7fc fe2c 	bl	8001ae4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e8c:	e03f      	b.n	8004f0e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00e      	beq.n	8004eb8 <HAL_UART_IRQHandler+0x560>
 8004e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d008      	beq.n	8004eb8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004eae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 fe92 	bl	8005bda <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004eb6:	e02d      	b.n	8004f14 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00e      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d008      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d01c      	beq.n	8004f12 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	4798      	blx	r3
    }
    return;
 8004ee0:	e017      	b.n	8004f12 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d012      	beq.n	8004f14 <HAL_UART_IRQHandler+0x5bc>
 8004eee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00c      	beq.n	8004f14 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 fe43 	bl	8005b86 <UART_EndTransmit_IT>
    return;
 8004f00:	e008      	b.n	8004f14 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004f02:	bf00      	nop
 8004f04:	e006      	b.n	8004f14 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004f06:	bf00      	nop
 8004f08:	e004      	b.n	8004f14 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004f0a:	bf00      	nop
 8004f0c:	e002      	b.n	8004f14 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004f0e:	bf00      	nop
 8004f10:	e000      	b.n	8004f14 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004f12:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004f14:	37e8      	adds	r7, #232	; 0xe8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop

08004f1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f70:	b08a      	sub	sp, #40	; 0x28
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	689a      	ldr	r2, [r3, #8]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	431a      	orrs	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	4bb4      	ldr	r3, [pc, #720]	; (800526c <UART_SetConfig+0x300>)
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	6812      	ldr	r2, [r2, #0]
 8004fa2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fa4:	430b      	orrs	r3, r1
 8004fa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4aa9      	ldr	r2, [pc, #676]	; (8005270 <UART_SetConfig+0x304>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d004      	beq.n	8004fd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4aa0      	ldr	r2, [pc, #640]	; (8005274 <UART_SetConfig+0x308>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d126      	bne.n	8005044 <UART_SetConfig+0xd8>
 8004ff6:	4ba0      	ldr	r3, [pc, #640]	; (8005278 <UART_SetConfig+0x30c>)
 8004ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffc:	f003 0303 	and.w	r3, r3, #3
 8005000:	2b03      	cmp	r3, #3
 8005002:	d81b      	bhi.n	800503c <UART_SetConfig+0xd0>
 8005004:	a201      	add	r2, pc, #4	; (adr r2, 800500c <UART_SetConfig+0xa0>)
 8005006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500a:	bf00      	nop
 800500c:	0800501d 	.word	0x0800501d
 8005010:	0800502d 	.word	0x0800502d
 8005014:	08005025 	.word	0x08005025
 8005018:	08005035 	.word	0x08005035
 800501c:	2301      	movs	r3, #1
 800501e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005022:	e080      	b.n	8005126 <UART_SetConfig+0x1ba>
 8005024:	2302      	movs	r3, #2
 8005026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800502a:	e07c      	b.n	8005126 <UART_SetConfig+0x1ba>
 800502c:	2304      	movs	r3, #4
 800502e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005032:	e078      	b.n	8005126 <UART_SetConfig+0x1ba>
 8005034:	2308      	movs	r3, #8
 8005036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800503a:	e074      	b.n	8005126 <UART_SetConfig+0x1ba>
 800503c:	2310      	movs	r3, #16
 800503e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005042:	e070      	b.n	8005126 <UART_SetConfig+0x1ba>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a8c      	ldr	r2, [pc, #560]	; (800527c <UART_SetConfig+0x310>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d138      	bne.n	80050c0 <UART_SetConfig+0x154>
 800504e:	4b8a      	ldr	r3, [pc, #552]	; (8005278 <UART_SetConfig+0x30c>)
 8005050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005054:	f003 030c 	and.w	r3, r3, #12
 8005058:	2b0c      	cmp	r3, #12
 800505a:	d82d      	bhi.n	80050b8 <UART_SetConfig+0x14c>
 800505c:	a201      	add	r2, pc, #4	; (adr r2, 8005064 <UART_SetConfig+0xf8>)
 800505e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005062:	bf00      	nop
 8005064:	08005099 	.word	0x08005099
 8005068:	080050b9 	.word	0x080050b9
 800506c:	080050b9 	.word	0x080050b9
 8005070:	080050b9 	.word	0x080050b9
 8005074:	080050a9 	.word	0x080050a9
 8005078:	080050b9 	.word	0x080050b9
 800507c:	080050b9 	.word	0x080050b9
 8005080:	080050b9 	.word	0x080050b9
 8005084:	080050a1 	.word	0x080050a1
 8005088:	080050b9 	.word	0x080050b9
 800508c:	080050b9 	.word	0x080050b9
 8005090:	080050b9 	.word	0x080050b9
 8005094:	080050b1 	.word	0x080050b1
 8005098:	2300      	movs	r3, #0
 800509a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800509e:	e042      	b.n	8005126 <UART_SetConfig+0x1ba>
 80050a0:	2302      	movs	r3, #2
 80050a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050a6:	e03e      	b.n	8005126 <UART_SetConfig+0x1ba>
 80050a8:	2304      	movs	r3, #4
 80050aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ae:	e03a      	b.n	8005126 <UART_SetConfig+0x1ba>
 80050b0:	2308      	movs	r3, #8
 80050b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050b6:	e036      	b.n	8005126 <UART_SetConfig+0x1ba>
 80050b8:	2310      	movs	r3, #16
 80050ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050be:	e032      	b.n	8005126 <UART_SetConfig+0x1ba>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a6a      	ldr	r2, [pc, #424]	; (8005270 <UART_SetConfig+0x304>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d12a      	bne.n	8005120 <UART_SetConfig+0x1b4>
 80050ca:	4b6b      	ldr	r3, [pc, #428]	; (8005278 <UART_SetConfig+0x30c>)
 80050cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050d8:	d01a      	beq.n	8005110 <UART_SetConfig+0x1a4>
 80050da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050de:	d81b      	bhi.n	8005118 <UART_SetConfig+0x1ac>
 80050e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050e4:	d00c      	beq.n	8005100 <UART_SetConfig+0x194>
 80050e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050ea:	d815      	bhi.n	8005118 <UART_SetConfig+0x1ac>
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d003      	beq.n	80050f8 <UART_SetConfig+0x18c>
 80050f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f4:	d008      	beq.n	8005108 <UART_SetConfig+0x19c>
 80050f6:	e00f      	b.n	8005118 <UART_SetConfig+0x1ac>
 80050f8:	2300      	movs	r3, #0
 80050fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050fe:	e012      	b.n	8005126 <UART_SetConfig+0x1ba>
 8005100:	2302      	movs	r3, #2
 8005102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005106:	e00e      	b.n	8005126 <UART_SetConfig+0x1ba>
 8005108:	2304      	movs	r3, #4
 800510a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800510e:	e00a      	b.n	8005126 <UART_SetConfig+0x1ba>
 8005110:	2308      	movs	r3, #8
 8005112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005116:	e006      	b.n	8005126 <UART_SetConfig+0x1ba>
 8005118:	2310      	movs	r3, #16
 800511a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800511e:	e002      	b.n	8005126 <UART_SetConfig+0x1ba>
 8005120:	2310      	movs	r3, #16
 8005122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a51      	ldr	r2, [pc, #324]	; (8005270 <UART_SetConfig+0x304>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d17a      	bne.n	8005226 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005130:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005134:	2b08      	cmp	r3, #8
 8005136:	d824      	bhi.n	8005182 <UART_SetConfig+0x216>
 8005138:	a201      	add	r2, pc, #4	; (adr r2, 8005140 <UART_SetConfig+0x1d4>)
 800513a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513e:	bf00      	nop
 8005140:	08005165 	.word	0x08005165
 8005144:	08005183 	.word	0x08005183
 8005148:	0800516d 	.word	0x0800516d
 800514c:	08005183 	.word	0x08005183
 8005150:	08005173 	.word	0x08005173
 8005154:	08005183 	.word	0x08005183
 8005158:	08005183 	.word	0x08005183
 800515c:	08005183 	.word	0x08005183
 8005160:	0800517b 	.word	0x0800517b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005164:	f7fe fb46 	bl	80037f4 <HAL_RCC_GetPCLK1Freq>
 8005168:	61f8      	str	r0, [r7, #28]
        break;
 800516a:	e010      	b.n	800518e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800516c:	4b44      	ldr	r3, [pc, #272]	; (8005280 <UART_SetConfig+0x314>)
 800516e:	61fb      	str	r3, [r7, #28]
        break;
 8005170:	e00d      	b.n	800518e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005172:	f7fe faa7 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8005176:	61f8      	str	r0, [r7, #28]
        break;
 8005178:	e009      	b.n	800518e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800517a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800517e:	61fb      	str	r3, [r7, #28]
        break;
 8005180:	e005      	b.n	800518e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800518c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 8107 	beq.w	80053a4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	4613      	mov	r3, r2
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	4413      	add	r3, r2
 80051a0:	69fa      	ldr	r2, [r7, #28]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d305      	bcc.n	80051b2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051ac:	69fa      	ldr	r2, [r7, #28]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d903      	bls.n	80051ba <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80051b8:	e0f4      	b.n	80053a4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	2200      	movs	r2, #0
 80051be:	461c      	mov	r4, r3
 80051c0:	4615      	mov	r5, r2
 80051c2:	f04f 0200 	mov.w	r2, #0
 80051c6:	f04f 0300 	mov.w	r3, #0
 80051ca:	022b      	lsls	r3, r5, #8
 80051cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80051d0:	0222      	lsls	r2, r4, #8
 80051d2:	68f9      	ldr	r1, [r7, #12]
 80051d4:	6849      	ldr	r1, [r1, #4]
 80051d6:	0849      	lsrs	r1, r1, #1
 80051d8:	2000      	movs	r0, #0
 80051da:	4688      	mov	r8, r1
 80051dc:	4681      	mov	r9, r0
 80051de:	eb12 0a08 	adds.w	sl, r2, r8
 80051e2:	eb43 0b09 	adc.w	fp, r3, r9
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	603b      	str	r3, [r7, #0]
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051f4:	4650      	mov	r0, sl
 80051f6:	4659      	mov	r1, fp
 80051f8:	f7fb fd1e 	bl	8000c38 <__aeabi_uldivmod>
 80051fc:	4602      	mov	r2, r0
 80051fe:	460b      	mov	r3, r1
 8005200:	4613      	mov	r3, r2
 8005202:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800520a:	d308      	bcc.n	800521e <UART_SetConfig+0x2b2>
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005212:	d204      	bcs.n	800521e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	60da      	str	r2, [r3, #12]
 800521c:	e0c2      	b.n	80053a4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005224:	e0be      	b.n	80053a4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800522e:	d16a      	bne.n	8005306 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005230:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005234:	2b08      	cmp	r3, #8
 8005236:	d834      	bhi.n	80052a2 <UART_SetConfig+0x336>
 8005238:	a201      	add	r2, pc, #4	; (adr r2, 8005240 <UART_SetConfig+0x2d4>)
 800523a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523e:	bf00      	nop
 8005240:	08005265 	.word	0x08005265
 8005244:	08005285 	.word	0x08005285
 8005248:	0800528d 	.word	0x0800528d
 800524c:	080052a3 	.word	0x080052a3
 8005250:	08005293 	.word	0x08005293
 8005254:	080052a3 	.word	0x080052a3
 8005258:	080052a3 	.word	0x080052a3
 800525c:	080052a3 	.word	0x080052a3
 8005260:	0800529b 	.word	0x0800529b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005264:	f7fe fac6 	bl	80037f4 <HAL_RCC_GetPCLK1Freq>
 8005268:	61f8      	str	r0, [r7, #28]
        break;
 800526a:	e020      	b.n	80052ae <UART_SetConfig+0x342>
 800526c:	efff69f3 	.word	0xefff69f3
 8005270:	40008000 	.word	0x40008000
 8005274:	40013800 	.word	0x40013800
 8005278:	40021000 	.word	0x40021000
 800527c:	40004400 	.word	0x40004400
 8005280:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005284:	f7fe facc 	bl	8003820 <HAL_RCC_GetPCLK2Freq>
 8005288:	61f8      	str	r0, [r7, #28]
        break;
 800528a:	e010      	b.n	80052ae <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800528c:	4b4c      	ldr	r3, [pc, #304]	; (80053c0 <UART_SetConfig+0x454>)
 800528e:	61fb      	str	r3, [r7, #28]
        break;
 8005290:	e00d      	b.n	80052ae <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005292:	f7fe fa17 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8005296:	61f8      	str	r0, [r7, #28]
        break;
 8005298:	e009      	b.n	80052ae <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800529a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800529e:	61fb      	str	r3, [r7, #28]
        break;
 80052a0:	e005      	b.n	80052ae <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80052ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d077      	beq.n	80053a4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	005a      	lsls	r2, r3, #1
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	085b      	lsrs	r3, r3, #1
 80052be:	441a      	add	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	2b0f      	cmp	r3, #15
 80052ce:	d916      	bls.n	80052fe <UART_SetConfig+0x392>
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d6:	d212      	bcs.n	80052fe <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	b29b      	uxth	r3, r3
 80052dc:	f023 030f 	bic.w	r3, r3, #15
 80052e0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	085b      	lsrs	r3, r3, #1
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	f003 0307 	and.w	r3, r3, #7
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	8afb      	ldrh	r3, [r7, #22]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	8afa      	ldrh	r2, [r7, #22]
 80052fa:	60da      	str	r2, [r3, #12]
 80052fc:	e052      	b.n	80053a4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005304:	e04e      	b.n	80053a4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005306:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800530a:	2b08      	cmp	r3, #8
 800530c:	d827      	bhi.n	800535e <UART_SetConfig+0x3f2>
 800530e:	a201      	add	r2, pc, #4	; (adr r2, 8005314 <UART_SetConfig+0x3a8>)
 8005310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005314:	08005339 	.word	0x08005339
 8005318:	08005341 	.word	0x08005341
 800531c:	08005349 	.word	0x08005349
 8005320:	0800535f 	.word	0x0800535f
 8005324:	0800534f 	.word	0x0800534f
 8005328:	0800535f 	.word	0x0800535f
 800532c:	0800535f 	.word	0x0800535f
 8005330:	0800535f 	.word	0x0800535f
 8005334:	08005357 	.word	0x08005357
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005338:	f7fe fa5c 	bl	80037f4 <HAL_RCC_GetPCLK1Freq>
 800533c:	61f8      	str	r0, [r7, #28]
        break;
 800533e:	e014      	b.n	800536a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005340:	f7fe fa6e 	bl	8003820 <HAL_RCC_GetPCLK2Freq>
 8005344:	61f8      	str	r0, [r7, #28]
        break;
 8005346:	e010      	b.n	800536a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005348:	4b1d      	ldr	r3, [pc, #116]	; (80053c0 <UART_SetConfig+0x454>)
 800534a:	61fb      	str	r3, [r7, #28]
        break;
 800534c:	e00d      	b.n	800536a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800534e:	f7fe f9b9 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8005352:	61f8      	str	r0, [r7, #28]
        break;
 8005354:	e009      	b.n	800536a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800535a:	61fb      	str	r3, [r7, #28]
        break;
 800535c:	e005      	b.n	800536a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800535e:	2300      	movs	r3, #0
 8005360:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005368:	bf00      	nop
    }

    if (pclk != 0U)
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d019      	beq.n	80053a4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	085a      	lsrs	r2, r3, #1
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	441a      	add	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005382:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	2b0f      	cmp	r3, #15
 8005388:	d909      	bls.n	800539e <UART_SetConfig+0x432>
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005390:	d205      	bcs.n	800539e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60da      	str	r2, [r3, #12]
 800539c:	e002      	b.n	80053a4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80053b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3728      	adds	r7, #40	; 0x28
 80053b8:	46bd      	mov	sp, r7
 80053ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053be:	bf00      	nop
 80053c0:	00f42400 	.word	0x00f42400

080053c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00a      	beq.n	80053ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00a      	beq.n	8005432 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	f003 0308 	and.w	r3, r3, #8
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	f003 0310 	and.w	r3, r3, #16
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00a      	beq.n	8005476 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547a:	f003 0320 	and.w	r3, r3, #32
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	430a      	orrs	r2, r1
 8005496:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d01a      	beq.n	80054da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054c2:	d10a      	bne.n	80054da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	605a      	str	r2, [r3, #4]
  }
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af02      	add	r7, sp, #8
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005518:	f7fc fe12 	bl	8002140 <HAL_GetTick>
 800551c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0308 	and.w	r3, r3, #8
 8005528:	2b08      	cmp	r3, #8
 800552a:	d10e      	bne.n	800554a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800552c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005530:	9300      	str	r3, [sp, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f82d 	bl	800559a <UART_WaitOnFlagUntilTimeout>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e023      	b.n	8005592 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b04      	cmp	r3, #4
 8005556:	d10e      	bne.n	8005576 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005558:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f817 	bl	800559a <UART_WaitOnFlagUntilTimeout>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e00d      	b.n	8005592 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2220      	movs	r2, #32
 800557a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2220      	movs	r2, #32
 8005580:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b09c      	sub	sp, #112	; 0x70
 800559e:	af00      	add	r7, sp, #0
 80055a0:	60f8      	str	r0, [r7, #12]
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	603b      	str	r3, [r7, #0]
 80055a6:	4613      	mov	r3, r2
 80055a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055aa:	e0a5      	b.n	80056f8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b2:	f000 80a1 	beq.w	80056f8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055b6:	f7fc fdc3 	bl	8002140 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d302      	bcc.n	80055cc <UART_WaitOnFlagUntilTimeout+0x32>
 80055c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d13e      	bne.n	800564a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055d4:	e853 3f00 	ldrex	r3, [r3]
 80055d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80055da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055e0:	667b      	str	r3, [r7, #100]	; 0x64
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	461a      	mov	r2, r3
 80055e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055ec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055f2:	e841 2300 	strex	r3, r2, [r1]
 80055f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80055f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1e6      	bne.n	80055cc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	3308      	adds	r3, #8
 8005604:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005608:	e853 3f00 	ldrex	r3, [r3]
 800560c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800560e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005610:	f023 0301 	bic.w	r3, r3, #1
 8005614:	663b      	str	r3, [r7, #96]	; 0x60
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3308      	adds	r3, #8
 800561c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800561e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005620:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005622:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005624:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005626:	e841 2300 	strex	r3, r2, [r1]
 800562a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800562c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1e5      	bne.n	80055fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2220      	movs	r2, #32
 8005636:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2220      	movs	r2, #32
 800563c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e067      	b.n	800571a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0304 	and.w	r3, r3, #4
 8005654:	2b00      	cmp	r3, #0
 8005656:	d04f      	beq.n	80056f8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005666:	d147      	bne.n	80056f8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005670:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567a:	e853 3f00 	ldrex	r3, [r3]
 800567e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005686:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	461a      	mov	r2, r3
 800568e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005690:	637b      	str	r3, [r7, #52]	; 0x34
 8005692:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005694:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005698:	e841 2300 	strex	r3, r2, [r1]
 800569c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800569e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1e6      	bne.n	8005672 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	3308      	adds	r3, #8
 80056aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	e853 3f00 	ldrex	r3, [r3]
 80056b2:	613b      	str	r3, [r7, #16]
   return(result);
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f023 0301 	bic.w	r3, r3, #1
 80056ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3308      	adds	r3, #8
 80056c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056c4:	623a      	str	r2, [r7, #32]
 80056c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c8:	69f9      	ldr	r1, [r7, #28]
 80056ca:	6a3a      	ldr	r2, [r7, #32]
 80056cc:	e841 2300 	strex	r3, r2, [r1]
 80056d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1e5      	bne.n	80056a4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2220      	movs	r2, #32
 80056dc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2220      	movs	r2, #32
 80056e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e010      	b.n	800571a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	69da      	ldr	r2, [r3, #28]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	4013      	ands	r3, r2
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	429a      	cmp	r2, r3
 8005706:	bf0c      	ite	eq
 8005708:	2301      	moveq	r3, #1
 800570a:	2300      	movne	r3, #0
 800570c:	b2db      	uxtb	r3, r3
 800570e:	461a      	mov	r2, r3
 8005710:	79fb      	ldrb	r3, [r7, #7]
 8005712:	429a      	cmp	r2, r3
 8005714:	f43f af4a 	beq.w	80055ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3770      	adds	r7, #112	; 0x70
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
	...

08005724 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b096      	sub	sp, #88	; 0x58
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	4613      	mov	r3, r2
 8005730:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	88fa      	ldrh	r2, [r7, #6]
 800573c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2222      	movs	r2, #34	; 0x22
 800574c:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005752:	2b00      	cmp	r3, #0
 8005754:	d02b      	beq.n	80057ae <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575a:	4a42      	ldr	r2, [pc, #264]	; (8005864 <UART_Start_Receive_DMA+0x140>)
 800575c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005762:	4a41      	ldr	r2, [pc, #260]	; (8005868 <UART_Start_Receive_DMA+0x144>)
 8005764:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576a:	4a40      	ldr	r2, [pc, #256]	; (800586c <UART_Start_Receive_DMA+0x148>)
 800576c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005772:	2200      	movs	r2, #0
 8005774:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	3324      	adds	r3, #36	; 0x24
 8005780:	4619      	mov	r1, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005786:	461a      	mov	r2, r3
 8005788:	88fb      	ldrh	r3, [r7, #6]
 800578a:	f7fc fed3 	bl	8002534 <HAL_DMA_Start_IT>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00c      	beq.n	80057ae <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2210      	movs	r2, #16
 8005798:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2220      	movs	r2, #32
 80057a8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e055      	b.n	800585a <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d018      	beq.n	80057f0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c6:	e853 3f00 	ldrex	r3, [r3]
 80057ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057d2:	657b      	str	r3, [r7, #84]	; 0x54
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	461a      	mov	r2, r3
 80057da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80057de:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80057e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057e4:	e841 2300 	strex	r3, r2, [r1]
 80057e8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80057ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1e6      	bne.n	80057be <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3308      	adds	r3, #8
 80057f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fa:	e853 3f00 	ldrex	r3, [r3]
 80057fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	f043 0301 	orr.w	r3, r3, #1
 8005806:	653b      	str	r3, [r7, #80]	; 0x50
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3308      	adds	r3, #8
 800580e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005810:	637a      	str	r2, [r7, #52]	; 0x34
 8005812:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005814:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005818:	e841 2300 	strex	r3, r2, [r1]
 800581c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800581e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1e5      	bne.n	80057f0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	3308      	adds	r3, #8
 800582a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	e853 3f00 	ldrex	r3, [r3]
 8005832:	613b      	str	r3, [r7, #16]
   return(result);
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800583a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3308      	adds	r3, #8
 8005842:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005844:	623a      	str	r2, [r7, #32]
 8005846:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005848:	69f9      	ldr	r1, [r7, #28]
 800584a:	6a3a      	ldr	r2, [r7, #32]
 800584c:	e841 2300 	strex	r3, r2, [r1]
 8005850:	61bb      	str	r3, [r7, #24]
   return(result);
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1e5      	bne.n	8005824 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3758      	adds	r7, #88	; 0x58
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	08005983 	.word	0x08005983
 8005868:	08005aa7 	.word	0x08005aa7
 800586c:	08005adf 	.word	0x08005adf

08005870 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005870:	b480      	push	{r7}
 8005872:	b089      	sub	sp, #36	; 0x24
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	e853 3f00 	ldrex	r3, [r3]
 8005884:	60bb      	str	r3, [r7, #8]
   return(result);
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800588c:	61fb      	str	r3, [r7, #28]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	461a      	mov	r2, r3
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	61bb      	str	r3, [r7, #24]
 8005898:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589a:	6979      	ldr	r1, [r7, #20]
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	e841 2300 	strex	r3, r2, [r1]
 80058a2:	613b      	str	r3, [r7, #16]
   return(result);
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1e6      	bne.n	8005878 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2220      	movs	r2, #32
 80058ae:	679a      	str	r2, [r3, #120]	; 0x78
}
 80058b0:	bf00      	nop
 80058b2:	3724      	adds	r7, #36	; 0x24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058bc:	b480      	push	{r7}
 80058be:	b095      	sub	sp, #84	; 0x54
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058cc:	e853 3f00 	ldrex	r3, [r3]
 80058d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	461a      	mov	r2, r3
 80058e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e2:	643b      	str	r3, [r7, #64]	; 0x40
 80058e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058ea:	e841 2300 	strex	r3, r2, [r1]
 80058ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1e6      	bne.n	80058c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3308      	adds	r3, #8
 80058fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	e853 3f00 	ldrex	r3, [r3]
 8005904:	61fb      	str	r3, [r7, #28]
   return(result);
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	f023 0301 	bic.w	r3, r3, #1
 800590c:	64bb      	str	r3, [r7, #72]	; 0x48
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	3308      	adds	r3, #8
 8005914:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005916:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005918:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800591c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800591e:	e841 2300 	strex	r3, r2, [r1]
 8005922:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1e5      	bne.n	80058f6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800592e:	2b01      	cmp	r3, #1
 8005930:	d118      	bne.n	8005964 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	e853 3f00 	ldrex	r3, [r3]
 800593e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f023 0310 	bic.w	r3, r3, #16
 8005946:	647b      	str	r3, [r7, #68]	; 0x44
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	461a      	mov	r2, r3
 800594e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005950:	61bb      	str	r3, [r7, #24]
 8005952:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005954:	6979      	ldr	r1, [r7, #20]
 8005956:	69ba      	ldr	r2, [r7, #24]
 8005958:	e841 2300 	strex	r3, r2, [r1]
 800595c:	613b      	str	r3, [r7, #16]
   return(result);
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1e6      	bne.n	8005932 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2220      	movs	r2, #32
 8005968:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005976:	bf00      	nop
 8005978:	3754      	adds	r7, #84	; 0x54
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b09c      	sub	sp, #112	; 0x70
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b00      	cmp	r3, #0
 800599c:	d170      	bne.n	8005a80 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800599e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059a0:	2200      	movs	r2, #0
 80059a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ae:	e853 3f00 	ldrex	r3, [r3]
 80059b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80059bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	461a      	mov	r2, r3
 80059c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80059c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059cc:	e841 2300 	strex	r3, r2, [r1]
 80059d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1e6      	bne.n	80059a6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3308      	adds	r3, #8
 80059de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e2:	e853 3f00 	ldrex	r3, [r3]
 80059e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ea:	f023 0301 	bic.w	r3, r3, #1
 80059ee:	667b      	str	r3, [r7, #100]	; 0x64
 80059f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3308      	adds	r3, #8
 80059f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80059f8:	647a      	str	r2, [r7, #68]	; 0x44
 80059fa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a00:	e841 2300 	strex	r3, r2, [r1]
 8005a04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1e5      	bne.n	80059d8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3308      	adds	r3, #8
 8005a12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	e853 3f00 	ldrex	r3, [r3]
 8005a1a:	623b      	str	r3, [r7, #32]
   return(result);
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a22:	663b      	str	r3, [r7, #96]	; 0x60
 8005a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3308      	adds	r3, #8
 8005a2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a2c:	633a      	str	r2, [r7, #48]	; 0x30
 8005a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a34:	e841 2300 	strex	r3, r2, [r1]
 8005a38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1e5      	bne.n	8005a0c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a42:	2220      	movs	r2, #32
 8005a44:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d118      	bne.n	8005a80 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	e853 3f00 	ldrex	r3, [r3]
 8005a5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f023 0310 	bic.w	r3, r3, #16
 8005a62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a6c:	61fb      	str	r3, [r7, #28]
 8005a6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a70:	69b9      	ldr	r1, [r7, #24]
 8005a72:	69fa      	ldr	r2, [r7, #28]
 8005a74:	e841 2300 	strex	r3, r2, [r1]
 8005a78:	617b      	str	r3, [r7, #20]
   return(result);
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1e6      	bne.n	8005a4e <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d107      	bne.n	8005a98 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a8a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a8e:	4619      	mov	r1, r3
 8005a90:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005a92:	f7fc f827 	bl	8001ae4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a96:	e002      	b.n	8005a9e <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8005a98:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005a9a:	f7ff fa49 	bl	8004f30 <HAL_UART_RxCpltCallback>
}
 8005a9e:	bf00      	nop
 8005aa0:	3770      	adds	r7, #112	; 0x70
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b084      	sub	sp, #16
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d109      	bne.n	8005ad0 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005ac2:	085b      	lsrs	r3, r3, #1
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f7fc f80b 	bl	8001ae4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ace:	e002      	b.n	8005ad6 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f7ff fa37 	bl	8004f44 <HAL_UART_RxHalfCpltCallback>
}
 8005ad6:	bf00      	nop
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b086      	sub	sp, #24
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aea:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005af0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b02:	2b80      	cmp	r3, #128	; 0x80
 8005b04:	d109      	bne.n	8005b1a <UART_DMAError+0x3c>
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	2b21      	cmp	r3, #33	; 0x21
 8005b0a:	d106      	bne.n	8005b1a <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005b14:	6978      	ldr	r0, [r7, #20]
 8005b16:	f7ff feab 	bl	8005870 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b24:	2b40      	cmp	r3, #64	; 0x40
 8005b26:	d109      	bne.n	8005b3c <UART_DMAError+0x5e>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2b22      	cmp	r3, #34	; 0x22
 8005b2c:	d106      	bne.n	8005b3c <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005b36:	6978      	ldr	r0, [r7, #20]
 8005b38:	f7ff fec0 	bl	80058bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b42:	f043 0210 	orr.w	r2, r3, #16
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b4c:	6978      	ldr	r0, [r7, #20]
 8005b4e:	f7ff fa03 	bl	8004f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b52:	bf00      	nop
 8005b54:	3718      	adds	r7, #24
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f7ff f9ed 	bl	8004f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b7e:	bf00      	nop
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b088      	sub	sp, #32
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	e853 3f00 	ldrex	r3, [r3]
 8005b9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ba2:	61fb      	str	r3, [r7, #28]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	461a      	mov	r2, r3
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	61bb      	str	r3, [r7, #24]
 8005bae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb0:	6979      	ldr	r1, [r7, #20]
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	e841 2300 	strex	r3, r2, [r1]
 8005bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1e6      	bne.n	8005b8e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f7ff f9a5 	bl	8004f1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bd2:	bf00      	nop
 8005bd4:	3720      	adds	r7, #32
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005be2:	bf00      	nop
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b08c      	sub	sp, #48	; 0x30
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	60f8      	str	r0, [r7, #12]
 8005bf6:	60b9      	str	r1, [r7, #8]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c00:	2b20      	cmp	r3, #32
 8005c02:	d14a      	bne.n	8005c9a <HAL_UARTEx_ReceiveToIdle_DMA+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 8005c0a:	88fb      	ldrh	r3, [r7, #6]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e043      	b.n	8005c9c <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
    }

    __HAL_LOCK(huart);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d101      	bne.n	8005c22 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 8005c1e:	2302      	movs	r3, #2
 8005c20:	e03c      	b.n	8005c9c <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005c30:	88fb      	ldrh	r3, [r7, #6]
 8005c32:	461a      	mov	r2, r3
 8005c34:	68b9      	ldr	r1, [r7, #8]
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f7ff fd74 	bl	8005724 <UART_Start_Receive_DMA>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005c42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d124      	bne.n	8005c94 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d11d      	bne.n	8005c8e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2210      	movs	r2, #16
 8005c58:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	e853 3f00 	ldrex	r3, [r3]
 8005c66:	617b      	str	r3, [r7, #20]
   return(result);
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f043 0310 	orr.w	r3, r3, #16
 8005c6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	461a      	mov	r2, r3
 8005c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
 8005c7a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7c:	6a39      	ldr	r1, [r7, #32]
 8005c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c80:	e841 2300 	strex	r3, r2, [r1]
 8005c84:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e6      	bne.n	8005c5a <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 8005c8c:	e002      	b.n	8005c94 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005c94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c98:	e000      	b.n	8005c9c <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  }
  else
  {
    return HAL_BUSY;
 8005c9a:	2302      	movs	r3, #2
  }
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3730      	adds	r7, #48	; 0x30
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <__errno>:
 8005ca4:	4b01      	ldr	r3, [pc, #4]	; (8005cac <__errno+0x8>)
 8005ca6:	6818      	ldr	r0, [r3, #0]
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	20000090 	.word	0x20000090

08005cb0 <__libc_init_array>:
 8005cb0:	b570      	push	{r4, r5, r6, lr}
 8005cb2:	4d0d      	ldr	r5, [pc, #52]	; (8005ce8 <__libc_init_array+0x38>)
 8005cb4:	4c0d      	ldr	r4, [pc, #52]	; (8005cec <__libc_init_array+0x3c>)
 8005cb6:	1b64      	subs	r4, r4, r5
 8005cb8:	10a4      	asrs	r4, r4, #2
 8005cba:	2600      	movs	r6, #0
 8005cbc:	42a6      	cmp	r6, r4
 8005cbe:	d109      	bne.n	8005cd4 <__libc_init_array+0x24>
 8005cc0:	4d0b      	ldr	r5, [pc, #44]	; (8005cf0 <__libc_init_array+0x40>)
 8005cc2:	4c0c      	ldr	r4, [pc, #48]	; (8005cf4 <__libc_init_array+0x44>)
 8005cc4:	f003 f9fe 	bl	80090c4 <_init>
 8005cc8:	1b64      	subs	r4, r4, r5
 8005cca:	10a4      	asrs	r4, r4, #2
 8005ccc:	2600      	movs	r6, #0
 8005cce:	42a6      	cmp	r6, r4
 8005cd0:	d105      	bne.n	8005cde <__libc_init_array+0x2e>
 8005cd2:	bd70      	pop	{r4, r5, r6, pc}
 8005cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cd8:	4798      	blx	r3
 8005cda:	3601      	adds	r6, #1
 8005cdc:	e7ee      	b.n	8005cbc <__libc_init_array+0xc>
 8005cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ce2:	4798      	blx	r3
 8005ce4:	3601      	adds	r6, #1
 8005ce6:	e7f2      	b.n	8005cce <__libc_init_array+0x1e>
 8005ce8:	08009808 	.word	0x08009808
 8005cec:	08009808 	.word	0x08009808
 8005cf0:	08009808 	.word	0x08009808
 8005cf4:	0800980c 	.word	0x0800980c

08005cf8 <memcpy>:
 8005cf8:	440a      	add	r2, r1
 8005cfa:	4291      	cmp	r1, r2
 8005cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d00:	d100      	bne.n	8005d04 <memcpy+0xc>
 8005d02:	4770      	bx	lr
 8005d04:	b510      	push	{r4, lr}
 8005d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d0e:	4291      	cmp	r1, r2
 8005d10:	d1f9      	bne.n	8005d06 <memcpy+0xe>
 8005d12:	bd10      	pop	{r4, pc}

08005d14 <memset>:
 8005d14:	4402      	add	r2, r0
 8005d16:	4603      	mov	r3, r0
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d100      	bne.n	8005d1e <memset+0xa>
 8005d1c:	4770      	bx	lr
 8005d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d22:	e7f9      	b.n	8005d18 <memset+0x4>

08005d24 <siprintf>:
 8005d24:	b40e      	push	{r1, r2, r3}
 8005d26:	b500      	push	{lr}
 8005d28:	b09c      	sub	sp, #112	; 0x70
 8005d2a:	ab1d      	add	r3, sp, #116	; 0x74
 8005d2c:	9002      	str	r0, [sp, #8]
 8005d2e:	9006      	str	r0, [sp, #24]
 8005d30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d34:	4809      	ldr	r0, [pc, #36]	; (8005d5c <siprintf+0x38>)
 8005d36:	9107      	str	r1, [sp, #28]
 8005d38:	9104      	str	r1, [sp, #16]
 8005d3a:	4909      	ldr	r1, [pc, #36]	; (8005d60 <siprintf+0x3c>)
 8005d3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d40:	9105      	str	r1, [sp, #20]
 8005d42:	6800      	ldr	r0, [r0, #0]
 8005d44:	9301      	str	r3, [sp, #4]
 8005d46:	a902      	add	r1, sp, #8
 8005d48:	f002 f96a 	bl	8008020 <_svfiprintf_r>
 8005d4c:	9b02      	ldr	r3, [sp, #8]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	b01c      	add	sp, #112	; 0x70
 8005d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d58:	b003      	add	sp, #12
 8005d5a:	4770      	bx	lr
 8005d5c:	20000090 	.word	0x20000090
 8005d60:	ffff0208 	.word	0xffff0208

08005d64 <strncmp>:
 8005d64:	b510      	push	{r4, lr}
 8005d66:	b17a      	cbz	r2, 8005d88 <strncmp+0x24>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	3901      	subs	r1, #1
 8005d6c:	1884      	adds	r4, r0, r2
 8005d6e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005d72:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005d76:	4290      	cmp	r0, r2
 8005d78:	d101      	bne.n	8005d7e <strncmp+0x1a>
 8005d7a:	42a3      	cmp	r3, r4
 8005d7c:	d101      	bne.n	8005d82 <strncmp+0x1e>
 8005d7e:	1a80      	subs	r0, r0, r2
 8005d80:	bd10      	pop	{r4, pc}
 8005d82:	2800      	cmp	r0, #0
 8005d84:	d1f3      	bne.n	8005d6e <strncmp+0xa>
 8005d86:	e7fa      	b.n	8005d7e <strncmp+0x1a>
 8005d88:	4610      	mov	r0, r2
 8005d8a:	e7f9      	b.n	8005d80 <strncmp+0x1c>

08005d8c <strstr>:
 8005d8c:	780a      	ldrb	r2, [r1, #0]
 8005d8e:	b570      	push	{r4, r5, r6, lr}
 8005d90:	b96a      	cbnz	r2, 8005dae <strstr+0x22>
 8005d92:	bd70      	pop	{r4, r5, r6, pc}
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d109      	bne.n	8005dac <strstr+0x20>
 8005d98:	460c      	mov	r4, r1
 8005d9a:	4605      	mov	r5, r0
 8005d9c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d0f6      	beq.n	8005d92 <strstr+0x6>
 8005da4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005da8:	429e      	cmp	r6, r3
 8005daa:	d0f7      	beq.n	8005d9c <strstr+0x10>
 8005dac:	3001      	adds	r0, #1
 8005dae:	7803      	ldrb	r3, [r0, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1ef      	bne.n	8005d94 <strstr+0x8>
 8005db4:	4618      	mov	r0, r3
 8005db6:	e7ec      	b.n	8005d92 <strstr+0x6>

08005db8 <sulp>:
 8005db8:	b570      	push	{r4, r5, r6, lr}
 8005dba:	4604      	mov	r4, r0
 8005dbc:	460d      	mov	r5, r1
 8005dbe:	ec45 4b10 	vmov	d0, r4, r5
 8005dc2:	4616      	mov	r6, r2
 8005dc4:	f001 fe8a 	bl	8007adc <__ulp>
 8005dc8:	ec51 0b10 	vmov	r0, r1, d0
 8005dcc:	b17e      	cbz	r6, 8005dee <sulp+0x36>
 8005dce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005dd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	dd09      	ble.n	8005dee <sulp+0x36>
 8005dda:	051b      	lsls	r3, r3, #20
 8005ddc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005de0:	2400      	movs	r4, #0
 8005de2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005de6:	4622      	mov	r2, r4
 8005de8:	462b      	mov	r3, r5
 8005dea:	f7fa fc05 	bl	80005f8 <__aeabi_dmul>
 8005dee:	bd70      	pop	{r4, r5, r6, pc}

08005df0 <_strtod_l>:
 8005df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df4:	ed2d 8b02 	vpush	{d8}
 8005df8:	b09d      	sub	sp, #116	; 0x74
 8005dfa:	461f      	mov	r7, r3
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	9318      	str	r3, [sp, #96]	; 0x60
 8005e00:	4ba2      	ldr	r3, [pc, #648]	; (800608c <_strtod_l+0x29c>)
 8005e02:	9213      	str	r2, [sp, #76]	; 0x4c
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	9305      	str	r3, [sp, #20]
 8005e08:	4604      	mov	r4, r0
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	4688      	mov	r8, r1
 8005e0e:	f7fa f9df 	bl	80001d0 <strlen>
 8005e12:	f04f 0a00 	mov.w	sl, #0
 8005e16:	4605      	mov	r5, r0
 8005e18:	f04f 0b00 	mov.w	fp, #0
 8005e1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005e20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e22:	781a      	ldrb	r2, [r3, #0]
 8005e24:	2a2b      	cmp	r2, #43	; 0x2b
 8005e26:	d04e      	beq.n	8005ec6 <_strtod_l+0xd6>
 8005e28:	d83b      	bhi.n	8005ea2 <_strtod_l+0xb2>
 8005e2a:	2a0d      	cmp	r2, #13
 8005e2c:	d834      	bhi.n	8005e98 <_strtod_l+0xa8>
 8005e2e:	2a08      	cmp	r2, #8
 8005e30:	d834      	bhi.n	8005e9c <_strtod_l+0xac>
 8005e32:	2a00      	cmp	r2, #0
 8005e34:	d03e      	beq.n	8005eb4 <_strtod_l+0xc4>
 8005e36:	2300      	movs	r3, #0
 8005e38:	930a      	str	r3, [sp, #40]	; 0x28
 8005e3a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005e3c:	7833      	ldrb	r3, [r6, #0]
 8005e3e:	2b30      	cmp	r3, #48	; 0x30
 8005e40:	f040 80b0 	bne.w	8005fa4 <_strtod_l+0x1b4>
 8005e44:	7873      	ldrb	r3, [r6, #1]
 8005e46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005e4a:	2b58      	cmp	r3, #88	; 0x58
 8005e4c:	d168      	bne.n	8005f20 <_strtod_l+0x130>
 8005e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e50:	9301      	str	r3, [sp, #4]
 8005e52:	ab18      	add	r3, sp, #96	; 0x60
 8005e54:	9702      	str	r7, [sp, #8]
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	4a8d      	ldr	r2, [pc, #564]	; (8006090 <_strtod_l+0x2a0>)
 8005e5a:	ab19      	add	r3, sp, #100	; 0x64
 8005e5c:	a917      	add	r1, sp, #92	; 0x5c
 8005e5e:	4620      	mov	r0, r4
 8005e60:	f000 ffa8 	bl	8006db4 <__gethex>
 8005e64:	f010 0707 	ands.w	r7, r0, #7
 8005e68:	4605      	mov	r5, r0
 8005e6a:	d005      	beq.n	8005e78 <_strtod_l+0x88>
 8005e6c:	2f06      	cmp	r7, #6
 8005e6e:	d12c      	bne.n	8005eca <_strtod_l+0xda>
 8005e70:	3601      	adds	r6, #1
 8005e72:	2300      	movs	r3, #0
 8005e74:	9617      	str	r6, [sp, #92]	; 0x5c
 8005e76:	930a      	str	r3, [sp, #40]	; 0x28
 8005e78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f040 8590 	bne.w	80069a0 <_strtod_l+0xbb0>
 8005e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e82:	b1eb      	cbz	r3, 8005ec0 <_strtod_l+0xd0>
 8005e84:	4652      	mov	r2, sl
 8005e86:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005e8a:	ec43 2b10 	vmov	d0, r2, r3
 8005e8e:	b01d      	add	sp, #116	; 0x74
 8005e90:	ecbd 8b02 	vpop	{d8}
 8005e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e98:	2a20      	cmp	r2, #32
 8005e9a:	d1cc      	bne.n	8005e36 <_strtod_l+0x46>
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005ea0:	e7be      	b.n	8005e20 <_strtod_l+0x30>
 8005ea2:	2a2d      	cmp	r2, #45	; 0x2d
 8005ea4:	d1c7      	bne.n	8005e36 <_strtod_l+0x46>
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	920a      	str	r2, [sp, #40]	; 0x28
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	9217      	str	r2, [sp, #92]	; 0x5c
 8005eae:	785b      	ldrb	r3, [r3, #1]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1c2      	bne.n	8005e3a <_strtod_l+0x4a>
 8005eb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005eb6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f040 856e 	bne.w	800699c <_strtod_l+0xbac>
 8005ec0:	4652      	mov	r2, sl
 8005ec2:	465b      	mov	r3, fp
 8005ec4:	e7e1      	b.n	8005e8a <_strtod_l+0x9a>
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	e7ee      	b.n	8005ea8 <_strtod_l+0xb8>
 8005eca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005ecc:	b13a      	cbz	r2, 8005ede <_strtod_l+0xee>
 8005ece:	2135      	movs	r1, #53	; 0x35
 8005ed0:	a81a      	add	r0, sp, #104	; 0x68
 8005ed2:	f001 ff0e 	bl	8007cf2 <__copybits>
 8005ed6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005ed8:	4620      	mov	r0, r4
 8005eda:	f001 facd 	bl	8007478 <_Bfree>
 8005ede:	3f01      	subs	r7, #1
 8005ee0:	2f04      	cmp	r7, #4
 8005ee2:	d806      	bhi.n	8005ef2 <_strtod_l+0x102>
 8005ee4:	e8df f007 	tbb	[pc, r7]
 8005ee8:	1714030a 	.word	0x1714030a
 8005eec:	0a          	.byte	0x0a
 8005eed:	00          	.byte	0x00
 8005eee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005ef2:	0728      	lsls	r0, r5, #28
 8005ef4:	d5c0      	bpl.n	8005e78 <_strtod_l+0x88>
 8005ef6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005efa:	e7bd      	b.n	8005e78 <_strtod_l+0x88>
 8005efc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005f00:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005f02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005f06:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005f0a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005f0e:	e7f0      	b.n	8005ef2 <_strtod_l+0x102>
 8005f10:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006094 <_strtod_l+0x2a4>
 8005f14:	e7ed      	b.n	8005ef2 <_strtod_l+0x102>
 8005f16:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005f1a:	f04f 3aff 	mov.w	sl, #4294967295
 8005f1e:	e7e8      	b.n	8005ef2 <_strtod_l+0x102>
 8005f20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f22:	1c5a      	adds	r2, r3, #1
 8005f24:	9217      	str	r2, [sp, #92]	; 0x5c
 8005f26:	785b      	ldrb	r3, [r3, #1]
 8005f28:	2b30      	cmp	r3, #48	; 0x30
 8005f2a:	d0f9      	beq.n	8005f20 <_strtod_l+0x130>
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d0a3      	beq.n	8005e78 <_strtod_l+0x88>
 8005f30:	2301      	movs	r3, #1
 8005f32:	f04f 0900 	mov.w	r9, #0
 8005f36:	9304      	str	r3, [sp, #16]
 8005f38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f3a:	9308      	str	r3, [sp, #32]
 8005f3c:	f8cd 901c 	str.w	r9, [sp, #28]
 8005f40:	464f      	mov	r7, r9
 8005f42:	220a      	movs	r2, #10
 8005f44:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005f46:	7806      	ldrb	r6, [r0, #0]
 8005f48:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005f4c:	b2d9      	uxtb	r1, r3
 8005f4e:	2909      	cmp	r1, #9
 8005f50:	d92a      	bls.n	8005fa8 <_strtod_l+0x1b8>
 8005f52:	9905      	ldr	r1, [sp, #20]
 8005f54:	462a      	mov	r2, r5
 8005f56:	f7ff ff05 	bl	8005d64 <strncmp>
 8005f5a:	b398      	cbz	r0, 8005fc4 <_strtod_l+0x1d4>
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	4632      	mov	r2, r6
 8005f60:	463d      	mov	r5, r7
 8005f62:	9005      	str	r0, [sp, #20]
 8005f64:	4603      	mov	r3, r0
 8005f66:	2a65      	cmp	r2, #101	; 0x65
 8005f68:	d001      	beq.n	8005f6e <_strtod_l+0x17e>
 8005f6a:	2a45      	cmp	r2, #69	; 0x45
 8005f6c:	d118      	bne.n	8005fa0 <_strtod_l+0x1b0>
 8005f6e:	b91d      	cbnz	r5, 8005f78 <_strtod_l+0x188>
 8005f70:	9a04      	ldr	r2, [sp, #16]
 8005f72:	4302      	orrs	r2, r0
 8005f74:	d09e      	beq.n	8005eb4 <_strtod_l+0xc4>
 8005f76:	2500      	movs	r5, #0
 8005f78:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005f7c:	f108 0201 	add.w	r2, r8, #1
 8005f80:	9217      	str	r2, [sp, #92]	; 0x5c
 8005f82:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005f86:	2a2b      	cmp	r2, #43	; 0x2b
 8005f88:	d075      	beq.n	8006076 <_strtod_l+0x286>
 8005f8a:	2a2d      	cmp	r2, #45	; 0x2d
 8005f8c:	d07b      	beq.n	8006086 <_strtod_l+0x296>
 8005f8e:	f04f 0c00 	mov.w	ip, #0
 8005f92:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005f96:	2909      	cmp	r1, #9
 8005f98:	f240 8082 	bls.w	80060a0 <_strtod_l+0x2b0>
 8005f9c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005fa0:	2600      	movs	r6, #0
 8005fa2:	e09d      	b.n	80060e0 <_strtod_l+0x2f0>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	e7c4      	b.n	8005f32 <_strtod_l+0x142>
 8005fa8:	2f08      	cmp	r7, #8
 8005faa:	bfd8      	it	le
 8005fac:	9907      	ldrle	r1, [sp, #28]
 8005fae:	f100 0001 	add.w	r0, r0, #1
 8005fb2:	bfda      	itte	le
 8005fb4:	fb02 3301 	mlale	r3, r2, r1, r3
 8005fb8:	9307      	strle	r3, [sp, #28]
 8005fba:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005fbe:	3701      	adds	r7, #1
 8005fc0:	9017      	str	r0, [sp, #92]	; 0x5c
 8005fc2:	e7bf      	b.n	8005f44 <_strtod_l+0x154>
 8005fc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005fc6:	195a      	adds	r2, r3, r5
 8005fc8:	9217      	str	r2, [sp, #92]	; 0x5c
 8005fca:	5d5a      	ldrb	r2, [r3, r5]
 8005fcc:	2f00      	cmp	r7, #0
 8005fce:	d037      	beq.n	8006040 <_strtod_l+0x250>
 8005fd0:	9005      	str	r0, [sp, #20]
 8005fd2:	463d      	mov	r5, r7
 8005fd4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005fd8:	2b09      	cmp	r3, #9
 8005fda:	d912      	bls.n	8006002 <_strtod_l+0x212>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e7c2      	b.n	8005f66 <_strtod_l+0x176>
 8005fe0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005fe2:	1c5a      	adds	r2, r3, #1
 8005fe4:	9217      	str	r2, [sp, #92]	; 0x5c
 8005fe6:	785a      	ldrb	r2, [r3, #1]
 8005fe8:	3001      	adds	r0, #1
 8005fea:	2a30      	cmp	r2, #48	; 0x30
 8005fec:	d0f8      	beq.n	8005fe0 <_strtod_l+0x1f0>
 8005fee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005ff2:	2b08      	cmp	r3, #8
 8005ff4:	f200 84d9 	bhi.w	80069aa <_strtod_l+0xbba>
 8005ff8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ffa:	9005      	str	r0, [sp, #20]
 8005ffc:	2000      	movs	r0, #0
 8005ffe:	9308      	str	r3, [sp, #32]
 8006000:	4605      	mov	r5, r0
 8006002:	3a30      	subs	r2, #48	; 0x30
 8006004:	f100 0301 	add.w	r3, r0, #1
 8006008:	d014      	beq.n	8006034 <_strtod_l+0x244>
 800600a:	9905      	ldr	r1, [sp, #20]
 800600c:	4419      	add	r1, r3
 800600e:	9105      	str	r1, [sp, #20]
 8006010:	462b      	mov	r3, r5
 8006012:	eb00 0e05 	add.w	lr, r0, r5
 8006016:	210a      	movs	r1, #10
 8006018:	4573      	cmp	r3, lr
 800601a:	d113      	bne.n	8006044 <_strtod_l+0x254>
 800601c:	182b      	adds	r3, r5, r0
 800601e:	2b08      	cmp	r3, #8
 8006020:	f105 0501 	add.w	r5, r5, #1
 8006024:	4405      	add	r5, r0
 8006026:	dc1c      	bgt.n	8006062 <_strtod_l+0x272>
 8006028:	9907      	ldr	r1, [sp, #28]
 800602a:	230a      	movs	r3, #10
 800602c:	fb03 2301 	mla	r3, r3, r1, r2
 8006030:	9307      	str	r3, [sp, #28]
 8006032:	2300      	movs	r3, #0
 8006034:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006036:	1c51      	adds	r1, r2, #1
 8006038:	9117      	str	r1, [sp, #92]	; 0x5c
 800603a:	7852      	ldrb	r2, [r2, #1]
 800603c:	4618      	mov	r0, r3
 800603e:	e7c9      	b.n	8005fd4 <_strtod_l+0x1e4>
 8006040:	4638      	mov	r0, r7
 8006042:	e7d2      	b.n	8005fea <_strtod_l+0x1fa>
 8006044:	2b08      	cmp	r3, #8
 8006046:	dc04      	bgt.n	8006052 <_strtod_l+0x262>
 8006048:	9e07      	ldr	r6, [sp, #28]
 800604a:	434e      	muls	r6, r1
 800604c:	9607      	str	r6, [sp, #28]
 800604e:	3301      	adds	r3, #1
 8006050:	e7e2      	b.n	8006018 <_strtod_l+0x228>
 8006052:	f103 0c01 	add.w	ip, r3, #1
 8006056:	f1bc 0f10 	cmp.w	ip, #16
 800605a:	bfd8      	it	le
 800605c:	fb01 f909 	mulle.w	r9, r1, r9
 8006060:	e7f5      	b.n	800604e <_strtod_l+0x25e>
 8006062:	2d10      	cmp	r5, #16
 8006064:	bfdc      	itt	le
 8006066:	230a      	movle	r3, #10
 8006068:	fb03 2909 	mlale	r9, r3, r9, r2
 800606c:	e7e1      	b.n	8006032 <_strtod_l+0x242>
 800606e:	2300      	movs	r3, #0
 8006070:	9305      	str	r3, [sp, #20]
 8006072:	2301      	movs	r3, #1
 8006074:	e77c      	b.n	8005f70 <_strtod_l+0x180>
 8006076:	f04f 0c00 	mov.w	ip, #0
 800607a:	f108 0202 	add.w	r2, r8, #2
 800607e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006080:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006084:	e785      	b.n	8005f92 <_strtod_l+0x1a2>
 8006086:	f04f 0c01 	mov.w	ip, #1
 800608a:	e7f6      	b.n	800607a <_strtod_l+0x28a>
 800608c:	08009600 	.word	0x08009600
 8006090:	08009384 	.word	0x08009384
 8006094:	7ff00000 	.word	0x7ff00000
 8006098:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800609a:	1c51      	adds	r1, r2, #1
 800609c:	9117      	str	r1, [sp, #92]	; 0x5c
 800609e:	7852      	ldrb	r2, [r2, #1]
 80060a0:	2a30      	cmp	r2, #48	; 0x30
 80060a2:	d0f9      	beq.n	8006098 <_strtod_l+0x2a8>
 80060a4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80060a8:	2908      	cmp	r1, #8
 80060aa:	f63f af79 	bhi.w	8005fa0 <_strtod_l+0x1b0>
 80060ae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80060b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80060b4:	9206      	str	r2, [sp, #24]
 80060b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80060b8:	1c51      	adds	r1, r2, #1
 80060ba:	9117      	str	r1, [sp, #92]	; 0x5c
 80060bc:	7852      	ldrb	r2, [r2, #1]
 80060be:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80060c2:	2e09      	cmp	r6, #9
 80060c4:	d937      	bls.n	8006136 <_strtod_l+0x346>
 80060c6:	9e06      	ldr	r6, [sp, #24]
 80060c8:	1b89      	subs	r1, r1, r6
 80060ca:	2908      	cmp	r1, #8
 80060cc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80060d0:	dc02      	bgt.n	80060d8 <_strtod_l+0x2e8>
 80060d2:	4576      	cmp	r6, lr
 80060d4:	bfa8      	it	ge
 80060d6:	4676      	movge	r6, lr
 80060d8:	f1bc 0f00 	cmp.w	ip, #0
 80060dc:	d000      	beq.n	80060e0 <_strtod_l+0x2f0>
 80060de:	4276      	negs	r6, r6
 80060e0:	2d00      	cmp	r5, #0
 80060e2:	d14d      	bne.n	8006180 <_strtod_l+0x390>
 80060e4:	9904      	ldr	r1, [sp, #16]
 80060e6:	4301      	orrs	r1, r0
 80060e8:	f47f aec6 	bne.w	8005e78 <_strtod_l+0x88>
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f47f aee1 	bne.w	8005eb4 <_strtod_l+0xc4>
 80060f2:	2a69      	cmp	r2, #105	; 0x69
 80060f4:	d027      	beq.n	8006146 <_strtod_l+0x356>
 80060f6:	dc24      	bgt.n	8006142 <_strtod_l+0x352>
 80060f8:	2a49      	cmp	r2, #73	; 0x49
 80060fa:	d024      	beq.n	8006146 <_strtod_l+0x356>
 80060fc:	2a4e      	cmp	r2, #78	; 0x4e
 80060fe:	f47f aed9 	bne.w	8005eb4 <_strtod_l+0xc4>
 8006102:	499f      	ldr	r1, [pc, #636]	; (8006380 <_strtod_l+0x590>)
 8006104:	a817      	add	r0, sp, #92	; 0x5c
 8006106:	f001 f8ad 	bl	8007264 <__match>
 800610a:	2800      	cmp	r0, #0
 800610c:	f43f aed2 	beq.w	8005eb4 <_strtod_l+0xc4>
 8006110:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	2b28      	cmp	r3, #40	; 0x28
 8006116:	d12d      	bne.n	8006174 <_strtod_l+0x384>
 8006118:	499a      	ldr	r1, [pc, #616]	; (8006384 <_strtod_l+0x594>)
 800611a:	aa1a      	add	r2, sp, #104	; 0x68
 800611c:	a817      	add	r0, sp, #92	; 0x5c
 800611e:	f001 f8b5 	bl	800728c <__hexnan>
 8006122:	2805      	cmp	r0, #5
 8006124:	d126      	bne.n	8006174 <_strtod_l+0x384>
 8006126:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006128:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800612c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006130:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006134:	e6a0      	b.n	8005e78 <_strtod_l+0x88>
 8006136:	210a      	movs	r1, #10
 8006138:	fb01 2e0e 	mla	lr, r1, lr, r2
 800613c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006140:	e7b9      	b.n	80060b6 <_strtod_l+0x2c6>
 8006142:	2a6e      	cmp	r2, #110	; 0x6e
 8006144:	e7db      	b.n	80060fe <_strtod_l+0x30e>
 8006146:	4990      	ldr	r1, [pc, #576]	; (8006388 <_strtod_l+0x598>)
 8006148:	a817      	add	r0, sp, #92	; 0x5c
 800614a:	f001 f88b 	bl	8007264 <__match>
 800614e:	2800      	cmp	r0, #0
 8006150:	f43f aeb0 	beq.w	8005eb4 <_strtod_l+0xc4>
 8006154:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006156:	498d      	ldr	r1, [pc, #564]	; (800638c <_strtod_l+0x59c>)
 8006158:	3b01      	subs	r3, #1
 800615a:	a817      	add	r0, sp, #92	; 0x5c
 800615c:	9317      	str	r3, [sp, #92]	; 0x5c
 800615e:	f001 f881 	bl	8007264 <__match>
 8006162:	b910      	cbnz	r0, 800616a <_strtod_l+0x37a>
 8006164:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006166:	3301      	adds	r3, #1
 8006168:	9317      	str	r3, [sp, #92]	; 0x5c
 800616a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800639c <_strtod_l+0x5ac>
 800616e:	f04f 0a00 	mov.w	sl, #0
 8006172:	e681      	b.n	8005e78 <_strtod_l+0x88>
 8006174:	4886      	ldr	r0, [pc, #536]	; (8006390 <_strtod_l+0x5a0>)
 8006176:	f002 fb43 	bl	8008800 <nan>
 800617a:	ec5b ab10 	vmov	sl, fp, d0
 800617e:	e67b      	b.n	8005e78 <_strtod_l+0x88>
 8006180:	9b05      	ldr	r3, [sp, #20]
 8006182:	9807      	ldr	r0, [sp, #28]
 8006184:	1af3      	subs	r3, r6, r3
 8006186:	2f00      	cmp	r7, #0
 8006188:	bf08      	it	eq
 800618a:	462f      	moveq	r7, r5
 800618c:	2d10      	cmp	r5, #16
 800618e:	9306      	str	r3, [sp, #24]
 8006190:	46a8      	mov	r8, r5
 8006192:	bfa8      	it	ge
 8006194:	f04f 0810 	movge.w	r8, #16
 8006198:	f7fa f9b4 	bl	8000504 <__aeabi_ui2d>
 800619c:	2d09      	cmp	r5, #9
 800619e:	4682      	mov	sl, r0
 80061a0:	468b      	mov	fp, r1
 80061a2:	dd13      	ble.n	80061cc <_strtod_l+0x3dc>
 80061a4:	4b7b      	ldr	r3, [pc, #492]	; (8006394 <_strtod_l+0x5a4>)
 80061a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80061aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80061ae:	f7fa fa23 	bl	80005f8 <__aeabi_dmul>
 80061b2:	4682      	mov	sl, r0
 80061b4:	4648      	mov	r0, r9
 80061b6:	468b      	mov	fp, r1
 80061b8:	f7fa f9a4 	bl	8000504 <__aeabi_ui2d>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	4650      	mov	r0, sl
 80061c2:	4659      	mov	r1, fp
 80061c4:	f7fa f862 	bl	800028c <__adddf3>
 80061c8:	4682      	mov	sl, r0
 80061ca:	468b      	mov	fp, r1
 80061cc:	2d0f      	cmp	r5, #15
 80061ce:	dc38      	bgt.n	8006242 <_strtod_l+0x452>
 80061d0:	9b06      	ldr	r3, [sp, #24]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f43f ae50 	beq.w	8005e78 <_strtod_l+0x88>
 80061d8:	dd24      	ble.n	8006224 <_strtod_l+0x434>
 80061da:	2b16      	cmp	r3, #22
 80061dc:	dc0b      	bgt.n	80061f6 <_strtod_l+0x406>
 80061de:	496d      	ldr	r1, [pc, #436]	; (8006394 <_strtod_l+0x5a4>)
 80061e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80061e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061e8:	4652      	mov	r2, sl
 80061ea:	465b      	mov	r3, fp
 80061ec:	f7fa fa04 	bl	80005f8 <__aeabi_dmul>
 80061f0:	4682      	mov	sl, r0
 80061f2:	468b      	mov	fp, r1
 80061f4:	e640      	b.n	8005e78 <_strtod_l+0x88>
 80061f6:	9a06      	ldr	r2, [sp, #24]
 80061f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80061fc:	4293      	cmp	r3, r2
 80061fe:	db20      	blt.n	8006242 <_strtod_l+0x452>
 8006200:	4c64      	ldr	r4, [pc, #400]	; (8006394 <_strtod_l+0x5a4>)
 8006202:	f1c5 050f 	rsb	r5, r5, #15
 8006206:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800620a:	4652      	mov	r2, sl
 800620c:	465b      	mov	r3, fp
 800620e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006212:	f7fa f9f1 	bl	80005f8 <__aeabi_dmul>
 8006216:	9b06      	ldr	r3, [sp, #24]
 8006218:	1b5d      	subs	r5, r3, r5
 800621a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800621e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006222:	e7e3      	b.n	80061ec <_strtod_l+0x3fc>
 8006224:	9b06      	ldr	r3, [sp, #24]
 8006226:	3316      	adds	r3, #22
 8006228:	db0b      	blt.n	8006242 <_strtod_l+0x452>
 800622a:	9b05      	ldr	r3, [sp, #20]
 800622c:	1b9e      	subs	r6, r3, r6
 800622e:	4b59      	ldr	r3, [pc, #356]	; (8006394 <_strtod_l+0x5a4>)
 8006230:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006234:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006238:	4650      	mov	r0, sl
 800623a:	4659      	mov	r1, fp
 800623c:	f7fa fb06 	bl	800084c <__aeabi_ddiv>
 8006240:	e7d6      	b.n	80061f0 <_strtod_l+0x400>
 8006242:	9b06      	ldr	r3, [sp, #24]
 8006244:	eba5 0808 	sub.w	r8, r5, r8
 8006248:	4498      	add	r8, r3
 800624a:	f1b8 0f00 	cmp.w	r8, #0
 800624e:	dd74      	ble.n	800633a <_strtod_l+0x54a>
 8006250:	f018 030f 	ands.w	r3, r8, #15
 8006254:	d00a      	beq.n	800626c <_strtod_l+0x47c>
 8006256:	494f      	ldr	r1, [pc, #316]	; (8006394 <_strtod_l+0x5a4>)
 8006258:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800625c:	4652      	mov	r2, sl
 800625e:	465b      	mov	r3, fp
 8006260:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006264:	f7fa f9c8 	bl	80005f8 <__aeabi_dmul>
 8006268:	4682      	mov	sl, r0
 800626a:	468b      	mov	fp, r1
 800626c:	f038 080f 	bics.w	r8, r8, #15
 8006270:	d04f      	beq.n	8006312 <_strtod_l+0x522>
 8006272:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006276:	dd22      	ble.n	80062be <_strtod_l+0x4ce>
 8006278:	2500      	movs	r5, #0
 800627a:	462e      	mov	r6, r5
 800627c:	9507      	str	r5, [sp, #28]
 800627e:	9505      	str	r5, [sp, #20]
 8006280:	2322      	movs	r3, #34	; 0x22
 8006282:	f8df b118 	ldr.w	fp, [pc, #280]	; 800639c <_strtod_l+0x5ac>
 8006286:	6023      	str	r3, [r4, #0]
 8006288:	f04f 0a00 	mov.w	sl, #0
 800628c:	9b07      	ldr	r3, [sp, #28]
 800628e:	2b00      	cmp	r3, #0
 8006290:	f43f adf2 	beq.w	8005e78 <_strtod_l+0x88>
 8006294:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006296:	4620      	mov	r0, r4
 8006298:	f001 f8ee 	bl	8007478 <_Bfree>
 800629c:	9905      	ldr	r1, [sp, #20]
 800629e:	4620      	mov	r0, r4
 80062a0:	f001 f8ea 	bl	8007478 <_Bfree>
 80062a4:	4631      	mov	r1, r6
 80062a6:	4620      	mov	r0, r4
 80062a8:	f001 f8e6 	bl	8007478 <_Bfree>
 80062ac:	9907      	ldr	r1, [sp, #28]
 80062ae:	4620      	mov	r0, r4
 80062b0:	f001 f8e2 	bl	8007478 <_Bfree>
 80062b4:	4629      	mov	r1, r5
 80062b6:	4620      	mov	r0, r4
 80062b8:	f001 f8de 	bl	8007478 <_Bfree>
 80062bc:	e5dc      	b.n	8005e78 <_strtod_l+0x88>
 80062be:	4b36      	ldr	r3, [pc, #216]	; (8006398 <_strtod_l+0x5a8>)
 80062c0:	9304      	str	r3, [sp, #16]
 80062c2:	2300      	movs	r3, #0
 80062c4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80062c8:	4650      	mov	r0, sl
 80062ca:	4659      	mov	r1, fp
 80062cc:	4699      	mov	r9, r3
 80062ce:	f1b8 0f01 	cmp.w	r8, #1
 80062d2:	dc21      	bgt.n	8006318 <_strtod_l+0x528>
 80062d4:	b10b      	cbz	r3, 80062da <_strtod_l+0x4ea>
 80062d6:	4682      	mov	sl, r0
 80062d8:	468b      	mov	fp, r1
 80062da:	4b2f      	ldr	r3, [pc, #188]	; (8006398 <_strtod_l+0x5a8>)
 80062dc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80062e0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80062e4:	4652      	mov	r2, sl
 80062e6:	465b      	mov	r3, fp
 80062e8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80062ec:	f7fa f984 	bl	80005f8 <__aeabi_dmul>
 80062f0:	4b2a      	ldr	r3, [pc, #168]	; (800639c <_strtod_l+0x5ac>)
 80062f2:	460a      	mov	r2, r1
 80062f4:	400b      	ands	r3, r1
 80062f6:	492a      	ldr	r1, [pc, #168]	; (80063a0 <_strtod_l+0x5b0>)
 80062f8:	428b      	cmp	r3, r1
 80062fa:	4682      	mov	sl, r0
 80062fc:	d8bc      	bhi.n	8006278 <_strtod_l+0x488>
 80062fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006302:	428b      	cmp	r3, r1
 8006304:	bf86      	itte	hi
 8006306:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80063a4 <_strtod_l+0x5b4>
 800630a:	f04f 3aff 	movhi.w	sl, #4294967295
 800630e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006312:	2300      	movs	r3, #0
 8006314:	9304      	str	r3, [sp, #16]
 8006316:	e084      	b.n	8006422 <_strtod_l+0x632>
 8006318:	f018 0f01 	tst.w	r8, #1
 800631c:	d005      	beq.n	800632a <_strtod_l+0x53a>
 800631e:	9b04      	ldr	r3, [sp, #16]
 8006320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006324:	f7fa f968 	bl	80005f8 <__aeabi_dmul>
 8006328:	2301      	movs	r3, #1
 800632a:	9a04      	ldr	r2, [sp, #16]
 800632c:	3208      	adds	r2, #8
 800632e:	f109 0901 	add.w	r9, r9, #1
 8006332:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006336:	9204      	str	r2, [sp, #16]
 8006338:	e7c9      	b.n	80062ce <_strtod_l+0x4de>
 800633a:	d0ea      	beq.n	8006312 <_strtod_l+0x522>
 800633c:	f1c8 0800 	rsb	r8, r8, #0
 8006340:	f018 020f 	ands.w	r2, r8, #15
 8006344:	d00a      	beq.n	800635c <_strtod_l+0x56c>
 8006346:	4b13      	ldr	r3, [pc, #76]	; (8006394 <_strtod_l+0x5a4>)
 8006348:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800634c:	4650      	mov	r0, sl
 800634e:	4659      	mov	r1, fp
 8006350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006354:	f7fa fa7a 	bl	800084c <__aeabi_ddiv>
 8006358:	4682      	mov	sl, r0
 800635a:	468b      	mov	fp, r1
 800635c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006360:	d0d7      	beq.n	8006312 <_strtod_l+0x522>
 8006362:	f1b8 0f1f 	cmp.w	r8, #31
 8006366:	dd1f      	ble.n	80063a8 <_strtod_l+0x5b8>
 8006368:	2500      	movs	r5, #0
 800636a:	462e      	mov	r6, r5
 800636c:	9507      	str	r5, [sp, #28]
 800636e:	9505      	str	r5, [sp, #20]
 8006370:	2322      	movs	r3, #34	; 0x22
 8006372:	f04f 0a00 	mov.w	sl, #0
 8006376:	f04f 0b00 	mov.w	fp, #0
 800637a:	6023      	str	r3, [r4, #0]
 800637c:	e786      	b.n	800628c <_strtod_l+0x49c>
 800637e:	bf00      	nop
 8006380:	08009381 	.word	0x08009381
 8006384:	08009398 	.word	0x08009398
 8006388:	08009378 	.word	0x08009378
 800638c:	0800937b 	.word	0x0800937b
 8006390:	08009487 	.word	0x08009487
 8006394:	08009698 	.word	0x08009698
 8006398:	08009670 	.word	0x08009670
 800639c:	7ff00000 	.word	0x7ff00000
 80063a0:	7ca00000 	.word	0x7ca00000
 80063a4:	7fefffff 	.word	0x7fefffff
 80063a8:	f018 0310 	ands.w	r3, r8, #16
 80063ac:	bf18      	it	ne
 80063ae:	236a      	movne	r3, #106	; 0x6a
 80063b0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006760 <_strtod_l+0x970>
 80063b4:	9304      	str	r3, [sp, #16]
 80063b6:	4650      	mov	r0, sl
 80063b8:	4659      	mov	r1, fp
 80063ba:	2300      	movs	r3, #0
 80063bc:	f018 0f01 	tst.w	r8, #1
 80063c0:	d004      	beq.n	80063cc <_strtod_l+0x5dc>
 80063c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80063c6:	f7fa f917 	bl	80005f8 <__aeabi_dmul>
 80063ca:	2301      	movs	r3, #1
 80063cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80063d0:	f109 0908 	add.w	r9, r9, #8
 80063d4:	d1f2      	bne.n	80063bc <_strtod_l+0x5cc>
 80063d6:	b10b      	cbz	r3, 80063dc <_strtod_l+0x5ec>
 80063d8:	4682      	mov	sl, r0
 80063da:	468b      	mov	fp, r1
 80063dc:	9b04      	ldr	r3, [sp, #16]
 80063de:	b1c3      	cbz	r3, 8006412 <_strtod_l+0x622>
 80063e0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80063e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	4659      	mov	r1, fp
 80063ec:	dd11      	ble.n	8006412 <_strtod_l+0x622>
 80063ee:	2b1f      	cmp	r3, #31
 80063f0:	f340 8124 	ble.w	800663c <_strtod_l+0x84c>
 80063f4:	2b34      	cmp	r3, #52	; 0x34
 80063f6:	bfde      	ittt	le
 80063f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80063fc:	f04f 33ff 	movle.w	r3, #4294967295
 8006400:	fa03 f202 	lslle.w	r2, r3, r2
 8006404:	f04f 0a00 	mov.w	sl, #0
 8006408:	bfcc      	ite	gt
 800640a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800640e:	ea02 0b01 	andle.w	fp, r2, r1
 8006412:	2200      	movs	r2, #0
 8006414:	2300      	movs	r3, #0
 8006416:	4650      	mov	r0, sl
 8006418:	4659      	mov	r1, fp
 800641a:	f7fa fb55 	bl	8000ac8 <__aeabi_dcmpeq>
 800641e:	2800      	cmp	r0, #0
 8006420:	d1a2      	bne.n	8006368 <_strtod_l+0x578>
 8006422:	9b07      	ldr	r3, [sp, #28]
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	9908      	ldr	r1, [sp, #32]
 8006428:	462b      	mov	r3, r5
 800642a:	463a      	mov	r2, r7
 800642c:	4620      	mov	r0, r4
 800642e:	f001 f88b 	bl	8007548 <__s2b>
 8006432:	9007      	str	r0, [sp, #28]
 8006434:	2800      	cmp	r0, #0
 8006436:	f43f af1f 	beq.w	8006278 <_strtod_l+0x488>
 800643a:	9b05      	ldr	r3, [sp, #20]
 800643c:	1b9e      	subs	r6, r3, r6
 800643e:	9b06      	ldr	r3, [sp, #24]
 8006440:	2b00      	cmp	r3, #0
 8006442:	bfb4      	ite	lt
 8006444:	4633      	movlt	r3, r6
 8006446:	2300      	movge	r3, #0
 8006448:	930c      	str	r3, [sp, #48]	; 0x30
 800644a:	9b06      	ldr	r3, [sp, #24]
 800644c:	2500      	movs	r5, #0
 800644e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006452:	9312      	str	r3, [sp, #72]	; 0x48
 8006454:	462e      	mov	r6, r5
 8006456:	9b07      	ldr	r3, [sp, #28]
 8006458:	4620      	mov	r0, r4
 800645a:	6859      	ldr	r1, [r3, #4]
 800645c:	f000 ffcc 	bl	80073f8 <_Balloc>
 8006460:	9005      	str	r0, [sp, #20]
 8006462:	2800      	cmp	r0, #0
 8006464:	f43f af0c 	beq.w	8006280 <_strtod_l+0x490>
 8006468:	9b07      	ldr	r3, [sp, #28]
 800646a:	691a      	ldr	r2, [r3, #16]
 800646c:	3202      	adds	r2, #2
 800646e:	f103 010c 	add.w	r1, r3, #12
 8006472:	0092      	lsls	r2, r2, #2
 8006474:	300c      	adds	r0, #12
 8006476:	f7ff fc3f 	bl	8005cf8 <memcpy>
 800647a:	ec4b ab10 	vmov	d0, sl, fp
 800647e:	aa1a      	add	r2, sp, #104	; 0x68
 8006480:	a919      	add	r1, sp, #100	; 0x64
 8006482:	4620      	mov	r0, r4
 8006484:	f001 fba6 	bl	8007bd4 <__d2b>
 8006488:	ec4b ab18 	vmov	d8, sl, fp
 800648c:	9018      	str	r0, [sp, #96]	; 0x60
 800648e:	2800      	cmp	r0, #0
 8006490:	f43f aef6 	beq.w	8006280 <_strtod_l+0x490>
 8006494:	2101      	movs	r1, #1
 8006496:	4620      	mov	r0, r4
 8006498:	f001 f8f0 	bl	800767c <__i2b>
 800649c:	4606      	mov	r6, r0
 800649e:	2800      	cmp	r0, #0
 80064a0:	f43f aeee 	beq.w	8006280 <_strtod_l+0x490>
 80064a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80064a6:	9904      	ldr	r1, [sp, #16]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	bfab      	itete	ge
 80064ac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80064ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80064b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80064b2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80064b6:	bfac      	ite	ge
 80064b8:	eb03 0902 	addge.w	r9, r3, r2
 80064bc:	1ad7      	sublt	r7, r2, r3
 80064be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80064c0:	eba3 0801 	sub.w	r8, r3, r1
 80064c4:	4490      	add	r8, r2
 80064c6:	4ba1      	ldr	r3, [pc, #644]	; (800674c <_strtod_l+0x95c>)
 80064c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80064cc:	4598      	cmp	r8, r3
 80064ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80064d2:	f280 80c7 	bge.w	8006664 <_strtod_l+0x874>
 80064d6:	eba3 0308 	sub.w	r3, r3, r8
 80064da:	2b1f      	cmp	r3, #31
 80064dc:	eba2 0203 	sub.w	r2, r2, r3
 80064e0:	f04f 0101 	mov.w	r1, #1
 80064e4:	f300 80b1 	bgt.w	800664a <_strtod_l+0x85a>
 80064e8:	fa01 f303 	lsl.w	r3, r1, r3
 80064ec:	930d      	str	r3, [sp, #52]	; 0x34
 80064ee:	2300      	movs	r3, #0
 80064f0:	9308      	str	r3, [sp, #32]
 80064f2:	eb09 0802 	add.w	r8, r9, r2
 80064f6:	9b04      	ldr	r3, [sp, #16]
 80064f8:	45c1      	cmp	r9, r8
 80064fa:	4417      	add	r7, r2
 80064fc:	441f      	add	r7, r3
 80064fe:	464b      	mov	r3, r9
 8006500:	bfa8      	it	ge
 8006502:	4643      	movge	r3, r8
 8006504:	42bb      	cmp	r3, r7
 8006506:	bfa8      	it	ge
 8006508:	463b      	movge	r3, r7
 800650a:	2b00      	cmp	r3, #0
 800650c:	bfc2      	ittt	gt
 800650e:	eba8 0803 	subgt.w	r8, r8, r3
 8006512:	1aff      	subgt	r7, r7, r3
 8006514:	eba9 0903 	subgt.w	r9, r9, r3
 8006518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800651a:	2b00      	cmp	r3, #0
 800651c:	dd17      	ble.n	800654e <_strtod_l+0x75e>
 800651e:	4631      	mov	r1, r6
 8006520:	461a      	mov	r2, r3
 8006522:	4620      	mov	r0, r4
 8006524:	f001 f96a 	bl	80077fc <__pow5mult>
 8006528:	4606      	mov	r6, r0
 800652a:	2800      	cmp	r0, #0
 800652c:	f43f aea8 	beq.w	8006280 <_strtod_l+0x490>
 8006530:	4601      	mov	r1, r0
 8006532:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006534:	4620      	mov	r0, r4
 8006536:	f001 f8b7 	bl	80076a8 <__multiply>
 800653a:	900b      	str	r0, [sp, #44]	; 0x2c
 800653c:	2800      	cmp	r0, #0
 800653e:	f43f ae9f 	beq.w	8006280 <_strtod_l+0x490>
 8006542:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006544:	4620      	mov	r0, r4
 8006546:	f000 ff97 	bl	8007478 <_Bfree>
 800654a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800654c:	9318      	str	r3, [sp, #96]	; 0x60
 800654e:	f1b8 0f00 	cmp.w	r8, #0
 8006552:	f300 808c 	bgt.w	800666e <_strtod_l+0x87e>
 8006556:	9b06      	ldr	r3, [sp, #24]
 8006558:	2b00      	cmp	r3, #0
 800655a:	dd08      	ble.n	800656e <_strtod_l+0x77e>
 800655c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800655e:	9905      	ldr	r1, [sp, #20]
 8006560:	4620      	mov	r0, r4
 8006562:	f001 f94b 	bl	80077fc <__pow5mult>
 8006566:	9005      	str	r0, [sp, #20]
 8006568:	2800      	cmp	r0, #0
 800656a:	f43f ae89 	beq.w	8006280 <_strtod_l+0x490>
 800656e:	2f00      	cmp	r7, #0
 8006570:	dd08      	ble.n	8006584 <_strtod_l+0x794>
 8006572:	9905      	ldr	r1, [sp, #20]
 8006574:	463a      	mov	r2, r7
 8006576:	4620      	mov	r0, r4
 8006578:	f001 f99a 	bl	80078b0 <__lshift>
 800657c:	9005      	str	r0, [sp, #20]
 800657e:	2800      	cmp	r0, #0
 8006580:	f43f ae7e 	beq.w	8006280 <_strtod_l+0x490>
 8006584:	f1b9 0f00 	cmp.w	r9, #0
 8006588:	dd08      	ble.n	800659c <_strtod_l+0x7ac>
 800658a:	4631      	mov	r1, r6
 800658c:	464a      	mov	r2, r9
 800658e:	4620      	mov	r0, r4
 8006590:	f001 f98e 	bl	80078b0 <__lshift>
 8006594:	4606      	mov	r6, r0
 8006596:	2800      	cmp	r0, #0
 8006598:	f43f ae72 	beq.w	8006280 <_strtod_l+0x490>
 800659c:	9a05      	ldr	r2, [sp, #20]
 800659e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80065a0:	4620      	mov	r0, r4
 80065a2:	f001 fa11 	bl	80079c8 <__mdiff>
 80065a6:	4605      	mov	r5, r0
 80065a8:	2800      	cmp	r0, #0
 80065aa:	f43f ae69 	beq.w	8006280 <_strtod_l+0x490>
 80065ae:	68c3      	ldr	r3, [r0, #12]
 80065b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80065b2:	2300      	movs	r3, #0
 80065b4:	60c3      	str	r3, [r0, #12]
 80065b6:	4631      	mov	r1, r6
 80065b8:	f001 f9ea 	bl	8007990 <__mcmp>
 80065bc:	2800      	cmp	r0, #0
 80065be:	da60      	bge.n	8006682 <_strtod_l+0x892>
 80065c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065c2:	ea53 030a 	orrs.w	r3, r3, sl
 80065c6:	f040 8082 	bne.w	80066ce <_strtod_l+0x8de>
 80065ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d17d      	bne.n	80066ce <_strtod_l+0x8de>
 80065d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80065d6:	0d1b      	lsrs	r3, r3, #20
 80065d8:	051b      	lsls	r3, r3, #20
 80065da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80065de:	d976      	bls.n	80066ce <_strtod_l+0x8de>
 80065e0:	696b      	ldr	r3, [r5, #20]
 80065e2:	b913      	cbnz	r3, 80065ea <_strtod_l+0x7fa>
 80065e4:	692b      	ldr	r3, [r5, #16]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	dd71      	ble.n	80066ce <_strtod_l+0x8de>
 80065ea:	4629      	mov	r1, r5
 80065ec:	2201      	movs	r2, #1
 80065ee:	4620      	mov	r0, r4
 80065f0:	f001 f95e 	bl	80078b0 <__lshift>
 80065f4:	4631      	mov	r1, r6
 80065f6:	4605      	mov	r5, r0
 80065f8:	f001 f9ca 	bl	8007990 <__mcmp>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	dd66      	ble.n	80066ce <_strtod_l+0x8de>
 8006600:	9904      	ldr	r1, [sp, #16]
 8006602:	4a53      	ldr	r2, [pc, #332]	; (8006750 <_strtod_l+0x960>)
 8006604:	465b      	mov	r3, fp
 8006606:	2900      	cmp	r1, #0
 8006608:	f000 8081 	beq.w	800670e <_strtod_l+0x91e>
 800660c:	ea02 010b 	and.w	r1, r2, fp
 8006610:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006614:	dc7b      	bgt.n	800670e <_strtod_l+0x91e>
 8006616:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800661a:	f77f aea9 	ble.w	8006370 <_strtod_l+0x580>
 800661e:	4b4d      	ldr	r3, [pc, #308]	; (8006754 <_strtod_l+0x964>)
 8006620:	4650      	mov	r0, sl
 8006622:	4659      	mov	r1, fp
 8006624:	2200      	movs	r2, #0
 8006626:	f7f9 ffe7 	bl	80005f8 <__aeabi_dmul>
 800662a:	460b      	mov	r3, r1
 800662c:	4303      	orrs	r3, r0
 800662e:	bf08      	it	eq
 8006630:	2322      	moveq	r3, #34	; 0x22
 8006632:	4682      	mov	sl, r0
 8006634:	468b      	mov	fp, r1
 8006636:	bf08      	it	eq
 8006638:	6023      	streq	r3, [r4, #0]
 800663a:	e62b      	b.n	8006294 <_strtod_l+0x4a4>
 800663c:	f04f 32ff 	mov.w	r2, #4294967295
 8006640:	fa02 f303 	lsl.w	r3, r2, r3
 8006644:	ea03 0a0a 	and.w	sl, r3, sl
 8006648:	e6e3      	b.n	8006412 <_strtod_l+0x622>
 800664a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800664e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006652:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006656:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800665a:	fa01 f308 	lsl.w	r3, r1, r8
 800665e:	9308      	str	r3, [sp, #32]
 8006660:	910d      	str	r1, [sp, #52]	; 0x34
 8006662:	e746      	b.n	80064f2 <_strtod_l+0x702>
 8006664:	2300      	movs	r3, #0
 8006666:	9308      	str	r3, [sp, #32]
 8006668:	2301      	movs	r3, #1
 800666a:	930d      	str	r3, [sp, #52]	; 0x34
 800666c:	e741      	b.n	80064f2 <_strtod_l+0x702>
 800666e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006670:	4642      	mov	r2, r8
 8006672:	4620      	mov	r0, r4
 8006674:	f001 f91c 	bl	80078b0 <__lshift>
 8006678:	9018      	str	r0, [sp, #96]	; 0x60
 800667a:	2800      	cmp	r0, #0
 800667c:	f47f af6b 	bne.w	8006556 <_strtod_l+0x766>
 8006680:	e5fe      	b.n	8006280 <_strtod_l+0x490>
 8006682:	465f      	mov	r7, fp
 8006684:	d16e      	bne.n	8006764 <_strtod_l+0x974>
 8006686:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006688:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800668c:	b342      	cbz	r2, 80066e0 <_strtod_l+0x8f0>
 800668e:	4a32      	ldr	r2, [pc, #200]	; (8006758 <_strtod_l+0x968>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d128      	bne.n	80066e6 <_strtod_l+0x8f6>
 8006694:	9b04      	ldr	r3, [sp, #16]
 8006696:	4651      	mov	r1, sl
 8006698:	b1eb      	cbz	r3, 80066d6 <_strtod_l+0x8e6>
 800669a:	4b2d      	ldr	r3, [pc, #180]	; (8006750 <_strtod_l+0x960>)
 800669c:	403b      	ands	r3, r7
 800669e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80066a2:	f04f 32ff 	mov.w	r2, #4294967295
 80066a6:	d819      	bhi.n	80066dc <_strtod_l+0x8ec>
 80066a8:	0d1b      	lsrs	r3, r3, #20
 80066aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80066ae:	fa02 f303 	lsl.w	r3, r2, r3
 80066b2:	4299      	cmp	r1, r3
 80066b4:	d117      	bne.n	80066e6 <_strtod_l+0x8f6>
 80066b6:	4b29      	ldr	r3, [pc, #164]	; (800675c <_strtod_l+0x96c>)
 80066b8:	429f      	cmp	r7, r3
 80066ba:	d102      	bne.n	80066c2 <_strtod_l+0x8d2>
 80066bc:	3101      	adds	r1, #1
 80066be:	f43f addf 	beq.w	8006280 <_strtod_l+0x490>
 80066c2:	4b23      	ldr	r3, [pc, #140]	; (8006750 <_strtod_l+0x960>)
 80066c4:	403b      	ands	r3, r7
 80066c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80066ca:	f04f 0a00 	mov.w	sl, #0
 80066ce:	9b04      	ldr	r3, [sp, #16]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1a4      	bne.n	800661e <_strtod_l+0x82e>
 80066d4:	e5de      	b.n	8006294 <_strtod_l+0x4a4>
 80066d6:	f04f 33ff 	mov.w	r3, #4294967295
 80066da:	e7ea      	b.n	80066b2 <_strtod_l+0x8c2>
 80066dc:	4613      	mov	r3, r2
 80066de:	e7e8      	b.n	80066b2 <_strtod_l+0x8c2>
 80066e0:	ea53 030a 	orrs.w	r3, r3, sl
 80066e4:	d08c      	beq.n	8006600 <_strtod_l+0x810>
 80066e6:	9b08      	ldr	r3, [sp, #32]
 80066e8:	b1db      	cbz	r3, 8006722 <_strtod_l+0x932>
 80066ea:	423b      	tst	r3, r7
 80066ec:	d0ef      	beq.n	80066ce <_strtod_l+0x8de>
 80066ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066f0:	9a04      	ldr	r2, [sp, #16]
 80066f2:	4650      	mov	r0, sl
 80066f4:	4659      	mov	r1, fp
 80066f6:	b1c3      	cbz	r3, 800672a <_strtod_l+0x93a>
 80066f8:	f7ff fb5e 	bl	8005db8 <sulp>
 80066fc:	4602      	mov	r2, r0
 80066fe:	460b      	mov	r3, r1
 8006700:	ec51 0b18 	vmov	r0, r1, d8
 8006704:	f7f9 fdc2 	bl	800028c <__adddf3>
 8006708:	4682      	mov	sl, r0
 800670a:	468b      	mov	fp, r1
 800670c:	e7df      	b.n	80066ce <_strtod_l+0x8de>
 800670e:	4013      	ands	r3, r2
 8006710:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006714:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006718:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800671c:	f04f 3aff 	mov.w	sl, #4294967295
 8006720:	e7d5      	b.n	80066ce <_strtod_l+0x8de>
 8006722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006724:	ea13 0f0a 	tst.w	r3, sl
 8006728:	e7e0      	b.n	80066ec <_strtod_l+0x8fc>
 800672a:	f7ff fb45 	bl	8005db8 <sulp>
 800672e:	4602      	mov	r2, r0
 8006730:	460b      	mov	r3, r1
 8006732:	ec51 0b18 	vmov	r0, r1, d8
 8006736:	f7f9 fda7 	bl	8000288 <__aeabi_dsub>
 800673a:	2200      	movs	r2, #0
 800673c:	2300      	movs	r3, #0
 800673e:	4682      	mov	sl, r0
 8006740:	468b      	mov	fp, r1
 8006742:	f7fa f9c1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006746:	2800      	cmp	r0, #0
 8006748:	d0c1      	beq.n	80066ce <_strtod_l+0x8de>
 800674a:	e611      	b.n	8006370 <_strtod_l+0x580>
 800674c:	fffffc02 	.word	0xfffffc02
 8006750:	7ff00000 	.word	0x7ff00000
 8006754:	39500000 	.word	0x39500000
 8006758:	000fffff 	.word	0x000fffff
 800675c:	7fefffff 	.word	0x7fefffff
 8006760:	080093b0 	.word	0x080093b0
 8006764:	4631      	mov	r1, r6
 8006766:	4628      	mov	r0, r5
 8006768:	f001 fa90 	bl	8007c8c <__ratio>
 800676c:	ec59 8b10 	vmov	r8, r9, d0
 8006770:	ee10 0a10 	vmov	r0, s0
 8006774:	2200      	movs	r2, #0
 8006776:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800677a:	4649      	mov	r1, r9
 800677c:	f7fa f9b8 	bl	8000af0 <__aeabi_dcmple>
 8006780:	2800      	cmp	r0, #0
 8006782:	d07a      	beq.n	800687a <_strtod_l+0xa8a>
 8006784:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006786:	2b00      	cmp	r3, #0
 8006788:	d04a      	beq.n	8006820 <_strtod_l+0xa30>
 800678a:	4b95      	ldr	r3, [pc, #596]	; (80069e0 <_strtod_l+0xbf0>)
 800678c:	2200      	movs	r2, #0
 800678e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006792:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80069e0 <_strtod_l+0xbf0>
 8006796:	f04f 0800 	mov.w	r8, #0
 800679a:	4b92      	ldr	r3, [pc, #584]	; (80069e4 <_strtod_l+0xbf4>)
 800679c:	403b      	ands	r3, r7
 800679e:	930d      	str	r3, [sp, #52]	; 0x34
 80067a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80067a2:	4b91      	ldr	r3, [pc, #580]	; (80069e8 <_strtod_l+0xbf8>)
 80067a4:	429a      	cmp	r2, r3
 80067a6:	f040 80b0 	bne.w	800690a <_strtod_l+0xb1a>
 80067aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80067ae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80067b2:	ec4b ab10 	vmov	d0, sl, fp
 80067b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80067ba:	f001 f98f 	bl	8007adc <__ulp>
 80067be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80067c2:	ec53 2b10 	vmov	r2, r3, d0
 80067c6:	f7f9 ff17 	bl	80005f8 <__aeabi_dmul>
 80067ca:	4652      	mov	r2, sl
 80067cc:	465b      	mov	r3, fp
 80067ce:	f7f9 fd5d 	bl	800028c <__adddf3>
 80067d2:	460b      	mov	r3, r1
 80067d4:	4983      	ldr	r1, [pc, #524]	; (80069e4 <_strtod_l+0xbf4>)
 80067d6:	4a85      	ldr	r2, [pc, #532]	; (80069ec <_strtod_l+0xbfc>)
 80067d8:	4019      	ands	r1, r3
 80067da:	4291      	cmp	r1, r2
 80067dc:	4682      	mov	sl, r0
 80067de:	d960      	bls.n	80068a2 <_strtod_l+0xab2>
 80067e0:	ee18 3a90 	vmov	r3, s17
 80067e4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d104      	bne.n	80067f6 <_strtod_l+0xa06>
 80067ec:	ee18 3a10 	vmov	r3, s16
 80067f0:	3301      	adds	r3, #1
 80067f2:	f43f ad45 	beq.w	8006280 <_strtod_l+0x490>
 80067f6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80069f8 <_strtod_l+0xc08>
 80067fa:	f04f 3aff 	mov.w	sl, #4294967295
 80067fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006800:	4620      	mov	r0, r4
 8006802:	f000 fe39 	bl	8007478 <_Bfree>
 8006806:	9905      	ldr	r1, [sp, #20]
 8006808:	4620      	mov	r0, r4
 800680a:	f000 fe35 	bl	8007478 <_Bfree>
 800680e:	4631      	mov	r1, r6
 8006810:	4620      	mov	r0, r4
 8006812:	f000 fe31 	bl	8007478 <_Bfree>
 8006816:	4629      	mov	r1, r5
 8006818:	4620      	mov	r0, r4
 800681a:	f000 fe2d 	bl	8007478 <_Bfree>
 800681e:	e61a      	b.n	8006456 <_strtod_l+0x666>
 8006820:	f1ba 0f00 	cmp.w	sl, #0
 8006824:	d11b      	bne.n	800685e <_strtod_l+0xa6e>
 8006826:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800682a:	b9f3      	cbnz	r3, 800686a <_strtod_l+0xa7a>
 800682c:	4b6c      	ldr	r3, [pc, #432]	; (80069e0 <_strtod_l+0xbf0>)
 800682e:	2200      	movs	r2, #0
 8006830:	4640      	mov	r0, r8
 8006832:	4649      	mov	r1, r9
 8006834:	f7fa f952 	bl	8000adc <__aeabi_dcmplt>
 8006838:	b9d0      	cbnz	r0, 8006870 <_strtod_l+0xa80>
 800683a:	4640      	mov	r0, r8
 800683c:	4649      	mov	r1, r9
 800683e:	4b6c      	ldr	r3, [pc, #432]	; (80069f0 <_strtod_l+0xc00>)
 8006840:	2200      	movs	r2, #0
 8006842:	f7f9 fed9 	bl	80005f8 <__aeabi_dmul>
 8006846:	4680      	mov	r8, r0
 8006848:	4689      	mov	r9, r1
 800684a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800684e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006852:	9315      	str	r3, [sp, #84]	; 0x54
 8006854:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006858:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800685c:	e79d      	b.n	800679a <_strtod_l+0x9aa>
 800685e:	f1ba 0f01 	cmp.w	sl, #1
 8006862:	d102      	bne.n	800686a <_strtod_l+0xa7a>
 8006864:	2f00      	cmp	r7, #0
 8006866:	f43f ad83 	beq.w	8006370 <_strtod_l+0x580>
 800686a:	4b62      	ldr	r3, [pc, #392]	; (80069f4 <_strtod_l+0xc04>)
 800686c:	2200      	movs	r2, #0
 800686e:	e78e      	b.n	800678e <_strtod_l+0x99e>
 8006870:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80069f0 <_strtod_l+0xc00>
 8006874:	f04f 0800 	mov.w	r8, #0
 8006878:	e7e7      	b.n	800684a <_strtod_l+0xa5a>
 800687a:	4b5d      	ldr	r3, [pc, #372]	; (80069f0 <_strtod_l+0xc00>)
 800687c:	4640      	mov	r0, r8
 800687e:	4649      	mov	r1, r9
 8006880:	2200      	movs	r2, #0
 8006882:	f7f9 feb9 	bl	80005f8 <__aeabi_dmul>
 8006886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006888:	4680      	mov	r8, r0
 800688a:	4689      	mov	r9, r1
 800688c:	b933      	cbnz	r3, 800689c <_strtod_l+0xaac>
 800688e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006892:	900e      	str	r0, [sp, #56]	; 0x38
 8006894:	930f      	str	r3, [sp, #60]	; 0x3c
 8006896:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800689a:	e7dd      	b.n	8006858 <_strtod_l+0xa68>
 800689c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80068a0:	e7f9      	b.n	8006896 <_strtod_l+0xaa6>
 80068a2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80068a6:	9b04      	ldr	r3, [sp, #16]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1a8      	bne.n	80067fe <_strtod_l+0xa0e>
 80068ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80068b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80068b2:	0d1b      	lsrs	r3, r3, #20
 80068b4:	051b      	lsls	r3, r3, #20
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d1a1      	bne.n	80067fe <_strtod_l+0xa0e>
 80068ba:	4640      	mov	r0, r8
 80068bc:	4649      	mov	r1, r9
 80068be:	f7fa f9d3 	bl	8000c68 <__aeabi_d2lz>
 80068c2:	f7f9 fe6b 	bl	800059c <__aeabi_l2d>
 80068c6:	4602      	mov	r2, r0
 80068c8:	460b      	mov	r3, r1
 80068ca:	4640      	mov	r0, r8
 80068cc:	4649      	mov	r1, r9
 80068ce:	f7f9 fcdb 	bl	8000288 <__aeabi_dsub>
 80068d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80068d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80068d8:	ea43 030a 	orr.w	r3, r3, sl
 80068dc:	4313      	orrs	r3, r2
 80068de:	4680      	mov	r8, r0
 80068e0:	4689      	mov	r9, r1
 80068e2:	d055      	beq.n	8006990 <_strtod_l+0xba0>
 80068e4:	a336      	add	r3, pc, #216	; (adr r3, 80069c0 <_strtod_l+0xbd0>)
 80068e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ea:	f7fa f8f7 	bl	8000adc <__aeabi_dcmplt>
 80068ee:	2800      	cmp	r0, #0
 80068f0:	f47f acd0 	bne.w	8006294 <_strtod_l+0x4a4>
 80068f4:	a334      	add	r3, pc, #208	; (adr r3, 80069c8 <_strtod_l+0xbd8>)
 80068f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fa:	4640      	mov	r0, r8
 80068fc:	4649      	mov	r1, r9
 80068fe:	f7fa f90b 	bl	8000b18 <__aeabi_dcmpgt>
 8006902:	2800      	cmp	r0, #0
 8006904:	f43f af7b 	beq.w	80067fe <_strtod_l+0xa0e>
 8006908:	e4c4      	b.n	8006294 <_strtod_l+0x4a4>
 800690a:	9b04      	ldr	r3, [sp, #16]
 800690c:	b333      	cbz	r3, 800695c <_strtod_l+0xb6c>
 800690e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006910:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006914:	d822      	bhi.n	800695c <_strtod_l+0xb6c>
 8006916:	a32e      	add	r3, pc, #184	; (adr r3, 80069d0 <_strtod_l+0xbe0>)
 8006918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691c:	4640      	mov	r0, r8
 800691e:	4649      	mov	r1, r9
 8006920:	f7fa f8e6 	bl	8000af0 <__aeabi_dcmple>
 8006924:	b1a0      	cbz	r0, 8006950 <_strtod_l+0xb60>
 8006926:	4649      	mov	r1, r9
 8006928:	4640      	mov	r0, r8
 800692a:	f7fa f915 	bl	8000b58 <__aeabi_d2uiz>
 800692e:	2801      	cmp	r0, #1
 8006930:	bf38      	it	cc
 8006932:	2001      	movcc	r0, #1
 8006934:	f7f9 fde6 	bl	8000504 <__aeabi_ui2d>
 8006938:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800693a:	4680      	mov	r8, r0
 800693c:	4689      	mov	r9, r1
 800693e:	bb23      	cbnz	r3, 800698a <_strtod_l+0xb9a>
 8006940:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006944:	9010      	str	r0, [sp, #64]	; 0x40
 8006946:	9311      	str	r3, [sp, #68]	; 0x44
 8006948:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800694c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006952:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006954:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006958:	1a9b      	subs	r3, r3, r2
 800695a:	9309      	str	r3, [sp, #36]	; 0x24
 800695c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006960:	eeb0 0a48 	vmov.f32	s0, s16
 8006964:	eef0 0a68 	vmov.f32	s1, s17
 8006968:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800696c:	f001 f8b6 	bl	8007adc <__ulp>
 8006970:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006974:	ec53 2b10 	vmov	r2, r3, d0
 8006978:	f7f9 fe3e 	bl	80005f8 <__aeabi_dmul>
 800697c:	ec53 2b18 	vmov	r2, r3, d8
 8006980:	f7f9 fc84 	bl	800028c <__adddf3>
 8006984:	4682      	mov	sl, r0
 8006986:	468b      	mov	fp, r1
 8006988:	e78d      	b.n	80068a6 <_strtod_l+0xab6>
 800698a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800698e:	e7db      	b.n	8006948 <_strtod_l+0xb58>
 8006990:	a311      	add	r3, pc, #68	; (adr r3, 80069d8 <_strtod_l+0xbe8>)
 8006992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006996:	f7fa f8a1 	bl	8000adc <__aeabi_dcmplt>
 800699a:	e7b2      	b.n	8006902 <_strtod_l+0xb12>
 800699c:	2300      	movs	r3, #0
 800699e:	930a      	str	r3, [sp, #40]	; 0x28
 80069a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80069a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80069a4:	6013      	str	r3, [r2, #0]
 80069a6:	f7ff ba6b 	b.w	8005e80 <_strtod_l+0x90>
 80069aa:	2a65      	cmp	r2, #101	; 0x65
 80069ac:	f43f ab5f 	beq.w	800606e <_strtod_l+0x27e>
 80069b0:	2a45      	cmp	r2, #69	; 0x45
 80069b2:	f43f ab5c 	beq.w	800606e <_strtod_l+0x27e>
 80069b6:	2301      	movs	r3, #1
 80069b8:	f7ff bb94 	b.w	80060e4 <_strtod_l+0x2f4>
 80069bc:	f3af 8000 	nop.w
 80069c0:	94a03595 	.word	0x94a03595
 80069c4:	3fdfffff 	.word	0x3fdfffff
 80069c8:	35afe535 	.word	0x35afe535
 80069cc:	3fe00000 	.word	0x3fe00000
 80069d0:	ffc00000 	.word	0xffc00000
 80069d4:	41dfffff 	.word	0x41dfffff
 80069d8:	94a03595 	.word	0x94a03595
 80069dc:	3fcfffff 	.word	0x3fcfffff
 80069e0:	3ff00000 	.word	0x3ff00000
 80069e4:	7ff00000 	.word	0x7ff00000
 80069e8:	7fe00000 	.word	0x7fe00000
 80069ec:	7c9fffff 	.word	0x7c9fffff
 80069f0:	3fe00000 	.word	0x3fe00000
 80069f4:	bff00000 	.word	0xbff00000
 80069f8:	7fefffff 	.word	0x7fefffff

080069fc <strtof>:
 80069fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a00:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8006ab0 <strtof+0xb4>
 8006a04:	4b26      	ldr	r3, [pc, #152]	; (8006aa0 <strtof+0xa4>)
 8006a06:	460a      	mov	r2, r1
 8006a08:	ed2d 8b02 	vpush	{d8}
 8006a0c:	4601      	mov	r1, r0
 8006a0e:	f8d8 0000 	ldr.w	r0, [r8]
 8006a12:	f7ff f9ed 	bl	8005df0 <_strtod_l>
 8006a16:	ec55 4b10 	vmov	r4, r5, d0
 8006a1a:	ee10 2a10 	vmov	r2, s0
 8006a1e:	ee10 0a10 	vmov	r0, s0
 8006a22:	462b      	mov	r3, r5
 8006a24:	4629      	mov	r1, r5
 8006a26:	f7fa f881 	bl	8000b2c <__aeabi_dcmpun>
 8006a2a:	b190      	cbz	r0, 8006a52 <strtof+0x56>
 8006a2c:	2d00      	cmp	r5, #0
 8006a2e:	481d      	ldr	r0, [pc, #116]	; (8006aa4 <strtof+0xa8>)
 8006a30:	da09      	bge.n	8006a46 <strtof+0x4a>
 8006a32:	f001 fefd 	bl	8008830 <nanf>
 8006a36:	eeb1 8a40 	vneg.f32	s16, s0
 8006a3a:	eeb0 0a48 	vmov.f32	s0, s16
 8006a3e:	ecbd 8b02 	vpop	{d8}
 8006a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a46:	ecbd 8b02 	vpop	{d8}
 8006a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a4e:	f001 beef 	b.w	8008830 <nanf>
 8006a52:	4620      	mov	r0, r4
 8006a54:	4629      	mov	r1, r5
 8006a56:	f7fa f89f 	bl	8000b98 <__aeabi_d2f>
 8006a5a:	ee08 0a10 	vmov	s16, r0
 8006a5e:	eddf 7a12 	vldr	s15, [pc, #72]	; 8006aa8 <strtof+0xac>
 8006a62:	eeb0 7ac8 	vabs.f32	s14, s16
 8006a66:	eeb4 7a67 	vcmp.f32	s14, s15
 8006a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a6e:	dde4      	ble.n	8006a3a <strtof+0x3e>
 8006a70:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8006a74:	4b0d      	ldr	r3, [pc, #52]	; (8006aac <strtof+0xb0>)
 8006a76:	f04f 32ff 	mov.w	r2, #4294967295
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	4639      	mov	r1, r7
 8006a7e:	f7fa f855 	bl	8000b2c <__aeabi_dcmpun>
 8006a82:	b940      	cbnz	r0, 8006a96 <strtof+0x9a>
 8006a84:	4b09      	ldr	r3, [pc, #36]	; (8006aac <strtof+0xb0>)
 8006a86:	f04f 32ff 	mov.w	r2, #4294967295
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	4639      	mov	r1, r7
 8006a8e:	f7fa f82f 	bl	8000af0 <__aeabi_dcmple>
 8006a92:	2800      	cmp	r0, #0
 8006a94:	d0d1      	beq.n	8006a3a <strtof+0x3e>
 8006a96:	f8d8 3000 	ldr.w	r3, [r8]
 8006a9a:	2222      	movs	r2, #34	; 0x22
 8006a9c:	601a      	str	r2, [r3, #0]
 8006a9e:	e7cc      	b.n	8006a3a <strtof+0x3e>
 8006aa0:	200000f8 	.word	0x200000f8
 8006aa4:	08009487 	.word	0x08009487
 8006aa8:	7f7fffff 	.word	0x7f7fffff
 8006aac:	7fefffff 	.word	0x7fefffff
 8006ab0:	20000090 	.word	0x20000090

08006ab4 <strtok>:
 8006ab4:	4b16      	ldr	r3, [pc, #88]	; (8006b10 <strtok+0x5c>)
 8006ab6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ab8:	681e      	ldr	r6, [r3, #0]
 8006aba:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8006abc:	4605      	mov	r5, r0
 8006abe:	b9fc      	cbnz	r4, 8006b00 <strtok+0x4c>
 8006ac0:	2050      	movs	r0, #80	; 0x50
 8006ac2:	9101      	str	r1, [sp, #4]
 8006ac4:	f000 fc7e 	bl	80073c4 <malloc>
 8006ac8:	9901      	ldr	r1, [sp, #4]
 8006aca:	65b0      	str	r0, [r6, #88]	; 0x58
 8006acc:	4602      	mov	r2, r0
 8006ace:	b920      	cbnz	r0, 8006ada <strtok+0x26>
 8006ad0:	4b10      	ldr	r3, [pc, #64]	; (8006b14 <strtok+0x60>)
 8006ad2:	4811      	ldr	r0, [pc, #68]	; (8006b18 <strtok+0x64>)
 8006ad4:	2157      	movs	r1, #87	; 0x57
 8006ad6:	f000 f8d5 	bl	8006c84 <__assert_func>
 8006ada:	e9c0 4400 	strd	r4, r4, [r0]
 8006ade:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006ae2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006ae6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006aea:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006aee:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006af2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006af6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006afa:	6184      	str	r4, [r0, #24]
 8006afc:	7704      	strb	r4, [r0, #28]
 8006afe:	6244      	str	r4, [r0, #36]	; 0x24
 8006b00:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8006b02:	2301      	movs	r3, #1
 8006b04:	4628      	mov	r0, r5
 8006b06:	b002      	add	sp, #8
 8006b08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b0c:	f000 b806 	b.w	8006b1c <__strtok_r>
 8006b10:	20000090 	.word	0x20000090
 8006b14:	080093d8 	.word	0x080093d8
 8006b18:	080093ef 	.word	0x080093ef

08006b1c <__strtok_r>:
 8006b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b1e:	b908      	cbnz	r0, 8006b24 <__strtok_r+0x8>
 8006b20:	6810      	ldr	r0, [r2, #0]
 8006b22:	b188      	cbz	r0, 8006b48 <__strtok_r+0x2c>
 8006b24:	4604      	mov	r4, r0
 8006b26:	4620      	mov	r0, r4
 8006b28:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006b2c:	460f      	mov	r7, r1
 8006b2e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006b32:	b91e      	cbnz	r6, 8006b3c <__strtok_r+0x20>
 8006b34:	b965      	cbnz	r5, 8006b50 <__strtok_r+0x34>
 8006b36:	6015      	str	r5, [r2, #0]
 8006b38:	4628      	mov	r0, r5
 8006b3a:	e005      	b.n	8006b48 <__strtok_r+0x2c>
 8006b3c:	42b5      	cmp	r5, r6
 8006b3e:	d1f6      	bne.n	8006b2e <__strtok_r+0x12>
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1f0      	bne.n	8006b26 <__strtok_r+0xa>
 8006b44:	6014      	str	r4, [r2, #0]
 8006b46:	7003      	strb	r3, [r0, #0]
 8006b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b4a:	461c      	mov	r4, r3
 8006b4c:	e00c      	b.n	8006b68 <__strtok_r+0x4c>
 8006b4e:	b915      	cbnz	r5, 8006b56 <__strtok_r+0x3a>
 8006b50:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006b54:	460e      	mov	r6, r1
 8006b56:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006b5a:	42ab      	cmp	r3, r5
 8006b5c:	d1f7      	bne.n	8006b4e <__strtok_r+0x32>
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d0f3      	beq.n	8006b4a <__strtok_r+0x2e>
 8006b62:	2300      	movs	r3, #0
 8006b64:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006b68:	6014      	str	r4, [r2, #0]
 8006b6a:	e7ed      	b.n	8006b48 <__strtok_r+0x2c>

08006b6c <_strtol_l.constprop.0>:
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b72:	d001      	beq.n	8006b78 <_strtol_l.constprop.0+0xc>
 8006b74:	2b24      	cmp	r3, #36	; 0x24
 8006b76:	d906      	bls.n	8006b86 <_strtol_l.constprop.0+0x1a>
 8006b78:	f7ff f894 	bl	8005ca4 <__errno>
 8006b7c:	2316      	movs	r3, #22
 8006b7e:	6003      	str	r3, [r0, #0]
 8006b80:	2000      	movs	r0, #0
 8006b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b86:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006c6c <_strtol_l.constprop.0+0x100>
 8006b8a:	460d      	mov	r5, r1
 8006b8c:	462e      	mov	r6, r5
 8006b8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b92:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006b96:	f017 0708 	ands.w	r7, r7, #8
 8006b9a:	d1f7      	bne.n	8006b8c <_strtol_l.constprop.0+0x20>
 8006b9c:	2c2d      	cmp	r4, #45	; 0x2d
 8006b9e:	d132      	bne.n	8006c06 <_strtol_l.constprop.0+0x9a>
 8006ba0:	782c      	ldrb	r4, [r5, #0]
 8006ba2:	2701      	movs	r7, #1
 8006ba4:	1cb5      	adds	r5, r6, #2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d05b      	beq.n	8006c62 <_strtol_l.constprop.0+0xf6>
 8006baa:	2b10      	cmp	r3, #16
 8006bac:	d109      	bne.n	8006bc2 <_strtol_l.constprop.0+0x56>
 8006bae:	2c30      	cmp	r4, #48	; 0x30
 8006bb0:	d107      	bne.n	8006bc2 <_strtol_l.constprop.0+0x56>
 8006bb2:	782c      	ldrb	r4, [r5, #0]
 8006bb4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006bb8:	2c58      	cmp	r4, #88	; 0x58
 8006bba:	d14d      	bne.n	8006c58 <_strtol_l.constprop.0+0xec>
 8006bbc:	786c      	ldrb	r4, [r5, #1]
 8006bbe:	2310      	movs	r3, #16
 8006bc0:	3502      	adds	r5, #2
 8006bc2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006bc6:	f108 38ff 	add.w	r8, r8, #4294967295
 8006bca:	f04f 0c00 	mov.w	ip, #0
 8006bce:	fbb8 f9f3 	udiv	r9, r8, r3
 8006bd2:	4666      	mov	r6, ip
 8006bd4:	fb03 8a19 	mls	sl, r3, r9, r8
 8006bd8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006bdc:	f1be 0f09 	cmp.w	lr, #9
 8006be0:	d816      	bhi.n	8006c10 <_strtol_l.constprop.0+0xa4>
 8006be2:	4674      	mov	r4, lr
 8006be4:	42a3      	cmp	r3, r4
 8006be6:	dd24      	ble.n	8006c32 <_strtol_l.constprop.0+0xc6>
 8006be8:	f1bc 0f00 	cmp.w	ip, #0
 8006bec:	db1e      	blt.n	8006c2c <_strtol_l.constprop.0+0xc0>
 8006bee:	45b1      	cmp	r9, r6
 8006bf0:	d31c      	bcc.n	8006c2c <_strtol_l.constprop.0+0xc0>
 8006bf2:	d101      	bne.n	8006bf8 <_strtol_l.constprop.0+0x8c>
 8006bf4:	45a2      	cmp	sl, r4
 8006bf6:	db19      	blt.n	8006c2c <_strtol_l.constprop.0+0xc0>
 8006bf8:	fb06 4603 	mla	r6, r6, r3, r4
 8006bfc:	f04f 0c01 	mov.w	ip, #1
 8006c00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c04:	e7e8      	b.n	8006bd8 <_strtol_l.constprop.0+0x6c>
 8006c06:	2c2b      	cmp	r4, #43	; 0x2b
 8006c08:	bf04      	itt	eq
 8006c0a:	782c      	ldrbeq	r4, [r5, #0]
 8006c0c:	1cb5      	addeq	r5, r6, #2
 8006c0e:	e7ca      	b.n	8006ba6 <_strtol_l.constprop.0+0x3a>
 8006c10:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006c14:	f1be 0f19 	cmp.w	lr, #25
 8006c18:	d801      	bhi.n	8006c1e <_strtol_l.constprop.0+0xb2>
 8006c1a:	3c37      	subs	r4, #55	; 0x37
 8006c1c:	e7e2      	b.n	8006be4 <_strtol_l.constprop.0+0x78>
 8006c1e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006c22:	f1be 0f19 	cmp.w	lr, #25
 8006c26:	d804      	bhi.n	8006c32 <_strtol_l.constprop.0+0xc6>
 8006c28:	3c57      	subs	r4, #87	; 0x57
 8006c2a:	e7db      	b.n	8006be4 <_strtol_l.constprop.0+0x78>
 8006c2c:	f04f 3cff 	mov.w	ip, #4294967295
 8006c30:	e7e6      	b.n	8006c00 <_strtol_l.constprop.0+0x94>
 8006c32:	f1bc 0f00 	cmp.w	ip, #0
 8006c36:	da05      	bge.n	8006c44 <_strtol_l.constprop.0+0xd8>
 8006c38:	2322      	movs	r3, #34	; 0x22
 8006c3a:	6003      	str	r3, [r0, #0]
 8006c3c:	4646      	mov	r6, r8
 8006c3e:	b942      	cbnz	r2, 8006c52 <_strtol_l.constprop.0+0xe6>
 8006c40:	4630      	mov	r0, r6
 8006c42:	e79e      	b.n	8006b82 <_strtol_l.constprop.0+0x16>
 8006c44:	b107      	cbz	r7, 8006c48 <_strtol_l.constprop.0+0xdc>
 8006c46:	4276      	negs	r6, r6
 8006c48:	2a00      	cmp	r2, #0
 8006c4a:	d0f9      	beq.n	8006c40 <_strtol_l.constprop.0+0xd4>
 8006c4c:	f1bc 0f00 	cmp.w	ip, #0
 8006c50:	d000      	beq.n	8006c54 <_strtol_l.constprop.0+0xe8>
 8006c52:	1e69      	subs	r1, r5, #1
 8006c54:	6011      	str	r1, [r2, #0]
 8006c56:	e7f3      	b.n	8006c40 <_strtol_l.constprop.0+0xd4>
 8006c58:	2430      	movs	r4, #48	; 0x30
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1b1      	bne.n	8006bc2 <_strtol_l.constprop.0+0x56>
 8006c5e:	2308      	movs	r3, #8
 8006c60:	e7af      	b.n	8006bc2 <_strtol_l.constprop.0+0x56>
 8006c62:	2c30      	cmp	r4, #48	; 0x30
 8006c64:	d0a5      	beq.n	8006bb2 <_strtol_l.constprop.0+0x46>
 8006c66:	230a      	movs	r3, #10
 8006c68:	e7ab      	b.n	8006bc2 <_strtol_l.constprop.0+0x56>
 8006c6a:	bf00      	nop
 8006c6c:	08009489 	.word	0x08009489

08006c70 <strtol>:
 8006c70:	4613      	mov	r3, r2
 8006c72:	460a      	mov	r2, r1
 8006c74:	4601      	mov	r1, r0
 8006c76:	4802      	ldr	r0, [pc, #8]	; (8006c80 <strtol+0x10>)
 8006c78:	6800      	ldr	r0, [r0, #0]
 8006c7a:	f7ff bf77 	b.w	8006b6c <_strtol_l.constprop.0>
 8006c7e:	bf00      	nop
 8006c80:	20000090 	.word	0x20000090

08006c84 <__assert_func>:
 8006c84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c86:	4614      	mov	r4, r2
 8006c88:	461a      	mov	r2, r3
 8006c8a:	4b09      	ldr	r3, [pc, #36]	; (8006cb0 <__assert_func+0x2c>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4605      	mov	r5, r0
 8006c90:	68d8      	ldr	r0, [r3, #12]
 8006c92:	b14c      	cbz	r4, 8006ca8 <__assert_func+0x24>
 8006c94:	4b07      	ldr	r3, [pc, #28]	; (8006cb4 <__assert_func+0x30>)
 8006c96:	9100      	str	r1, [sp, #0]
 8006c98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c9c:	4906      	ldr	r1, [pc, #24]	; (8006cb8 <__assert_func+0x34>)
 8006c9e:	462b      	mov	r3, r5
 8006ca0:	f000 f80e 	bl	8006cc0 <fiprintf>
 8006ca4:	f001 fe98 	bl	80089d8 <abort>
 8006ca8:	4b04      	ldr	r3, [pc, #16]	; (8006cbc <__assert_func+0x38>)
 8006caa:	461c      	mov	r4, r3
 8006cac:	e7f3      	b.n	8006c96 <__assert_func+0x12>
 8006cae:	bf00      	nop
 8006cb0:	20000090 	.word	0x20000090
 8006cb4:	0800944c 	.word	0x0800944c
 8006cb8:	08009459 	.word	0x08009459
 8006cbc:	08009487 	.word	0x08009487

08006cc0 <fiprintf>:
 8006cc0:	b40e      	push	{r1, r2, r3}
 8006cc2:	b503      	push	{r0, r1, lr}
 8006cc4:	4601      	mov	r1, r0
 8006cc6:	ab03      	add	r3, sp, #12
 8006cc8:	4805      	ldr	r0, [pc, #20]	; (8006ce0 <fiprintf+0x20>)
 8006cca:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cce:	6800      	ldr	r0, [r0, #0]
 8006cd0:	9301      	str	r3, [sp, #4]
 8006cd2:	f001 facf 	bl	8008274 <_vfiprintf_r>
 8006cd6:	b002      	add	sp, #8
 8006cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cdc:	b003      	add	sp, #12
 8006cde:	4770      	bx	lr
 8006ce0:	20000090 	.word	0x20000090

08006ce4 <rshift>:
 8006ce4:	6903      	ldr	r3, [r0, #16]
 8006ce6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006cea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006cee:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006cf2:	f100 0414 	add.w	r4, r0, #20
 8006cf6:	dd45      	ble.n	8006d84 <rshift+0xa0>
 8006cf8:	f011 011f 	ands.w	r1, r1, #31
 8006cfc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006d00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006d04:	d10c      	bne.n	8006d20 <rshift+0x3c>
 8006d06:	f100 0710 	add.w	r7, r0, #16
 8006d0a:	4629      	mov	r1, r5
 8006d0c:	42b1      	cmp	r1, r6
 8006d0e:	d334      	bcc.n	8006d7a <rshift+0x96>
 8006d10:	1a9b      	subs	r3, r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	1eea      	subs	r2, r5, #3
 8006d16:	4296      	cmp	r6, r2
 8006d18:	bf38      	it	cc
 8006d1a:	2300      	movcc	r3, #0
 8006d1c:	4423      	add	r3, r4
 8006d1e:	e015      	b.n	8006d4c <rshift+0x68>
 8006d20:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006d24:	f1c1 0820 	rsb	r8, r1, #32
 8006d28:	40cf      	lsrs	r7, r1
 8006d2a:	f105 0e04 	add.w	lr, r5, #4
 8006d2e:	46a1      	mov	r9, r4
 8006d30:	4576      	cmp	r6, lr
 8006d32:	46f4      	mov	ip, lr
 8006d34:	d815      	bhi.n	8006d62 <rshift+0x7e>
 8006d36:	1a9a      	subs	r2, r3, r2
 8006d38:	0092      	lsls	r2, r2, #2
 8006d3a:	3a04      	subs	r2, #4
 8006d3c:	3501      	adds	r5, #1
 8006d3e:	42ae      	cmp	r6, r5
 8006d40:	bf38      	it	cc
 8006d42:	2200      	movcc	r2, #0
 8006d44:	18a3      	adds	r3, r4, r2
 8006d46:	50a7      	str	r7, [r4, r2]
 8006d48:	b107      	cbz	r7, 8006d4c <rshift+0x68>
 8006d4a:	3304      	adds	r3, #4
 8006d4c:	1b1a      	subs	r2, r3, r4
 8006d4e:	42a3      	cmp	r3, r4
 8006d50:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006d54:	bf08      	it	eq
 8006d56:	2300      	moveq	r3, #0
 8006d58:	6102      	str	r2, [r0, #16]
 8006d5a:	bf08      	it	eq
 8006d5c:	6143      	streq	r3, [r0, #20]
 8006d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d62:	f8dc c000 	ldr.w	ip, [ip]
 8006d66:	fa0c fc08 	lsl.w	ip, ip, r8
 8006d6a:	ea4c 0707 	orr.w	r7, ip, r7
 8006d6e:	f849 7b04 	str.w	r7, [r9], #4
 8006d72:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006d76:	40cf      	lsrs	r7, r1
 8006d78:	e7da      	b.n	8006d30 <rshift+0x4c>
 8006d7a:	f851 cb04 	ldr.w	ip, [r1], #4
 8006d7e:	f847 cf04 	str.w	ip, [r7, #4]!
 8006d82:	e7c3      	b.n	8006d0c <rshift+0x28>
 8006d84:	4623      	mov	r3, r4
 8006d86:	e7e1      	b.n	8006d4c <rshift+0x68>

08006d88 <__hexdig_fun>:
 8006d88:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006d8c:	2b09      	cmp	r3, #9
 8006d8e:	d802      	bhi.n	8006d96 <__hexdig_fun+0xe>
 8006d90:	3820      	subs	r0, #32
 8006d92:	b2c0      	uxtb	r0, r0
 8006d94:	4770      	bx	lr
 8006d96:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006d9a:	2b05      	cmp	r3, #5
 8006d9c:	d801      	bhi.n	8006da2 <__hexdig_fun+0x1a>
 8006d9e:	3847      	subs	r0, #71	; 0x47
 8006da0:	e7f7      	b.n	8006d92 <__hexdig_fun+0xa>
 8006da2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006da6:	2b05      	cmp	r3, #5
 8006da8:	d801      	bhi.n	8006dae <__hexdig_fun+0x26>
 8006daa:	3827      	subs	r0, #39	; 0x27
 8006dac:	e7f1      	b.n	8006d92 <__hexdig_fun+0xa>
 8006dae:	2000      	movs	r0, #0
 8006db0:	4770      	bx	lr
	...

08006db4 <__gethex>:
 8006db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db8:	ed2d 8b02 	vpush	{d8}
 8006dbc:	b089      	sub	sp, #36	; 0x24
 8006dbe:	ee08 0a10 	vmov	s16, r0
 8006dc2:	9304      	str	r3, [sp, #16]
 8006dc4:	4bb4      	ldr	r3, [pc, #720]	; (8007098 <__gethex+0x2e4>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	9301      	str	r3, [sp, #4]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	468b      	mov	fp, r1
 8006dce:	4690      	mov	r8, r2
 8006dd0:	f7f9 f9fe 	bl	80001d0 <strlen>
 8006dd4:	9b01      	ldr	r3, [sp, #4]
 8006dd6:	f8db 2000 	ldr.w	r2, [fp]
 8006dda:	4403      	add	r3, r0
 8006ddc:	4682      	mov	sl, r0
 8006dde:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006de2:	9305      	str	r3, [sp, #20]
 8006de4:	1c93      	adds	r3, r2, #2
 8006de6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006dea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006dee:	32fe      	adds	r2, #254	; 0xfe
 8006df0:	18d1      	adds	r1, r2, r3
 8006df2:	461f      	mov	r7, r3
 8006df4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006df8:	9100      	str	r1, [sp, #0]
 8006dfa:	2830      	cmp	r0, #48	; 0x30
 8006dfc:	d0f8      	beq.n	8006df0 <__gethex+0x3c>
 8006dfe:	f7ff ffc3 	bl	8006d88 <__hexdig_fun>
 8006e02:	4604      	mov	r4, r0
 8006e04:	2800      	cmp	r0, #0
 8006e06:	d13a      	bne.n	8006e7e <__gethex+0xca>
 8006e08:	9901      	ldr	r1, [sp, #4]
 8006e0a:	4652      	mov	r2, sl
 8006e0c:	4638      	mov	r0, r7
 8006e0e:	f7fe ffa9 	bl	8005d64 <strncmp>
 8006e12:	4605      	mov	r5, r0
 8006e14:	2800      	cmp	r0, #0
 8006e16:	d168      	bne.n	8006eea <__gethex+0x136>
 8006e18:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006e1c:	eb07 060a 	add.w	r6, r7, sl
 8006e20:	f7ff ffb2 	bl	8006d88 <__hexdig_fun>
 8006e24:	2800      	cmp	r0, #0
 8006e26:	d062      	beq.n	8006eee <__gethex+0x13a>
 8006e28:	4633      	mov	r3, r6
 8006e2a:	7818      	ldrb	r0, [r3, #0]
 8006e2c:	2830      	cmp	r0, #48	; 0x30
 8006e2e:	461f      	mov	r7, r3
 8006e30:	f103 0301 	add.w	r3, r3, #1
 8006e34:	d0f9      	beq.n	8006e2a <__gethex+0x76>
 8006e36:	f7ff ffa7 	bl	8006d88 <__hexdig_fun>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	fab0 f480 	clz	r4, r0
 8006e40:	0964      	lsrs	r4, r4, #5
 8006e42:	4635      	mov	r5, r6
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	463a      	mov	r2, r7
 8006e48:	4616      	mov	r6, r2
 8006e4a:	3201      	adds	r2, #1
 8006e4c:	7830      	ldrb	r0, [r6, #0]
 8006e4e:	f7ff ff9b 	bl	8006d88 <__hexdig_fun>
 8006e52:	2800      	cmp	r0, #0
 8006e54:	d1f8      	bne.n	8006e48 <__gethex+0x94>
 8006e56:	9901      	ldr	r1, [sp, #4]
 8006e58:	4652      	mov	r2, sl
 8006e5a:	4630      	mov	r0, r6
 8006e5c:	f7fe ff82 	bl	8005d64 <strncmp>
 8006e60:	b980      	cbnz	r0, 8006e84 <__gethex+0xd0>
 8006e62:	b94d      	cbnz	r5, 8006e78 <__gethex+0xc4>
 8006e64:	eb06 050a 	add.w	r5, r6, sl
 8006e68:	462a      	mov	r2, r5
 8006e6a:	4616      	mov	r6, r2
 8006e6c:	3201      	adds	r2, #1
 8006e6e:	7830      	ldrb	r0, [r6, #0]
 8006e70:	f7ff ff8a 	bl	8006d88 <__hexdig_fun>
 8006e74:	2800      	cmp	r0, #0
 8006e76:	d1f8      	bne.n	8006e6a <__gethex+0xb6>
 8006e78:	1bad      	subs	r5, r5, r6
 8006e7a:	00ad      	lsls	r5, r5, #2
 8006e7c:	e004      	b.n	8006e88 <__gethex+0xd4>
 8006e7e:	2400      	movs	r4, #0
 8006e80:	4625      	mov	r5, r4
 8006e82:	e7e0      	b.n	8006e46 <__gethex+0x92>
 8006e84:	2d00      	cmp	r5, #0
 8006e86:	d1f7      	bne.n	8006e78 <__gethex+0xc4>
 8006e88:	7833      	ldrb	r3, [r6, #0]
 8006e8a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006e8e:	2b50      	cmp	r3, #80	; 0x50
 8006e90:	d13b      	bne.n	8006f0a <__gethex+0x156>
 8006e92:	7873      	ldrb	r3, [r6, #1]
 8006e94:	2b2b      	cmp	r3, #43	; 0x2b
 8006e96:	d02c      	beq.n	8006ef2 <__gethex+0x13e>
 8006e98:	2b2d      	cmp	r3, #45	; 0x2d
 8006e9a:	d02e      	beq.n	8006efa <__gethex+0x146>
 8006e9c:	1c71      	adds	r1, r6, #1
 8006e9e:	f04f 0900 	mov.w	r9, #0
 8006ea2:	7808      	ldrb	r0, [r1, #0]
 8006ea4:	f7ff ff70 	bl	8006d88 <__hexdig_fun>
 8006ea8:	1e43      	subs	r3, r0, #1
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	2b18      	cmp	r3, #24
 8006eae:	d82c      	bhi.n	8006f0a <__gethex+0x156>
 8006eb0:	f1a0 0210 	sub.w	r2, r0, #16
 8006eb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006eb8:	f7ff ff66 	bl	8006d88 <__hexdig_fun>
 8006ebc:	1e43      	subs	r3, r0, #1
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b18      	cmp	r3, #24
 8006ec2:	d91d      	bls.n	8006f00 <__gethex+0x14c>
 8006ec4:	f1b9 0f00 	cmp.w	r9, #0
 8006ec8:	d000      	beq.n	8006ecc <__gethex+0x118>
 8006eca:	4252      	negs	r2, r2
 8006ecc:	4415      	add	r5, r2
 8006ece:	f8cb 1000 	str.w	r1, [fp]
 8006ed2:	b1e4      	cbz	r4, 8006f0e <__gethex+0x15a>
 8006ed4:	9b00      	ldr	r3, [sp, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	bf14      	ite	ne
 8006eda:	2700      	movne	r7, #0
 8006edc:	2706      	moveq	r7, #6
 8006ede:	4638      	mov	r0, r7
 8006ee0:	b009      	add	sp, #36	; 0x24
 8006ee2:	ecbd 8b02 	vpop	{d8}
 8006ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eea:	463e      	mov	r6, r7
 8006eec:	4625      	mov	r5, r4
 8006eee:	2401      	movs	r4, #1
 8006ef0:	e7ca      	b.n	8006e88 <__gethex+0xd4>
 8006ef2:	f04f 0900 	mov.w	r9, #0
 8006ef6:	1cb1      	adds	r1, r6, #2
 8006ef8:	e7d3      	b.n	8006ea2 <__gethex+0xee>
 8006efa:	f04f 0901 	mov.w	r9, #1
 8006efe:	e7fa      	b.n	8006ef6 <__gethex+0x142>
 8006f00:	230a      	movs	r3, #10
 8006f02:	fb03 0202 	mla	r2, r3, r2, r0
 8006f06:	3a10      	subs	r2, #16
 8006f08:	e7d4      	b.n	8006eb4 <__gethex+0x100>
 8006f0a:	4631      	mov	r1, r6
 8006f0c:	e7df      	b.n	8006ece <__gethex+0x11a>
 8006f0e:	1bf3      	subs	r3, r6, r7
 8006f10:	3b01      	subs	r3, #1
 8006f12:	4621      	mov	r1, r4
 8006f14:	2b07      	cmp	r3, #7
 8006f16:	dc0b      	bgt.n	8006f30 <__gethex+0x17c>
 8006f18:	ee18 0a10 	vmov	r0, s16
 8006f1c:	f000 fa6c 	bl	80073f8 <_Balloc>
 8006f20:	4604      	mov	r4, r0
 8006f22:	b940      	cbnz	r0, 8006f36 <__gethex+0x182>
 8006f24:	4b5d      	ldr	r3, [pc, #372]	; (800709c <__gethex+0x2e8>)
 8006f26:	4602      	mov	r2, r0
 8006f28:	21de      	movs	r1, #222	; 0xde
 8006f2a:	485d      	ldr	r0, [pc, #372]	; (80070a0 <__gethex+0x2ec>)
 8006f2c:	f7ff feaa 	bl	8006c84 <__assert_func>
 8006f30:	3101      	adds	r1, #1
 8006f32:	105b      	asrs	r3, r3, #1
 8006f34:	e7ee      	b.n	8006f14 <__gethex+0x160>
 8006f36:	f100 0914 	add.w	r9, r0, #20
 8006f3a:	f04f 0b00 	mov.w	fp, #0
 8006f3e:	f1ca 0301 	rsb	r3, sl, #1
 8006f42:	f8cd 9008 	str.w	r9, [sp, #8]
 8006f46:	f8cd b000 	str.w	fp, [sp]
 8006f4a:	9306      	str	r3, [sp, #24]
 8006f4c:	42b7      	cmp	r7, r6
 8006f4e:	d340      	bcc.n	8006fd2 <__gethex+0x21e>
 8006f50:	9802      	ldr	r0, [sp, #8]
 8006f52:	9b00      	ldr	r3, [sp, #0]
 8006f54:	f840 3b04 	str.w	r3, [r0], #4
 8006f58:	eba0 0009 	sub.w	r0, r0, r9
 8006f5c:	1080      	asrs	r0, r0, #2
 8006f5e:	0146      	lsls	r6, r0, #5
 8006f60:	6120      	str	r0, [r4, #16]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 fb3a 	bl	80075dc <__hi0bits>
 8006f68:	1a30      	subs	r0, r6, r0
 8006f6a:	f8d8 6000 	ldr.w	r6, [r8]
 8006f6e:	42b0      	cmp	r0, r6
 8006f70:	dd63      	ble.n	800703a <__gethex+0x286>
 8006f72:	1b87      	subs	r7, r0, r6
 8006f74:	4639      	mov	r1, r7
 8006f76:	4620      	mov	r0, r4
 8006f78:	f000 fede 	bl	8007d38 <__any_on>
 8006f7c:	4682      	mov	sl, r0
 8006f7e:	b1a8      	cbz	r0, 8006fac <__gethex+0x1f8>
 8006f80:	1e7b      	subs	r3, r7, #1
 8006f82:	1159      	asrs	r1, r3, #5
 8006f84:	f003 021f 	and.w	r2, r3, #31
 8006f88:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006f8c:	f04f 0a01 	mov.w	sl, #1
 8006f90:	fa0a f202 	lsl.w	r2, sl, r2
 8006f94:	420a      	tst	r2, r1
 8006f96:	d009      	beq.n	8006fac <__gethex+0x1f8>
 8006f98:	4553      	cmp	r3, sl
 8006f9a:	dd05      	ble.n	8006fa8 <__gethex+0x1f4>
 8006f9c:	1eb9      	subs	r1, r7, #2
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	f000 feca 	bl	8007d38 <__any_on>
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	d145      	bne.n	8007034 <__gethex+0x280>
 8006fa8:	f04f 0a02 	mov.w	sl, #2
 8006fac:	4639      	mov	r1, r7
 8006fae:	4620      	mov	r0, r4
 8006fb0:	f7ff fe98 	bl	8006ce4 <rshift>
 8006fb4:	443d      	add	r5, r7
 8006fb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006fba:	42ab      	cmp	r3, r5
 8006fbc:	da4c      	bge.n	8007058 <__gethex+0x2a4>
 8006fbe:	ee18 0a10 	vmov	r0, s16
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	f000 fa58 	bl	8007478 <_Bfree>
 8006fc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006fca:	2300      	movs	r3, #0
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	27a3      	movs	r7, #163	; 0xa3
 8006fd0:	e785      	b.n	8006ede <__gethex+0x12a>
 8006fd2:	1e73      	subs	r3, r6, #1
 8006fd4:	9a05      	ldr	r2, [sp, #20]
 8006fd6:	9303      	str	r3, [sp, #12]
 8006fd8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d019      	beq.n	8007014 <__gethex+0x260>
 8006fe0:	f1bb 0f20 	cmp.w	fp, #32
 8006fe4:	d107      	bne.n	8006ff6 <__gethex+0x242>
 8006fe6:	9b02      	ldr	r3, [sp, #8]
 8006fe8:	9a00      	ldr	r2, [sp, #0]
 8006fea:	f843 2b04 	str.w	r2, [r3], #4
 8006fee:	9302      	str	r3, [sp, #8]
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	469b      	mov	fp, r3
 8006ff6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006ffa:	f7ff fec5 	bl	8006d88 <__hexdig_fun>
 8006ffe:	9b00      	ldr	r3, [sp, #0]
 8007000:	f000 000f 	and.w	r0, r0, #15
 8007004:	fa00 f00b 	lsl.w	r0, r0, fp
 8007008:	4303      	orrs	r3, r0
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	f10b 0b04 	add.w	fp, fp, #4
 8007010:	9b03      	ldr	r3, [sp, #12]
 8007012:	e00d      	b.n	8007030 <__gethex+0x27c>
 8007014:	9b03      	ldr	r3, [sp, #12]
 8007016:	9a06      	ldr	r2, [sp, #24]
 8007018:	4413      	add	r3, r2
 800701a:	42bb      	cmp	r3, r7
 800701c:	d3e0      	bcc.n	8006fe0 <__gethex+0x22c>
 800701e:	4618      	mov	r0, r3
 8007020:	9901      	ldr	r1, [sp, #4]
 8007022:	9307      	str	r3, [sp, #28]
 8007024:	4652      	mov	r2, sl
 8007026:	f7fe fe9d 	bl	8005d64 <strncmp>
 800702a:	9b07      	ldr	r3, [sp, #28]
 800702c:	2800      	cmp	r0, #0
 800702e:	d1d7      	bne.n	8006fe0 <__gethex+0x22c>
 8007030:	461e      	mov	r6, r3
 8007032:	e78b      	b.n	8006f4c <__gethex+0x198>
 8007034:	f04f 0a03 	mov.w	sl, #3
 8007038:	e7b8      	b.n	8006fac <__gethex+0x1f8>
 800703a:	da0a      	bge.n	8007052 <__gethex+0x29e>
 800703c:	1a37      	subs	r7, r6, r0
 800703e:	4621      	mov	r1, r4
 8007040:	ee18 0a10 	vmov	r0, s16
 8007044:	463a      	mov	r2, r7
 8007046:	f000 fc33 	bl	80078b0 <__lshift>
 800704a:	1bed      	subs	r5, r5, r7
 800704c:	4604      	mov	r4, r0
 800704e:	f100 0914 	add.w	r9, r0, #20
 8007052:	f04f 0a00 	mov.w	sl, #0
 8007056:	e7ae      	b.n	8006fb6 <__gethex+0x202>
 8007058:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800705c:	42a8      	cmp	r0, r5
 800705e:	dd72      	ble.n	8007146 <__gethex+0x392>
 8007060:	1b45      	subs	r5, r0, r5
 8007062:	42ae      	cmp	r6, r5
 8007064:	dc36      	bgt.n	80070d4 <__gethex+0x320>
 8007066:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800706a:	2b02      	cmp	r3, #2
 800706c:	d02a      	beq.n	80070c4 <__gethex+0x310>
 800706e:	2b03      	cmp	r3, #3
 8007070:	d02c      	beq.n	80070cc <__gethex+0x318>
 8007072:	2b01      	cmp	r3, #1
 8007074:	d11c      	bne.n	80070b0 <__gethex+0x2fc>
 8007076:	42ae      	cmp	r6, r5
 8007078:	d11a      	bne.n	80070b0 <__gethex+0x2fc>
 800707a:	2e01      	cmp	r6, #1
 800707c:	d112      	bne.n	80070a4 <__gethex+0x2f0>
 800707e:	9a04      	ldr	r2, [sp, #16]
 8007080:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	2301      	movs	r3, #1
 8007088:	6123      	str	r3, [r4, #16]
 800708a:	f8c9 3000 	str.w	r3, [r9]
 800708e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007090:	2762      	movs	r7, #98	; 0x62
 8007092:	601c      	str	r4, [r3, #0]
 8007094:	e723      	b.n	8006ede <__gethex+0x12a>
 8007096:	bf00      	nop
 8007098:	08009600 	.word	0x08009600
 800709c:	08009589 	.word	0x08009589
 80070a0:	0800959a 	.word	0x0800959a
 80070a4:	1e71      	subs	r1, r6, #1
 80070a6:	4620      	mov	r0, r4
 80070a8:	f000 fe46 	bl	8007d38 <__any_on>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	d1e6      	bne.n	800707e <__gethex+0x2ca>
 80070b0:	ee18 0a10 	vmov	r0, s16
 80070b4:	4621      	mov	r1, r4
 80070b6:	f000 f9df 	bl	8007478 <_Bfree>
 80070ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80070bc:	2300      	movs	r3, #0
 80070be:	6013      	str	r3, [r2, #0]
 80070c0:	2750      	movs	r7, #80	; 0x50
 80070c2:	e70c      	b.n	8006ede <__gethex+0x12a>
 80070c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1f2      	bne.n	80070b0 <__gethex+0x2fc>
 80070ca:	e7d8      	b.n	800707e <__gethex+0x2ca>
 80070cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1d5      	bne.n	800707e <__gethex+0x2ca>
 80070d2:	e7ed      	b.n	80070b0 <__gethex+0x2fc>
 80070d4:	1e6f      	subs	r7, r5, #1
 80070d6:	f1ba 0f00 	cmp.w	sl, #0
 80070da:	d131      	bne.n	8007140 <__gethex+0x38c>
 80070dc:	b127      	cbz	r7, 80070e8 <__gethex+0x334>
 80070de:	4639      	mov	r1, r7
 80070e0:	4620      	mov	r0, r4
 80070e2:	f000 fe29 	bl	8007d38 <__any_on>
 80070e6:	4682      	mov	sl, r0
 80070e8:	117b      	asrs	r3, r7, #5
 80070ea:	2101      	movs	r1, #1
 80070ec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80070f0:	f007 071f 	and.w	r7, r7, #31
 80070f4:	fa01 f707 	lsl.w	r7, r1, r7
 80070f8:	421f      	tst	r7, r3
 80070fa:	4629      	mov	r1, r5
 80070fc:	4620      	mov	r0, r4
 80070fe:	bf18      	it	ne
 8007100:	f04a 0a02 	orrne.w	sl, sl, #2
 8007104:	1b76      	subs	r6, r6, r5
 8007106:	f7ff fded 	bl	8006ce4 <rshift>
 800710a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800710e:	2702      	movs	r7, #2
 8007110:	f1ba 0f00 	cmp.w	sl, #0
 8007114:	d048      	beq.n	80071a8 <__gethex+0x3f4>
 8007116:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800711a:	2b02      	cmp	r3, #2
 800711c:	d015      	beq.n	800714a <__gethex+0x396>
 800711e:	2b03      	cmp	r3, #3
 8007120:	d017      	beq.n	8007152 <__gethex+0x39e>
 8007122:	2b01      	cmp	r3, #1
 8007124:	d109      	bne.n	800713a <__gethex+0x386>
 8007126:	f01a 0f02 	tst.w	sl, #2
 800712a:	d006      	beq.n	800713a <__gethex+0x386>
 800712c:	f8d9 0000 	ldr.w	r0, [r9]
 8007130:	ea4a 0a00 	orr.w	sl, sl, r0
 8007134:	f01a 0f01 	tst.w	sl, #1
 8007138:	d10e      	bne.n	8007158 <__gethex+0x3a4>
 800713a:	f047 0710 	orr.w	r7, r7, #16
 800713e:	e033      	b.n	80071a8 <__gethex+0x3f4>
 8007140:	f04f 0a01 	mov.w	sl, #1
 8007144:	e7d0      	b.n	80070e8 <__gethex+0x334>
 8007146:	2701      	movs	r7, #1
 8007148:	e7e2      	b.n	8007110 <__gethex+0x35c>
 800714a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800714c:	f1c3 0301 	rsb	r3, r3, #1
 8007150:	9315      	str	r3, [sp, #84]	; 0x54
 8007152:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007154:	2b00      	cmp	r3, #0
 8007156:	d0f0      	beq.n	800713a <__gethex+0x386>
 8007158:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800715c:	f104 0314 	add.w	r3, r4, #20
 8007160:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007164:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007168:	f04f 0c00 	mov.w	ip, #0
 800716c:	4618      	mov	r0, r3
 800716e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007172:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007176:	d01c      	beq.n	80071b2 <__gethex+0x3fe>
 8007178:	3201      	adds	r2, #1
 800717a:	6002      	str	r2, [r0, #0]
 800717c:	2f02      	cmp	r7, #2
 800717e:	f104 0314 	add.w	r3, r4, #20
 8007182:	d13f      	bne.n	8007204 <__gethex+0x450>
 8007184:	f8d8 2000 	ldr.w	r2, [r8]
 8007188:	3a01      	subs	r2, #1
 800718a:	42b2      	cmp	r2, r6
 800718c:	d10a      	bne.n	80071a4 <__gethex+0x3f0>
 800718e:	1171      	asrs	r1, r6, #5
 8007190:	2201      	movs	r2, #1
 8007192:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007196:	f006 061f 	and.w	r6, r6, #31
 800719a:	fa02 f606 	lsl.w	r6, r2, r6
 800719e:	421e      	tst	r6, r3
 80071a0:	bf18      	it	ne
 80071a2:	4617      	movne	r7, r2
 80071a4:	f047 0720 	orr.w	r7, r7, #32
 80071a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80071aa:	601c      	str	r4, [r3, #0]
 80071ac:	9b04      	ldr	r3, [sp, #16]
 80071ae:	601d      	str	r5, [r3, #0]
 80071b0:	e695      	b.n	8006ede <__gethex+0x12a>
 80071b2:	4299      	cmp	r1, r3
 80071b4:	f843 cc04 	str.w	ip, [r3, #-4]
 80071b8:	d8d8      	bhi.n	800716c <__gethex+0x3b8>
 80071ba:	68a3      	ldr	r3, [r4, #8]
 80071bc:	459b      	cmp	fp, r3
 80071be:	db19      	blt.n	80071f4 <__gethex+0x440>
 80071c0:	6861      	ldr	r1, [r4, #4]
 80071c2:	ee18 0a10 	vmov	r0, s16
 80071c6:	3101      	adds	r1, #1
 80071c8:	f000 f916 	bl	80073f8 <_Balloc>
 80071cc:	4681      	mov	r9, r0
 80071ce:	b918      	cbnz	r0, 80071d8 <__gethex+0x424>
 80071d0:	4b1a      	ldr	r3, [pc, #104]	; (800723c <__gethex+0x488>)
 80071d2:	4602      	mov	r2, r0
 80071d4:	2184      	movs	r1, #132	; 0x84
 80071d6:	e6a8      	b.n	8006f2a <__gethex+0x176>
 80071d8:	6922      	ldr	r2, [r4, #16]
 80071da:	3202      	adds	r2, #2
 80071dc:	f104 010c 	add.w	r1, r4, #12
 80071e0:	0092      	lsls	r2, r2, #2
 80071e2:	300c      	adds	r0, #12
 80071e4:	f7fe fd88 	bl	8005cf8 <memcpy>
 80071e8:	4621      	mov	r1, r4
 80071ea:	ee18 0a10 	vmov	r0, s16
 80071ee:	f000 f943 	bl	8007478 <_Bfree>
 80071f2:	464c      	mov	r4, r9
 80071f4:	6923      	ldr	r3, [r4, #16]
 80071f6:	1c5a      	adds	r2, r3, #1
 80071f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80071fc:	6122      	str	r2, [r4, #16]
 80071fe:	2201      	movs	r2, #1
 8007200:	615a      	str	r2, [r3, #20]
 8007202:	e7bb      	b.n	800717c <__gethex+0x3c8>
 8007204:	6922      	ldr	r2, [r4, #16]
 8007206:	455a      	cmp	r2, fp
 8007208:	dd0b      	ble.n	8007222 <__gethex+0x46e>
 800720a:	2101      	movs	r1, #1
 800720c:	4620      	mov	r0, r4
 800720e:	f7ff fd69 	bl	8006ce4 <rshift>
 8007212:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007216:	3501      	adds	r5, #1
 8007218:	42ab      	cmp	r3, r5
 800721a:	f6ff aed0 	blt.w	8006fbe <__gethex+0x20a>
 800721e:	2701      	movs	r7, #1
 8007220:	e7c0      	b.n	80071a4 <__gethex+0x3f0>
 8007222:	f016 061f 	ands.w	r6, r6, #31
 8007226:	d0fa      	beq.n	800721e <__gethex+0x46a>
 8007228:	4453      	add	r3, sl
 800722a:	f1c6 0620 	rsb	r6, r6, #32
 800722e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007232:	f000 f9d3 	bl	80075dc <__hi0bits>
 8007236:	42b0      	cmp	r0, r6
 8007238:	dbe7      	blt.n	800720a <__gethex+0x456>
 800723a:	e7f0      	b.n	800721e <__gethex+0x46a>
 800723c:	08009589 	.word	0x08009589

08007240 <L_shift>:
 8007240:	f1c2 0208 	rsb	r2, r2, #8
 8007244:	0092      	lsls	r2, r2, #2
 8007246:	b570      	push	{r4, r5, r6, lr}
 8007248:	f1c2 0620 	rsb	r6, r2, #32
 800724c:	6843      	ldr	r3, [r0, #4]
 800724e:	6804      	ldr	r4, [r0, #0]
 8007250:	fa03 f506 	lsl.w	r5, r3, r6
 8007254:	432c      	orrs	r4, r5
 8007256:	40d3      	lsrs	r3, r2
 8007258:	6004      	str	r4, [r0, #0]
 800725a:	f840 3f04 	str.w	r3, [r0, #4]!
 800725e:	4288      	cmp	r0, r1
 8007260:	d3f4      	bcc.n	800724c <L_shift+0xc>
 8007262:	bd70      	pop	{r4, r5, r6, pc}

08007264 <__match>:
 8007264:	b530      	push	{r4, r5, lr}
 8007266:	6803      	ldr	r3, [r0, #0]
 8007268:	3301      	adds	r3, #1
 800726a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800726e:	b914      	cbnz	r4, 8007276 <__match+0x12>
 8007270:	6003      	str	r3, [r0, #0]
 8007272:	2001      	movs	r0, #1
 8007274:	bd30      	pop	{r4, r5, pc}
 8007276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800727a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800727e:	2d19      	cmp	r5, #25
 8007280:	bf98      	it	ls
 8007282:	3220      	addls	r2, #32
 8007284:	42a2      	cmp	r2, r4
 8007286:	d0f0      	beq.n	800726a <__match+0x6>
 8007288:	2000      	movs	r0, #0
 800728a:	e7f3      	b.n	8007274 <__match+0x10>

0800728c <__hexnan>:
 800728c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007290:	680b      	ldr	r3, [r1, #0]
 8007292:	115e      	asrs	r6, r3, #5
 8007294:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007298:	f013 031f 	ands.w	r3, r3, #31
 800729c:	b087      	sub	sp, #28
 800729e:	bf18      	it	ne
 80072a0:	3604      	addne	r6, #4
 80072a2:	2500      	movs	r5, #0
 80072a4:	1f37      	subs	r7, r6, #4
 80072a6:	4690      	mov	r8, r2
 80072a8:	6802      	ldr	r2, [r0, #0]
 80072aa:	9301      	str	r3, [sp, #4]
 80072ac:	4682      	mov	sl, r0
 80072ae:	f846 5c04 	str.w	r5, [r6, #-4]
 80072b2:	46b9      	mov	r9, r7
 80072b4:	463c      	mov	r4, r7
 80072b6:	9502      	str	r5, [sp, #8]
 80072b8:	46ab      	mov	fp, r5
 80072ba:	7851      	ldrb	r1, [r2, #1]
 80072bc:	1c53      	adds	r3, r2, #1
 80072be:	9303      	str	r3, [sp, #12]
 80072c0:	b341      	cbz	r1, 8007314 <__hexnan+0x88>
 80072c2:	4608      	mov	r0, r1
 80072c4:	9205      	str	r2, [sp, #20]
 80072c6:	9104      	str	r1, [sp, #16]
 80072c8:	f7ff fd5e 	bl	8006d88 <__hexdig_fun>
 80072cc:	2800      	cmp	r0, #0
 80072ce:	d14f      	bne.n	8007370 <__hexnan+0xe4>
 80072d0:	9904      	ldr	r1, [sp, #16]
 80072d2:	9a05      	ldr	r2, [sp, #20]
 80072d4:	2920      	cmp	r1, #32
 80072d6:	d818      	bhi.n	800730a <__hexnan+0x7e>
 80072d8:	9b02      	ldr	r3, [sp, #8]
 80072da:	459b      	cmp	fp, r3
 80072dc:	dd13      	ble.n	8007306 <__hexnan+0x7a>
 80072de:	454c      	cmp	r4, r9
 80072e0:	d206      	bcs.n	80072f0 <__hexnan+0x64>
 80072e2:	2d07      	cmp	r5, #7
 80072e4:	dc04      	bgt.n	80072f0 <__hexnan+0x64>
 80072e6:	462a      	mov	r2, r5
 80072e8:	4649      	mov	r1, r9
 80072ea:	4620      	mov	r0, r4
 80072ec:	f7ff ffa8 	bl	8007240 <L_shift>
 80072f0:	4544      	cmp	r4, r8
 80072f2:	d950      	bls.n	8007396 <__hexnan+0x10a>
 80072f4:	2300      	movs	r3, #0
 80072f6:	f1a4 0904 	sub.w	r9, r4, #4
 80072fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80072fe:	f8cd b008 	str.w	fp, [sp, #8]
 8007302:	464c      	mov	r4, r9
 8007304:	461d      	mov	r5, r3
 8007306:	9a03      	ldr	r2, [sp, #12]
 8007308:	e7d7      	b.n	80072ba <__hexnan+0x2e>
 800730a:	2929      	cmp	r1, #41	; 0x29
 800730c:	d156      	bne.n	80073bc <__hexnan+0x130>
 800730e:	3202      	adds	r2, #2
 8007310:	f8ca 2000 	str.w	r2, [sl]
 8007314:	f1bb 0f00 	cmp.w	fp, #0
 8007318:	d050      	beq.n	80073bc <__hexnan+0x130>
 800731a:	454c      	cmp	r4, r9
 800731c:	d206      	bcs.n	800732c <__hexnan+0xa0>
 800731e:	2d07      	cmp	r5, #7
 8007320:	dc04      	bgt.n	800732c <__hexnan+0xa0>
 8007322:	462a      	mov	r2, r5
 8007324:	4649      	mov	r1, r9
 8007326:	4620      	mov	r0, r4
 8007328:	f7ff ff8a 	bl	8007240 <L_shift>
 800732c:	4544      	cmp	r4, r8
 800732e:	d934      	bls.n	800739a <__hexnan+0x10e>
 8007330:	f1a8 0204 	sub.w	r2, r8, #4
 8007334:	4623      	mov	r3, r4
 8007336:	f853 1b04 	ldr.w	r1, [r3], #4
 800733a:	f842 1f04 	str.w	r1, [r2, #4]!
 800733e:	429f      	cmp	r7, r3
 8007340:	d2f9      	bcs.n	8007336 <__hexnan+0xaa>
 8007342:	1b3b      	subs	r3, r7, r4
 8007344:	f023 0303 	bic.w	r3, r3, #3
 8007348:	3304      	adds	r3, #4
 800734a:	3401      	adds	r4, #1
 800734c:	3e03      	subs	r6, #3
 800734e:	42b4      	cmp	r4, r6
 8007350:	bf88      	it	hi
 8007352:	2304      	movhi	r3, #4
 8007354:	4443      	add	r3, r8
 8007356:	2200      	movs	r2, #0
 8007358:	f843 2b04 	str.w	r2, [r3], #4
 800735c:	429f      	cmp	r7, r3
 800735e:	d2fb      	bcs.n	8007358 <__hexnan+0xcc>
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	b91b      	cbnz	r3, 800736c <__hexnan+0xe0>
 8007364:	4547      	cmp	r7, r8
 8007366:	d127      	bne.n	80073b8 <__hexnan+0x12c>
 8007368:	2301      	movs	r3, #1
 800736a:	603b      	str	r3, [r7, #0]
 800736c:	2005      	movs	r0, #5
 800736e:	e026      	b.n	80073be <__hexnan+0x132>
 8007370:	3501      	adds	r5, #1
 8007372:	2d08      	cmp	r5, #8
 8007374:	f10b 0b01 	add.w	fp, fp, #1
 8007378:	dd06      	ble.n	8007388 <__hexnan+0xfc>
 800737a:	4544      	cmp	r4, r8
 800737c:	d9c3      	bls.n	8007306 <__hexnan+0x7a>
 800737e:	2300      	movs	r3, #0
 8007380:	f844 3c04 	str.w	r3, [r4, #-4]
 8007384:	2501      	movs	r5, #1
 8007386:	3c04      	subs	r4, #4
 8007388:	6822      	ldr	r2, [r4, #0]
 800738a:	f000 000f 	and.w	r0, r0, #15
 800738e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007392:	6022      	str	r2, [r4, #0]
 8007394:	e7b7      	b.n	8007306 <__hexnan+0x7a>
 8007396:	2508      	movs	r5, #8
 8007398:	e7b5      	b.n	8007306 <__hexnan+0x7a>
 800739a:	9b01      	ldr	r3, [sp, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d0df      	beq.n	8007360 <__hexnan+0xd4>
 80073a0:	f04f 32ff 	mov.w	r2, #4294967295
 80073a4:	f1c3 0320 	rsb	r3, r3, #32
 80073a8:	fa22 f303 	lsr.w	r3, r2, r3
 80073ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80073b0:	401a      	ands	r2, r3
 80073b2:	f846 2c04 	str.w	r2, [r6, #-4]
 80073b6:	e7d3      	b.n	8007360 <__hexnan+0xd4>
 80073b8:	3f04      	subs	r7, #4
 80073ba:	e7d1      	b.n	8007360 <__hexnan+0xd4>
 80073bc:	2004      	movs	r0, #4
 80073be:	b007      	add	sp, #28
 80073c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080073c4 <malloc>:
 80073c4:	4b02      	ldr	r3, [pc, #8]	; (80073d0 <malloc+0xc>)
 80073c6:	4601      	mov	r1, r0
 80073c8:	6818      	ldr	r0, [r3, #0]
 80073ca:	f000 bd59 	b.w	8007e80 <_malloc_r>
 80073ce:	bf00      	nop
 80073d0:	20000090 	.word	0x20000090

080073d4 <__ascii_mbtowc>:
 80073d4:	b082      	sub	sp, #8
 80073d6:	b901      	cbnz	r1, 80073da <__ascii_mbtowc+0x6>
 80073d8:	a901      	add	r1, sp, #4
 80073da:	b142      	cbz	r2, 80073ee <__ascii_mbtowc+0x1a>
 80073dc:	b14b      	cbz	r3, 80073f2 <__ascii_mbtowc+0x1e>
 80073de:	7813      	ldrb	r3, [r2, #0]
 80073e0:	600b      	str	r3, [r1, #0]
 80073e2:	7812      	ldrb	r2, [r2, #0]
 80073e4:	1e10      	subs	r0, r2, #0
 80073e6:	bf18      	it	ne
 80073e8:	2001      	movne	r0, #1
 80073ea:	b002      	add	sp, #8
 80073ec:	4770      	bx	lr
 80073ee:	4610      	mov	r0, r2
 80073f0:	e7fb      	b.n	80073ea <__ascii_mbtowc+0x16>
 80073f2:	f06f 0001 	mvn.w	r0, #1
 80073f6:	e7f8      	b.n	80073ea <__ascii_mbtowc+0x16>

080073f8 <_Balloc>:
 80073f8:	b570      	push	{r4, r5, r6, lr}
 80073fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80073fc:	4604      	mov	r4, r0
 80073fe:	460d      	mov	r5, r1
 8007400:	b976      	cbnz	r6, 8007420 <_Balloc+0x28>
 8007402:	2010      	movs	r0, #16
 8007404:	f7ff ffde 	bl	80073c4 <malloc>
 8007408:	4602      	mov	r2, r0
 800740a:	6260      	str	r0, [r4, #36]	; 0x24
 800740c:	b920      	cbnz	r0, 8007418 <_Balloc+0x20>
 800740e:	4b18      	ldr	r3, [pc, #96]	; (8007470 <_Balloc+0x78>)
 8007410:	4818      	ldr	r0, [pc, #96]	; (8007474 <_Balloc+0x7c>)
 8007412:	2166      	movs	r1, #102	; 0x66
 8007414:	f7ff fc36 	bl	8006c84 <__assert_func>
 8007418:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800741c:	6006      	str	r6, [r0, #0]
 800741e:	60c6      	str	r6, [r0, #12]
 8007420:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007422:	68f3      	ldr	r3, [r6, #12]
 8007424:	b183      	cbz	r3, 8007448 <_Balloc+0x50>
 8007426:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800742e:	b9b8      	cbnz	r0, 8007460 <_Balloc+0x68>
 8007430:	2101      	movs	r1, #1
 8007432:	fa01 f605 	lsl.w	r6, r1, r5
 8007436:	1d72      	adds	r2, r6, #5
 8007438:	0092      	lsls	r2, r2, #2
 800743a:	4620      	mov	r0, r4
 800743c:	f000 fc9d 	bl	8007d7a <_calloc_r>
 8007440:	b160      	cbz	r0, 800745c <_Balloc+0x64>
 8007442:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007446:	e00e      	b.n	8007466 <_Balloc+0x6e>
 8007448:	2221      	movs	r2, #33	; 0x21
 800744a:	2104      	movs	r1, #4
 800744c:	4620      	mov	r0, r4
 800744e:	f000 fc94 	bl	8007d7a <_calloc_r>
 8007452:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007454:	60f0      	str	r0, [r6, #12]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1e4      	bne.n	8007426 <_Balloc+0x2e>
 800745c:	2000      	movs	r0, #0
 800745e:	bd70      	pop	{r4, r5, r6, pc}
 8007460:	6802      	ldr	r2, [r0, #0]
 8007462:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007466:	2300      	movs	r3, #0
 8007468:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800746c:	e7f7      	b.n	800745e <_Balloc+0x66>
 800746e:	bf00      	nop
 8007470:	080093d8 	.word	0x080093d8
 8007474:	08009614 	.word	0x08009614

08007478 <_Bfree>:
 8007478:	b570      	push	{r4, r5, r6, lr}
 800747a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800747c:	4605      	mov	r5, r0
 800747e:	460c      	mov	r4, r1
 8007480:	b976      	cbnz	r6, 80074a0 <_Bfree+0x28>
 8007482:	2010      	movs	r0, #16
 8007484:	f7ff ff9e 	bl	80073c4 <malloc>
 8007488:	4602      	mov	r2, r0
 800748a:	6268      	str	r0, [r5, #36]	; 0x24
 800748c:	b920      	cbnz	r0, 8007498 <_Bfree+0x20>
 800748e:	4b09      	ldr	r3, [pc, #36]	; (80074b4 <_Bfree+0x3c>)
 8007490:	4809      	ldr	r0, [pc, #36]	; (80074b8 <_Bfree+0x40>)
 8007492:	218a      	movs	r1, #138	; 0x8a
 8007494:	f7ff fbf6 	bl	8006c84 <__assert_func>
 8007498:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800749c:	6006      	str	r6, [r0, #0]
 800749e:	60c6      	str	r6, [r0, #12]
 80074a0:	b13c      	cbz	r4, 80074b2 <_Bfree+0x3a>
 80074a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80074a4:	6862      	ldr	r2, [r4, #4]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074ac:	6021      	str	r1, [r4, #0]
 80074ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80074b2:	bd70      	pop	{r4, r5, r6, pc}
 80074b4:	080093d8 	.word	0x080093d8
 80074b8:	08009614 	.word	0x08009614

080074bc <__multadd>:
 80074bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074c0:	690d      	ldr	r5, [r1, #16]
 80074c2:	4607      	mov	r7, r0
 80074c4:	460c      	mov	r4, r1
 80074c6:	461e      	mov	r6, r3
 80074c8:	f101 0c14 	add.w	ip, r1, #20
 80074cc:	2000      	movs	r0, #0
 80074ce:	f8dc 3000 	ldr.w	r3, [ip]
 80074d2:	b299      	uxth	r1, r3
 80074d4:	fb02 6101 	mla	r1, r2, r1, r6
 80074d8:	0c1e      	lsrs	r6, r3, #16
 80074da:	0c0b      	lsrs	r3, r1, #16
 80074dc:	fb02 3306 	mla	r3, r2, r6, r3
 80074e0:	b289      	uxth	r1, r1
 80074e2:	3001      	adds	r0, #1
 80074e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80074e8:	4285      	cmp	r5, r0
 80074ea:	f84c 1b04 	str.w	r1, [ip], #4
 80074ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80074f2:	dcec      	bgt.n	80074ce <__multadd+0x12>
 80074f4:	b30e      	cbz	r6, 800753a <__multadd+0x7e>
 80074f6:	68a3      	ldr	r3, [r4, #8]
 80074f8:	42ab      	cmp	r3, r5
 80074fa:	dc19      	bgt.n	8007530 <__multadd+0x74>
 80074fc:	6861      	ldr	r1, [r4, #4]
 80074fe:	4638      	mov	r0, r7
 8007500:	3101      	adds	r1, #1
 8007502:	f7ff ff79 	bl	80073f8 <_Balloc>
 8007506:	4680      	mov	r8, r0
 8007508:	b928      	cbnz	r0, 8007516 <__multadd+0x5a>
 800750a:	4602      	mov	r2, r0
 800750c:	4b0c      	ldr	r3, [pc, #48]	; (8007540 <__multadd+0x84>)
 800750e:	480d      	ldr	r0, [pc, #52]	; (8007544 <__multadd+0x88>)
 8007510:	21b5      	movs	r1, #181	; 0xb5
 8007512:	f7ff fbb7 	bl	8006c84 <__assert_func>
 8007516:	6922      	ldr	r2, [r4, #16]
 8007518:	3202      	adds	r2, #2
 800751a:	f104 010c 	add.w	r1, r4, #12
 800751e:	0092      	lsls	r2, r2, #2
 8007520:	300c      	adds	r0, #12
 8007522:	f7fe fbe9 	bl	8005cf8 <memcpy>
 8007526:	4621      	mov	r1, r4
 8007528:	4638      	mov	r0, r7
 800752a:	f7ff ffa5 	bl	8007478 <_Bfree>
 800752e:	4644      	mov	r4, r8
 8007530:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007534:	3501      	adds	r5, #1
 8007536:	615e      	str	r6, [r3, #20]
 8007538:	6125      	str	r5, [r4, #16]
 800753a:	4620      	mov	r0, r4
 800753c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007540:	08009589 	.word	0x08009589
 8007544:	08009614 	.word	0x08009614

08007548 <__s2b>:
 8007548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800754c:	460c      	mov	r4, r1
 800754e:	4615      	mov	r5, r2
 8007550:	461f      	mov	r7, r3
 8007552:	2209      	movs	r2, #9
 8007554:	3308      	adds	r3, #8
 8007556:	4606      	mov	r6, r0
 8007558:	fb93 f3f2 	sdiv	r3, r3, r2
 800755c:	2100      	movs	r1, #0
 800755e:	2201      	movs	r2, #1
 8007560:	429a      	cmp	r2, r3
 8007562:	db09      	blt.n	8007578 <__s2b+0x30>
 8007564:	4630      	mov	r0, r6
 8007566:	f7ff ff47 	bl	80073f8 <_Balloc>
 800756a:	b940      	cbnz	r0, 800757e <__s2b+0x36>
 800756c:	4602      	mov	r2, r0
 800756e:	4b19      	ldr	r3, [pc, #100]	; (80075d4 <__s2b+0x8c>)
 8007570:	4819      	ldr	r0, [pc, #100]	; (80075d8 <__s2b+0x90>)
 8007572:	21ce      	movs	r1, #206	; 0xce
 8007574:	f7ff fb86 	bl	8006c84 <__assert_func>
 8007578:	0052      	lsls	r2, r2, #1
 800757a:	3101      	adds	r1, #1
 800757c:	e7f0      	b.n	8007560 <__s2b+0x18>
 800757e:	9b08      	ldr	r3, [sp, #32]
 8007580:	6143      	str	r3, [r0, #20]
 8007582:	2d09      	cmp	r5, #9
 8007584:	f04f 0301 	mov.w	r3, #1
 8007588:	6103      	str	r3, [r0, #16]
 800758a:	dd16      	ble.n	80075ba <__s2b+0x72>
 800758c:	f104 0909 	add.w	r9, r4, #9
 8007590:	46c8      	mov	r8, r9
 8007592:	442c      	add	r4, r5
 8007594:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007598:	4601      	mov	r1, r0
 800759a:	3b30      	subs	r3, #48	; 0x30
 800759c:	220a      	movs	r2, #10
 800759e:	4630      	mov	r0, r6
 80075a0:	f7ff ff8c 	bl	80074bc <__multadd>
 80075a4:	45a0      	cmp	r8, r4
 80075a6:	d1f5      	bne.n	8007594 <__s2b+0x4c>
 80075a8:	f1a5 0408 	sub.w	r4, r5, #8
 80075ac:	444c      	add	r4, r9
 80075ae:	1b2d      	subs	r5, r5, r4
 80075b0:	1963      	adds	r3, r4, r5
 80075b2:	42bb      	cmp	r3, r7
 80075b4:	db04      	blt.n	80075c0 <__s2b+0x78>
 80075b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075ba:	340a      	adds	r4, #10
 80075bc:	2509      	movs	r5, #9
 80075be:	e7f6      	b.n	80075ae <__s2b+0x66>
 80075c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80075c4:	4601      	mov	r1, r0
 80075c6:	3b30      	subs	r3, #48	; 0x30
 80075c8:	220a      	movs	r2, #10
 80075ca:	4630      	mov	r0, r6
 80075cc:	f7ff ff76 	bl	80074bc <__multadd>
 80075d0:	e7ee      	b.n	80075b0 <__s2b+0x68>
 80075d2:	bf00      	nop
 80075d4:	08009589 	.word	0x08009589
 80075d8:	08009614 	.word	0x08009614

080075dc <__hi0bits>:
 80075dc:	0c03      	lsrs	r3, r0, #16
 80075de:	041b      	lsls	r3, r3, #16
 80075e0:	b9d3      	cbnz	r3, 8007618 <__hi0bits+0x3c>
 80075e2:	0400      	lsls	r0, r0, #16
 80075e4:	2310      	movs	r3, #16
 80075e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80075ea:	bf04      	itt	eq
 80075ec:	0200      	lsleq	r0, r0, #8
 80075ee:	3308      	addeq	r3, #8
 80075f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80075f4:	bf04      	itt	eq
 80075f6:	0100      	lsleq	r0, r0, #4
 80075f8:	3304      	addeq	r3, #4
 80075fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80075fe:	bf04      	itt	eq
 8007600:	0080      	lsleq	r0, r0, #2
 8007602:	3302      	addeq	r3, #2
 8007604:	2800      	cmp	r0, #0
 8007606:	db05      	blt.n	8007614 <__hi0bits+0x38>
 8007608:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800760c:	f103 0301 	add.w	r3, r3, #1
 8007610:	bf08      	it	eq
 8007612:	2320      	moveq	r3, #32
 8007614:	4618      	mov	r0, r3
 8007616:	4770      	bx	lr
 8007618:	2300      	movs	r3, #0
 800761a:	e7e4      	b.n	80075e6 <__hi0bits+0xa>

0800761c <__lo0bits>:
 800761c:	6803      	ldr	r3, [r0, #0]
 800761e:	f013 0207 	ands.w	r2, r3, #7
 8007622:	4601      	mov	r1, r0
 8007624:	d00b      	beq.n	800763e <__lo0bits+0x22>
 8007626:	07da      	lsls	r2, r3, #31
 8007628:	d423      	bmi.n	8007672 <__lo0bits+0x56>
 800762a:	0798      	lsls	r0, r3, #30
 800762c:	bf49      	itett	mi
 800762e:	085b      	lsrmi	r3, r3, #1
 8007630:	089b      	lsrpl	r3, r3, #2
 8007632:	2001      	movmi	r0, #1
 8007634:	600b      	strmi	r3, [r1, #0]
 8007636:	bf5c      	itt	pl
 8007638:	600b      	strpl	r3, [r1, #0]
 800763a:	2002      	movpl	r0, #2
 800763c:	4770      	bx	lr
 800763e:	b298      	uxth	r0, r3
 8007640:	b9a8      	cbnz	r0, 800766e <__lo0bits+0x52>
 8007642:	0c1b      	lsrs	r3, r3, #16
 8007644:	2010      	movs	r0, #16
 8007646:	b2da      	uxtb	r2, r3
 8007648:	b90a      	cbnz	r2, 800764e <__lo0bits+0x32>
 800764a:	3008      	adds	r0, #8
 800764c:	0a1b      	lsrs	r3, r3, #8
 800764e:	071a      	lsls	r2, r3, #28
 8007650:	bf04      	itt	eq
 8007652:	091b      	lsreq	r3, r3, #4
 8007654:	3004      	addeq	r0, #4
 8007656:	079a      	lsls	r2, r3, #30
 8007658:	bf04      	itt	eq
 800765a:	089b      	lsreq	r3, r3, #2
 800765c:	3002      	addeq	r0, #2
 800765e:	07da      	lsls	r2, r3, #31
 8007660:	d403      	bmi.n	800766a <__lo0bits+0x4e>
 8007662:	085b      	lsrs	r3, r3, #1
 8007664:	f100 0001 	add.w	r0, r0, #1
 8007668:	d005      	beq.n	8007676 <__lo0bits+0x5a>
 800766a:	600b      	str	r3, [r1, #0]
 800766c:	4770      	bx	lr
 800766e:	4610      	mov	r0, r2
 8007670:	e7e9      	b.n	8007646 <__lo0bits+0x2a>
 8007672:	2000      	movs	r0, #0
 8007674:	4770      	bx	lr
 8007676:	2020      	movs	r0, #32
 8007678:	4770      	bx	lr
	...

0800767c <__i2b>:
 800767c:	b510      	push	{r4, lr}
 800767e:	460c      	mov	r4, r1
 8007680:	2101      	movs	r1, #1
 8007682:	f7ff feb9 	bl	80073f8 <_Balloc>
 8007686:	4602      	mov	r2, r0
 8007688:	b928      	cbnz	r0, 8007696 <__i2b+0x1a>
 800768a:	4b05      	ldr	r3, [pc, #20]	; (80076a0 <__i2b+0x24>)
 800768c:	4805      	ldr	r0, [pc, #20]	; (80076a4 <__i2b+0x28>)
 800768e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007692:	f7ff faf7 	bl	8006c84 <__assert_func>
 8007696:	2301      	movs	r3, #1
 8007698:	6144      	str	r4, [r0, #20]
 800769a:	6103      	str	r3, [r0, #16]
 800769c:	bd10      	pop	{r4, pc}
 800769e:	bf00      	nop
 80076a0:	08009589 	.word	0x08009589
 80076a4:	08009614 	.word	0x08009614

080076a8 <__multiply>:
 80076a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ac:	4691      	mov	r9, r2
 80076ae:	690a      	ldr	r2, [r1, #16]
 80076b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	bfb8      	it	lt
 80076b8:	460b      	movlt	r3, r1
 80076ba:	460c      	mov	r4, r1
 80076bc:	bfbc      	itt	lt
 80076be:	464c      	movlt	r4, r9
 80076c0:	4699      	movlt	r9, r3
 80076c2:	6927      	ldr	r7, [r4, #16]
 80076c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80076c8:	68a3      	ldr	r3, [r4, #8]
 80076ca:	6861      	ldr	r1, [r4, #4]
 80076cc:	eb07 060a 	add.w	r6, r7, sl
 80076d0:	42b3      	cmp	r3, r6
 80076d2:	b085      	sub	sp, #20
 80076d4:	bfb8      	it	lt
 80076d6:	3101      	addlt	r1, #1
 80076d8:	f7ff fe8e 	bl	80073f8 <_Balloc>
 80076dc:	b930      	cbnz	r0, 80076ec <__multiply+0x44>
 80076de:	4602      	mov	r2, r0
 80076e0:	4b44      	ldr	r3, [pc, #272]	; (80077f4 <__multiply+0x14c>)
 80076e2:	4845      	ldr	r0, [pc, #276]	; (80077f8 <__multiply+0x150>)
 80076e4:	f240 115d 	movw	r1, #349	; 0x15d
 80076e8:	f7ff facc 	bl	8006c84 <__assert_func>
 80076ec:	f100 0514 	add.w	r5, r0, #20
 80076f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80076f4:	462b      	mov	r3, r5
 80076f6:	2200      	movs	r2, #0
 80076f8:	4543      	cmp	r3, r8
 80076fa:	d321      	bcc.n	8007740 <__multiply+0x98>
 80076fc:	f104 0314 	add.w	r3, r4, #20
 8007700:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007704:	f109 0314 	add.w	r3, r9, #20
 8007708:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800770c:	9202      	str	r2, [sp, #8]
 800770e:	1b3a      	subs	r2, r7, r4
 8007710:	3a15      	subs	r2, #21
 8007712:	f022 0203 	bic.w	r2, r2, #3
 8007716:	3204      	adds	r2, #4
 8007718:	f104 0115 	add.w	r1, r4, #21
 800771c:	428f      	cmp	r7, r1
 800771e:	bf38      	it	cc
 8007720:	2204      	movcc	r2, #4
 8007722:	9201      	str	r2, [sp, #4]
 8007724:	9a02      	ldr	r2, [sp, #8]
 8007726:	9303      	str	r3, [sp, #12]
 8007728:	429a      	cmp	r2, r3
 800772a:	d80c      	bhi.n	8007746 <__multiply+0x9e>
 800772c:	2e00      	cmp	r6, #0
 800772e:	dd03      	ble.n	8007738 <__multiply+0x90>
 8007730:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007734:	2b00      	cmp	r3, #0
 8007736:	d05a      	beq.n	80077ee <__multiply+0x146>
 8007738:	6106      	str	r6, [r0, #16]
 800773a:	b005      	add	sp, #20
 800773c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007740:	f843 2b04 	str.w	r2, [r3], #4
 8007744:	e7d8      	b.n	80076f8 <__multiply+0x50>
 8007746:	f8b3 a000 	ldrh.w	sl, [r3]
 800774a:	f1ba 0f00 	cmp.w	sl, #0
 800774e:	d024      	beq.n	800779a <__multiply+0xf2>
 8007750:	f104 0e14 	add.w	lr, r4, #20
 8007754:	46a9      	mov	r9, r5
 8007756:	f04f 0c00 	mov.w	ip, #0
 800775a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800775e:	f8d9 1000 	ldr.w	r1, [r9]
 8007762:	fa1f fb82 	uxth.w	fp, r2
 8007766:	b289      	uxth	r1, r1
 8007768:	fb0a 110b 	mla	r1, sl, fp, r1
 800776c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007770:	f8d9 2000 	ldr.w	r2, [r9]
 8007774:	4461      	add	r1, ip
 8007776:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800777a:	fb0a c20b 	mla	r2, sl, fp, ip
 800777e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007782:	b289      	uxth	r1, r1
 8007784:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007788:	4577      	cmp	r7, lr
 800778a:	f849 1b04 	str.w	r1, [r9], #4
 800778e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007792:	d8e2      	bhi.n	800775a <__multiply+0xb2>
 8007794:	9a01      	ldr	r2, [sp, #4]
 8007796:	f845 c002 	str.w	ip, [r5, r2]
 800779a:	9a03      	ldr	r2, [sp, #12]
 800779c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80077a0:	3304      	adds	r3, #4
 80077a2:	f1b9 0f00 	cmp.w	r9, #0
 80077a6:	d020      	beq.n	80077ea <__multiply+0x142>
 80077a8:	6829      	ldr	r1, [r5, #0]
 80077aa:	f104 0c14 	add.w	ip, r4, #20
 80077ae:	46ae      	mov	lr, r5
 80077b0:	f04f 0a00 	mov.w	sl, #0
 80077b4:	f8bc b000 	ldrh.w	fp, [ip]
 80077b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80077bc:	fb09 220b 	mla	r2, r9, fp, r2
 80077c0:	4492      	add	sl, r2
 80077c2:	b289      	uxth	r1, r1
 80077c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80077c8:	f84e 1b04 	str.w	r1, [lr], #4
 80077cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80077d0:	f8be 1000 	ldrh.w	r1, [lr]
 80077d4:	0c12      	lsrs	r2, r2, #16
 80077d6:	fb09 1102 	mla	r1, r9, r2, r1
 80077da:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80077de:	4567      	cmp	r7, ip
 80077e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80077e4:	d8e6      	bhi.n	80077b4 <__multiply+0x10c>
 80077e6:	9a01      	ldr	r2, [sp, #4]
 80077e8:	50a9      	str	r1, [r5, r2]
 80077ea:	3504      	adds	r5, #4
 80077ec:	e79a      	b.n	8007724 <__multiply+0x7c>
 80077ee:	3e01      	subs	r6, #1
 80077f0:	e79c      	b.n	800772c <__multiply+0x84>
 80077f2:	bf00      	nop
 80077f4:	08009589 	.word	0x08009589
 80077f8:	08009614 	.word	0x08009614

080077fc <__pow5mult>:
 80077fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007800:	4615      	mov	r5, r2
 8007802:	f012 0203 	ands.w	r2, r2, #3
 8007806:	4606      	mov	r6, r0
 8007808:	460f      	mov	r7, r1
 800780a:	d007      	beq.n	800781c <__pow5mult+0x20>
 800780c:	4c25      	ldr	r4, [pc, #148]	; (80078a4 <__pow5mult+0xa8>)
 800780e:	3a01      	subs	r2, #1
 8007810:	2300      	movs	r3, #0
 8007812:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007816:	f7ff fe51 	bl	80074bc <__multadd>
 800781a:	4607      	mov	r7, r0
 800781c:	10ad      	asrs	r5, r5, #2
 800781e:	d03d      	beq.n	800789c <__pow5mult+0xa0>
 8007820:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007822:	b97c      	cbnz	r4, 8007844 <__pow5mult+0x48>
 8007824:	2010      	movs	r0, #16
 8007826:	f7ff fdcd 	bl	80073c4 <malloc>
 800782a:	4602      	mov	r2, r0
 800782c:	6270      	str	r0, [r6, #36]	; 0x24
 800782e:	b928      	cbnz	r0, 800783c <__pow5mult+0x40>
 8007830:	4b1d      	ldr	r3, [pc, #116]	; (80078a8 <__pow5mult+0xac>)
 8007832:	481e      	ldr	r0, [pc, #120]	; (80078ac <__pow5mult+0xb0>)
 8007834:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007838:	f7ff fa24 	bl	8006c84 <__assert_func>
 800783c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007840:	6004      	str	r4, [r0, #0]
 8007842:	60c4      	str	r4, [r0, #12]
 8007844:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007848:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800784c:	b94c      	cbnz	r4, 8007862 <__pow5mult+0x66>
 800784e:	f240 2171 	movw	r1, #625	; 0x271
 8007852:	4630      	mov	r0, r6
 8007854:	f7ff ff12 	bl	800767c <__i2b>
 8007858:	2300      	movs	r3, #0
 800785a:	f8c8 0008 	str.w	r0, [r8, #8]
 800785e:	4604      	mov	r4, r0
 8007860:	6003      	str	r3, [r0, #0]
 8007862:	f04f 0900 	mov.w	r9, #0
 8007866:	07eb      	lsls	r3, r5, #31
 8007868:	d50a      	bpl.n	8007880 <__pow5mult+0x84>
 800786a:	4639      	mov	r1, r7
 800786c:	4622      	mov	r2, r4
 800786e:	4630      	mov	r0, r6
 8007870:	f7ff ff1a 	bl	80076a8 <__multiply>
 8007874:	4639      	mov	r1, r7
 8007876:	4680      	mov	r8, r0
 8007878:	4630      	mov	r0, r6
 800787a:	f7ff fdfd 	bl	8007478 <_Bfree>
 800787e:	4647      	mov	r7, r8
 8007880:	106d      	asrs	r5, r5, #1
 8007882:	d00b      	beq.n	800789c <__pow5mult+0xa0>
 8007884:	6820      	ldr	r0, [r4, #0]
 8007886:	b938      	cbnz	r0, 8007898 <__pow5mult+0x9c>
 8007888:	4622      	mov	r2, r4
 800788a:	4621      	mov	r1, r4
 800788c:	4630      	mov	r0, r6
 800788e:	f7ff ff0b 	bl	80076a8 <__multiply>
 8007892:	6020      	str	r0, [r4, #0]
 8007894:	f8c0 9000 	str.w	r9, [r0]
 8007898:	4604      	mov	r4, r0
 800789a:	e7e4      	b.n	8007866 <__pow5mult+0x6a>
 800789c:	4638      	mov	r0, r7
 800789e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078a2:	bf00      	nop
 80078a4:	08009760 	.word	0x08009760
 80078a8:	080093d8 	.word	0x080093d8
 80078ac:	08009614 	.word	0x08009614

080078b0 <__lshift>:
 80078b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078b4:	460c      	mov	r4, r1
 80078b6:	6849      	ldr	r1, [r1, #4]
 80078b8:	6923      	ldr	r3, [r4, #16]
 80078ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80078be:	68a3      	ldr	r3, [r4, #8]
 80078c0:	4607      	mov	r7, r0
 80078c2:	4691      	mov	r9, r2
 80078c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078c8:	f108 0601 	add.w	r6, r8, #1
 80078cc:	42b3      	cmp	r3, r6
 80078ce:	db0b      	blt.n	80078e8 <__lshift+0x38>
 80078d0:	4638      	mov	r0, r7
 80078d2:	f7ff fd91 	bl	80073f8 <_Balloc>
 80078d6:	4605      	mov	r5, r0
 80078d8:	b948      	cbnz	r0, 80078ee <__lshift+0x3e>
 80078da:	4602      	mov	r2, r0
 80078dc:	4b2a      	ldr	r3, [pc, #168]	; (8007988 <__lshift+0xd8>)
 80078de:	482b      	ldr	r0, [pc, #172]	; (800798c <__lshift+0xdc>)
 80078e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80078e4:	f7ff f9ce 	bl	8006c84 <__assert_func>
 80078e8:	3101      	adds	r1, #1
 80078ea:	005b      	lsls	r3, r3, #1
 80078ec:	e7ee      	b.n	80078cc <__lshift+0x1c>
 80078ee:	2300      	movs	r3, #0
 80078f0:	f100 0114 	add.w	r1, r0, #20
 80078f4:	f100 0210 	add.w	r2, r0, #16
 80078f8:	4618      	mov	r0, r3
 80078fa:	4553      	cmp	r3, sl
 80078fc:	db37      	blt.n	800796e <__lshift+0xbe>
 80078fe:	6920      	ldr	r0, [r4, #16]
 8007900:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007904:	f104 0314 	add.w	r3, r4, #20
 8007908:	f019 091f 	ands.w	r9, r9, #31
 800790c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007910:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007914:	d02f      	beq.n	8007976 <__lshift+0xc6>
 8007916:	f1c9 0e20 	rsb	lr, r9, #32
 800791a:	468a      	mov	sl, r1
 800791c:	f04f 0c00 	mov.w	ip, #0
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	fa02 f209 	lsl.w	r2, r2, r9
 8007926:	ea42 020c 	orr.w	r2, r2, ip
 800792a:	f84a 2b04 	str.w	r2, [sl], #4
 800792e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007932:	4298      	cmp	r0, r3
 8007934:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007938:	d8f2      	bhi.n	8007920 <__lshift+0x70>
 800793a:	1b03      	subs	r3, r0, r4
 800793c:	3b15      	subs	r3, #21
 800793e:	f023 0303 	bic.w	r3, r3, #3
 8007942:	3304      	adds	r3, #4
 8007944:	f104 0215 	add.w	r2, r4, #21
 8007948:	4290      	cmp	r0, r2
 800794a:	bf38      	it	cc
 800794c:	2304      	movcc	r3, #4
 800794e:	f841 c003 	str.w	ip, [r1, r3]
 8007952:	f1bc 0f00 	cmp.w	ip, #0
 8007956:	d001      	beq.n	800795c <__lshift+0xac>
 8007958:	f108 0602 	add.w	r6, r8, #2
 800795c:	3e01      	subs	r6, #1
 800795e:	4638      	mov	r0, r7
 8007960:	612e      	str	r6, [r5, #16]
 8007962:	4621      	mov	r1, r4
 8007964:	f7ff fd88 	bl	8007478 <_Bfree>
 8007968:	4628      	mov	r0, r5
 800796a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800796e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007972:	3301      	adds	r3, #1
 8007974:	e7c1      	b.n	80078fa <__lshift+0x4a>
 8007976:	3904      	subs	r1, #4
 8007978:	f853 2b04 	ldr.w	r2, [r3], #4
 800797c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007980:	4298      	cmp	r0, r3
 8007982:	d8f9      	bhi.n	8007978 <__lshift+0xc8>
 8007984:	e7ea      	b.n	800795c <__lshift+0xac>
 8007986:	bf00      	nop
 8007988:	08009589 	.word	0x08009589
 800798c:	08009614 	.word	0x08009614

08007990 <__mcmp>:
 8007990:	b530      	push	{r4, r5, lr}
 8007992:	6902      	ldr	r2, [r0, #16]
 8007994:	690c      	ldr	r4, [r1, #16]
 8007996:	1b12      	subs	r2, r2, r4
 8007998:	d10e      	bne.n	80079b8 <__mcmp+0x28>
 800799a:	f100 0314 	add.w	r3, r0, #20
 800799e:	3114      	adds	r1, #20
 80079a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80079a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80079a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80079ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80079b0:	42a5      	cmp	r5, r4
 80079b2:	d003      	beq.n	80079bc <__mcmp+0x2c>
 80079b4:	d305      	bcc.n	80079c2 <__mcmp+0x32>
 80079b6:	2201      	movs	r2, #1
 80079b8:	4610      	mov	r0, r2
 80079ba:	bd30      	pop	{r4, r5, pc}
 80079bc:	4283      	cmp	r3, r0
 80079be:	d3f3      	bcc.n	80079a8 <__mcmp+0x18>
 80079c0:	e7fa      	b.n	80079b8 <__mcmp+0x28>
 80079c2:	f04f 32ff 	mov.w	r2, #4294967295
 80079c6:	e7f7      	b.n	80079b8 <__mcmp+0x28>

080079c8 <__mdiff>:
 80079c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079cc:	460c      	mov	r4, r1
 80079ce:	4606      	mov	r6, r0
 80079d0:	4611      	mov	r1, r2
 80079d2:	4620      	mov	r0, r4
 80079d4:	4690      	mov	r8, r2
 80079d6:	f7ff ffdb 	bl	8007990 <__mcmp>
 80079da:	1e05      	subs	r5, r0, #0
 80079dc:	d110      	bne.n	8007a00 <__mdiff+0x38>
 80079de:	4629      	mov	r1, r5
 80079e0:	4630      	mov	r0, r6
 80079e2:	f7ff fd09 	bl	80073f8 <_Balloc>
 80079e6:	b930      	cbnz	r0, 80079f6 <__mdiff+0x2e>
 80079e8:	4b3a      	ldr	r3, [pc, #232]	; (8007ad4 <__mdiff+0x10c>)
 80079ea:	4602      	mov	r2, r0
 80079ec:	f240 2132 	movw	r1, #562	; 0x232
 80079f0:	4839      	ldr	r0, [pc, #228]	; (8007ad8 <__mdiff+0x110>)
 80079f2:	f7ff f947 	bl	8006c84 <__assert_func>
 80079f6:	2301      	movs	r3, #1
 80079f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80079fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a00:	bfa4      	itt	ge
 8007a02:	4643      	movge	r3, r8
 8007a04:	46a0      	movge	r8, r4
 8007a06:	4630      	mov	r0, r6
 8007a08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007a0c:	bfa6      	itte	ge
 8007a0e:	461c      	movge	r4, r3
 8007a10:	2500      	movge	r5, #0
 8007a12:	2501      	movlt	r5, #1
 8007a14:	f7ff fcf0 	bl	80073f8 <_Balloc>
 8007a18:	b920      	cbnz	r0, 8007a24 <__mdiff+0x5c>
 8007a1a:	4b2e      	ldr	r3, [pc, #184]	; (8007ad4 <__mdiff+0x10c>)
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007a22:	e7e5      	b.n	80079f0 <__mdiff+0x28>
 8007a24:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007a28:	6926      	ldr	r6, [r4, #16]
 8007a2a:	60c5      	str	r5, [r0, #12]
 8007a2c:	f104 0914 	add.w	r9, r4, #20
 8007a30:	f108 0514 	add.w	r5, r8, #20
 8007a34:	f100 0e14 	add.w	lr, r0, #20
 8007a38:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007a3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007a40:	f108 0210 	add.w	r2, r8, #16
 8007a44:	46f2      	mov	sl, lr
 8007a46:	2100      	movs	r1, #0
 8007a48:	f859 3b04 	ldr.w	r3, [r9], #4
 8007a4c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007a50:	fa1f f883 	uxth.w	r8, r3
 8007a54:	fa11 f18b 	uxtah	r1, r1, fp
 8007a58:	0c1b      	lsrs	r3, r3, #16
 8007a5a:	eba1 0808 	sub.w	r8, r1, r8
 8007a5e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007a62:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007a66:	fa1f f888 	uxth.w	r8, r8
 8007a6a:	1419      	asrs	r1, r3, #16
 8007a6c:	454e      	cmp	r6, r9
 8007a6e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007a72:	f84a 3b04 	str.w	r3, [sl], #4
 8007a76:	d8e7      	bhi.n	8007a48 <__mdiff+0x80>
 8007a78:	1b33      	subs	r3, r6, r4
 8007a7a:	3b15      	subs	r3, #21
 8007a7c:	f023 0303 	bic.w	r3, r3, #3
 8007a80:	3304      	adds	r3, #4
 8007a82:	3415      	adds	r4, #21
 8007a84:	42a6      	cmp	r6, r4
 8007a86:	bf38      	it	cc
 8007a88:	2304      	movcc	r3, #4
 8007a8a:	441d      	add	r5, r3
 8007a8c:	4473      	add	r3, lr
 8007a8e:	469e      	mov	lr, r3
 8007a90:	462e      	mov	r6, r5
 8007a92:	4566      	cmp	r6, ip
 8007a94:	d30e      	bcc.n	8007ab4 <__mdiff+0xec>
 8007a96:	f10c 0203 	add.w	r2, ip, #3
 8007a9a:	1b52      	subs	r2, r2, r5
 8007a9c:	f022 0203 	bic.w	r2, r2, #3
 8007aa0:	3d03      	subs	r5, #3
 8007aa2:	45ac      	cmp	ip, r5
 8007aa4:	bf38      	it	cc
 8007aa6:	2200      	movcc	r2, #0
 8007aa8:	441a      	add	r2, r3
 8007aaa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007aae:	b17b      	cbz	r3, 8007ad0 <__mdiff+0x108>
 8007ab0:	6107      	str	r7, [r0, #16]
 8007ab2:	e7a3      	b.n	80079fc <__mdiff+0x34>
 8007ab4:	f856 8b04 	ldr.w	r8, [r6], #4
 8007ab8:	fa11 f288 	uxtah	r2, r1, r8
 8007abc:	1414      	asrs	r4, r2, #16
 8007abe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007ac2:	b292      	uxth	r2, r2
 8007ac4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007ac8:	f84e 2b04 	str.w	r2, [lr], #4
 8007acc:	1421      	asrs	r1, r4, #16
 8007ace:	e7e0      	b.n	8007a92 <__mdiff+0xca>
 8007ad0:	3f01      	subs	r7, #1
 8007ad2:	e7ea      	b.n	8007aaa <__mdiff+0xe2>
 8007ad4:	08009589 	.word	0x08009589
 8007ad8:	08009614 	.word	0x08009614

08007adc <__ulp>:
 8007adc:	b082      	sub	sp, #8
 8007ade:	ed8d 0b00 	vstr	d0, [sp]
 8007ae2:	9b01      	ldr	r3, [sp, #4]
 8007ae4:	4912      	ldr	r1, [pc, #72]	; (8007b30 <__ulp+0x54>)
 8007ae6:	4019      	ands	r1, r3
 8007ae8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007aec:	2900      	cmp	r1, #0
 8007aee:	dd05      	ble.n	8007afc <__ulp+0x20>
 8007af0:	2200      	movs	r2, #0
 8007af2:	460b      	mov	r3, r1
 8007af4:	ec43 2b10 	vmov	d0, r2, r3
 8007af8:	b002      	add	sp, #8
 8007afa:	4770      	bx	lr
 8007afc:	4249      	negs	r1, r1
 8007afe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007b02:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007b06:	f04f 0200 	mov.w	r2, #0
 8007b0a:	f04f 0300 	mov.w	r3, #0
 8007b0e:	da04      	bge.n	8007b1a <__ulp+0x3e>
 8007b10:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007b14:	fa41 f300 	asr.w	r3, r1, r0
 8007b18:	e7ec      	b.n	8007af4 <__ulp+0x18>
 8007b1a:	f1a0 0114 	sub.w	r1, r0, #20
 8007b1e:	291e      	cmp	r1, #30
 8007b20:	bfda      	itte	le
 8007b22:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007b26:	fa20 f101 	lsrle.w	r1, r0, r1
 8007b2a:	2101      	movgt	r1, #1
 8007b2c:	460a      	mov	r2, r1
 8007b2e:	e7e1      	b.n	8007af4 <__ulp+0x18>
 8007b30:	7ff00000 	.word	0x7ff00000

08007b34 <__b2d>:
 8007b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b36:	6905      	ldr	r5, [r0, #16]
 8007b38:	f100 0714 	add.w	r7, r0, #20
 8007b3c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007b40:	1f2e      	subs	r6, r5, #4
 8007b42:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007b46:	4620      	mov	r0, r4
 8007b48:	f7ff fd48 	bl	80075dc <__hi0bits>
 8007b4c:	f1c0 0320 	rsb	r3, r0, #32
 8007b50:	280a      	cmp	r0, #10
 8007b52:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007bd0 <__b2d+0x9c>
 8007b56:	600b      	str	r3, [r1, #0]
 8007b58:	dc14      	bgt.n	8007b84 <__b2d+0x50>
 8007b5a:	f1c0 0e0b 	rsb	lr, r0, #11
 8007b5e:	fa24 f10e 	lsr.w	r1, r4, lr
 8007b62:	42b7      	cmp	r7, r6
 8007b64:	ea41 030c 	orr.w	r3, r1, ip
 8007b68:	bf34      	ite	cc
 8007b6a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007b6e:	2100      	movcs	r1, #0
 8007b70:	3015      	adds	r0, #21
 8007b72:	fa04 f000 	lsl.w	r0, r4, r0
 8007b76:	fa21 f10e 	lsr.w	r1, r1, lr
 8007b7a:	ea40 0201 	orr.w	r2, r0, r1
 8007b7e:	ec43 2b10 	vmov	d0, r2, r3
 8007b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b84:	42b7      	cmp	r7, r6
 8007b86:	bf3a      	itte	cc
 8007b88:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007b8c:	f1a5 0608 	subcc.w	r6, r5, #8
 8007b90:	2100      	movcs	r1, #0
 8007b92:	380b      	subs	r0, #11
 8007b94:	d017      	beq.n	8007bc6 <__b2d+0x92>
 8007b96:	f1c0 0c20 	rsb	ip, r0, #32
 8007b9a:	fa04 f500 	lsl.w	r5, r4, r0
 8007b9e:	42be      	cmp	r6, r7
 8007ba0:	fa21 f40c 	lsr.w	r4, r1, ip
 8007ba4:	ea45 0504 	orr.w	r5, r5, r4
 8007ba8:	bf8c      	ite	hi
 8007baa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007bae:	2400      	movls	r4, #0
 8007bb0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007bb4:	fa01 f000 	lsl.w	r0, r1, r0
 8007bb8:	fa24 f40c 	lsr.w	r4, r4, ip
 8007bbc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007bc0:	ea40 0204 	orr.w	r2, r0, r4
 8007bc4:	e7db      	b.n	8007b7e <__b2d+0x4a>
 8007bc6:	ea44 030c 	orr.w	r3, r4, ip
 8007bca:	460a      	mov	r2, r1
 8007bcc:	e7d7      	b.n	8007b7e <__b2d+0x4a>
 8007bce:	bf00      	nop
 8007bd0:	3ff00000 	.word	0x3ff00000

08007bd4 <__d2b>:
 8007bd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007bd8:	4689      	mov	r9, r1
 8007bda:	2101      	movs	r1, #1
 8007bdc:	ec57 6b10 	vmov	r6, r7, d0
 8007be0:	4690      	mov	r8, r2
 8007be2:	f7ff fc09 	bl	80073f8 <_Balloc>
 8007be6:	4604      	mov	r4, r0
 8007be8:	b930      	cbnz	r0, 8007bf8 <__d2b+0x24>
 8007bea:	4602      	mov	r2, r0
 8007bec:	4b25      	ldr	r3, [pc, #148]	; (8007c84 <__d2b+0xb0>)
 8007bee:	4826      	ldr	r0, [pc, #152]	; (8007c88 <__d2b+0xb4>)
 8007bf0:	f240 310a 	movw	r1, #778	; 0x30a
 8007bf4:	f7ff f846 	bl	8006c84 <__assert_func>
 8007bf8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007bfc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c00:	bb35      	cbnz	r5, 8007c50 <__d2b+0x7c>
 8007c02:	2e00      	cmp	r6, #0
 8007c04:	9301      	str	r3, [sp, #4]
 8007c06:	d028      	beq.n	8007c5a <__d2b+0x86>
 8007c08:	4668      	mov	r0, sp
 8007c0a:	9600      	str	r6, [sp, #0]
 8007c0c:	f7ff fd06 	bl	800761c <__lo0bits>
 8007c10:	9900      	ldr	r1, [sp, #0]
 8007c12:	b300      	cbz	r0, 8007c56 <__d2b+0x82>
 8007c14:	9a01      	ldr	r2, [sp, #4]
 8007c16:	f1c0 0320 	rsb	r3, r0, #32
 8007c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1e:	430b      	orrs	r3, r1
 8007c20:	40c2      	lsrs	r2, r0
 8007c22:	6163      	str	r3, [r4, #20]
 8007c24:	9201      	str	r2, [sp, #4]
 8007c26:	9b01      	ldr	r3, [sp, #4]
 8007c28:	61a3      	str	r3, [r4, #24]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	bf14      	ite	ne
 8007c2e:	2202      	movne	r2, #2
 8007c30:	2201      	moveq	r2, #1
 8007c32:	6122      	str	r2, [r4, #16]
 8007c34:	b1d5      	cbz	r5, 8007c6c <__d2b+0x98>
 8007c36:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007c3a:	4405      	add	r5, r0
 8007c3c:	f8c9 5000 	str.w	r5, [r9]
 8007c40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c44:	f8c8 0000 	str.w	r0, [r8]
 8007c48:	4620      	mov	r0, r4
 8007c4a:	b003      	add	sp, #12
 8007c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c54:	e7d5      	b.n	8007c02 <__d2b+0x2e>
 8007c56:	6161      	str	r1, [r4, #20]
 8007c58:	e7e5      	b.n	8007c26 <__d2b+0x52>
 8007c5a:	a801      	add	r0, sp, #4
 8007c5c:	f7ff fcde 	bl	800761c <__lo0bits>
 8007c60:	9b01      	ldr	r3, [sp, #4]
 8007c62:	6163      	str	r3, [r4, #20]
 8007c64:	2201      	movs	r2, #1
 8007c66:	6122      	str	r2, [r4, #16]
 8007c68:	3020      	adds	r0, #32
 8007c6a:	e7e3      	b.n	8007c34 <__d2b+0x60>
 8007c6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c74:	f8c9 0000 	str.w	r0, [r9]
 8007c78:	6918      	ldr	r0, [r3, #16]
 8007c7a:	f7ff fcaf 	bl	80075dc <__hi0bits>
 8007c7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c82:	e7df      	b.n	8007c44 <__d2b+0x70>
 8007c84:	08009589 	.word	0x08009589
 8007c88:	08009614 	.word	0x08009614

08007c8c <__ratio>:
 8007c8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c90:	4688      	mov	r8, r1
 8007c92:	4669      	mov	r1, sp
 8007c94:	4681      	mov	r9, r0
 8007c96:	f7ff ff4d 	bl	8007b34 <__b2d>
 8007c9a:	a901      	add	r1, sp, #4
 8007c9c:	4640      	mov	r0, r8
 8007c9e:	ec55 4b10 	vmov	r4, r5, d0
 8007ca2:	f7ff ff47 	bl	8007b34 <__b2d>
 8007ca6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007caa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007cae:	eba3 0c02 	sub.w	ip, r3, r2
 8007cb2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007cb6:	1a9b      	subs	r3, r3, r2
 8007cb8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007cbc:	ec51 0b10 	vmov	r0, r1, d0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	bfd6      	itet	le
 8007cc4:	460a      	movle	r2, r1
 8007cc6:	462a      	movgt	r2, r5
 8007cc8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007ccc:	468b      	mov	fp, r1
 8007cce:	462f      	mov	r7, r5
 8007cd0:	bfd4      	ite	le
 8007cd2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007cd6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007cda:	4620      	mov	r0, r4
 8007cdc:	ee10 2a10 	vmov	r2, s0
 8007ce0:	465b      	mov	r3, fp
 8007ce2:	4639      	mov	r1, r7
 8007ce4:	f7f8 fdb2 	bl	800084c <__aeabi_ddiv>
 8007ce8:	ec41 0b10 	vmov	d0, r0, r1
 8007cec:	b003      	add	sp, #12
 8007cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007cf2 <__copybits>:
 8007cf2:	3901      	subs	r1, #1
 8007cf4:	b570      	push	{r4, r5, r6, lr}
 8007cf6:	1149      	asrs	r1, r1, #5
 8007cf8:	6914      	ldr	r4, [r2, #16]
 8007cfa:	3101      	adds	r1, #1
 8007cfc:	f102 0314 	add.w	r3, r2, #20
 8007d00:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007d04:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007d08:	1f05      	subs	r5, r0, #4
 8007d0a:	42a3      	cmp	r3, r4
 8007d0c:	d30c      	bcc.n	8007d28 <__copybits+0x36>
 8007d0e:	1aa3      	subs	r3, r4, r2
 8007d10:	3b11      	subs	r3, #17
 8007d12:	f023 0303 	bic.w	r3, r3, #3
 8007d16:	3211      	adds	r2, #17
 8007d18:	42a2      	cmp	r2, r4
 8007d1a:	bf88      	it	hi
 8007d1c:	2300      	movhi	r3, #0
 8007d1e:	4418      	add	r0, r3
 8007d20:	2300      	movs	r3, #0
 8007d22:	4288      	cmp	r0, r1
 8007d24:	d305      	bcc.n	8007d32 <__copybits+0x40>
 8007d26:	bd70      	pop	{r4, r5, r6, pc}
 8007d28:	f853 6b04 	ldr.w	r6, [r3], #4
 8007d2c:	f845 6f04 	str.w	r6, [r5, #4]!
 8007d30:	e7eb      	b.n	8007d0a <__copybits+0x18>
 8007d32:	f840 3b04 	str.w	r3, [r0], #4
 8007d36:	e7f4      	b.n	8007d22 <__copybits+0x30>

08007d38 <__any_on>:
 8007d38:	f100 0214 	add.w	r2, r0, #20
 8007d3c:	6900      	ldr	r0, [r0, #16]
 8007d3e:	114b      	asrs	r3, r1, #5
 8007d40:	4298      	cmp	r0, r3
 8007d42:	b510      	push	{r4, lr}
 8007d44:	db11      	blt.n	8007d6a <__any_on+0x32>
 8007d46:	dd0a      	ble.n	8007d5e <__any_on+0x26>
 8007d48:	f011 011f 	ands.w	r1, r1, #31
 8007d4c:	d007      	beq.n	8007d5e <__any_on+0x26>
 8007d4e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007d52:	fa24 f001 	lsr.w	r0, r4, r1
 8007d56:	fa00 f101 	lsl.w	r1, r0, r1
 8007d5a:	428c      	cmp	r4, r1
 8007d5c:	d10b      	bne.n	8007d76 <__any_on+0x3e>
 8007d5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d803      	bhi.n	8007d6e <__any_on+0x36>
 8007d66:	2000      	movs	r0, #0
 8007d68:	bd10      	pop	{r4, pc}
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	e7f7      	b.n	8007d5e <__any_on+0x26>
 8007d6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007d72:	2900      	cmp	r1, #0
 8007d74:	d0f5      	beq.n	8007d62 <__any_on+0x2a>
 8007d76:	2001      	movs	r0, #1
 8007d78:	e7f6      	b.n	8007d68 <__any_on+0x30>

08007d7a <_calloc_r>:
 8007d7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d7c:	fba1 2402 	umull	r2, r4, r1, r2
 8007d80:	b94c      	cbnz	r4, 8007d96 <_calloc_r+0x1c>
 8007d82:	4611      	mov	r1, r2
 8007d84:	9201      	str	r2, [sp, #4]
 8007d86:	f000 f87b 	bl	8007e80 <_malloc_r>
 8007d8a:	9a01      	ldr	r2, [sp, #4]
 8007d8c:	4605      	mov	r5, r0
 8007d8e:	b930      	cbnz	r0, 8007d9e <_calloc_r+0x24>
 8007d90:	4628      	mov	r0, r5
 8007d92:	b003      	add	sp, #12
 8007d94:	bd30      	pop	{r4, r5, pc}
 8007d96:	220c      	movs	r2, #12
 8007d98:	6002      	str	r2, [r0, #0]
 8007d9a:	2500      	movs	r5, #0
 8007d9c:	e7f8      	b.n	8007d90 <_calloc_r+0x16>
 8007d9e:	4621      	mov	r1, r4
 8007da0:	f7fd ffb8 	bl	8005d14 <memset>
 8007da4:	e7f4      	b.n	8007d90 <_calloc_r+0x16>
	...

08007da8 <_free_r>:
 8007da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007daa:	2900      	cmp	r1, #0
 8007dac:	d044      	beq.n	8007e38 <_free_r+0x90>
 8007dae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007db2:	9001      	str	r0, [sp, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f1a1 0404 	sub.w	r4, r1, #4
 8007dba:	bfb8      	it	lt
 8007dbc:	18e4      	addlt	r4, r4, r3
 8007dbe:	f001 f84d 	bl	8008e5c <__malloc_lock>
 8007dc2:	4a1e      	ldr	r2, [pc, #120]	; (8007e3c <_free_r+0x94>)
 8007dc4:	9801      	ldr	r0, [sp, #4]
 8007dc6:	6813      	ldr	r3, [r2, #0]
 8007dc8:	b933      	cbnz	r3, 8007dd8 <_free_r+0x30>
 8007dca:	6063      	str	r3, [r4, #4]
 8007dcc:	6014      	str	r4, [r2, #0]
 8007dce:	b003      	add	sp, #12
 8007dd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007dd4:	f001 b848 	b.w	8008e68 <__malloc_unlock>
 8007dd8:	42a3      	cmp	r3, r4
 8007dda:	d908      	bls.n	8007dee <_free_r+0x46>
 8007ddc:	6825      	ldr	r5, [r4, #0]
 8007dde:	1961      	adds	r1, r4, r5
 8007de0:	428b      	cmp	r3, r1
 8007de2:	bf01      	itttt	eq
 8007de4:	6819      	ldreq	r1, [r3, #0]
 8007de6:	685b      	ldreq	r3, [r3, #4]
 8007de8:	1949      	addeq	r1, r1, r5
 8007dea:	6021      	streq	r1, [r4, #0]
 8007dec:	e7ed      	b.n	8007dca <_free_r+0x22>
 8007dee:	461a      	mov	r2, r3
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	b10b      	cbz	r3, 8007df8 <_free_r+0x50>
 8007df4:	42a3      	cmp	r3, r4
 8007df6:	d9fa      	bls.n	8007dee <_free_r+0x46>
 8007df8:	6811      	ldr	r1, [r2, #0]
 8007dfa:	1855      	adds	r5, r2, r1
 8007dfc:	42a5      	cmp	r5, r4
 8007dfe:	d10b      	bne.n	8007e18 <_free_r+0x70>
 8007e00:	6824      	ldr	r4, [r4, #0]
 8007e02:	4421      	add	r1, r4
 8007e04:	1854      	adds	r4, r2, r1
 8007e06:	42a3      	cmp	r3, r4
 8007e08:	6011      	str	r1, [r2, #0]
 8007e0a:	d1e0      	bne.n	8007dce <_free_r+0x26>
 8007e0c:	681c      	ldr	r4, [r3, #0]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	6053      	str	r3, [r2, #4]
 8007e12:	4421      	add	r1, r4
 8007e14:	6011      	str	r1, [r2, #0]
 8007e16:	e7da      	b.n	8007dce <_free_r+0x26>
 8007e18:	d902      	bls.n	8007e20 <_free_r+0x78>
 8007e1a:	230c      	movs	r3, #12
 8007e1c:	6003      	str	r3, [r0, #0]
 8007e1e:	e7d6      	b.n	8007dce <_free_r+0x26>
 8007e20:	6825      	ldr	r5, [r4, #0]
 8007e22:	1961      	adds	r1, r4, r5
 8007e24:	428b      	cmp	r3, r1
 8007e26:	bf04      	itt	eq
 8007e28:	6819      	ldreq	r1, [r3, #0]
 8007e2a:	685b      	ldreq	r3, [r3, #4]
 8007e2c:	6063      	str	r3, [r4, #4]
 8007e2e:	bf04      	itt	eq
 8007e30:	1949      	addeq	r1, r1, r5
 8007e32:	6021      	streq	r1, [r4, #0]
 8007e34:	6054      	str	r4, [r2, #4]
 8007e36:	e7ca      	b.n	8007dce <_free_r+0x26>
 8007e38:	b003      	add	sp, #12
 8007e3a:	bd30      	pop	{r4, r5, pc}
 8007e3c:	200006b4 	.word	0x200006b4

08007e40 <sbrk_aligned>:
 8007e40:	b570      	push	{r4, r5, r6, lr}
 8007e42:	4e0e      	ldr	r6, [pc, #56]	; (8007e7c <sbrk_aligned+0x3c>)
 8007e44:	460c      	mov	r4, r1
 8007e46:	6831      	ldr	r1, [r6, #0]
 8007e48:	4605      	mov	r5, r0
 8007e4a:	b911      	cbnz	r1, 8007e52 <sbrk_aligned+0x12>
 8007e4c:	f000 fce0 	bl	8008810 <_sbrk_r>
 8007e50:	6030      	str	r0, [r6, #0]
 8007e52:	4621      	mov	r1, r4
 8007e54:	4628      	mov	r0, r5
 8007e56:	f000 fcdb 	bl	8008810 <_sbrk_r>
 8007e5a:	1c43      	adds	r3, r0, #1
 8007e5c:	d00a      	beq.n	8007e74 <sbrk_aligned+0x34>
 8007e5e:	1cc4      	adds	r4, r0, #3
 8007e60:	f024 0403 	bic.w	r4, r4, #3
 8007e64:	42a0      	cmp	r0, r4
 8007e66:	d007      	beq.n	8007e78 <sbrk_aligned+0x38>
 8007e68:	1a21      	subs	r1, r4, r0
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	f000 fcd0 	bl	8008810 <_sbrk_r>
 8007e70:	3001      	adds	r0, #1
 8007e72:	d101      	bne.n	8007e78 <sbrk_aligned+0x38>
 8007e74:	f04f 34ff 	mov.w	r4, #4294967295
 8007e78:	4620      	mov	r0, r4
 8007e7a:	bd70      	pop	{r4, r5, r6, pc}
 8007e7c:	200006b8 	.word	0x200006b8

08007e80 <_malloc_r>:
 8007e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e84:	1ccd      	adds	r5, r1, #3
 8007e86:	f025 0503 	bic.w	r5, r5, #3
 8007e8a:	3508      	adds	r5, #8
 8007e8c:	2d0c      	cmp	r5, #12
 8007e8e:	bf38      	it	cc
 8007e90:	250c      	movcc	r5, #12
 8007e92:	2d00      	cmp	r5, #0
 8007e94:	4607      	mov	r7, r0
 8007e96:	db01      	blt.n	8007e9c <_malloc_r+0x1c>
 8007e98:	42a9      	cmp	r1, r5
 8007e9a:	d905      	bls.n	8007ea8 <_malloc_r+0x28>
 8007e9c:	230c      	movs	r3, #12
 8007e9e:	603b      	str	r3, [r7, #0]
 8007ea0:	2600      	movs	r6, #0
 8007ea2:	4630      	mov	r0, r6
 8007ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ea8:	4e2e      	ldr	r6, [pc, #184]	; (8007f64 <_malloc_r+0xe4>)
 8007eaa:	f000 ffd7 	bl	8008e5c <__malloc_lock>
 8007eae:	6833      	ldr	r3, [r6, #0]
 8007eb0:	461c      	mov	r4, r3
 8007eb2:	bb34      	cbnz	r4, 8007f02 <_malloc_r+0x82>
 8007eb4:	4629      	mov	r1, r5
 8007eb6:	4638      	mov	r0, r7
 8007eb8:	f7ff ffc2 	bl	8007e40 <sbrk_aligned>
 8007ebc:	1c43      	adds	r3, r0, #1
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	d14d      	bne.n	8007f5e <_malloc_r+0xde>
 8007ec2:	6834      	ldr	r4, [r6, #0]
 8007ec4:	4626      	mov	r6, r4
 8007ec6:	2e00      	cmp	r6, #0
 8007ec8:	d140      	bne.n	8007f4c <_malloc_r+0xcc>
 8007eca:	6823      	ldr	r3, [r4, #0]
 8007ecc:	4631      	mov	r1, r6
 8007ece:	4638      	mov	r0, r7
 8007ed0:	eb04 0803 	add.w	r8, r4, r3
 8007ed4:	f000 fc9c 	bl	8008810 <_sbrk_r>
 8007ed8:	4580      	cmp	r8, r0
 8007eda:	d13a      	bne.n	8007f52 <_malloc_r+0xd2>
 8007edc:	6821      	ldr	r1, [r4, #0]
 8007ede:	3503      	adds	r5, #3
 8007ee0:	1a6d      	subs	r5, r5, r1
 8007ee2:	f025 0503 	bic.w	r5, r5, #3
 8007ee6:	3508      	adds	r5, #8
 8007ee8:	2d0c      	cmp	r5, #12
 8007eea:	bf38      	it	cc
 8007eec:	250c      	movcc	r5, #12
 8007eee:	4629      	mov	r1, r5
 8007ef0:	4638      	mov	r0, r7
 8007ef2:	f7ff ffa5 	bl	8007e40 <sbrk_aligned>
 8007ef6:	3001      	adds	r0, #1
 8007ef8:	d02b      	beq.n	8007f52 <_malloc_r+0xd2>
 8007efa:	6823      	ldr	r3, [r4, #0]
 8007efc:	442b      	add	r3, r5
 8007efe:	6023      	str	r3, [r4, #0]
 8007f00:	e00e      	b.n	8007f20 <_malloc_r+0xa0>
 8007f02:	6822      	ldr	r2, [r4, #0]
 8007f04:	1b52      	subs	r2, r2, r5
 8007f06:	d41e      	bmi.n	8007f46 <_malloc_r+0xc6>
 8007f08:	2a0b      	cmp	r2, #11
 8007f0a:	d916      	bls.n	8007f3a <_malloc_r+0xba>
 8007f0c:	1961      	adds	r1, r4, r5
 8007f0e:	42a3      	cmp	r3, r4
 8007f10:	6025      	str	r5, [r4, #0]
 8007f12:	bf18      	it	ne
 8007f14:	6059      	strne	r1, [r3, #4]
 8007f16:	6863      	ldr	r3, [r4, #4]
 8007f18:	bf08      	it	eq
 8007f1a:	6031      	streq	r1, [r6, #0]
 8007f1c:	5162      	str	r2, [r4, r5]
 8007f1e:	604b      	str	r3, [r1, #4]
 8007f20:	4638      	mov	r0, r7
 8007f22:	f104 060b 	add.w	r6, r4, #11
 8007f26:	f000 ff9f 	bl	8008e68 <__malloc_unlock>
 8007f2a:	f026 0607 	bic.w	r6, r6, #7
 8007f2e:	1d23      	adds	r3, r4, #4
 8007f30:	1af2      	subs	r2, r6, r3
 8007f32:	d0b6      	beq.n	8007ea2 <_malloc_r+0x22>
 8007f34:	1b9b      	subs	r3, r3, r6
 8007f36:	50a3      	str	r3, [r4, r2]
 8007f38:	e7b3      	b.n	8007ea2 <_malloc_r+0x22>
 8007f3a:	6862      	ldr	r2, [r4, #4]
 8007f3c:	42a3      	cmp	r3, r4
 8007f3e:	bf0c      	ite	eq
 8007f40:	6032      	streq	r2, [r6, #0]
 8007f42:	605a      	strne	r2, [r3, #4]
 8007f44:	e7ec      	b.n	8007f20 <_malloc_r+0xa0>
 8007f46:	4623      	mov	r3, r4
 8007f48:	6864      	ldr	r4, [r4, #4]
 8007f4a:	e7b2      	b.n	8007eb2 <_malloc_r+0x32>
 8007f4c:	4634      	mov	r4, r6
 8007f4e:	6876      	ldr	r6, [r6, #4]
 8007f50:	e7b9      	b.n	8007ec6 <_malloc_r+0x46>
 8007f52:	230c      	movs	r3, #12
 8007f54:	603b      	str	r3, [r7, #0]
 8007f56:	4638      	mov	r0, r7
 8007f58:	f000 ff86 	bl	8008e68 <__malloc_unlock>
 8007f5c:	e7a1      	b.n	8007ea2 <_malloc_r+0x22>
 8007f5e:	6025      	str	r5, [r4, #0]
 8007f60:	e7de      	b.n	8007f20 <_malloc_r+0xa0>
 8007f62:	bf00      	nop
 8007f64:	200006b4 	.word	0x200006b4

08007f68 <__ssputs_r>:
 8007f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f6c:	688e      	ldr	r6, [r1, #8]
 8007f6e:	429e      	cmp	r6, r3
 8007f70:	4682      	mov	sl, r0
 8007f72:	460c      	mov	r4, r1
 8007f74:	4690      	mov	r8, r2
 8007f76:	461f      	mov	r7, r3
 8007f78:	d838      	bhi.n	8007fec <__ssputs_r+0x84>
 8007f7a:	898a      	ldrh	r2, [r1, #12]
 8007f7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f80:	d032      	beq.n	8007fe8 <__ssputs_r+0x80>
 8007f82:	6825      	ldr	r5, [r4, #0]
 8007f84:	6909      	ldr	r1, [r1, #16]
 8007f86:	eba5 0901 	sub.w	r9, r5, r1
 8007f8a:	6965      	ldr	r5, [r4, #20]
 8007f8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f94:	3301      	adds	r3, #1
 8007f96:	444b      	add	r3, r9
 8007f98:	106d      	asrs	r5, r5, #1
 8007f9a:	429d      	cmp	r5, r3
 8007f9c:	bf38      	it	cc
 8007f9e:	461d      	movcc	r5, r3
 8007fa0:	0553      	lsls	r3, r2, #21
 8007fa2:	d531      	bpl.n	8008008 <__ssputs_r+0xa0>
 8007fa4:	4629      	mov	r1, r5
 8007fa6:	f7ff ff6b 	bl	8007e80 <_malloc_r>
 8007faa:	4606      	mov	r6, r0
 8007fac:	b950      	cbnz	r0, 8007fc4 <__ssputs_r+0x5c>
 8007fae:	230c      	movs	r3, #12
 8007fb0:	f8ca 3000 	str.w	r3, [sl]
 8007fb4:	89a3      	ldrh	r3, [r4, #12]
 8007fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fba:	81a3      	strh	r3, [r4, #12]
 8007fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc4:	6921      	ldr	r1, [r4, #16]
 8007fc6:	464a      	mov	r2, r9
 8007fc8:	f7fd fe96 	bl	8005cf8 <memcpy>
 8007fcc:	89a3      	ldrh	r3, [r4, #12]
 8007fce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fd6:	81a3      	strh	r3, [r4, #12]
 8007fd8:	6126      	str	r6, [r4, #16]
 8007fda:	6165      	str	r5, [r4, #20]
 8007fdc:	444e      	add	r6, r9
 8007fde:	eba5 0509 	sub.w	r5, r5, r9
 8007fe2:	6026      	str	r6, [r4, #0]
 8007fe4:	60a5      	str	r5, [r4, #8]
 8007fe6:	463e      	mov	r6, r7
 8007fe8:	42be      	cmp	r6, r7
 8007fea:	d900      	bls.n	8007fee <__ssputs_r+0x86>
 8007fec:	463e      	mov	r6, r7
 8007fee:	6820      	ldr	r0, [r4, #0]
 8007ff0:	4632      	mov	r2, r6
 8007ff2:	4641      	mov	r1, r8
 8007ff4:	f000 ff18 	bl	8008e28 <memmove>
 8007ff8:	68a3      	ldr	r3, [r4, #8]
 8007ffa:	1b9b      	subs	r3, r3, r6
 8007ffc:	60a3      	str	r3, [r4, #8]
 8007ffe:	6823      	ldr	r3, [r4, #0]
 8008000:	4433      	add	r3, r6
 8008002:	6023      	str	r3, [r4, #0]
 8008004:	2000      	movs	r0, #0
 8008006:	e7db      	b.n	8007fc0 <__ssputs_r+0x58>
 8008008:	462a      	mov	r2, r5
 800800a:	f000 ff33 	bl	8008e74 <_realloc_r>
 800800e:	4606      	mov	r6, r0
 8008010:	2800      	cmp	r0, #0
 8008012:	d1e1      	bne.n	8007fd8 <__ssputs_r+0x70>
 8008014:	6921      	ldr	r1, [r4, #16]
 8008016:	4650      	mov	r0, sl
 8008018:	f7ff fec6 	bl	8007da8 <_free_r>
 800801c:	e7c7      	b.n	8007fae <__ssputs_r+0x46>
	...

08008020 <_svfiprintf_r>:
 8008020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008024:	4698      	mov	r8, r3
 8008026:	898b      	ldrh	r3, [r1, #12]
 8008028:	061b      	lsls	r3, r3, #24
 800802a:	b09d      	sub	sp, #116	; 0x74
 800802c:	4607      	mov	r7, r0
 800802e:	460d      	mov	r5, r1
 8008030:	4614      	mov	r4, r2
 8008032:	d50e      	bpl.n	8008052 <_svfiprintf_r+0x32>
 8008034:	690b      	ldr	r3, [r1, #16]
 8008036:	b963      	cbnz	r3, 8008052 <_svfiprintf_r+0x32>
 8008038:	2140      	movs	r1, #64	; 0x40
 800803a:	f7ff ff21 	bl	8007e80 <_malloc_r>
 800803e:	6028      	str	r0, [r5, #0]
 8008040:	6128      	str	r0, [r5, #16]
 8008042:	b920      	cbnz	r0, 800804e <_svfiprintf_r+0x2e>
 8008044:	230c      	movs	r3, #12
 8008046:	603b      	str	r3, [r7, #0]
 8008048:	f04f 30ff 	mov.w	r0, #4294967295
 800804c:	e0d1      	b.n	80081f2 <_svfiprintf_r+0x1d2>
 800804e:	2340      	movs	r3, #64	; 0x40
 8008050:	616b      	str	r3, [r5, #20]
 8008052:	2300      	movs	r3, #0
 8008054:	9309      	str	r3, [sp, #36]	; 0x24
 8008056:	2320      	movs	r3, #32
 8008058:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800805c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008060:	2330      	movs	r3, #48	; 0x30
 8008062:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800820c <_svfiprintf_r+0x1ec>
 8008066:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800806a:	f04f 0901 	mov.w	r9, #1
 800806e:	4623      	mov	r3, r4
 8008070:	469a      	mov	sl, r3
 8008072:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008076:	b10a      	cbz	r2, 800807c <_svfiprintf_r+0x5c>
 8008078:	2a25      	cmp	r2, #37	; 0x25
 800807a:	d1f9      	bne.n	8008070 <_svfiprintf_r+0x50>
 800807c:	ebba 0b04 	subs.w	fp, sl, r4
 8008080:	d00b      	beq.n	800809a <_svfiprintf_r+0x7a>
 8008082:	465b      	mov	r3, fp
 8008084:	4622      	mov	r2, r4
 8008086:	4629      	mov	r1, r5
 8008088:	4638      	mov	r0, r7
 800808a:	f7ff ff6d 	bl	8007f68 <__ssputs_r>
 800808e:	3001      	adds	r0, #1
 8008090:	f000 80aa 	beq.w	80081e8 <_svfiprintf_r+0x1c8>
 8008094:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008096:	445a      	add	r2, fp
 8008098:	9209      	str	r2, [sp, #36]	; 0x24
 800809a:	f89a 3000 	ldrb.w	r3, [sl]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f000 80a2 	beq.w	80081e8 <_svfiprintf_r+0x1c8>
 80080a4:	2300      	movs	r3, #0
 80080a6:	f04f 32ff 	mov.w	r2, #4294967295
 80080aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080ae:	f10a 0a01 	add.w	sl, sl, #1
 80080b2:	9304      	str	r3, [sp, #16]
 80080b4:	9307      	str	r3, [sp, #28]
 80080b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080ba:	931a      	str	r3, [sp, #104]	; 0x68
 80080bc:	4654      	mov	r4, sl
 80080be:	2205      	movs	r2, #5
 80080c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080c4:	4851      	ldr	r0, [pc, #324]	; (800820c <_svfiprintf_r+0x1ec>)
 80080c6:	f7f8 f88b 	bl	80001e0 <memchr>
 80080ca:	9a04      	ldr	r2, [sp, #16]
 80080cc:	b9d8      	cbnz	r0, 8008106 <_svfiprintf_r+0xe6>
 80080ce:	06d0      	lsls	r0, r2, #27
 80080d0:	bf44      	itt	mi
 80080d2:	2320      	movmi	r3, #32
 80080d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080d8:	0711      	lsls	r1, r2, #28
 80080da:	bf44      	itt	mi
 80080dc:	232b      	movmi	r3, #43	; 0x2b
 80080de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080e2:	f89a 3000 	ldrb.w	r3, [sl]
 80080e6:	2b2a      	cmp	r3, #42	; 0x2a
 80080e8:	d015      	beq.n	8008116 <_svfiprintf_r+0xf6>
 80080ea:	9a07      	ldr	r2, [sp, #28]
 80080ec:	4654      	mov	r4, sl
 80080ee:	2000      	movs	r0, #0
 80080f0:	f04f 0c0a 	mov.w	ip, #10
 80080f4:	4621      	mov	r1, r4
 80080f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080fa:	3b30      	subs	r3, #48	; 0x30
 80080fc:	2b09      	cmp	r3, #9
 80080fe:	d94e      	bls.n	800819e <_svfiprintf_r+0x17e>
 8008100:	b1b0      	cbz	r0, 8008130 <_svfiprintf_r+0x110>
 8008102:	9207      	str	r2, [sp, #28]
 8008104:	e014      	b.n	8008130 <_svfiprintf_r+0x110>
 8008106:	eba0 0308 	sub.w	r3, r0, r8
 800810a:	fa09 f303 	lsl.w	r3, r9, r3
 800810e:	4313      	orrs	r3, r2
 8008110:	9304      	str	r3, [sp, #16]
 8008112:	46a2      	mov	sl, r4
 8008114:	e7d2      	b.n	80080bc <_svfiprintf_r+0x9c>
 8008116:	9b03      	ldr	r3, [sp, #12]
 8008118:	1d19      	adds	r1, r3, #4
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	9103      	str	r1, [sp, #12]
 800811e:	2b00      	cmp	r3, #0
 8008120:	bfbb      	ittet	lt
 8008122:	425b      	neglt	r3, r3
 8008124:	f042 0202 	orrlt.w	r2, r2, #2
 8008128:	9307      	strge	r3, [sp, #28]
 800812a:	9307      	strlt	r3, [sp, #28]
 800812c:	bfb8      	it	lt
 800812e:	9204      	strlt	r2, [sp, #16]
 8008130:	7823      	ldrb	r3, [r4, #0]
 8008132:	2b2e      	cmp	r3, #46	; 0x2e
 8008134:	d10c      	bne.n	8008150 <_svfiprintf_r+0x130>
 8008136:	7863      	ldrb	r3, [r4, #1]
 8008138:	2b2a      	cmp	r3, #42	; 0x2a
 800813a:	d135      	bne.n	80081a8 <_svfiprintf_r+0x188>
 800813c:	9b03      	ldr	r3, [sp, #12]
 800813e:	1d1a      	adds	r2, r3, #4
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	9203      	str	r2, [sp, #12]
 8008144:	2b00      	cmp	r3, #0
 8008146:	bfb8      	it	lt
 8008148:	f04f 33ff 	movlt.w	r3, #4294967295
 800814c:	3402      	adds	r4, #2
 800814e:	9305      	str	r3, [sp, #20]
 8008150:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800821c <_svfiprintf_r+0x1fc>
 8008154:	7821      	ldrb	r1, [r4, #0]
 8008156:	2203      	movs	r2, #3
 8008158:	4650      	mov	r0, sl
 800815a:	f7f8 f841 	bl	80001e0 <memchr>
 800815e:	b140      	cbz	r0, 8008172 <_svfiprintf_r+0x152>
 8008160:	2340      	movs	r3, #64	; 0x40
 8008162:	eba0 000a 	sub.w	r0, r0, sl
 8008166:	fa03 f000 	lsl.w	r0, r3, r0
 800816a:	9b04      	ldr	r3, [sp, #16]
 800816c:	4303      	orrs	r3, r0
 800816e:	3401      	adds	r4, #1
 8008170:	9304      	str	r3, [sp, #16]
 8008172:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008176:	4826      	ldr	r0, [pc, #152]	; (8008210 <_svfiprintf_r+0x1f0>)
 8008178:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800817c:	2206      	movs	r2, #6
 800817e:	f7f8 f82f 	bl	80001e0 <memchr>
 8008182:	2800      	cmp	r0, #0
 8008184:	d038      	beq.n	80081f8 <_svfiprintf_r+0x1d8>
 8008186:	4b23      	ldr	r3, [pc, #140]	; (8008214 <_svfiprintf_r+0x1f4>)
 8008188:	bb1b      	cbnz	r3, 80081d2 <_svfiprintf_r+0x1b2>
 800818a:	9b03      	ldr	r3, [sp, #12]
 800818c:	3307      	adds	r3, #7
 800818e:	f023 0307 	bic.w	r3, r3, #7
 8008192:	3308      	adds	r3, #8
 8008194:	9303      	str	r3, [sp, #12]
 8008196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008198:	4433      	add	r3, r6
 800819a:	9309      	str	r3, [sp, #36]	; 0x24
 800819c:	e767      	b.n	800806e <_svfiprintf_r+0x4e>
 800819e:	fb0c 3202 	mla	r2, ip, r2, r3
 80081a2:	460c      	mov	r4, r1
 80081a4:	2001      	movs	r0, #1
 80081a6:	e7a5      	b.n	80080f4 <_svfiprintf_r+0xd4>
 80081a8:	2300      	movs	r3, #0
 80081aa:	3401      	adds	r4, #1
 80081ac:	9305      	str	r3, [sp, #20]
 80081ae:	4619      	mov	r1, r3
 80081b0:	f04f 0c0a 	mov.w	ip, #10
 80081b4:	4620      	mov	r0, r4
 80081b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081ba:	3a30      	subs	r2, #48	; 0x30
 80081bc:	2a09      	cmp	r2, #9
 80081be:	d903      	bls.n	80081c8 <_svfiprintf_r+0x1a8>
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d0c5      	beq.n	8008150 <_svfiprintf_r+0x130>
 80081c4:	9105      	str	r1, [sp, #20]
 80081c6:	e7c3      	b.n	8008150 <_svfiprintf_r+0x130>
 80081c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80081cc:	4604      	mov	r4, r0
 80081ce:	2301      	movs	r3, #1
 80081d0:	e7f0      	b.n	80081b4 <_svfiprintf_r+0x194>
 80081d2:	ab03      	add	r3, sp, #12
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	462a      	mov	r2, r5
 80081d8:	4b0f      	ldr	r3, [pc, #60]	; (8008218 <_svfiprintf_r+0x1f8>)
 80081da:	a904      	add	r1, sp, #16
 80081dc:	4638      	mov	r0, r7
 80081de:	f3af 8000 	nop.w
 80081e2:	1c42      	adds	r2, r0, #1
 80081e4:	4606      	mov	r6, r0
 80081e6:	d1d6      	bne.n	8008196 <_svfiprintf_r+0x176>
 80081e8:	89ab      	ldrh	r3, [r5, #12]
 80081ea:	065b      	lsls	r3, r3, #25
 80081ec:	f53f af2c 	bmi.w	8008048 <_svfiprintf_r+0x28>
 80081f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081f2:	b01d      	add	sp, #116	; 0x74
 80081f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f8:	ab03      	add	r3, sp, #12
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	462a      	mov	r2, r5
 80081fe:	4b06      	ldr	r3, [pc, #24]	; (8008218 <_svfiprintf_r+0x1f8>)
 8008200:	a904      	add	r1, sp, #16
 8008202:	4638      	mov	r0, r7
 8008204:	f000 f9d4 	bl	80085b0 <_printf_i>
 8008208:	e7eb      	b.n	80081e2 <_svfiprintf_r+0x1c2>
 800820a:	bf00      	nop
 800820c:	0800976c 	.word	0x0800976c
 8008210:	08009776 	.word	0x08009776
 8008214:	00000000 	.word	0x00000000
 8008218:	08007f69 	.word	0x08007f69
 800821c:	08009772 	.word	0x08009772

08008220 <__sfputc_r>:
 8008220:	6893      	ldr	r3, [r2, #8]
 8008222:	3b01      	subs	r3, #1
 8008224:	2b00      	cmp	r3, #0
 8008226:	b410      	push	{r4}
 8008228:	6093      	str	r3, [r2, #8]
 800822a:	da08      	bge.n	800823e <__sfputc_r+0x1e>
 800822c:	6994      	ldr	r4, [r2, #24]
 800822e:	42a3      	cmp	r3, r4
 8008230:	db01      	blt.n	8008236 <__sfputc_r+0x16>
 8008232:	290a      	cmp	r1, #10
 8008234:	d103      	bne.n	800823e <__sfputc_r+0x1e>
 8008236:	f85d 4b04 	ldr.w	r4, [sp], #4
 800823a:	f000 baff 	b.w	800883c <__swbuf_r>
 800823e:	6813      	ldr	r3, [r2, #0]
 8008240:	1c58      	adds	r0, r3, #1
 8008242:	6010      	str	r0, [r2, #0]
 8008244:	7019      	strb	r1, [r3, #0]
 8008246:	4608      	mov	r0, r1
 8008248:	f85d 4b04 	ldr.w	r4, [sp], #4
 800824c:	4770      	bx	lr

0800824e <__sfputs_r>:
 800824e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008250:	4606      	mov	r6, r0
 8008252:	460f      	mov	r7, r1
 8008254:	4614      	mov	r4, r2
 8008256:	18d5      	adds	r5, r2, r3
 8008258:	42ac      	cmp	r4, r5
 800825a:	d101      	bne.n	8008260 <__sfputs_r+0x12>
 800825c:	2000      	movs	r0, #0
 800825e:	e007      	b.n	8008270 <__sfputs_r+0x22>
 8008260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008264:	463a      	mov	r2, r7
 8008266:	4630      	mov	r0, r6
 8008268:	f7ff ffda 	bl	8008220 <__sfputc_r>
 800826c:	1c43      	adds	r3, r0, #1
 800826e:	d1f3      	bne.n	8008258 <__sfputs_r+0xa>
 8008270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008274 <_vfiprintf_r>:
 8008274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008278:	460d      	mov	r5, r1
 800827a:	b09d      	sub	sp, #116	; 0x74
 800827c:	4614      	mov	r4, r2
 800827e:	4698      	mov	r8, r3
 8008280:	4606      	mov	r6, r0
 8008282:	b118      	cbz	r0, 800828c <_vfiprintf_r+0x18>
 8008284:	6983      	ldr	r3, [r0, #24]
 8008286:	b90b      	cbnz	r3, 800828c <_vfiprintf_r+0x18>
 8008288:	f000 fcc8 	bl	8008c1c <__sinit>
 800828c:	4b89      	ldr	r3, [pc, #548]	; (80084b4 <_vfiprintf_r+0x240>)
 800828e:	429d      	cmp	r5, r3
 8008290:	d11b      	bne.n	80082ca <_vfiprintf_r+0x56>
 8008292:	6875      	ldr	r5, [r6, #4]
 8008294:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008296:	07d9      	lsls	r1, r3, #31
 8008298:	d405      	bmi.n	80082a6 <_vfiprintf_r+0x32>
 800829a:	89ab      	ldrh	r3, [r5, #12]
 800829c:	059a      	lsls	r2, r3, #22
 800829e:	d402      	bmi.n	80082a6 <_vfiprintf_r+0x32>
 80082a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082a2:	f000 fd59 	bl	8008d58 <__retarget_lock_acquire_recursive>
 80082a6:	89ab      	ldrh	r3, [r5, #12]
 80082a8:	071b      	lsls	r3, r3, #28
 80082aa:	d501      	bpl.n	80082b0 <_vfiprintf_r+0x3c>
 80082ac:	692b      	ldr	r3, [r5, #16]
 80082ae:	b9eb      	cbnz	r3, 80082ec <_vfiprintf_r+0x78>
 80082b0:	4629      	mov	r1, r5
 80082b2:	4630      	mov	r0, r6
 80082b4:	f000 fb22 	bl	80088fc <__swsetup_r>
 80082b8:	b1c0      	cbz	r0, 80082ec <_vfiprintf_r+0x78>
 80082ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082bc:	07dc      	lsls	r4, r3, #31
 80082be:	d50e      	bpl.n	80082de <_vfiprintf_r+0x6a>
 80082c0:	f04f 30ff 	mov.w	r0, #4294967295
 80082c4:	b01d      	add	sp, #116	; 0x74
 80082c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ca:	4b7b      	ldr	r3, [pc, #492]	; (80084b8 <_vfiprintf_r+0x244>)
 80082cc:	429d      	cmp	r5, r3
 80082ce:	d101      	bne.n	80082d4 <_vfiprintf_r+0x60>
 80082d0:	68b5      	ldr	r5, [r6, #8]
 80082d2:	e7df      	b.n	8008294 <_vfiprintf_r+0x20>
 80082d4:	4b79      	ldr	r3, [pc, #484]	; (80084bc <_vfiprintf_r+0x248>)
 80082d6:	429d      	cmp	r5, r3
 80082d8:	bf08      	it	eq
 80082da:	68f5      	ldreq	r5, [r6, #12]
 80082dc:	e7da      	b.n	8008294 <_vfiprintf_r+0x20>
 80082de:	89ab      	ldrh	r3, [r5, #12]
 80082e0:	0598      	lsls	r0, r3, #22
 80082e2:	d4ed      	bmi.n	80082c0 <_vfiprintf_r+0x4c>
 80082e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082e6:	f000 fd38 	bl	8008d5a <__retarget_lock_release_recursive>
 80082ea:	e7e9      	b.n	80082c0 <_vfiprintf_r+0x4c>
 80082ec:	2300      	movs	r3, #0
 80082ee:	9309      	str	r3, [sp, #36]	; 0x24
 80082f0:	2320      	movs	r3, #32
 80082f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80082fa:	2330      	movs	r3, #48	; 0x30
 80082fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80084c0 <_vfiprintf_r+0x24c>
 8008300:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008304:	f04f 0901 	mov.w	r9, #1
 8008308:	4623      	mov	r3, r4
 800830a:	469a      	mov	sl, r3
 800830c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008310:	b10a      	cbz	r2, 8008316 <_vfiprintf_r+0xa2>
 8008312:	2a25      	cmp	r2, #37	; 0x25
 8008314:	d1f9      	bne.n	800830a <_vfiprintf_r+0x96>
 8008316:	ebba 0b04 	subs.w	fp, sl, r4
 800831a:	d00b      	beq.n	8008334 <_vfiprintf_r+0xc0>
 800831c:	465b      	mov	r3, fp
 800831e:	4622      	mov	r2, r4
 8008320:	4629      	mov	r1, r5
 8008322:	4630      	mov	r0, r6
 8008324:	f7ff ff93 	bl	800824e <__sfputs_r>
 8008328:	3001      	adds	r0, #1
 800832a:	f000 80aa 	beq.w	8008482 <_vfiprintf_r+0x20e>
 800832e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008330:	445a      	add	r2, fp
 8008332:	9209      	str	r2, [sp, #36]	; 0x24
 8008334:	f89a 3000 	ldrb.w	r3, [sl]
 8008338:	2b00      	cmp	r3, #0
 800833a:	f000 80a2 	beq.w	8008482 <_vfiprintf_r+0x20e>
 800833e:	2300      	movs	r3, #0
 8008340:	f04f 32ff 	mov.w	r2, #4294967295
 8008344:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008348:	f10a 0a01 	add.w	sl, sl, #1
 800834c:	9304      	str	r3, [sp, #16]
 800834e:	9307      	str	r3, [sp, #28]
 8008350:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008354:	931a      	str	r3, [sp, #104]	; 0x68
 8008356:	4654      	mov	r4, sl
 8008358:	2205      	movs	r2, #5
 800835a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800835e:	4858      	ldr	r0, [pc, #352]	; (80084c0 <_vfiprintf_r+0x24c>)
 8008360:	f7f7 ff3e 	bl	80001e0 <memchr>
 8008364:	9a04      	ldr	r2, [sp, #16]
 8008366:	b9d8      	cbnz	r0, 80083a0 <_vfiprintf_r+0x12c>
 8008368:	06d1      	lsls	r1, r2, #27
 800836a:	bf44      	itt	mi
 800836c:	2320      	movmi	r3, #32
 800836e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008372:	0713      	lsls	r3, r2, #28
 8008374:	bf44      	itt	mi
 8008376:	232b      	movmi	r3, #43	; 0x2b
 8008378:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800837c:	f89a 3000 	ldrb.w	r3, [sl]
 8008380:	2b2a      	cmp	r3, #42	; 0x2a
 8008382:	d015      	beq.n	80083b0 <_vfiprintf_r+0x13c>
 8008384:	9a07      	ldr	r2, [sp, #28]
 8008386:	4654      	mov	r4, sl
 8008388:	2000      	movs	r0, #0
 800838a:	f04f 0c0a 	mov.w	ip, #10
 800838e:	4621      	mov	r1, r4
 8008390:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008394:	3b30      	subs	r3, #48	; 0x30
 8008396:	2b09      	cmp	r3, #9
 8008398:	d94e      	bls.n	8008438 <_vfiprintf_r+0x1c4>
 800839a:	b1b0      	cbz	r0, 80083ca <_vfiprintf_r+0x156>
 800839c:	9207      	str	r2, [sp, #28]
 800839e:	e014      	b.n	80083ca <_vfiprintf_r+0x156>
 80083a0:	eba0 0308 	sub.w	r3, r0, r8
 80083a4:	fa09 f303 	lsl.w	r3, r9, r3
 80083a8:	4313      	orrs	r3, r2
 80083aa:	9304      	str	r3, [sp, #16]
 80083ac:	46a2      	mov	sl, r4
 80083ae:	e7d2      	b.n	8008356 <_vfiprintf_r+0xe2>
 80083b0:	9b03      	ldr	r3, [sp, #12]
 80083b2:	1d19      	adds	r1, r3, #4
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	9103      	str	r1, [sp, #12]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	bfbb      	ittet	lt
 80083bc:	425b      	neglt	r3, r3
 80083be:	f042 0202 	orrlt.w	r2, r2, #2
 80083c2:	9307      	strge	r3, [sp, #28]
 80083c4:	9307      	strlt	r3, [sp, #28]
 80083c6:	bfb8      	it	lt
 80083c8:	9204      	strlt	r2, [sp, #16]
 80083ca:	7823      	ldrb	r3, [r4, #0]
 80083cc:	2b2e      	cmp	r3, #46	; 0x2e
 80083ce:	d10c      	bne.n	80083ea <_vfiprintf_r+0x176>
 80083d0:	7863      	ldrb	r3, [r4, #1]
 80083d2:	2b2a      	cmp	r3, #42	; 0x2a
 80083d4:	d135      	bne.n	8008442 <_vfiprintf_r+0x1ce>
 80083d6:	9b03      	ldr	r3, [sp, #12]
 80083d8:	1d1a      	adds	r2, r3, #4
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	9203      	str	r2, [sp, #12]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	bfb8      	it	lt
 80083e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80083e6:	3402      	adds	r4, #2
 80083e8:	9305      	str	r3, [sp, #20]
 80083ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80084d0 <_vfiprintf_r+0x25c>
 80083ee:	7821      	ldrb	r1, [r4, #0]
 80083f0:	2203      	movs	r2, #3
 80083f2:	4650      	mov	r0, sl
 80083f4:	f7f7 fef4 	bl	80001e0 <memchr>
 80083f8:	b140      	cbz	r0, 800840c <_vfiprintf_r+0x198>
 80083fa:	2340      	movs	r3, #64	; 0x40
 80083fc:	eba0 000a 	sub.w	r0, r0, sl
 8008400:	fa03 f000 	lsl.w	r0, r3, r0
 8008404:	9b04      	ldr	r3, [sp, #16]
 8008406:	4303      	orrs	r3, r0
 8008408:	3401      	adds	r4, #1
 800840a:	9304      	str	r3, [sp, #16]
 800840c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008410:	482c      	ldr	r0, [pc, #176]	; (80084c4 <_vfiprintf_r+0x250>)
 8008412:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008416:	2206      	movs	r2, #6
 8008418:	f7f7 fee2 	bl	80001e0 <memchr>
 800841c:	2800      	cmp	r0, #0
 800841e:	d03f      	beq.n	80084a0 <_vfiprintf_r+0x22c>
 8008420:	4b29      	ldr	r3, [pc, #164]	; (80084c8 <_vfiprintf_r+0x254>)
 8008422:	bb1b      	cbnz	r3, 800846c <_vfiprintf_r+0x1f8>
 8008424:	9b03      	ldr	r3, [sp, #12]
 8008426:	3307      	adds	r3, #7
 8008428:	f023 0307 	bic.w	r3, r3, #7
 800842c:	3308      	adds	r3, #8
 800842e:	9303      	str	r3, [sp, #12]
 8008430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008432:	443b      	add	r3, r7
 8008434:	9309      	str	r3, [sp, #36]	; 0x24
 8008436:	e767      	b.n	8008308 <_vfiprintf_r+0x94>
 8008438:	fb0c 3202 	mla	r2, ip, r2, r3
 800843c:	460c      	mov	r4, r1
 800843e:	2001      	movs	r0, #1
 8008440:	e7a5      	b.n	800838e <_vfiprintf_r+0x11a>
 8008442:	2300      	movs	r3, #0
 8008444:	3401      	adds	r4, #1
 8008446:	9305      	str	r3, [sp, #20]
 8008448:	4619      	mov	r1, r3
 800844a:	f04f 0c0a 	mov.w	ip, #10
 800844e:	4620      	mov	r0, r4
 8008450:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008454:	3a30      	subs	r2, #48	; 0x30
 8008456:	2a09      	cmp	r2, #9
 8008458:	d903      	bls.n	8008462 <_vfiprintf_r+0x1ee>
 800845a:	2b00      	cmp	r3, #0
 800845c:	d0c5      	beq.n	80083ea <_vfiprintf_r+0x176>
 800845e:	9105      	str	r1, [sp, #20]
 8008460:	e7c3      	b.n	80083ea <_vfiprintf_r+0x176>
 8008462:	fb0c 2101 	mla	r1, ip, r1, r2
 8008466:	4604      	mov	r4, r0
 8008468:	2301      	movs	r3, #1
 800846a:	e7f0      	b.n	800844e <_vfiprintf_r+0x1da>
 800846c:	ab03      	add	r3, sp, #12
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	462a      	mov	r2, r5
 8008472:	4b16      	ldr	r3, [pc, #88]	; (80084cc <_vfiprintf_r+0x258>)
 8008474:	a904      	add	r1, sp, #16
 8008476:	4630      	mov	r0, r6
 8008478:	f3af 8000 	nop.w
 800847c:	4607      	mov	r7, r0
 800847e:	1c78      	adds	r0, r7, #1
 8008480:	d1d6      	bne.n	8008430 <_vfiprintf_r+0x1bc>
 8008482:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008484:	07d9      	lsls	r1, r3, #31
 8008486:	d405      	bmi.n	8008494 <_vfiprintf_r+0x220>
 8008488:	89ab      	ldrh	r3, [r5, #12]
 800848a:	059a      	lsls	r2, r3, #22
 800848c:	d402      	bmi.n	8008494 <_vfiprintf_r+0x220>
 800848e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008490:	f000 fc63 	bl	8008d5a <__retarget_lock_release_recursive>
 8008494:	89ab      	ldrh	r3, [r5, #12]
 8008496:	065b      	lsls	r3, r3, #25
 8008498:	f53f af12 	bmi.w	80082c0 <_vfiprintf_r+0x4c>
 800849c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800849e:	e711      	b.n	80082c4 <_vfiprintf_r+0x50>
 80084a0:	ab03      	add	r3, sp, #12
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	462a      	mov	r2, r5
 80084a6:	4b09      	ldr	r3, [pc, #36]	; (80084cc <_vfiprintf_r+0x258>)
 80084a8:	a904      	add	r1, sp, #16
 80084aa:	4630      	mov	r0, r6
 80084ac:	f000 f880 	bl	80085b0 <_printf_i>
 80084b0:	e7e4      	b.n	800847c <_vfiprintf_r+0x208>
 80084b2:	bf00      	nop
 80084b4:	080097c0 	.word	0x080097c0
 80084b8:	080097e0 	.word	0x080097e0
 80084bc:	080097a0 	.word	0x080097a0
 80084c0:	0800976c 	.word	0x0800976c
 80084c4:	08009776 	.word	0x08009776
 80084c8:	00000000 	.word	0x00000000
 80084cc:	0800824f 	.word	0x0800824f
 80084d0:	08009772 	.word	0x08009772

080084d4 <_printf_common>:
 80084d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084d8:	4616      	mov	r6, r2
 80084da:	4699      	mov	r9, r3
 80084dc:	688a      	ldr	r2, [r1, #8]
 80084de:	690b      	ldr	r3, [r1, #16]
 80084e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084e4:	4293      	cmp	r3, r2
 80084e6:	bfb8      	it	lt
 80084e8:	4613      	movlt	r3, r2
 80084ea:	6033      	str	r3, [r6, #0]
 80084ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084f0:	4607      	mov	r7, r0
 80084f2:	460c      	mov	r4, r1
 80084f4:	b10a      	cbz	r2, 80084fa <_printf_common+0x26>
 80084f6:	3301      	adds	r3, #1
 80084f8:	6033      	str	r3, [r6, #0]
 80084fa:	6823      	ldr	r3, [r4, #0]
 80084fc:	0699      	lsls	r1, r3, #26
 80084fe:	bf42      	ittt	mi
 8008500:	6833      	ldrmi	r3, [r6, #0]
 8008502:	3302      	addmi	r3, #2
 8008504:	6033      	strmi	r3, [r6, #0]
 8008506:	6825      	ldr	r5, [r4, #0]
 8008508:	f015 0506 	ands.w	r5, r5, #6
 800850c:	d106      	bne.n	800851c <_printf_common+0x48>
 800850e:	f104 0a19 	add.w	sl, r4, #25
 8008512:	68e3      	ldr	r3, [r4, #12]
 8008514:	6832      	ldr	r2, [r6, #0]
 8008516:	1a9b      	subs	r3, r3, r2
 8008518:	42ab      	cmp	r3, r5
 800851a:	dc26      	bgt.n	800856a <_printf_common+0x96>
 800851c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008520:	1e13      	subs	r3, r2, #0
 8008522:	6822      	ldr	r2, [r4, #0]
 8008524:	bf18      	it	ne
 8008526:	2301      	movne	r3, #1
 8008528:	0692      	lsls	r2, r2, #26
 800852a:	d42b      	bmi.n	8008584 <_printf_common+0xb0>
 800852c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008530:	4649      	mov	r1, r9
 8008532:	4638      	mov	r0, r7
 8008534:	47c0      	blx	r8
 8008536:	3001      	adds	r0, #1
 8008538:	d01e      	beq.n	8008578 <_printf_common+0xa4>
 800853a:	6823      	ldr	r3, [r4, #0]
 800853c:	68e5      	ldr	r5, [r4, #12]
 800853e:	6832      	ldr	r2, [r6, #0]
 8008540:	f003 0306 	and.w	r3, r3, #6
 8008544:	2b04      	cmp	r3, #4
 8008546:	bf08      	it	eq
 8008548:	1aad      	subeq	r5, r5, r2
 800854a:	68a3      	ldr	r3, [r4, #8]
 800854c:	6922      	ldr	r2, [r4, #16]
 800854e:	bf0c      	ite	eq
 8008550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008554:	2500      	movne	r5, #0
 8008556:	4293      	cmp	r3, r2
 8008558:	bfc4      	itt	gt
 800855a:	1a9b      	subgt	r3, r3, r2
 800855c:	18ed      	addgt	r5, r5, r3
 800855e:	2600      	movs	r6, #0
 8008560:	341a      	adds	r4, #26
 8008562:	42b5      	cmp	r5, r6
 8008564:	d11a      	bne.n	800859c <_printf_common+0xc8>
 8008566:	2000      	movs	r0, #0
 8008568:	e008      	b.n	800857c <_printf_common+0xa8>
 800856a:	2301      	movs	r3, #1
 800856c:	4652      	mov	r2, sl
 800856e:	4649      	mov	r1, r9
 8008570:	4638      	mov	r0, r7
 8008572:	47c0      	blx	r8
 8008574:	3001      	adds	r0, #1
 8008576:	d103      	bne.n	8008580 <_printf_common+0xac>
 8008578:	f04f 30ff 	mov.w	r0, #4294967295
 800857c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008580:	3501      	adds	r5, #1
 8008582:	e7c6      	b.n	8008512 <_printf_common+0x3e>
 8008584:	18e1      	adds	r1, r4, r3
 8008586:	1c5a      	adds	r2, r3, #1
 8008588:	2030      	movs	r0, #48	; 0x30
 800858a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800858e:	4422      	add	r2, r4
 8008590:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008594:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008598:	3302      	adds	r3, #2
 800859a:	e7c7      	b.n	800852c <_printf_common+0x58>
 800859c:	2301      	movs	r3, #1
 800859e:	4622      	mov	r2, r4
 80085a0:	4649      	mov	r1, r9
 80085a2:	4638      	mov	r0, r7
 80085a4:	47c0      	blx	r8
 80085a6:	3001      	adds	r0, #1
 80085a8:	d0e6      	beq.n	8008578 <_printf_common+0xa4>
 80085aa:	3601      	adds	r6, #1
 80085ac:	e7d9      	b.n	8008562 <_printf_common+0x8e>
	...

080085b0 <_printf_i>:
 80085b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085b4:	7e0f      	ldrb	r7, [r1, #24]
 80085b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80085b8:	2f78      	cmp	r7, #120	; 0x78
 80085ba:	4691      	mov	r9, r2
 80085bc:	4680      	mov	r8, r0
 80085be:	460c      	mov	r4, r1
 80085c0:	469a      	mov	sl, r3
 80085c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80085c6:	d807      	bhi.n	80085d8 <_printf_i+0x28>
 80085c8:	2f62      	cmp	r7, #98	; 0x62
 80085ca:	d80a      	bhi.n	80085e2 <_printf_i+0x32>
 80085cc:	2f00      	cmp	r7, #0
 80085ce:	f000 80d8 	beq.w	8008782 <_printf_i+0x1d2>
 80085d2:	2f58      	cmp	r7, #88	; 0x58
 80085d4:	f000 80a3 	beq.w	800871e <_printf_i+0x16e>
 80085d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80085e0:	e03a      	b.n	8008658 <_printf_i+0xa8>
 80085e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80085e6:	2b15      	cmp	r3, #21
 80085e8:	d8f6      	bhi.n	80085d8 <_printf_i+0x28>
 80085ea:	a101      	add	r1, pc, #4	; (adr r1, 80085f0 <_printf_i+0x40>)
 80085ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085f0:	08008649 	.word	0x08008649
 80085f4:	0800865d 	.word	0x0800865d
 80085f8:	080085d9 	.word	0x080085d9
 80085fc:	080085d9 	.word	0x080085d9
 8008600:	080085d9 	.word	0x080085d9
 8008604:	080085d9 	.word	0x080085d9
 8008608:	0800865d 	.word	0x0800865d
 800860c:	080085d9 	.word	0x080085d9
 8008610:	080085d9 	.word	0x080085d9
 8008614:	080085d9 	.word	0x080085d9
 8008618:	080085d9 	.word	0x080085d9
 800861c:	08008769 	.word	0x08008769
 8008620:	0800868d 	.word	0x0800868d
 8008624:	0800874b 	.word	0x0800874b
 8008628:	080085d9 	.word	0x080085d9
 800862c:	080085d9 	.word	0x080085d9
 8008630:	0800878b 	.word	0x0800878b
 8008634:	080085d9 	.word	0x080085d9
 8008638:	0800868d 	.word	0x0800868d
 800863c:	080085d9 	.word	0x080085d9
 8008640:	080085d9 	.word	0x080085d9
 8008644:	08008753 	.word	0x08008753
 8008648:	682b      	ldr	r3, [r5, #0]
 800864a:	1d1a      	adds	r2, r3, #4
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	602a      	str	r2, [r5, #0]
 8008650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008658:	2301      	movs	r3, #1
 800865a:	e0a3      	b.n	80087a4 <_printf_i+0x1f4>
 800865c:	6820      	ldr	r0, [r4, #0]
 800865e:	6829      	ldr	r1, [r5, #0]
 8008660:	0606      	lsls	r6, r0, #24
 8008662:	f101 0304 	add.w	r3, r1, #4
 8008666:	d50a      	bpl.n	800867e <_printf_i+0xce>
 8008668:	680e      	ldr	r6, [r1, #0]
 800866a:	602b      	str	r3, [r5, #0]
 800866c:	2e00      	cmp	r6, #0
 800866e:	da03      	bge.n	8008678 <_printf_i+0xc8>
 8008670:	232d      	movs	r3, #45	; 0x2d
 8008672:	4276      	negs	r6, r6
 8008674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008678:	485e      	ldr	r0, [pc, #376]	; (80087f4 <_printf_i+0x244>)
 800867a:	230a      	movs	r3, #10
 800867c:	e019      	b.n	80086b2 <_printf_i+0x102>
 800867e:	680e      	ldr	r6, [r1, #0]
 8008680:	602b      	str	r3, [r5, #0]
 8008682:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008686:	bf18      	it	ne
 8008688:	b236      	sxthne	r6, r6
 800868a:	e7ef      	b.n	800866c <_printf_i+0xbc>
 800868c:	682b      	ldr	r3, [r5, #0]
 800868e:	6820      	ldr	r0, [r4, #0]
 8008690:	1d19      	adds	r1, r3, #4
 8008692:	6029      	str	r1, [r5, #0]
 8008694:	0601      	lsls	r1, r0, #24
 8008696:	d501      	bpl.n	800869c <_printf_i+0xec>
 8008698:	681e      	ldr	r6, [r3, #0]
 800869a:	e002      	b.n	80086a2 <_printf_i+0xf2>
 800869c:	0646      	lsls	r6, r0, #25
 800869e:	d5fb      	bpl.n	8008698 <_printf_i+0xe8>
 80086a0:	881e      	ldrh	r6, [r3, #0]
 80086a2:	4854      	ldr	r0, [pc, #336]	; (80087f4 <_printf_i+0x244>)
 80086a4:	2f6f      	cmp	r7, #111	; 0x6f
 80086a6:	bf0c      	ite	eq
 80086a8:	2308      	moveq	r3, #8
 80086aa:	230a      	movne	r3, #10
 80086ac:	2100      	movs	r1, #0
 80086ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086b2:	6865      	ldr	r5, [r4, #4]
 80086b4:	60a5      	str	r5, [r4, #8]
 80086b6:	2d00      	cmp	r5, #0
 80086b8:	bfa2      	ittt	ge
 80086ba:	6821      	ldrge	r1, [r4, #0]
 80086bc:	f021 0104 	bicge.w	r1, r1, #4
 80086c0:	6021      	strge	r1, [r4, #0]
 80086c2:	b90e      	cbnz	r6, 80086c8 <_printf_i+0x118>
 80086c4:	2d00      	cmp	r5, #0
 80086c6:	d04d      	beq.n	8008764 <_printf_i+0x1b4>
 80086c8:	4615      	mov	r5, r2
 80086ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80086ce:	fb03 6711 	mls	r7, r3, r1, r6
 80086d2:	5dc7      	ldrb	r7, [r0, r7]
 80086d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80086d8:	4637      	mov	r7, r6
 80086da:	42bb      	cmp	r3, r7
 80086dc:	460e      	mov	r6, r1
 80086de:	d9f4      	bls.n	80086ca <_printf_i+0x11a>
 80086e0:	2b08      	cmp	r3, #8
 80086e2:	d10b      	bne.n	80086fc <_printf_i+0x14c>
 80086e4:	6823      	ldr	r3, [r4, #0]
 80086e6:	07de      	lsls	r6, r3, #31
 80086e8:	d508      	bpl.n	80086fc <_printf_i+0x14c>
 80086ea:	6923      	ldr	r3, [r4, #16]
 80086ec:	6861      	ldr	r1, [r4, #4]
 80086ee:	4299      	cmp	r1, r3
 80086f0:	bfde      	ittt	le
 80086f2:	2330      	movle	r3, #48	; 0x30
 80086f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80086f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80086fc:	1b52      	subs	r2, r2, r5
 80086fe:	6122      	str	r2, [r4, #16]
 8008700:	f8cd a000 	str.w	sl, [sp]
 8008704:	464b      	mov	r3, r9
 8008706:	aa03      	add	r2, sp, #12
 8008708:	4621      	mov	r1, r4
 800870a:	4640      	mov	r0, r8
 800870c:	f7ff fee2 	bl	80084d4 <_printf_common>
 8008710:	3001      	adds	r0, #1
 8008712:	d14c      	bne.n	80087ae <_printf_i+0x1fe>
 8008714:	f04f 30ff 	mov.w	r0, #4294967295
 8008718:	b004      	add	sp, #16
 800871a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800871e:	4835      	ldr	r0, [pc, #212]	; (80087f4 <_printf_i+0x244>)
 8008720:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008724:	6829      	ldr	r1, [r5, #0]
 8008726:	6823      	ldr	r3, [r4, #0]
 8008728:	f851 6b04 	ldr.w	r6, [r1], #4
 800872c:	6029      	str	r1, [r5, #0]
 800872e:	061d      	lsls	r5, r3, #24
 8008730:	d514      	bpl.n	800875c <_printf_i+0x1ac>
 8008732:	07df      	lsls	r7, r3, #31
 8008734:	bf44      	itt	mi
 8008736:	f043 0320 	orrmi.w	r3, r3, #32
 800873a:	6023      	strmi	r3, [r4, #0]
 800873c:	b91e      	cbnz	r6, 8008746 <_printf_i+0x196>
 800873e:	6823      	ldr	r3, [r4, #0]
 8008740:	f023 0320 	bic.w	r3, r3, #32
 8008744:	6023      	str	r3, [r4, #0]
 8008746:	2310      	movs	r3, #16
 8008748:	e7b0      	b.n	80086ac <_printf_i+0xfc>
 800874a:	6823      	ldr	r3, [r4, #0]
 800874c:	f043 0320 	orr.w	r3, r3, #32
 8008750:	6023      	str	r3, [r4, #0]
 8008752:	2378      	movs	r3, #120	; 0x78
 8008754:	4828      	ldr	r0, [pc, #160]	; (80087f8 <_printf_i+0x248>)
 8008756:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800875a:	e7e3      	b.n	8008724 <_printf_i+0x174>
 800875c:	0659      	lsls	r1, r3, #25
 800875e:	bf48      	it	mi
 8008760:	b2b6      	uxthmi	r6, r6
 8008762:	e7e6      	b.n	8008732 <_printf_i+0x182>
 8008764:	4615      	mov	r5, r2
 8008766:	e7bb      	b.n	80086e0 <_printf_i+0x130>
 8008768:	682b      	ldr	r3, [r5, #0]
 800876a:	6826      	ldr	r6, [r4, #0]
 800876c:	6961      	ldr	r1, [r4, #20]
 800876e:	1d18      	adds	r0, r3, #4
 8008770:	6028      	str	r0, [r5, #0]
 8008772:	0635      	lsls	r5, r6, #24
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	d501      	bpl.n	800877c <_printf_i+0x1cc>
 8008778:	6019      	str	r1, [r3, #0]
 800877a:	e002      	b.n	8008782 <_printf_i+0x1d2>
 800877c:	0670      	lsls	r0, r6, #25
 800877e:	d5fb      	bpl.n	8008778 <_printf_i+0x1c8>
 8008780:	8019      	strh	r1, [r3, #0]
 8008782:	2300      	movs	r3, #0
 8008784:	6123      	str	r3, [r4, #16]
 8008786:	4615      	mov	r5, r2
 8008788:	e7ba      	b.n	8008700 <_printf_i+0x150>
 800878a:	682b      	ldr	r3, [r5, #0]
 800878c:	1d1a      	adds	r2, r3, #4
 800878e:	602a      	str	r2, [r5, #0]
 8008790:	681d      	ldr	r5, [r3, #0]
 8008792:	6862      	ldr	r2, [r4, #4]
 8008794:	2100      	movs	r1, #0
 8008796:	4628      	mov	r0, r5
 8008798:	f7f7 fd22 	bl	80001e0 <memchr>
 800879c:	b108      	cbz	r0, 80087a2 <_printf_i+0x1f2>
 800879e:	1b40      	subs	r0, r0, r5
 80087a0:	6060      	str	r0, [r4, #4]
 80087a2:	6863      	ldr	r3, [r4, #4]
 80087a4:	6123      	str	r3, [r4, #16]
 80087a6:	2300      	movs	r3, #0
 80087a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087ac:	e7a8      	b.n	8008700 <_printf_i+0x150>
 80087ae:	6923      	ldr	r3, [r4, #16]
 80087b0:	462a      	mov	r2, r5
 80087b2:	4649      	mov	r1, r9
 80087b4:	4640      	mov	r0, r8
 80087b6:	47d0      	blx	sl
 80087b8:	3001      	adds	r0, #1
 80087ba:	d0ab      	beq.n	8008714 <_printf_i+0x164>
 80087bc:	6823      	ldr	r3, [r4, #0]
 80087be:	079b      	lsls	r3, r3, #30
 80087c0:	d413      	bmi.n	80087ea <_printf_i+0x23a>
 80087c2:	68e0      	ldr	r0, [r4, #12]
 80087c4:	9b03      	ldr	r3, [sp, #12]
 80087c6:	4298      	cmp	r0, r3
 80087c8:	bfb8      	it	lt
 80087ca:	4618      	movlt	r0, r3
 80087cc:	e7a4      	b.n	8008718 <_printf_i+0x168>
 80087ce:	2301      	movs	r3, #1
 80087d0:	4632      	mov	r2, r6
 80087d2:	4649      	mov	r1, r9
 80087d4:	4640      	mov	r0, r8
 80087d6:	47d0      	blx	sl
 80087d8:	3001      	adds	r0, #1
 80087da:	d09b      	beq.n	8008714 <_printf_i+0x164>
 80087dc:	3501      	adds	r5, #1
 80087de:	68e3      	ldr	r3, [r4, #12]
 80087e0:	9903      	ldr	r1, [sp, #12]
 80087e2:	1a5b      	subs	r3, r3, r1
 80087e4:	42ab      	cmp	r3, r5
 80087e6:	dcf2      	bgt.n	80087ce <_printf_i+0x21e>
 80087e8:	e7eb      	b.n	80087c2 <_printf_i+0x212>
 80087ea:	2500      	movs	r5, #0
 80087ec:	f104 0619 	add.w	r6, r4, #25
 80087f0:	e7f5      	b.n	80087de <_printf_i+0x22e>
 80087f2:	bf00      	nop
 80087f4:	0800977d 	.word	0x0800977d
 80087f8:	0800978e 	.word	0x0800978e
 80087fc:	00000000 	.word	0x00000000

08008800 <nan>:
 8008800:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008808 <nan+0x8>
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	00000000 	.word	0x00000000
 800880c:	7ff80000 	.word	0x7ff80000

08008810 <_sbrk_r>:
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	4d06      	ldr	r5, [pc, #24]	; (800882c <_sbrk_r+0x1c>)
 8008814:	2300      	movs	r3, #0
 8008816:	4604      	mov	r4, r0
 8008818:	4608      	mov	r0, r1
 800881a:	602b      	str	r3, [r5, #0]
 800881c:	f7f9 fbb6 	bl	8001f8c <_sbrk>
 8008820:	1c43      	adds	r3, r0, #1
 8008822:	d102      	bne.n	800882a <_sbrk_r+0x1a>
 8008824:	682b      	ldr	r3, [r5, #0]
 8008826:	b103      	cbz	r3, 800882a <_sbrk_r+0x1a>
 8008828:	6023      	str	r3, [r4, #0]
 800882a:	bd38      	pop	{r3, r4, r5, pc}
 800882c:	200006c0 	.word	0x200006c0

08008830 <nanf>:
 8008830:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008838 <nanf+0x8>
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	7fc00000 	.word	0x7fc00000

0800883c <__swbuf_r>:
 800883c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800883e:	460e      	mov	r6, r1
 8008840:	4614      	mov	r4, r2
 8008842:	4605      	mov	r5, r0
 8008844:	b118      	cbz	r0, 800884e <__swbuf_r+0x12>
 8008846:	6983      	ldr	r3, [r0, #24]
 8008848:	b90b      	cbnz	r3, 800884e <__swbuf_r+0x12>
 800884a:	f000 f9e7 	bl	8008c1c <__sinit>
 800884e:	4b21      	ldr	r3, [pc, #132]	; (80088d4 <__swbuf_r+0x98>)
 8008850:	429c      	cmp	r4, r3
 8008852:	d12b      	bne.n	80088ac <__swbuf_r+0x70>
 8008854:	686c      	ldr	r4, [r5, #4]
 8008856:	69a3      	ldr	r3, [r4, #24]
 8008858:	60a3      	str	r3, [r4, #8]
 800885a:	89a3      	ldrh	r3, [r4, #12]
 800885c:	071a      	lsls	r2, r3, #28
 800885e:	d52f      	bpl.n	80088c0 <__swbuf_r+0x84>
 8008860:	6923      	ldr	r3, [r4, #16]
 8008862:	b36b      	cbz	r3, 80088c0 <__swbuf_r+0x84>
 8008864:	6923      	ldr	r3, [r4, #16]
 8008866:	6820      	ldr	r0, [r4, #0]
 8008868:	1ac0      	subs	r0, r0, r3
 800886a:	6963      	ldr	r3, [r4, #20]
 800886c:	b2f6      	uxtb	r6, r6
 800886e:	4283      	cmp	r3, r0
 8008870:	4637      	mov	r7, r6
 8008872:	dc04      	bgt.n	800887e <__swbuf_r+0x42>
 8008874:	4621      	mov	r1, r4
 8008876:	4628      	mov	r0, r5
 8008878:	f000 f93c 	bl	8008af4 <_fflush_r>
 800887c:	bb30      	cbnz	r0, 80088cc <__swbuf_r+0x90>
 800887e:	68a3      	ldr	r3, [r4, #8]
 8008880:	3b01      	subs	r3, #1
 8008882:	60a3      	str	r3, [r4, #8]
 8008884:	6823      	ldr	r3, [r4, #0]
 8008886:	1c5a      	adds	r2, r3, #1
 8008888:	6022      	str	r2, [r4, #0]
 800888a:	701e      	strb	r6, [r3, #0]
 800888c:	6963      	ldr	r3, [r4, #20]
 800888e:	3001      	adds	r0, #1
 8008890:	4283      	cmp	r3, r0
 8008892:	d004      	beq.n	800889e <__swbuf_r+0x62>
 8008894:	89a3      	ldrh	r3, [r4, #12]
 8008896:	07db      	lsls	r3, r3, #31
 8008898:	d506      	bpl.n	80088a8 <__swbuf_r+0x6c>
 800889a:	2e0a      	cmp	r6, #10
 800889c:	d104      	bne.n	80088a8 <__swbuf_r+0x6c>
 800889e:	4621      	mov	r1, r4
 80088a0:	4628      	mov	r0, r5
 80088a2:	f000 f927 	bl	8008af4 <_fflush_r>
 80088a6:	b988      	cbnz	r0, 80088cc <__swbuf_r+0x90>
 80088a8:	4638      	mov	r0, r7
 80088aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088ac:	4b0a      	ldr	r3, [pc, #40]	; (80088d8 <__swbuf_r+0x9c>)
 80088ae:	429c      	cmp	r4, r3
 80088b0:	d101      	bne.n	80088b6 <__swbuf_r+0x7a>
 80088b2:	68ac      	ldr	r4, [r5, #8]
 80088b4:	e7cf      	b.n	8008856 <__swbuf_r+0x1a>
 80088b6:	4b09      	ldr	r3, [pc, #36]	; (80088dc <__swbuf_r+0xa0>)
 80088b8:	429c      	cmp	r4, r3
 80088ba:	bf08      	it	eq
 80088bc:	68ec      	ldreq	r4, [r5, #12]
 80088be:	e7ca      	b.n	8008856 <__swbuf_r+0x1a>
 80088c0:	4621      	mov	r1, r4
 80088c2:	4628      	mov	r0, r5
 80088c4:	f000 f81a 	bl	80088fc <__swsetup_r>
 80088c8:	2800      	cmp	r0, #0
 80088ca:	d0cb      	beq.n	8008864 <__swbuf_r+0x28>
 80088cc:	f04f 37ff 	mov.w	r7, #4294967295
 80088d0:	e7ea      	b.n	80088a8 <__swbuf_r+0x6c>
 80088d2:	bf00      	nop
 80088d4:	080097c0 	.word	0x080097c0
 80088d8:	080097e0 	.word	0x080097e0
 80088dc:	080097a0 	.word	0x080097a0

080088e0 <__ascii_wctomb>:
 80088e0:	b149      	cbz	r1, 80088f6 <__ascii_wctomb+0x16>
 80088e2:	2aff      	cmp	r2, #255	; 0xff
 80088e4:	bf85      	ittet	hi
 80088e6:	238a      	movhi	r3, #138	; 0x8a
 80088e8:	6003      	strhi	r3, [r0, #0]
 80088ea:	700a      	strbls	r2, [r1, #0]
 80088ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80088f0:	bf98      	it	ls
 80088f2:	2001      	movls	r0, #1
 80088f4:	4770      	bx	lr
 80088f6:	4608      	mov	r0, r1
 80088f8:	4770      	bx	lr
	...

080088fc <__swsetup_r>:
 80088fc:	4b32      	ldr	r3, [pc, #200]	; (80089c8 <__swsetup_r+0xcc>)
 80088fe:	b570      	push	{r4, r5, r6, lr}
 8008900:	681d      	ldr	r5, [r3, #0]
 8008902:	4606      	mov	r6, r0
 8008904:	460c      	mov	r4, r1
 8008906:	b125      	cbz	r5, 8008912 <__swsetup_r+0x16>
 8008908:	69ab      	ldr	r3, [r5, #24]
 800890a:	b913      	cbnz	r3, 8008912 <__swsetup_r+0x16>
 800890c:	4628      	mov	r0, r5
 800890e:	f000 f985 	bl	8008c1c <__sinit>
 8008912:	4b2e      	ldr	r3, [pc, #184]	; (80089cc <__swsetup_r+0xd0>)
 8008914:	429c      	cmp	r4, r3
 8008916:	d10f      	bne.n	8008938 <__swsetup_r+0x3c>
 8008918:	686c      	ldr	r4, [r5, #4]
 800891a:	89a3      	ldrh	r3, [r4, #12]
 800891c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008920:	0719      	lsls	r1, r3, #28
 8008922:	d42c      	bmi.n	800897e <__swsetup_r+0x82>
 8008924:	06dd      	lsls	r5, r3, #27
 8008926:	d411      	bmi.n	800894c <__swsetup_r+0x50>
 8008928:	2309      	movs	r3, #9
 800892a:	6033      	str	r3, [r6, #0]
 800892c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008930:	81a3      	strh	r3, [r4, #12]
 8008932:	f04f 30ff 	mov.w	r0, #4294967295
 8008936:	e03e      	b.n	80089b6 <__swsetup_r+0xba>
 8008938:	4b25      	ldr	r3, [pc, #148]	; (80089d0 <__swsetup_r+0xd4>)
 800893a:	429c      	cmp	r4, r3
 800893c:	d101      	bne.n	8008942 <__swsetup_r+0x46>
 800893e:	68ac      	ldr	r4, [r5, #8]
 8008940:	e7eb      	b.n	800891a <__swsetup_r+0x1e>
 8008942:	4b24      	ldr	r3, [pc, #144]	; (80089d4 <__swsetup_r+0xd8>)
 8008944:	429c      	cmp	r4, r3
 8008946:	bf08      	it	eq
 8008948:	68ec      	ldreq	r4, [r5, #12]
 800894a:	e7e6      	b.n	800891a <__swsetup_r+0x1e>
 800894c:	0758      	lsls	r0, r3, #29
 800894e:	d512      	bpl.n	8008976 <__swsetup_r+0x7a>
 8008950:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008952:	b141      	cbz	r1, 8008966 <__swsetup_r+0x6a>
 8008954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008958:	4299      	cmp	r1, r3
 800895a:	d002      	beq.n	8008962 <__swsetup_r+0x66>
 800895c:	4630      	mov	r0, r6
 800895e:	f7ff fa23 	bl	8007da8 <_free_r>
 8008962:	2300      	movs	r3, #0
 8008964:	6363      	str	r3, [r4, #52]	; 0x34
 8008966:	89a3      	ldrh	r3, [r4, #12]
 8008968:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800896c:	81a3      	strh	r3, [r4, #12]
 800896e:	2300      	movs	r3, #0
 8008970:	6063      	str	r3, [r4, #4]
 8008972:	6923      	ldr	r3, [r4, #16]
 8008974:	6023      	str	r3, [r4, #0]
 8008976:	89a3      	ldrh	r3, [r4, #12]
 8008978:	f043 0308 	orr.w	r3, r3, #8
 800897c:	81a3      	strh	r3, [r4, #12]
 800897e:	6923      	ldr	r3, [r4, #16]
 8008980:	b94b      	cbnz	r3, 8008996 <__swsetup_r+0x9a>
 8008982:	89a3      	ldrh	r3, [r4, #12]
 8008984:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800898c:	d003      	beq.n	8008996 <__swsetup_r+0x9a>
 800898e:	4621      	mov	r1, r4
 8008990:	4630      	mov	r0, r6
 8008992:	f000 fa09 	bl	8008da8 <__smakebuf_r>
 8008996:	89a0      	ldrh	r0, [r4, #12]
 8008998:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800899c:	f010 0301 	ands.w	r3, r0, #1
 80089a0:	d00a      	beq.n	80089b8 <__swsetup_r+0xbc>
 80089a2:	2300      	movs	r3, #0
 80089a4:	60a3      	str	r3, [r4, #8]
 80089a6:	6963      	ldr	r3, [r4, #20]
 80089a8:	425b      	negs	r3, r3
 80089aa:	61a3      	str	r3, [r4, #24]
 80089ac:	6923      	ldr	r3, [r4, #16]
 80089ae:	b943      	cbnz	r3, 80089c2 <__swsetup_r+0xc6>
 80089b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80089b4:	d1ba      	bne.n	800892c <__swsetup_r+0x30>
 80089b6:	bd70      	pop	{r4, r5, r6, pc}
 80089b8:	0781      	lsls	r1, r0, #30
 80089ba:	bf58      	it	pl
 80089bc:	6963      	ldrpl	r3, [r4, #20]
 80089be:	60a3      	str	r3, [r4, #8]
 80089c0:	e7f4      	b.n	80089ac <__swsetup_r+0xb0>
 80089c2:	2000      	movs	r0, #0
 80089c4:	e7f7      	b.n	80089b6 <__swsetup_r+0xba>
 80089c6:	bf00      	nop
 80089c8:	20000090 	.word	0x20000090
 80089cc:	080097c0 	.word	0x080097c0
 80089d0:	080097e0 	.word	0x080097e0
 80089d4:	080097a0 	.word	0x080097a0

080089d8 <abort>:
 80089d8:	b508      	push	{r3, lr}
 80089da:	2006      	movs	r0, #6
 80089dc:	f000 faa2 	bl	8008f24 <raise>
 80089e0:	2001      	movs	r0, #1
 80089e2:	f7f9 fa5b 	bl	8001e9c <_exit>
	...

080089e8 <__sflush_r>:
 80089e8:	898a      	ldrh	r2, [r1, #12]
 80089ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ee:	4605      	mov	r5, r0
 80089f0:	0710      	lsls	r0, r2, #28
 80089f2:	460c      	mov	r4, r1
 80089f4:	d458      	bmi.n	8008aa8 <__sflush_r+0xc0>
 80089f6:	684b      	ldr	r3, [r1, #4]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	dc05      	bgt.n	8008a08 <__sflush_r+0x20>
 80089fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	dc02      	bgt.n	8008a08 <__sflush_r+0x20>
 8008a02:	2000      	movs	r0, #0
 8008a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a0a:	2e00      	cmp	r6, #0
 8008a0c:	d0f9      	beq.n	8008a02 <__sflush_r+0x1a>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a14:	682f      	ldr	r7, [r5, #0]
 8008a16:	602b      	str	r3, [r5, #0]
 8008a18:	d032      	beq.n	8008a80 <__sflush_r+0x98>
 8008a1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a1c:	89a3      	ldrh	r3, [r4, #12]
 8008a1e:	075a      	lsls	r2, r3, #29
 8008a20:	d505      	bpl.n	8008a2e <__sflush_r+0x46>
 8008a22:	6863      	ldr	r3, [r4, #4]
 8008a24:	1ac0      	subs	r0, r0, r3
 8008a26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a28:	b10b      	cbz	r3, 8008a2e <__sflush_r+0x46>
 8008a2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a2c:	1ac0      	subs	r0, r0, r3
 8008a2e:	2300      	movs	r3, #0
 8008a30:	4602      	mov	r2, r0
 8008a32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a34:	6a21      	ldr	r1, [r4, #32]
 8008a36:	4628      	mov	r0, r5
 8008a38:	47b0      	blx	r6
 8008a3a:	1c43      	adds	r3, r0, #1
 8008a3c:	89a3      	ldrh	r3, [r4, #12]
 8008a3e:	d106      	bne.n	8008a4e <__sflush_r+0x66>
 8008a40:	6829      	ldr	r1, [r5, #0]
 8008a42:	291d      	cmp	r1, #29
 8008a44:	d82c      	bhi.n	8008aa0 <__sflush_r+0xb8>
 8008a46:	4a2a      	ldr	r2, [pc, #168]	; (8008af0 <__sflush_r+0x108>)
 8008a48:	40ca      	lsrs	r2, r1
 8008a4a:	07d6      	lsls	r6, r2, #31
 8008a4c:	d528      	bpl.n	8008aa0 <__sflush_r+0xb8>
 8008a4e:	2200      	movs	r2, #0
 8008a50:	6062      	str	r2, [r4, #4]
 8008a52:	04d9      	lsls	r1, r3, #19
 8008a54:	6922      	ldr	r2, [r4, #16]
 8008a56:	6022      	str	r2, [r4, #0]
 8008a58:	d504      	bpl.n	8008a64 <__sflush_r+0x7c>
 8008a5a:	1c42      	adds	r2, r0, #1
 8008a5c:	d101      	bne.n	8008a62 <__sflush_r+0x7a>
 8008a5e:	682b      	ldr	r3, [r5, #0]
 8008a60:	b903      	cbnz	r3, 8008a64 <__sflush_r+0x7c>
 8008a62:	6560      	str	r0, [r4, #84]	; 0x54
 8008a64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a66:	602f      	str	r7, [r5, #0]
 8008a68:	2900      	cmp	r1, #0
 8008a6a:	d0ca      	beq.n	8008a02 <__sflush_r+0x1a>
 8008a6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a70:	4299      	cmp	r1, r3
 8008a72:	d002      	beq.n	8008a7a <__sflush_r+0x92>
 8008a74:	4628      	mov	r0, r5
 8008a76:	f7ff f997 	bl	8007da8 <_free_r>
 8008a7a:	2000      	movs	r0, #0
 8008a7c:	6360      	str	r0, [r4, #52]	; 0x34
 8008a7e:	e7c1      	b.n	8008a04 <__sflush_r+0x1c>
 8008a80:	6a21      	ldr	r1, [r4, #32]
 8008a82:	2301      	movs	r3, #1
 8008a84:	4628      	mov	r0, r5
 8008a86:	47b0      	blx	r6
 8008a88:	1c41      	adds	r1, r0, #1
 8008a8a:	d1c7      	bne.n	8008a1c <__sflush_r+0x34>
 8008a8c:	682b      	ldr	r3, [r5, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d0c4      	beq.n	8008a1c <__sflush_r+0x34>
 8008a92:	2b1d      	cmp	r3, #29
 8008a94:	d001      	beq.n	8008a9a <__sflush_r+0xb2>
 8008a96:	2b16      	cmp	r3, #22
 8008a98:	d101      	bne.n	8008a9e <__sflush_r+0xb6>
 8008a9a:	602f      	str	r7, [r5, #0]
 8008a9c:	e7b1      	b.n	8008a02 <__sflush_r+0x1a>
 8008a9e:	89a3      	ldrh	r3, [r4, #12]
 8008aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aa4:	81a3      	strh	r3, [r4, #12]
 8008aa6:	e7ad      	b.n	8008a04 <__sflush_r+0x1c>
 8008aa8:	690f      	ldr	r7, [r1, #16]
 8008aaa:	2f00      	cmp	r7, #0
 8008aac:	d0a9      	beq.n	8008a02 <__sflush_r+0x1a>
 8008aae:	0793      	lsls	r3, r2, #30
 8008ab0:	680e      	ldr	r6, [r1, #0]
 8008ab2:	bf08      	it	eq
 8008ab4:	694b      	ldreq	r3, [r1, #20]
 8008ab6:	600f      	str	r7, [r1, #0]
 8008ab8:	bf18      	it	ne
 8008aba:	2300      	movne	r3, #0
 8008abc:	eba6 0807 	sub.w	r8, r6, r7
 8008ac0:	608b      	str	r3, [r1, #8]
 8008ac2:	f1b8 0f00 	cmp.w	r8, #0
 8008ac6:	dd9c      	ble.n	8008a02 <__sflush_r+0x1a>
 8008ac8:	6a21      	ldr	r1, [r4, #32]
 8008aca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008acc:	4643      	mov	r3, r8
 8008ace:	463a      	mov	r2, r7
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	47b0      	blx	r6
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	dc06      	bgt.n	8008ae6 <__sflush_r+0xfe>
 8008ad8:	89a3      	ldrh	r3, [r4, #12]
 8008ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ade:	81a3      	strh	r3, [r4, #12]
 8008ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae4:	e78e      	b.n	8008a04 <__sflush_r+0x1c>
 8008ae6:	4407      	add	r7, r0
 8008ae8:	eba8 0800 	sub.w	r8, r8, r0
 8008aec:	e7e9      	b.n	8008ac2 <__sflush_r+0xda>
 8008aee:	bf00      	nop
 8008af0:	20400001 	.word	0x20400001

08008af4 <_fflush_r>:
 8008af4:	b538      	push	{r3, r4, r5, lr}
 8008af6:	690b      	ldr	r3, [r1, #16]
 8008af8:	4605      	mov	r5, r0
 8008afa:	460c      	mov	r4, r1
 8008afc:	b913      	cbnz	r3, 8008b04 <_fflush_r+0x10>
 8008afe:	2500      	movs	r5, #0
 8008b00:	4628      	mov	r0, r5
 8008b02:	bd38      	pop	{r3, r4, r5, pc}
 8008b04:	b118      	cbz	r0, 8008b0e <_fflush_r+0x1a>
 8008b06:	6983      	ldr	r3, [r0, #24]
 8008b08:	b90b      	cbnz	r3, 8008b0e <_fflush_r+0x1a>
 8008b0a:	f000 f887 	bl	8008c1c <__sinit>
 8008b0e:	4b14      	ldr	r3, [pc, #80]	; (8008b60 <_fflush_r+0x6c>)
 8008b10:	429c      	cmp	r4, r3
 8008b12:	d11b      	bne.n	8008b4c <_fflush_r+0x58>
 8008b14:	686c      	ldr	r4, [r5, #4]
 8008b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d0ef      	beq.n	8008afe <_fflush_r+0xa>
 8008b1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b20:	07d0      	lsls	r0, r2, #31
 8008b22:	d404      	bmi.n	8008b2e <_fflush_r+0x3a>
 8008b24:	0599      	lsls	r1, r3, #22
 8008b26:	d402      	bmi.n	8008b2e <_fflush_r+0x3a>
 8008b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b2a:	f000 f915 	bl	8008d58 <__retarget_lock_acquire_recursive>
 8008b2e:	4628      	mov	r0, r5
 8008b30:	4621      	mov	r1, r4
 8008b32:	f7ff ff59 	bl	80089e8 <__sflush_r>
 8008b36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b38:	07da      	lsls	r2, r3, #31
 8008b3a:	4605      	mov	r5, r0
 8008b3c:	d4e0      	bmi.n	8008b00 <_fflush_r+0xc>
 8008b3e:	89a3      	ldrh	r3, [r4, #12]
 8008b40:	059b      	lsls	r3, r3, #22
 8008b42:	d4dd      	bmi.n	8008b00 <_fflush_r+0xc>
 8008b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b46:	f000 f908 	bl	8008d5a <__retarget_lock_release_recursive>
 8008b4a:	e7d9      	b.n	8008b00 <_fflush_r+0xc>
 8008b4c:	4b05      	ldr	r3, [pc, #20]	; (8008b64 <_fflush_r+0x70>)
 8008b4e:	429c      	cmp	r4, r3
 8008b50:	d101      	bne.n	8008b56 <_fflush_r+0x62>
 8008b52:	68ac      	ldr	r4, [r5, #8]
 8008b54:	e7df      	b.n	8008b16 <_fflush_r+0x22>
 8008b56:	4b04      	ldr	r3, [pc, #16]	; (8008b68 <_fflush_r+0x74>)
 8008b58:	429c      	cmp	r4, r3
 8008b5a:	bf08      	it	eq
 8008b5c:	68ec      	ldreq	r4, [r5, #12]
 8008b5e:	e7da      	b.n	8008b16 <_fflush_r+0x22>
 8008b60:	080097c0 	.word	0x080097c0
 8008b64:	080097e0 	.word	0x080097e0
 8008b68:	080097a0 	.word	0x080097a0

08008b6c <std>:
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	b510      	push	{r4, lr}
 8008b70:	4604      	mov	r4, r0
 8008b72:	e9c0 3300 	strd	r3, r3, [r0]
 8008b76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b7a:	6083      	str	r3, [r0, #8]
 8008b7c:	8181      	strh	r1, [r0, #12]
 8008b7e:	6643      	str	r3, [r0, #100]	; 0x64
 8008b80:	81c2      	strh	r2, [r0, #14]
 8008b82:	6183      	str	r3, [r0, #24]
 8008b84:	4619      	mov	r1, r3
 8008b86:	2208      	movs	r2, #8
 8008b88:	305c      	adds	r0, #92	; 0x5c
 8008b8a:	f7fd f8c3 	bl	8005d14 <memset>
 8008b8e:	4b05      	ldr	r3, [pc, #20]	; (8008ba4 <std+0x38>)
 8008b90:	6263      	str	r3, [r4, #36]	; 0x24
 8008b92:	4b05      	ldr	r3, [pc, #20]	; (8008ba8 <std+0x3c>)
 8008b94:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b96:	4b05      	ldr	r3, [pc, #20]	; (8008bac <std+0x40>)
 8008b98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b9a:	4b05      	ldr	r3, [pc, #20]	; (8008bb0 <std+0x44>)
 8008b9c:	6224      	str	r4, [r4, #32]
 8008b9e:	6323      	str	r3, [r4, #48]	; 0x30
 8008ba0:	bd10      	pop	{r4, pc}
 8008ba2:	bf00      	nop
 8008ba4:	08008f5d 	.word	0x08008f5d
 8008ba8:	08008f7f 	.word	0x08008f7f
 8008bac:	08008fb7 	.word	0x08008fb7
 8008bb0:	08008fdb 	.word	0x08008fdb

08008bb4 <_cleanup_r>:
 8008bb4:	4901      	ldr	r1, [pc, #4]	; (8008bbc <_cleanup_r+0x8>)
 8008bb6:	f000 b8af 	b.w	8008d18 <_fwalk_reent>
 8008bba:	bf00      	nop
 8008bbc:	08008af5 	.word	0x08008af5

08008bc0 <__sfmoreglue>:
 8008bc0:	b570      	push	{r4, r5, r6, lr}
 8008bc2:	2268      	movs	r2, #104	; 0x68
 8008bc4:	1e4d      	subs	r5, r1, #1
 8008bc6:	4355      	muls	r5, r2
 8008bc8:	460e      	mov	r6, r1
 8008bca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008bce:	f7ff f957 	bl	8007e80 <_malloc_r>
 8008bd2:	4604      	mov	r4, r0
 8008bd4:	b140      	cbz	r0, 8008be8 <__sfmoreglue+0x28>
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	e9c0 1600 	strd	r1, r6, [r0]
 8008bdc:	300c      	adds	r0, #12
 8008bde:	60a0      	str	r0, [r4, #8]
 8008be0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008be4:	f7fd f896 	bl	8005d14 <memset>
 8008be8:	4620      	mov	r0, r4
 8008bea:	bd70      	pop	{r4, r5, r6, pc}

08008bec <__sfp_lock_acquire>:
 8008bec:	4801      	ldr	r0, [pc, #4]	; (8008bf4 <__sfp_lock_acquire+0x8>)
 8008bee:	f000 b8b3 	b.w	8008d58 <__retarget_lock_acquire_recursive>
 8008bf2:	bf00      	nop
 8008bf4:	200006bd 	.word	0x200006bd

08008bf8 <__sfp_lock_release>:
 8008bf8:	4801      	ldr	r0, [pc, #4]	; (8008c00 <__sfp_lock_release+0x8>)
 8008bfa:	f000 b8ae 	b.w	8008d5a <__retarget_lock_release_recursive>
 8008bfe:	bf00      	nop
 8008c00:	200006bd 	.word	0x200006bd

08008c04 <__sinit_lock_acquire>:
 8008c04:	4801      	ldr	r0, [pc, #4]	; (8008c0c <__sinit_lock_acquire+0x8>)
 8008c06:	f000 b8a7 	b.w	8008d58 <__retarget_lock_acquire_recursive>
 8008c0a:	bf00      	nop
 8008c0c:	200006be 	.word	0x200006be

08008c10 <__sinit_lock_release>:
 8008c10:	4801      	ldr	r0, [pc, #4]	; (8008c18 <__sinit_lock_release+0x8>)
 8008c12:	f000 b8a2 	b.w	8008d5a <__retarget_lock_release_recursive>
 8008c16:	bf00      	nop
 8008c18:	200006be 	.word	0x200006be

08008c1c <__sinit>:
 8008c1c:	b510      	push	{r4, lr}
 8008c1e:	4604      	mov	r4, r0
 8008c20:	f7ff fff0 	bl	8008c04 <__sinit_lock_acquire>
 8008c24:	69a3      	ldr	r3, [r4, #24]
 8008c26:	b11b      	cbz	r3, 8008c30 <__sinit+0x14>
 8008c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c2c:	f7ff bff0 	b.w	8008c10 <__sinit_lock_release>
 8008c30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008c34:	6523      	str	r3, [r4, #80]	; 0x50
 8008c36:	4b13      	ldr	r3, [pc, #76]	; (8008c84 <__sinit+0x68>)
 8008c38:	4a13      	ldr	r2, [pc, #76]	; (8008c88 <__sinit+0x6c>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008c3e:	42a3      	cmp	r3, r4
 8008c40:	bf04      	itt	eq
 8008c42:	2301      	moveq	r3, #1
 8008c44:	61a3      	streq	r3, [r4, #24]
 8008c46:	4620      	mov	r0, r4
 8008c48:	f000 f820 	bl	8008c8c <__sfp>
 8008c4c:	6060      	str	r0, [r4, #4]
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f000 f81c 	bl	8008c8c <__sfp>
 8008c54:	60a0      	str	r0, [r4, #8]
 8008c56:	4620      	mov	r0, r4
 8008c58:	f000 f818 	bl	8008c8c <__sfp>
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	60e0      	str	r0, [r4, #12]
 8008c60:	2104      	movs	r1, #4
 8008c62:	6860      	ldr	r0, [r4, #4]
 8008c64:	f7ff ff82 	bl	8008b6c <std>
 8008c68:	68a0      	ldr	r0, [r4, #8]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	2109      	movs	r1, #9
 8008c6e:	f7ff ff7d 	bl	8008b6c <std>
 8008c72:	68e0      	ldr	r0, [r4, #12]
 8008c74:	2202      	movs	r2, #2
 8008c76:	2112      	movs	r1, #18
 8008c78:	f7ff ff78 	bl	8008b6c <std>
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	61a3      	str	r3, [r4, #24]
 8008c80:	e7d2      	b.n	8008c28 <__sinit+0xc>
 8008c82:	bf00      	nop
 8008c84:	08009374 	.word	0x08009374
 8008c88:	08008bb5 	.word	0x08008bb5

08008c8c <__sfp>:
 8008c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8e:	4607      	mov	r7, r0
 8008c90:	f7ff ffac 	bl	8008bec <__sfp_lock_acquire>
 8008c94:	4b1e      	ldr	r3, [pc, #120]	; (8008d10 <__sfp+0x84>)
 8008c96:	681e      	ldr	r6, [r3, #0]
 8008c98:	69b3      	ldr	r3, [r6, #24]
 8008c9a:	b913      	cbnz	r3, 8008ca2 <__sfp+0x16>
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	f7ff ffbd 	bl	8008c1c <__sinit>
 8008ca2:	3648      	adds	r6, #72	; 0x48
 8008ca4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	d503      	bpl.n	8008cb4 <__sfp+0x28>
 8008cac:	6833      	ldr	r3, [r6, #0]
 8008cae:	b30b      	cbz	r3, 8008cf4 <__sfp+0x68>
 8008cb0:	6836      	ldr	r6, [r6, #0]
 8008cb2:	e7f7      	b.n	8008ca4 <__sfp+0x18>
 8008cb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008cb8:	b9d5      	cbnz	r5, 8008cf0 <__sfp+0x64>
 8008cba:	4b16      	ldr	r3, [pc, #88]	; (8008d14 <__sfp+0x88>)
 8008cbc:	60e3      	str	r3, [r4, #12]
 8008cbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008cc2:	6665      	str	r5, [r4, #100]	; 0x64
 8008cc4:	f000 f847 	bl	8008d56 <__retarget_lock_init_recursive>
 8008cc8:	f7ff ff96 	bl	8008bf8 <__sfp_lock_release>
 8008ccc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008cd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008cd4:	6025      	str	r5, [r4, #0]
 8008cd6:	61a5      	str	r5, [r4, #24]
 8008cd8:	2208      	movs	r2, #8
 8008cda:	4629      	mov	r1, r5
 8008cdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ce0:	f7fd f818 	bl	8005d14 <memset>
 8008ce4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ce8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008cec:	4620      	mov	r0, r4
 8008cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cf0:	3468      	adds	r4, #104	; 0x68
 8008cf2:	e7d9      	b.n	8008ca8 <__sfp+0x1c>
 8008cf4:	2104      	movs	r1, #4
 8008cf6:	4638      	mov	r0, r7
 8008cf8:	f7ff ff62 	bl	8008bc0 <__sfmoreglue>
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	6030      	str	r0, [r6, #0]
 8008d00:	2800      	cmp	r0, #0
 8008d02:	d1d5      	bne.n	8008cb0 <__sfp+0x24>
 8008d04:	f7ff ff78 	bl	8008bf8 <__sfp_lock_release>
 8008d08:	230c      	movs	r3, #12
 8008d0a:	603b      	str	r3, [r7, #0]
 8008d0c:	e7ee      	b.n	8008cec <__sfp+0x60>
 8008d0e:	bf00      	nop
 8008d10:	08009374 	.word	0x08009374
 8008d14:	ffff0001 	.word	0xffff0001

08008d18 <_fwalk_reent>:
 8008d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d1c:	4606      	mov	r6, r0
 8008d1e:	4688      	mov	r8, r1
 8008d20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d24:	2700      	movs	r7, #0
 8008d26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d2a:	f1b9 0901 	subs.w	r9, r9, #1
 8008d2e:	d505      	bpl.n	8008d3c <_fwalk_reent+0x24>
 8008d30:	6824      	ldr	r4, [r4, #0]
 8008d32:	2c00      	cmp	r4, #0
 8008d34:	d1f7      	bne.n	8008d26 <_fwalk_reent+0xe>
 8008d36:	4638      	mov	r0, r7
 8008d38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d3c:	89ab      	ldrh	r3, [r5, #12]
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d907      	bls.n	8008d52 <_fwalk_reent+0x3a>
 8008d42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d46:	3301      	adds	r3, #1
 8008d48:	d003      	beq.n	8008d52 <_fwalk_reent+0x3a>
 8008d4a:	4629      	mov	r1, r5
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	47c0      	blx	r8
 8008d50:	4307      	orrs	r7, r0
 8008d52:	3568      	adds	r5, #104	; 0x68
 8008d54:	e7e9      	b.n	8008d2a <_fwalk_reent+0x12>

08008d56 <__retarget_lock_init_recursive>:
 8008d56:	4770      	bx	lr

08008d58 <__retarget_lock_acquire_recursive>:
 8008d58:	4770      	bx	lr

08008d5a <__retarget_lock_release_recursive>:
 8008d5a:	4770      	bx	lr

08008d5c <__swhatbuf_r>:
 8008d5c:	b570      	push	{r4, r5, r6, lr}
 8008d5e:	460e      	mov	r6, r1
 8008d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d64:	2900      	cmp	r1, #0
 8008d66:	b096      	sub	sp, #88	; 0x58
 8008d68:	4614      	mov	r4, r2
 8008d6a:	461d      	mov	r5, r3
 8008d6c:	da08      	bge.n	8008d80 <__swhatbuf_r+0x24>
 8008d6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	602a      	str	r2, [r5, #0]
 8008d76:	061a      	lsls	r2, r3, #24
 8008d78:	d410      	bmi.n	8008d9c <__swhatbuf_r+0x40>
 8008d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d7e:	e00e      	b.n	8008d9e <__swhatbuf_r+0x42>
 8008d80:	466a      	mov	r2, sp
 8008d82:	f000 f951 	bl	8009028 <_fstat_r>
 8008d86:	2800      	cmp	r0, #0
 8008d88:	dbf1      	blt.n	8008d6e <__swhatbuf_r+0x12>
 8008d8a:	9a01      	ldr	r2, [sp, #4]
 8008d8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d94:	425a      	negs	r2, r3
 8008d96:	415a      	adcs	r2, r3
 8008d98:	602a      	str	r2, [r5, #0]
 8008d9a:	e7ee      	b.n	8008d7a <__swhatbuf_r+0x1e>
 8008d9c:	2340      	movs	r3, #64	; 0x40
 8008d9e:	2000      	movs	r0, #0
 8008da0:	6023      	str	r3, [r4, #0]
 8008da2:	b016      	add	sp, #88	; 0x58
 8008da4:	bd70      	pop	{r4, r5, r6, pc}
	...

08008da8 <__smakebuf_r>:
 8008da8:	898b      	ldrh	r3, [r1, #12]
 8008daa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008dac:	079d      	lsls	r5, r3, #30
 8008dae:	4606      	mov	r6, r0
 8008db0:	460c      	mov	r4, r1
 8008db2:	d507      	bpl.n	8008dc4 <__smakebuf_r+0x1c>
 8008db4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008db8:	6023      	str	r3, [r4, #0]
 8008dba:	6123      	str	r3, [r4, #16]
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	6163      	str	r3, [r4, #20]
 8008dc0:	b002      	add	sp, #8
 8008dc2:	bd70      	pop	{r4, r5, r6, pc}
 8008dc4:	ab01      	add	r3, sp, #4
 8008dc6:	466a      	mov	r2, sp
 8008dc8:	f7ff ffc8 	bl	8008d5c <__swhatbuf_r>
 8008dcc:	9900      	ldr	r1, [sp, #0]
 8008dce:	4605      	mov	r5, r0
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	f7ff f855 	bl	8007e80 <_malloc_r>
 8008dd6:	b948      	cbnz	r0, 8008dec <__smakebuf_r+0x44>
 8008dd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ddc:	059a      	lsls	r2, r3, #22
 8008dde:	d4ef      	bmi.n	8008dc0 <__smakebuf_r+0x18>
 8008de0:	f023 0303 	bic.w	r3, r3, #3
 8008de4:	f043 0302 	orr.w	r3, r3, #2
 8008de8:	81a3      	strh	r3, [r4, #12]
 8008dea:	e7e3      	b.n	8008db4 <__smakebuf_r+0xc>
 8008dec:	4b0d      	ldr	r3, [pc, #52]	; (8008e24 <__smakebuf_r+0x7c>)
 8008dee:	62b3      	str	r3, [r6, #40]	; 0x28
 8008df0:	89a3      	ldrh	r3, [r4, #12]
 8008df2:	6020      	str	r0, [r4, #0]
 8008df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008df8:	81a3      	strh	r3, [r4, #12]
 8008dfa:	9b00      	ldr	r3, [sp, #0]
 8008dfc:	6163      	str	r3, [r4, #20]
 8008dfe:	9b01      	ldr	r3, [sp, #4]
 8008e00:	6120      	str	r0, [r4, #16]
 8008e02:	b15b      	cbz	r3, 8008e1c <__smakebuf_r+0x74>
 8008e04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e08:	4630      	mov	r0, r6
 8008e0a:	f000 f91f 	bl	800904c <_isatty_r>
 8008e0e:	b128      	cbz	r0, 8008e1c <__smakebuf_r+0x74>
 8008e10:	89a3      	ldrh	r3, [r4, #12]
 8008e12:	f023 0303 	bic.w	r3, r3, #3
 8008e16:	f043 0301 	orr.w	r3, r3, #1
 8008e1a:	81a3      	strh	r3, [r4, #12]
 8008e1c:	89a0      	ldrh	r0, [r4, #12]
 8008e1e:	4305      	orrs	r5, r0
 8008e20:	81a5      	strh	r5, [r4, #12]
 8008e22:	e7cd      	b.n	8008dc0 <__smakebuf_r+0x18>
 8008e24:	08008bb5 	.word	0x08008bb5

08008e28 <memmove>:
 8008e28:	4288      	cmp	r0, r1
 8008e2a:	b510      	push	{r4, lr}
 8008e2c:	eb01 0402 	add.w	r4, r1, r2
 8008e30:	d902      	bls.n	8008e38 <memmove+0x10>
 8008e32:	4284      	cmp	r4, r0
 8008e34:	4623      	mov	r3, r4
 8008e36:	d807      	bhi.n	8008e48 <memmove+0x20>
 8008e38:	1e43      	subs	r3, r0, #1
 8008e3a:	42a1      	cmp	r1, r4
 8008e3c:	d008      	beq.n	8008e50 <memmove+0x28>
 8008e3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e46:	e7f8      	b.n	8008e3a <memmove+0x12>
 8008e48:	4402      	add	r2, r0
 8008e4a:	4601      	mov	r1, r0
 8008e4c:	428a      	cmp	r2, r1
 8008e4e:	d100      	bne.n	8008e52 <memmove+0x2a>
 8008e50:	bd10      	pop	{r4, pc}
 8008e52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e5a:	e7f7      	b.n	8008e4c <memmove+0x24>

08008e5c <__malloc_lock>:
 8008e5c:	4801      	ldr	r0, [pc, #4]	; (8008e64 <__malloc_lock+0x8>)
 8008e5e:	f7ff bf7b 	b.w	8008d58 <__retarget_lock_acquire_recursive>
 8008e62:	bf00      	nop
 8008e64:	200006bc 	.word	0x200006bc

08008e68 <__malloc_unlock>:
 8008e68:	4801      	ldr	r0, [pc, #4]	; (8008e70 <__malloc_unlock+0x8>)
 8008e6a:	f7ff bf76 	b.w	8008d5a <__retarget_lock_release_recursive>
 8008e6e:	bf00      	nop
 8008e70:	200006bc 	.word	0x200006bc

08008e74 <_realloc_r>:
 8008e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e78:	4680      	mov	r8, r0
 8008e7a:	4614      	mov	r4, r2
 8008e7c:	460e      	mov	r6, r1
 8008e7e:	b921      	cbnz	r1, 8008e8a <_realloc_r+0x16>
 8008e80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e84:	4611      	mov	r1, r2
 8008e86:	f7fe bffb 	b.w	8007e80 <_malloc_r>
 8008e8a:	b92a      	cbnz	r2, 8008e98 <_realloc_r+0x24>
 8008e8c:	f7fe ff8c 	bl	8007da8 <_free_r>
 8008e90:	4625      	mov	r5, r4
 8008e92:	4628      	mov	r0, r5
 8008e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e98:	f000 f8fa 	bl	8009090 <_malloc_usable_size_r>
 8008e9c:	4284      	cmp	r4, r0
 8008e9e:	4607      	mov	r7, r0
 8008ea0:	d802      	bhi.n	8008ea8 <_realloc_r+0x34>
 8008ea2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ea6:	d812      	bhi.n	8008ece <_realloc_r+0x5a>
 8008ea8:	4621      	mov	r1, r4
 8008eaa:	4640      	mov	r0, r8
 8008eac:	f7fe ffe8 	bl	8007e80 <_malloc_r>
 8008eb0:	4605      	mov	r5, r0
 8008eb2:	2800      	cmp	r0, #0
 8008eb4:	d0ed      	beq.n	8008e92 <_realloc_r+0x1e>
 8008eb6:	42bc      	cmp	r4, r7
 8008eb8:	4622      	mov	r2, r4
 8008eba:	4631      	mov	r1, r6
 8008ebc:	bf28      	it	cs
 8008ebe:	463a      	movcs	r2, r7
 8008ec0:	f7fc ff1a 	bl	8005cf8 <memcpy>
 8008ec4:	4631      	mov	r1, r6
 8008ec6:	4640      	mov	r0, r8
 8008ec8:	f7fe ff6e 	bl	8007da8 <_free_r>
 8008ecc:	e7e1      	b.n	8008e92 <_realloc_r+0x1e>
 8008ece:	4635      	mov	r5, r6
 8008ed0:	e7df      	b.n	8008e92 <_realloc_r+0x1e>

08008ed2 <_raise_r>:
 8008ed2:	291f      	cmp	r1, #31
 8008ed4:	b538      	push	{r3, r4, r5, lr}
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	460d      	mov	r5, r1
 8008eda:	d904      	bls.n	8008ee6 <_raise_r+0x14>
 8008edc:	2316      	movs	r3, #22
 8008ede:	6003      	str	r3, [r0, #0]
 8008ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee4:	bd38      	pop	{r3, r4, r5, pc}
 8008ee6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008ee8:	b112      	cbz	r2, 8008ef0 <_raise_r+0x1e>
 8008eea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008eee:	b94b      	cbnz	r3, 8008f04 <_raise_r+0x32>
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	f000 f831 	bl	8008f58 <_getpid_r>
 8008ef6:	462a      	mov	r2, r5
 8008ef8:	4601      	mov	r1, r0
 8008efa:	4620      	mov	r0, r4
 8008efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f00:	f000 b818 	b.w	8008f34 <_kill_r>
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d00a      	beq.n	8008f1e <_raise_r+0x4c>
 8008f08:	1c59      	adds	r1, r3, #1
 8008f0a:	d103      	bne.n	8008f14 <_raise_r+0x42>
 8008f0c:	2316      	movs	r3, #22
 8008f0e:	6003      	str	r3, [r0, #0]
 8008f10:	2001      	movs	r0, #1
 8008f12:	e7e7      	b.n	8008ee4 <_raise_r+0x12>
 8008f14:	2400      	movs	r4, #0
 8008f16:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	4798      	blx	r3
 8008f1e:	2000      	movs	r0, #0
 8008f20:	e7e0      	b.n	8008ee4 <_raise_r+0x12>
	...

08008f24 <raise>:
 8008f24:	4b02      	ldr	r3, [pc, #8]	; (8008f30 <raise+0xc>)
 8008f26:	4601      	mov	r1, r0
 8008f28:	6818      	ldr	r0, [r3, #0]
 8008f2a:	f7ff bfd2 	b.w	8008ed2 <_raise_r>
 8008f2e:	bf00      	nop
 8008f30:	20000090 	.word	0x20000090

08008f34 <_kill_r>:
 8008f34:	b538      	push	{r3, r4, r5, lr}
 8008f36:	4d07      	ldr	r5, [pc, #28]	; (8008f54 <_kill_r+0x20>)
 8008f38:	2300      	movs	r3, #0
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	4608      	mov	r0, r1
 8008f3e:	4611      	mov	r1, r2
 8008f40:	602b      	str	r3, [r5, #0]
 8008f42:	f7f8 ff9b 	bl	8001e7c <_kill>
 8008f46:	1c43      	adds	r3, r0, #1
 8008f48:	d102      	bne.n	8008f50 <_kill_r+0x1c>
 8008f4a:	682b      	ldr	r3, [r5, #0]
 8008f4c:	b103      	cbz	r3, 8008f50 <_kill_r+0x1c>
 8008f4e:	6023      	str	r3, [r4, #0]
 8008f50:	bd38      	pop	{r3, r4, r5, pc}
 8008f52:	bf00      	nop
 8008f54:	200006c0 	.word	0x200006c0

08008f58 <_getpid_r>:
 8008f58:	f7f8 bf88 	b.w	8001e6c <_getpid>

08008f5c <__sread>:
 8008f5c:	b510      	push	{r4, lr}
 8008f5e:	460c      	mov	r4, r1
 8008f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f64:	f000 f89c 	bl	80090a0 <_read_r>
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	bfab      	itete	ge
 8008f6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f6e:	89a3      	ldrhlt	r3, [r4, #12]
 8008f70:	181b      	addge	r3, r3, r0
 8008f72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f76:	bfac      	ite	ge
 8008f78:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f7a:	81a3      	strhlt	r3, [r4, #12]
 8008f7c:	bd10      	pop	{r4, pc}

08008f7e <__swrite>:
 8008f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f82:	461f      	mov	r7, r3
 8008f84:	898b      	ldrh	r3, [r1, #12]
 8008f86:	05db      	lsls	r3, r3, #23
 8008f88:	4605      	mov	r5, r0
 8008f8a:	460c      	mov	r4, r1
 8008f8c:	4616      	mov	r6, r2
 8008f8e:	d505      	bpl.n	8008f9c <__swrite+0x1e>
 8008f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f94:	2302      	movs	r3, #2
 8008f96:	2200      	movs	r2, #0
 8008f98:	f000 f868 	bl	800906c <_lseek_r>
 8008f9c:	89a3      	ldrh	r3, [r4, #12]
 8008f9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fa6:	81a3      	strh	r3, [r4, #12]
 8008fa8:	4632      	mov	r2, r6
 8008faa:	463b      	mov	r3, r7
 8008fac:	4628      	mov	r0, r5
 8008fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb2:	f000 b817 	b.w	8008fe4 <_write_r>

08008fb6 <__sseek>:
 8008fb6:	b510      	push	{r4, lr}
 8008fb8:	460c      	mov	r4, r1
 8008fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fbe:	f000 f855 	bl	800906c <_lseek_r>
 8008fc2:	1c43      	adds	r3, r0, #1
 8008fc4:	89a3      	ldrh	r3, [r4, #12]
 8008fc6:	bf15      	itete	ne
 8008fc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008fca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008fce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008fd2:	81a3      	strheq	r3, [r4, #12]
 8008fd4:	bf18      	it	ne
 8008fd6:	81a3      	strhne	r3, [r4, #12]
 8008fd8:	bd10      	pop	{r4, pc}

08008fda <__sclose>:
 8008fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fde:	f000 b813 	b.w	8009008 <_close_r>
	...

08008fe4 <_write_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	4d07      	ldr	r5, [pc, #28]	; (8009004 <_write_r+0x20>)
 8008fe8:	4604      	mov	r4, r0
 8008fea:	4608      	mov	r0, r1
 8008fec:	4611      	mov	r1, r2
 8008fee:	2200      	movs	r2, #0
 8008ff0:	602a      	str	r2, [r5, #0]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	f7f8 ff79 	bl	8001eea <_write>
 8008ff8:	1c43      	adds	r3, r0, #1
 8008ffa:	d102      	bne.n	8009002 <_write_r+0x1e>
 8008ffc:	682b      	ldr	r3, [r5, #0]
 8008ffe:	b103      	cbz	r3, 8009002 <_write_r+0x1e>
 8009000:	6023      	str	r3, [r4, #0]
 8009002:	bd38      	pop	{r3, r4, r5, pc}
 8009004:	200006c0 	.word	0x200006c0

08009008 <_close_r>:
 8009008:	b538      	push	{r3, r4, r5, lr}
 800900a:	4d06      	ldr	r5, [pc, #24]	; (8009024 <_close_r+0x1c>)
 800900c:	2300      	movs	r3, #0
 800900e:	4604      	mov	r4, r0
 8009010:	4608      	mov	r0, r1
 8009012:	602b      	str	r3, [r5, #0]
 8009014:	f7f8 ff85 	bl	8001f22 <_close>
 8009018:	1c43      	adds	r3, r0, #1
 800901a:	d102      	bne.n	8009022 <_close_r+0x1a>
 800901c:	682b      	ldr	r3, [r5, #0]
 800901e:	b103      	cbz	r3, 8009022 <_close_r+0x1a>
 8009020:	6023      	str	r3, [r4, #0]
 8009022:	bd38      	pop	{r3, r4, r5, pc}
 8009024:	200006c0 	.word	0x200006c0

08009028 <_fstat_r>:
 8009028:	b538      	push	{r3, r4, r5, lr}
 800902a:	4d07      	ldr	r5, [pc, #28]	; (8009048 <_fstat_r+0x20>)
 800902c:	2300      	movs	r3, #0
 800902e:	4604      	mov	r4, r0
 8009030:	4608      	mov	r0, r1
 8009032:	4611      	mov	r1, r2
 8009034:	602b      	str	r3, [r5, #0]
 8009036:	f7f8 ff80 	bl	8001f3a <_fstat>
 800903a:	1c43      	adds	r3, r0, #1
 800903c:	d102      	bne.n	8009044 <_fstat_r+0x1c>
 800903e:	682b      	ldr	r3, [r5, #0]
 8009040:	b103      	cbz	r3, 8009044 <_fstat_r+0x1c>
 8009042:	6023      	str	r3, [r4, #0]
 8009044:	bd38      	pop	{r3, r4, r5, pc}
 8009046:	bf00      	nop
 8009048:	200006c0 	.word	0x200006c0

0800904c <_isatty_r>:
 800904c:	b538      	push	{r3, r4, r5, lr}
 800904e:	4d06      	ldr	r5, [pc, #24]	; (8009068 <_isatty_r+0x1c>)
 8009050:	2300      	movs	r3, #0
 8009052:	4604      	mov	r4, r0
 8009054:	4608      	mov	r0, r1
 8009056:	602b      	str	r3, [r5, #0]
 8009058:	f7f8 ff7f 	bl	8001f5a <_isatty>
 800905c:	1c43      	adds	r3, r0, #1
 800905e:	d102      	bne.n	8009066 <_isatty_r+0x1a>
 8009060:	682b      	ldr	r3, [r5, #0]
 8009062:	b103      	cbz	r3, 8009066 <_isatty_r+0x1a>
 8009064:	6023      	str	r3, [r4, #0]
 8009066:	bd38      	pop	{r3, r4, r5, pc}
 8009068:	200006c0 	.word	0x200006c0

0800906c <_lseek_r>:
 800906c:	b538      	push	{r3, r4, r5, lr}
 800906e:	4d07      	ldr	r5, [pc, #28]	; (800908c <_lseek_r+0x20>)
 8009070:	4604      	mov	r4, r0
 8009072:	4608      	mov	r0, r1
 8009074:	4611      	mov	r1, r2
 8009076:	2200      	movs	r2, #0
 8009078:	602a      	str	r2, [r5, #0]
 800907a:	461a      	mov	r2, r3
 800907c:	f7f8 ff78 	bl	8001f70 <_lseek>
 8009080:	1c43      	adds	r3, r0, #1
 8009082:	d102      	bne.n	800908a <_lseek_r+0x1e>
 8009084:	682b      	ldr	r3, [r5, #0]
 8009086:	b103      	cbz	r3, 800908a <_lseek_r+0x1e>
 8009088:	6023      	str	r3, [r4, #0]
 800908a:	bd38      	pop	{r3, r4, r5, pc}
 800908c:	200006c0 	.word	0x200006c0

08009090 <_malloc_usable_size_r>:
 8009090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009094:	1f18      	subs	r0, r3, #4
 8009096:	2b00      	cmp	r3, #0
 8009098:	bfbc      	itt	lt
 800909a:	580b      	ldrlt	r3, [r1, r0]
 800909c:	18c0      	addlt	r0, r0, r3
 800909e:	4770      	bx	lr

080090a0 <_read_r>:
 80090a0:	b538      	push	{r3, r4, r5, lr}
 80090a2:	4d07      	ldr	r5, [pc, #28]	; (80090c0 <_read_r+0x20>)
 80090a4:	4604      	mov	r4, r0
 80090a6:	4608      	mov	r0, r1
 80090a8:	4611      	mov	r1, r2
 80090aa:	2200      	movs	r2, #0
 80090ac:	602a      	str	r2, [r5, #0]
 80090ae:	461a      	mov	r2, r3
 80090b0:	f7f8 fefe 	bl	8001eb0 <_read>
 80090b4:	1c43      	adds	r3, r0, #1
 80090b6:	d102      	bne.n	80090be <_read_r+0x1e>
 80090b8:	682b      	ldr	r3, [r5, #0]
 80090ba:	b103      	cbz	r3, 80090be <_read_r+0x1e>
 80090bc:	6023      	str	r3, [r4, #0]
 80090be:	bd38      	pop	{r3, r4, r5, pc}
 80090c0:	200006c0 	.word	0x200006c0

080090c4 <_init>:
 80090c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c6:	bf00      	nop
 80090c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ca:	bc08      	pop	{r3}
 80090cc:	469e      	mov	lr, r3
 80090ce:	4770      	bx	lr

080090d0 <_fini>:
 80090d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d2:	bf00      	nop
 80090d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090d6:	bc08      	pop	{r3}
 80090d8:	469e      	mov	lr, r3
 80090da:	4770      	bx	lr
